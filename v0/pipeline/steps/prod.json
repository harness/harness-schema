{
  "AbortFailureActionConfig": {
    "allOf": [
      {
        "$ref": "#/definitions/FailureStrategyActionConfig"
      },
      {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "Abort"
            ]
          }
        }
      }
    ],
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "AddRuleYaml": {
    "allOf": [
      {
        "$ref": "#/definitions/PatchInstruction"
      },
      {
        "type": "object",
        "required": [
          "identifier",
          "spec",
          "type"
        ],
        "properties": {
          "identifier": {
            "type": "string"
          },
          "spec": {
            "$ref": "#/definitions/AddRuleYamlSpec"
          },
          "type": {
            "type": "string",
            "enum": [
              "AddRule"
            ]
          }
        }
      }
    ],
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "AddRuleYamlSpec": {
    "type": "object",
    "properties": {
      "clauses": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/Clause"
        }
      },
      "distribution": {
        "$ref": "#/definitions/DistributionYamlSpec"
      },
      "priority": {
        "type": "integer",
        "format": "int32"
      },
      "serve": {
        "$ref": "#/definitions/Serve"
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "AddSegmentToVariationTargetMapYaml": {
    "allOf": [
      {
        "$ref": "#/definitions/PatchInstruction"
      },
      {
        "type": "object",
        "required": [
          "identifier",
          "spec",
          "type"
        ],
        "properties": {
          "identifier": {
            "type": "string"
          },
          "spec": {
            "$ref": "#/definitions/AddSegmentToVariationTargetMapYamlSpec"
          },
          "type": {
            "type": "string",
            "enum": [
              "AddSegmentToVariationTargetMap"
            ]
          }
        }
      }
    ],
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "AddSegmentToVariationTargetMapYamlSpec": {
    "type": "object",
    "required": [
      "segments",
      "variation"
    ],
    "properties": {
      "segments": {
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "variation": {
        "type": "string"
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "AddTargetsToVariationTargetMapYaml": {
    "allOf": [
      {
        "$ref": "#/definitions/PatchInstruction"
      },
      {
        "type": "object",
        "required": [
          "identifier",
          "spec",
          "type"
        ],
        "properties": {
          "identifier": {
            "type": "string"
          },
          "spec": {
            "$ref": "#/definitions/AddTargetsToVariationTargetMapYamlSpec"
          },
          "type": {
            "type": "string",
            "enum": [
              "AddTargetsToVariationTargetMap"
            ]
          }
        }
      }
    ],
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "AddTargetsToVariationTargetMapYamlSpec": {
    "type": "object",
    "required": [
      "targets",
      "variation"
    ],
    "properties": {
      "targets": {
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "variation": {
        "type": "string"
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "ApprovalStageConfig": {
    "allOf": [
      {
        "$ref": "#/definitions/StageInfoConfig"
      },
      {
        "type": "object",
        "required": [
          "execution"
        ],
        "properties": {
          "execution": {
            "$ref": "#/definitions/ExecutionElementConfig"
          }
        }
      }
    ],
    "$schema": "http://json-schema.org/draft-07/schema#",
    "type": "object",
    "required": [
      "execution"
    ],
    "properties": {
      "execution": {
        "$ref": "#/definitions/ExecutionElementConfig"
      }
    }
  },
  "ApproverInputInfo": {
    "type": "object",
    "properties": {
      "defaultValue": {
        "type": "string"
      },
      "name": {
        "type": "string",
        "minLength": 1
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "Approvers": {
    "type": "object",
    "required": [
      "disallowPipelineExecutor",
      "minimumCount",
      "userGroups"
    ],
    "properties": {
      "disallowPipelineExecutor": {
        "oneOf": [
          {
            "type": "boolean"
          },
          {
            "type": "string"
          }
        ]
      },
      "minimumCount": {
        "oneOf": [
          {
            "type": "integer",
            "format": "int32"
          },
          {
            "type": "string"
          }
        ]
      },
      "userGroups": {
        "oneOf": [
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "maxItems": 2147483647,
            "minItems": 1
          },
          {
            "type": "string",
            "pattern": "(<\\+.+>.*)",
            "minLength": 1
          }
        ]
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "BarrierInfoConfig": {
    "type": "object",
    "required": [
      "identifier",
      "name"
    ],
    "properties": {
      "identifier": {
        "type": "string"
      },
      "name": {
        "type": "string"
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "BarrierStepInfo": {
    "allOf": [
      {
        "$ref": "#/definitions/StepSpecType"
      },
      {
        "type": "object",
        "required": [
          "barrierRef"
        ],
        "properties": {
          "barrierRef": {
            "type": "string"
          }
        }
      }
    ],
    "$schema": "http://json-schema.org/draft-07/schema#",
    "type": "object",
    "required": [
      "barrierRef"
    ],
    "properties": {
      "barrierRef": {
        "type": "string"
      }
    }
  },
  "BranchBuildSpec": {
    "allOf": [
      {
        "$ref": "#/definitions/BuildSpec"
      },
      {
        "type": "object",
        "required": [
          "branch"
        ],
        "properties": {
          "branch": {
            "type": "string"
          }
        }
      }
    ],
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "Build": {
    "type": "object",
    "required": [
      "spec",
      "type"
    ],
    "properties": {
      "type": {
        "type": "string",
        "enum": [
          "branch",
          "tag",
          "PR"
        ]
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#",
    "allOf": [
      {
        "if": {
          "properties": {
            "type": {
              "const": "PR"
            }
          }
        },
        "then": {
          "properties": {
            "spec": {
              "$ref": "#/definitions/PRBuildSpec"
            }
          }
        }
      },
      {
        "if": {
          "properties": {
            "type": {
              "const": "branch"
            }
          }
        },
        "then": {
          "properties": {
            "spec": {
              "$ref": "#/definitions/BranchBuildSpec"
            }
          }
        }
      },
      {
        "if": {
          "properties": {
            "type": {
              "const": "tag"
            }
          }
        },
        "then": {
          "properties": {
            "spec": {
              "$ref": "#/definitions/TagBuildSpec"
            }
          }
        }
      }
    ]
  },
  "BuildSpec": {
    "type": "object",
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "CIProperties": {
    "type": "object",
    "properties": {
      "codebase": {
        "$ref": "#/definitions/CodeBase"
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "Capabilities": {
    "type": "object",
    "properties": {
      "add": {
        "oneOf": [
          {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "type": "string",
            "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
            "minLength": 1
          }
        ]
      },
      "drop": {
        "oneOf": [
          {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "type": "string",
            "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
            "minLength": 1
          }
        ]
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "Clause": {
    "type": "object",
    "required": [
      "attribute",
      "id",
      "negate",
      "op",
      "values"
    ],
    "properties": {
      "attribute": {
        "type": "string"
      },
      "id": {
        "type": "string"
      },
      "negate": {
        "type": "boolean"
      },
      "op": {
        "type": "string"
      },
      "values": {
        "type": "array",
        "items": {
          "type": "string"
        }
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "ClauseYamlSpec": {
    "type": "object",
    "required": [
      "op",
      "values"
    ],
    "properties": {
      "attribute": {
        "type": "string"
      },
      "op": {
        "type": "string"
      },
      "values": {
        "type": "array",
        "items": {
          "type": "string"
        }
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "CodeBase": {
    "type": "object",
    "required": [
      "build",
      "connectorRef"
    ],
    "properties": {
      "build": {
        "oneOf": [
          {
            "$ref": "#/definitions/Build"
          },
          {
            "type": "string",
            "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
            "minLength": 1
          }
        ]
      },
      "connectorRef": {
        "type": "string"
      },
      "depth": {
        "oneOf": [
          {
            "type": "integer",
            "format": "int32"
          },
          {
            "type": "string",
            "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
            "minLength": 1
          }
        ]
      },
      "prCloneStrategy": {
        "oneOf": [
          {
            "type": "string",
            "enum": [
              "MergeCommit",
              "SourceBranch"
            ]
          },
          {
            "type": "string",
            "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
            "minLength": 1
          }
        ]
      },
      "repoName": {
        "type": "string"
      },
      "resources": {
        "$ref": "#/definitions/ContainerResource"
      },
      "sslVerify": {
        "oneOf": [
          {
            "type": "boolean"
          },
          {
            "type": "string",
            "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
            "minLength": 1
          }
        ]
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "Condition": {
    "type": "object",
    "required": [
      "key",
      "operator",
      "value"
    ],
    "properties": {
      "key": {
        "type": "string"
      },
      "operator": {
        "type": "string",
        "enum": [
          "equals",
          "not equals",
          "in",
          "not in"
        ]
      },
      "value": {
        "type": "string",
        "minLength": 1
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "ContainerInfraYamlSpec": {
    "type": "object",
    "required": [
      "connectorRef",
      "namespace",
      "resources"
    ],
    "properties": {
      "annotations": {
        "oneOf": [
          {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          {
            "type": "string"
          }
        ]
      },
      "automountServiceAccountToken": {
        "oneOf": [
          {
            "type": "boolean"
          },
          {
            "type": "string",
            "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
            "minLength": 1
          }
        ]
      },
      "connectorRef": {
        "type": "string"
      },
      "containerSecurityContext": {
        "oneOf": [
          {
            "$ref": "#/definitions/SecurityContext"
          },
          {
            "type": "string",
            "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
            "minLength": 1
          }
        ]
      },
      "initTimeout": {
        "type": "string"
      },
      "labels": {
        "oneOf": [
          {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          {
            "type": "string"
          }
        ]
      },
      "namespace": {
        "type": "string",
        "minLength": 1,
        "maxLength": 2147483647
      },
      "nodeSelector": {
        "oneOf": [
          {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          {
            "type": "string",
            "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
            "minLength": 1
          }
        ]
      },
      "os": {
        "oneOf": [
          {
            "type": "string",
            "enum": [
              "Linux",
              "MacOS",
              "Windows"
            ]
          },
          {
            "type": "string",
            "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
            "minLength": 1
          }
        ]
      },
      "priorityClassName": {
        "type": "string"
      },
      "resources": {
        "$ref": "#/definitions/ContainerResource"
      },
      "runAsUser": {
        "oneOf": [
          {
            "type": "integer",
            "format": "int32"
          },
          {
            "type": "string"
          }
        ]
      },
      "serviceAccountName": {
        "type": "string"
      },
      "tolerations": {
        "oneOf": [
          {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Toleration"
            }
          },
          {
            "type": "string",
            "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
            "minLength": 1
          }
        ]
      },
      "volumes": {
        "oneOf": [
          {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ContainerVolume"
            }
          },
          {
            "type": "string",
            "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
            "minLength": 1
          }
        ]
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "ContainerK8sInfra": {
    "allOf": [
      {
        "$ref": "#/definitions/ContainerStepInfra"
      },
      {
        "type": "object",
        "required": [
          "spec",
          "type"
        ],
        "properties": {
          "spec": {
            "$ref": "#/definitions/ContainerInfraYamlSpec"
          },
          "type": {
            "type": "string",
            "enum": [
              "KubernetesDirect"
            ]
          }
        }
      }
    ],
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "ContainerResource": {
    "type": "object",
    "required": [
      "limits"
    ],
    "properties": {
      "limits": {
        "$ref": "#/definitions/Limits"
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "ContainerStepInfo": {
    "allOf": [
      {
        "$ref": "#/definitions/StepSpecType"
      },
      {
        "type": "object",
        "required": [
          "command",
          "infrastructure"
        ],
        "properties": {
          "command": {
            "type": "string"
          },
          "connectorRef": {
            "type": "string"
          },
          "entrypoint": {
            "oneOf": [
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              {
                "type": "string"
              }
            ]
          },
          "envVariables": {
            "oneOf": [
              {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              {
                "type": "string"
              }
            ]
          },
          "image": {
            "type": "string"
          },
          "imagePullPolicy": {
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "Always",
                  "Never",
                  "IfNotPresent"
                ]
              },
              {
                "type": "string",
                "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                "minLength": 1
              }
            ]
          },
          "infrastructure": {
            "oneOf": [
              {
                "$ref": "#/definitions/ContainerK8sInfra"
              }
            ]
          },
          "metadata": {
            "type": "string"
          },
          "outputVariables": {
            "oneOf": [
              {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/OutputNGVariable"
                }
              },
              {
                "type": "string",
                "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                "minLength": 1
              }
            ]
          },
          "privileged": {
            "oneOf": [
              {
                "type": "boolean"
              },
              {
                "type": "string",
                "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                "minLength": 1
              }
            ]
          },
          "settings": {
            "oneOf": [
              {
                "$ref": "#/definitions/ParameterFieldMapStringJsonNode"
              },
              {
                "type": "string"
              }
            ]
          },
          "shell": {
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "Sh",
                  "Bash",
                  "Powershell",
                  "Pwsh",
                  "Python"
                ]
              },
              {
                "type": "string",
                "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                "minLength": 1
              }
            ]
          }
        }
      }
    ],
    "$schema": "http://json-schema.org/draft-07/schema#",
    "type": "object",
    "required": [
      "command",
      "infrastructure"
    ],
    "properties": {
      "command": {
        "type": "string"
      },
      "connectorRef": {
        "type": "string"
      },
      "entrypoint": {
        "oneOf": [
          {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "type": "string"
          }
        ]
      },
      "envVariables": {
        "oneOf": [
          {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          {
            "type": "string"
          }
        ]
      },
      "image": {
        "type": "string"
      },
      "imagePullPolicy": {
        "oneOf": [
          {
            "type": "string",
            "enum": [
              "Always",
              "Never",
              "IfNotPresent"
            ]
          },
          {
            "type": "string",
            "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
            "minLength": 1
          }
        ]
      },
      "infrastructure": {
        "oneOf": [
          {
            "$ref": "#/definitions/ContainerK8sInfra"
          }
        ]
      },
      "metadata": {
        "type": "string"
      },
      "outputVariables": {
        "oneOf": [
          {
            "type": "array",
            "items": {
              "$ref": "#/definitions/OutputNGVariable"
            }
          },
          {
            "type": "string",
            "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
            "minLength": 1
          }
        ]
      },
      "privileged": {
        "oneOf": [
          {
            "type": "boolean"
          },
          {
            "type": "string",
            "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
            "minLength": 1
          }
        ]
      },
      "settings": {
        "oneOf": [
          {
            "$ref": "#/definitions/ParameterFieldMapStringJsonNode"
          },
          {
            "type": "string"
          }
        ]
      },
      "shell": {
        "oneOf": [
          {
            "type": "string",
            "enum": [
              "Sh",
              "Bash",
              "Powershell",
              "Pwsh",
              "Python"
            ]
          },
          {
            "type": "string",
            "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
            "minLength": 1
          }
        ]
      }
    }
  },
  "ContainerStepInfra": {
    "type": "object",
    "discriminator": "type",
    "properties": {
      "type": {
        "type": "string",
        "enum": [
          "KubernetesDirect"
        ]
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "ContainerVolume": {
    "type": "object",
    "discriminator": "type",
    "properties": {
      "type": {
        "type": "string",
        "enum": [
          "EmptyDir",
          "PersistentVolumeClaim",
          "HostPath"
        ]
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "CriteriaSpec": {
    "type": "object",
    "discriminator": "type",
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "CriteriaSpecWrapper": {
    "type": "object",
    "required": [
      "spec",
      "type"
    ],
    "properties": {
      "type": {
        "type": "string",
        "enum": [
          "Jexl",
          "KeyValues"
        ]
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#",
    "allOf": [
      {
        "if": {
          "properties": {
            "type": {
              "const": "Jexl"
            }
          }
        },
        "then": {
          "properties": {
            "spec": {
              "$ref": "#/definitions/JexlCriteriaSpec"
            }
          }
        }
      },
      {
        "if": {
          "properties": {
            "type": {
              "const": "KeyValues"
            }
          }
        },
        "then": {
          "properties": {
            "spec": {
              "$ref": "#/definitions/KeyValuesCriteriaSpec"
            }
          }
        }
      }
    ]
  },
  "CustomApprovalStepInfo": {
    "allOf": [
      {
        "$ref": "#/definitions/StepSpecType"
      },
      {
        "type": "object",
        "required": [
          "approvalCriteria",
          "retryInterval",
          "scriptTimeout",
          "shell",
          "source"
        ],
        "properties": {
          "approvalCriteria": {
            "$ref": "#/definitions/CriteriaSpecWrapper"
          },
          "delegateSelectors": {
            "oneOf": [
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              {
                "type": "string",
                "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                "minLength": 1
              }
            ]
          },
          "environmentVariables": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/definitions/NumberNGVariable"
                },
                {
                  "$ref": "#/definitions/SecretNGVariable"
                },
                {
                  "$ref": "#/definitions/StringNGVariable"
                }
              ]
            }
          },
          "outputVariables": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/definitions/NumberNGVariable"
                },
                {
                  "$ref": "#/definitions/SecretNGVariable"
                },
                {
                  "$ref": "#/definitions/StringNGVariable"
                }
              ]
            }
          },
          "rejectionCriteria": {
            "$ref": "#/definitions/CriteriaSpecWrapper"
          },
          "retryInterval": {
            "type": "string",
            "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(<\\+input>.*)|(.*<\\+.*>.*)|(^$))$"
          },
          "scriptTimeout": {
            "type": "string",
            "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(<\\+input>.*)|(.*<\\+.*>.*)|(^$))$"
          },
          "shell": {
            "type": "string",
            "enum": [
              "Bash",
              "PowerShell"
            ]
          },
          "source": {
            "$ref": "#/definitions/ShellScriptSourceWrapper"
          }
        }
      }
    ],
    "$schema": "http://json-schema.org/draft-07/schema#",
    "type": "object",
    "required": [
      "approvalCriteria",
      "retryInterval",
      "scriptTimeout",
      "shell",
      "source"
    ],
    "properties": {
      "approvalCriteria": {
        "$ref": "#/definitions/CriteriaSpecWrapper"
      },
      "delegateSelectors": {
        "oneOf": [
          {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "type": "string",
            "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
            "minLength": 1
          }
        ]
      },
      "environmentVariables": {
        "type": "array",
        "items": {
          "oneOf": [
            {
              "$ref": "#/definitions/NumberNGVariable"
            },
            {
              "$ref": "#/definitions/SecretNGVariable"
            },
            {
              "$ref": "#/definitions/StringNGVariable"
            }
          ]
        }
      },
      "outputVariables": {
        "type": "array",
        "items": {
          "oneOf": [
            {
              "$ref": "#/definitions/NumberNGVariable"
            },
            {
              "$ref": "#/definitions/SecretNGVariable"
            },
            {
              "$ref": "#/definitions/StringNGVariable"
            }
          ]
        }
      },
      "rejectionCriteria": {
        "$ref": "#/definitions/CriteriaSpecWrapper"
      },
      "retryInterval": {
        "type": "string",
        "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(<\\+input>.*)|(.*<\\+.*>.*)|(^$))$"
      },
      "scriptTimeout": {
        "type": "string",
        "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(<\\+input>.*)|(.*<\\+.*>.*)|(^$))$"
      },
      "shell": {
        "type": "string",
        "enum": [
          "Bash",
          "PowerShell"
        ]
      },
      "source": {
        "$ref": "#/definitions/ShellScriptSourceWrapper"
      }
    }
  },
  "CustomPolicyStepSpec": {
    "allOf": [
      {
        "$ref": "#/definitions/PolicySpec"
      },
      {
        "type": "object",
        "required": [
          "payload"
        ],
        "properties": {
          "payload": {
            "type": "string"
          }
        }
      }
    ],
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "CustomStageConfig": {
    "allOf": [
      {
        "$ref": "#/definitions/StageInfoConfig"
      },
      {
        "type": "object",
        "required": [
          "execution"
        ],
        "properties": {
          "execution": {
            "$ref": "#/definitions/ExecutionElementConfig"
          }
        }
      }
    ],
    "$schema": "http://json-schema.org/draft-07/schema#",
    "type": "object",
    "required": [
      "execution"
    ],
    "properties": {
      "execution": {
        "$ref": "#/definitions/ExecutionElementConfig"
      }
    }
  },
  "Distribution": {
    "type": "object",
    "required": [
      "bucketBy",
      "variations"
    ],
    "properties": {
      "bucketBy": {
        "type": "string"
      },
      "variations": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/WeightedVariation"
        }
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "DistributionYamlSpec": {
    "type": "object",
    "required": [
      "bucketBy"
    ],
    "properties": {
      "bucketBy": {
        "type": "string"
      },
      "clauses": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/ClauseYamlSpec"
        }
      },
      "variations": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/VariationYamlSpec"
        }
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "EmailStepInfo": {
    "allOf": [
      {
        "$ref": "#/definitions/StepSpecType"
      },
      {
        "type": "object",
        "required": [
          "subject",
          "to"
        ],
        "properties": {
          "body": {
            "type": "string"
          },
          "cc": {
            "type": "string"
          },
          "delegateSelectors": {
            "oneOf": [
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              {
                "type": "string",
                "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                "minLength": 1
              }
            ]
          },
          "subject": {
            "type": "string"
          },
          "to": {
            "type": "string"
          }
        }
      }
    ],
    "$schema": "http://json-schema.org/draft-07/schema#",
    "type": "object",
    "required": [
      "subject",
      "to"
    ],
    "properties": {
      "body": {
        "type": "string"
      },
      "cc": {
        "type": "string"
      },
      "delegateSelectors": {
        "oneOf": [
          {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "type": "string",
            "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
            "minLength": 1
          }
        ]
      },
      "subject": {
        "type": "string"
      },
      "to": {
        "type": "string"
      }
    }
  },
  "EmptyDirYaml": {
    "allOf": [
      {
        "$ref": "#/definitions/ContainerVolume"
      },
      {
        "type": "object",
        "required": [
          "mountPath",
          "spec",
          "type"
        ],
        "properties": {
          "mountPath": {
            "type": "string"
          },
          "spec": {
            "$ref": "#/definitions/EmptyDirYamlSpec"
          },
          "type": {
            "type": "string",
            "enum": [
              "EmptyDir",
              "PersistentVolumeClaim",
              "HostPath"
            ]
          }
        }
      }
    ],
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "EmptyDirYamlSpec": {
    "type": "object",
    "properties": {
      "medium": {
        "type": "string"
      },
      "size": {
        "type": "string",
        "pattern": "^(([0-9]*[.])?[0-9]+)([GM]i?)|<\\+input>$"
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "ExecutionElementConfig": {
    "type": "object",
    "required": [
      "steps"
    ],
    "properties": {
      "rollbackSteps": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/ExecutionWrapperConfig"
        }
      },
      "steps": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/ExecutionWrapperConfig"
        },
        "maxItems": 2147483647,
        "minItems": 1
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "ExecutionTarget": {
    "type": "object",
    "properties": {
      "connectorRef": {
        "type": "string"
      },
      "host": {
        "type": "string"
      },
      "workingDirectory": {
        "type": "string"
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "ExecutionWrapperConfig": {
    "type": "object",
    "properties": {
      "parallel": {
        "$ref": "#/definitions/ParallelStepElementConfig"
      },
      "step": {
        "$ref": "#/definitions/StepElementConfig"
      },
      "stepGroup": {
        "$ref": "#/definitions/StepGroupElementConfig"
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "FailureStrategyActionConfig": {
    "type": "object",
    "required": [
      "type"
    ],
    "discriminator": "type",
    "properties": {
      "type": {
        "type": "string",
        "enum": [
          "Ignore",
          "Retry",
          "MarkAsSuccess",
          "Abort",
          "StageRollback",
          "StepGroupRollback",
          "PipelineRollback",
          "ManualIntervention",
          "ProceedWithDefaultValues",
          "MarkAsFailure"
        ]
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "FailureStrategyConfig": {
    "type": "object",
    "required": [
      "onFailure"
    ],
    "properties": {
      "onFailure": {
        "$ref": "#/definitions/OnFailureConfig"
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "FeatureFlagStageConfig": {
    "allOf": [
      {
        "$ref": "#/definitions/StageInfoConfig"
      },
      {
        "type": "object",
        "properties": {}
      }
    ],
    "$schema": "http://json-schema.org/draft-07/schema#",
    "type": "object",
    "properties": {
      "execution": {
        "$ref": "#/definitions/ExecutionElementConfig"
      }
    }
  },
  "FlagConfigurationStepInfo": {
    "allOf": [
      {
        "$ref": "#/definitions/StepSpecType"
      },
      {
        "type": "object",
        "required": [
          "environment",
          "feature",
          "instructions"
        ],
        "properties": {
          "environment": {
            "type": "string"
          },
          "feature": {
            "type": "string"
          },
          "instructions": {
            "oneOf": [
              {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/PatchInstruction"
                }
              },
              {
                "type": "string",
                "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                "minLength": 1
              }
            ]
          }
        }
      }
    ],
    "$schema": "http://json-schema.org/draft-07/schema#",
    "type": "object",
    "required": [
      "environment",
      "feature",
      "instructions"
    ],
    "properties": {
      "environment": {
        "type": "string"
      },
      "feature": {
        "type": "string"
      },
      "instructions": {
        "oneOf": [
          {
            "type": "array",
            "items": {
              "$ref": "#/definitions/PatchInstruction"
            }
          },
          {
            "type": "string",
            "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
            "minLength": 1
          }
        ]
      }
    }
  },
  "FlowControlConfig": {
    "type": "object",
    "properties": {
      "barriers": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/BarrierInfoConfig"
        }
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "HarnessApprovalStepInfo": {
    "allOf": [
      {
        "$ref": "#/definitions/StepSpecType"
      },
      {
        "type": "object",
        "required": [
          "approvers",
          "includePipelineExecutionHistory"
        ],
        "properties": {
          "approvalMessage": {
            "type": "string",
            "minLength": 1
          },
          "approverInputs": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ApproverInputInfo"
            }
          },
          "approvers": {
            "$ref": "#/definitions/Approvers"
          },
          "includePipelineExecutionHistory": {
            "oneOf": [
              {
                "type": "boolean"
              },
              {
                "type": "string"
              }
            ]
          }
        }
      }
    ],
    "$schema": "http://json-schema.org/draft-07/schema#",
    "type": "object",
    "required": [
      "approvers",
      "includePipelineExecutionHistory"
    ],
    "properties": {
      "approvalMessage": {
        "type": "string",
        "minLength": 1
      },
      "approverInputs": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/ApproverInputInfo"
        }
      },
      "approvers": {
        "$ref": "#/definitions/Approvers"
      },
      "includePipelineExecutionHistory": {
        "oneOf": [
          {
            "type": "boolean"
          },
          {
            "type": "string"
          }
        ]
      }
    }
  },
  "HarnessFileStoreSource": {
    "allOf": [
      {
        "$ref": "#/definitions/ShellScriptBaseSource"
      },
      {
        "type": "object",
        "properties": {
          "file": {
            "type": "string"
          }
        }
      }
    ],
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "HarnessForConfig": {
    "type": "object",
    "properties": {
      "end": {
        "oneOf": [
          {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          {
            "type": "string",
            "pattern": "(<\\+.+>.*)",
            "minLength": 1
          }
        ]
      },
      "items": {
        "oneOf": [
          {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "type": "string",
            "pattern": "(<\\+.+>.*)",
            "minLength": 1
          }
        ]
      },
      "maxConcurrency": {
        "oneOf": [
          {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          {
            "type": "string",
            "pattern": "(<\\+.+>.*)",
            "minLength": 1
          }
        ]
      },
      "partitionSize": {
        "oneOf": [
          {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          {
            "type": "string",
            "pattern": "(<\\+.+>.*)",
            "minLength": 1
          }
        ]
      },
      "start": {
        "oneOf": [
          {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          {
            "type": "string",
            "pattern": "(<\\+.+>.*)",
            "minLength": 1
          }
        ]
      },
      "times": {
        "oneOf": [
          {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          {
            "type": "string",
            "pattern": "(<\\+.+>.*)",
            "minLength": 1
          }
        ]
      },
      "unit": {
        "type": "string",
        "enum": [
          "Percentage",
          "Count"
        ]
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#",
    "allOf": [
      {
        "oneOf": [
          {
            "required": [
              "times"
            ]
          },
          {
            "required": [
              "items"
            ]
          }
        ]
      }
    ]
  },
  "HostPathYaml": {
    "allOf": [
      {
        "$ref": "#/definitions/ContainerVolume"
      },
      {
        "type": "object",
        "required": [
          "mountPath",
          "spec",
          "type"
        ],
        "properties": {
          "mountPath": {
            "type": "string"
          },
          "spec": {
            "$ref": "#/definitions/HostPathYamlSpec"
          },
          "type": {
            "type": "string",
            "enum": [
              "EmptyDir",
              "PersistentVolumeClaim",
              "HostPath"
            ]
          }
        }
      }
    ],
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "HostPathYamlSpec": {
    "type": "object",
    "required": [
      "path"
    ],
    "properties": {
      "path": {
        "type": "string"
      },
      "type": {
        "type": "string"
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "HttpHeaderConfig": {
    "type": "object",
    "properties": {
      "key": {
        "type": "string"
      },
      "value": {
        "type": "string"
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "HttpStepInfo": {
    "allOf": [
      {
        "$ref": "#/definitions/StepSpecType"
      },
      {
        "type": "object",
        "required": [
          "method",
          "url"
        ],
        "properties": {
          "assertion": {
            "type": "string"
          },
          "delegateSelectors": {
            "oneOf": [
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              {
                "type": "string",
                "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                "minLength": 1
              }
            ]
          },
          "headers": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/HttpHeaderConfig"
            }
          },
          "method": {
            "type": "string"
          },
          "outputVariables": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/definitions/NumberNGVariable"
                },
                {
                  "$ref": "#/definitions/SecretNGVariable"
                },
                {
                  "$ref": "#/definitions/StringNGVariable"
                }
              ]
            }
          },
          "requestBody": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        }
      }
    ],
    "$schema": "http://json-schema.org/draft-07/schema#",
    "type": "object",
    "required": [
      "method",
      "url"
    ],
    "properties": {
      "assertion": {
        "type": "string"
      },
      "delegateSelectors": {
        "oneOf": [
          {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "type": "string",
            "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
            "minLength": 1
          }
        ]
      },
      "headers": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/HttpHeaderConfig"
        }
      },
      "method": {
        "type": "string"
      },
      "outputVariables": {
        "type": "array",
        "items": {
          "oneOf": [
            {
              "$ref": "#/definitions/NumberNGVariable"
            },
            {
              "$ref": "#/definitions/SecretNGVariable"
            },
            {
              "$ref": "#/definitions/StringNGVariable"
            }
          ]
        }
      },
      "requestBody": {
        "type": "string"
      },
      "url": {
        "type": "string"
      }
    }
  },
  "IgnoreFailureActionConfig": {
    "allOf": [
      {
        "$ref": "#/definitions/FailureStrategyActionConfig"
      },
      {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "Ignore"
            ]
          }
        }
      }
    ],
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "ImportDataSpec": {
    "type": "object",
    "discriminator": "type",
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "ImportDataSpecWrapper": {
    "type": "object",
    "required": [
      "spec",
      "type"
    ],
    "properties": {
      "type": {
        "type": "string",
        "enum": [
          "Json",
          "KeyValues"
        ]
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#",
    "allOf": [
      {
        "if": {
          "properties": {
            "type": {
              "const": "Json"
            }
          }
        },
        "then": {
          "properties": {
            "spec": {
              "$ref": "#/definitions/JsonImportDataSpec"
            }
          }
        }
      },
      {
        "if": {
          "properties": {
            "type": {
              "const": "KeyValues"
            }
          }
        },
        "then": {
          "properties": {
            "spec": {
              "$ref": "#/definitions/KeyValuesImportDataSpec"
            }
          }
        }
      }
    ]
  },
  "InputSetValidator": {
    "type": "object",
    "properties": {
      "parameters": {
        "type": "string"
      },
      "validatorType": {
        "type": "string",
        "enum": [
          "ALLOWED_VALUES",
          "REGEX"
        ]
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "JexlCriteriaSpec": {
    "allOf": [
      {
        "$ref": "#/definitions/CriteriaSpec"
      },
      {
        "type": "object",
        "required": [
          "expression"
        ],
        "properties": {
          "expression": {
            "type": "string"
          }
        }
      }
    ],
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "JiraApprovalStepInfo": {
    "allOf": [
      {
        "$ref": "#/definitions/StepSpecType"
      },
      {
        "type": "object",
        "required": [
          "approvalCriteria",
          "connectorRef",
          "issueKey"
        ],
        "properties": {
          "approvalCriteria": {
            "$ref": "#/definitions/CriteriaSpecWrapper"
          },
          "connectorRef": {
            "type": "string"
          },
          "delegateSelectors": {
            "oneOf": [
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              {
                "type": "string",
                "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                "minLength": 1
              }
            ]
          },
          "issueKey": {
            "type": "string"
          },
          "issueType": {
            "type": "string"
          },
          "projectKey": {
            "type": "string"
          },
          "rejectionCriteria": {
            "$ref": "#/definitions/CriteriaSpecWrapper"
          }
        }
      }
    ],
    "$schema": "http://json-schema.org/draft-07/schema#",
    "type": "object",
    "required": [
      "approvalCriteria",
      "connectorRef",
      "issueKey"
    ],
    "properties": {
      "approvalCriteria": {
        "$ref": "#/definitions/CriteriaSpecWrapper"
      },
      "connectorRef": {
        "type": "string"
      },
      "delegateSelectors": {
        "oneOf": [
          {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "type": "string",
            "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
            "minLength": 1
          }
        ]
      },
      "issueKey": {
        "type": "string"
      },
      "issueType": {
        "type": "string"
      },
      "projectKey": {
        "type": "string"
      },
      "rejectionCriteria": {
        "$ref": "#/definitions/CriteriaSpecWrapper"
      }
    }
  },
  "JiraCreateStepInfo": {
    "allOf": [
      {
        "$ref": "#/definitions/StepSpecType"
      },
      {
        "type": "object",
        "required": [
          "connectorRef",
          "issueType",
          "projectKey"
        ],
        "properties": {
          "connectorRef": {
            "type": "string"
          },
          "delegateSelectors": {
            "oneOf": [
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              {
                "type": "string",
                "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                "minLength": 1
              }
            ]
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/JiraField"
            }
          },
          "issueType": {
            "type": "string"
          },
          "projectKey": {
            "type": "string"
          }
        }
      }
    ],
    "$schema": "http://json-schema.org/draft-07/schema#",
    "type": "object",
    "required": [
      "connectorRef",
      "issueType",
      "projectKey"
    ],
    "properties": {
      "connectorRef": {
        "type": "string"
      },
      "delegateSelectors": {
        "oneOf": [
          {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "type": "string",
            "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
            "minLength": 1
          }
        ]
      },
      "fields": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/JiraField"
        }
      },
      "issueType": {
        "type": "string"
      },
      "projectKey": {
        "type": "string"
      }
    }
  },
  "JiraField": {
    "type": "object",
    "required": [
      "value"
    ],
    "properties": {
      "name": {
        "type": "string",
        "minLength": 1
      },
      "value": {
        "type": "string"
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "JiraUpdateStepInfo": {
    "allOf": [
      {
        "$ref": "#/definitions/StepSpecType"
      },
      {
        "type": "object",
        "required": [
          "connectorRef",
          "issueKey"
        ],
        "properties": {
          "connectorRef": {
            "type": "string"
          },
          "delegateSelectors": {
            "oneOf": [
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              {
                "type": "string",
                "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                "minLength": 1
              }
            ]
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/JiraField"
            }
          },
          "issueKey": {
            "type": "string"
          },
          "transitionTo": {
            "$ref": "#/definitions/TransitionTo"
          }
        }
      }
    ],
    "$schema": "http://json-schema.org/draft-07/schema#",
    "type": "object",
    "required": [
      "connectorRef",
      "issueKey"
    ],
    "properties": {
      "connectorRef": {
        "type": "string"
      },
      "delegateSelectors": {
        "oneOf": [
          {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "type": "string",
            "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
            "minLength": 1
          }
        ]
      },
      "fields": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/JiraField"
        }
      },
      "issueKey": {
        "type": "string"
      },
      "transitionTo": {
        "$ref": "#/definitions/TransitionTo"
      }
    }
  },
  "JsonImportDataSpec": {
    "allOf": [
      {
        "$ref": "#/definitions/ImportDataSpec"
      },
      {
        "type": "object",
        "required": [
          "jsonBody"
        ],
        "properties": {
          "jsonBody": {
            "type": "string"
          }
        }
      }
    ],
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "JsonNode": {
    "type": "object",
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "KeyValuesCriteriaSpec": {
    "allOf": [
      {
        "$ref": "#/definitions/CriteriaSpec"
      },
      {
        "type": "object",
        "required": [
          "conditions"
        ],
        "properties": {
          "conditions": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Condition"
            }
          },
          "matchAnyCondition": {
            "oneOf": [
              {
                "type": "boolean"
              },
              {
                "type": "string"
              }
            ]
          }
        }
      }
    ],
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "KeyValuesImportDataSpec": {
    "allOf": [
      {
        "$ref": "#/definitions/ImportDataSpec"
      },
      {
        "type": "object",
        "required": [
          "fields"
        ],
        "properties": {
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ServiceNowField"
            }
          }
        }
      }
    ],
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "Limits": {
    "type": "object",
    "properties": {
      "cpu": {
        "oneOf": [
          {
            "type": "string"
          },
          {
            "type": "number"
          }
        ]
      },
      "memory": {
        "type": "string"
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "ManualFailureSpecConfig": {
    "type": "object",
    "required": [
      "onTimeout",
      "timeout"
    ],
    "properties": {
      "onTimeout": {
        "$ref": "#/definitions/OnTimeoutConfig"
      },
      "timeout": {
        "type": "string"
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "ManualInterventionFailureActionConfig": {
    "allOf": [
      {
        "$ref": "#/definitions/FailureStrategyActionConfig"
      },
      {
        "type": "object",
        "required": [
          "spec",
          "type"
        ],
        "properties": {
          "spec": {
            "readOnly": true,
            "$ref": "#/definitions/ManualFailureSpecConfig"
          },
          "type": {
            "type": "string",
            "enum": [
              "ManualIntervention"
            ]
          }
        }
      }
    ],
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "MarkAsFailFailureActionConfig": {
    "allOf": [
      {
        "$ref": "#/definitions/FailureStrategyActionConfig"
      },
      {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "MarkAsFailure"
            ]
          }
        }
      }
    ],
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "MarkAsSuccessFailureActionConfig": {
    "allOf": [
      {
        "$ref": "#/definitions/FailureStrategyActionConfig"
      },
      {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "MarkAsSuccess"
            ]
          }
        }
      }
    ],
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "MatrixConfigInterface": {
    "type": "object",
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "NGProperties": {
    "type": "object",
    "properties": {
      "ci": {
        "$ref": "#/definitions/CIProperties"
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "NGVariable": {
    "type": "object",
    "discriminator": "type",
    "properties": {
      "description": {
        "type": "string"
      },
      "metadata": {
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "required": {
        "type": "boolean"
      },
      "type": {
        "type": "string",
        "enum": [
          "String",
          "Number",
          "Secret"
        ]
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "NotificationChannelWrapper": {
    "type": "object",
    "properties": {
      "type": {
        "type": "string"
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#",
    "allOf": [
      {
        "if": {
          "properties": {
            "type": {
              "const": "Email"
            }
          }
        },
        "then": {
          "properties": {
            "spec": {
              "$ref": "#/definitions/PmsEmailChannel"
            }
          }
        }
      },
      {
        "if": {
          "properties": {
            "type": {
              "const": "MsTeams"
            }
          }
        },
        "then": {
          "properties": {
            "spec": {
              "$ref": "#/definitions/PmsMSTeamChannel"
            }
          }
        }
      },
      {
        "if": {
          "properties": {
            "type": {
              "const": "PagerDuty"
            }
          }
        },
        "then": {
          "properties": {
            "spec": {
              "$ref": "#/definitions/PmsPagerDutyChannel"
            }
          }
        }
      },
      {
        "if": {
          "properties": {
            "type": {
              "const": "Slack"
            }
          }
        },
        "then": {
          "properties": {
            "spec": {
              "$ref": "#/definitions/PmsSlackChannel"
            }
          }
        }
      }
    ]
  },
  "NotificationRules": {
    "type": "object",
    "properties": {
      "enabled": {
        "type": "boolean"
      },
      "name": {
        "type": "string"
      },
      "notificationMethod": {
        "$ref": "#/definitions/NotificationChannelWrapper"
      },
      "pipelineEvents": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/PipelineEvent"
        }
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "NumberNGVariable": {
    "allOf": [
      {
        "$ref": "#/definitions/NGVariable"
      },
      {
        "type": "object",
        "required": [
          "value"
        ],
        "properties": {
          "default": {
            "type": "number",
            "format": "double"
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][0-9a-zA-Z_\\.$]{0,127}$"
          },
          "type": {
            "type": "string",
            "enum": [
              "Number"
            ]
          },
          "value": {
            "oneOf": [
              {
                "type": "number",
                "format": "double"
              },
              {
                "type": "string",
                "pattern": "((^[+-]?[0-9]*\\.?[0-9]+$)|(<\\+.+>.*))"
              }
            ]
          }
        }
      }
    ],
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "OnFailureConfig": {
    "type": "object",
    "required": [
      "action",
      "errors"
    ],
    "properties": {
      "action": {
        "$ref": "#/definitions/FailureStrategyActionConfig"
      },
      "errors": {
        "type": "array",
        "items": {
          "type": "string",
          "enum": [
            "Unknown",
            "AllErrors",
            "Authentication",
            "Connectivity",
            "Timeout",
            "Authorization",
            "Verification",
            "DelegateProvisioning",
            "PolicyEvaluationFailure",
            "InputTimeoutError",
            "ApprovalRejection",
            "DelegateRestart"
          ]
        }
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "OnRetryFailureConfig": {
    "type": "object",
    "properties": {
      "action": {
        "$ref": "#/definitions/FailureStrategyActionConfig"
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "OnTimeoutConfig": {
    "type": "object",
    "properties": {
      "action": {
        "$ref": "#/definitions/FailureStrategyActionConfig"
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "OutputNGVariable": {
    "type": "object",
    "properties": {
      "description": {
        "type": "string"
      },
      "name": {
        "type": "string",
        "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "PRBuildSpec": {
    "allOf": [
      {
        "$ref": "#/definitions/BuildSpec"
      },
      {
        "type": "object",
        "required": [
          "number"
        ],
        "properties": {
          "number": {
            "type": "string"
          }
        }
      }
    ],
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "ParallelStageElementConfig": {
    "type": "array",
    "items": {
      "$ref": "#/definitions/StageElementWrapperConfig"
    },
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "ParallelStepElementConfig": {
    "type": "array",
    "items": {
      "$ref": "#/definitions/ExecutionWrapperConfig"
    },
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "ParameterField": {
    "type": "object",
    "properties": {
      "defaultValue": {
        "type": "object"
      },
      "executionInput": {
        "type": "boolean"
      },
      "expression": {
        "type": "boolean"
      },
      "expressionValue": {
        "type": "string"
      },
      "inputSetValidator": {
        "$ref": "#/definitions/InputSetValidator"
      },
      "jsonResponseField": {
        "type": "boolean"
      },
      "responseField": {
        "type": "string"
      },
      "typeString": {
        "type": "boolean"
      },
      "value": {
        "type": "object"
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "ParameterFieldMapStringJsonNode": {
    "type": "object",
    "properties": {
      "defaultValue": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/definitions/JsonNode"
        }
      },
      "executionInput": {
        "type": "boolean"
      },
      "expression": {
        "type": "boolean"
      },
      "expressionValue": {
        "type": "string"
      },
      "inputSetValidator": {
        "$ref": "#/definitions/InputSetValidator"
      },
      "jsonResponseField": {
        "type": "boolean"
      },
      "responseField": {
        "type": "string"
      },
      "typeString": {
        "type": "boolean"
      },
      "value": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/definitions/JsonNode"
        }
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "ParameterFieldMatrixConfigInterface": {
    "type": "object",
    "properties": {
      "defaultValue": {
        "$ref": "#/definitions/MatrixConfigInterface"
      },
      "executionInput": {
        "type": "boolean"
      },
      "expression": {
        "type": "boolean"
      },
      "expressionValue": {
        "type": "string"
      },
      "inputSetValidator": {
        "$ref": "#/definitions/InputSetValidator"
      },
      "jsonResponseField": {
        "type": "boolean"
      },
      "responseField": {
        "type": "string"
      },
      "typeString": {
        "type": "boolean"
      },
      "value": {
        "$ref": "#/definitions/MatrixConfigInterface"
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "ParameterFieldString": {
    "type": "object",
    "properties": {
      "defaultValue": {
        "type": "string"
      },
      "executionInput": {
        "type": "boolean"
      },
      "expression": {
        "type": "boolean"
      },
      "expressionValue": {
        "type": "string"
      },
      "inputSetValidator": {
        "$ref": "#/definitions/InputSetValidator"
      },
      "jsonResponseField": {
        "type": "boolean"
      },
      "responseField": {
        "type": "string"
      },
      "typeString": {
        "type": "boolean"
      },
      "value": {
        "type": "string"
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "PatchInstruction": {
    "type": "object",
    "discriminator": "type",
    "properties": {
      "type": {
        "type": "string",
        "enum": [
          "SetFeatureFlagState",
          "SetOnVariation",
          "SetOffVariation",
          "SetDefaultVariations",
          "AddRule",
          "UpdateRule",
          "AddTargetsToVariationTargetMap",
          "RemoveTargetsToVariationTargetMap",
          "AddSegmentToVariationTargetMap",
          "RemoveSegmentsToVariationTargetMap"
        ]
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "PersistentVolumeClaimYaml": {
    "allOf": [
      {
        "$ref": "#/definitions/ContainerVolume"
      },
      {
        "type": "object",
        "required": [
          "mountPath",
          "spec",
          "type"
        ],
        "properties": {
          "mountPath": {
            "type": "string"
          },
          "spec": {
            "$ref": "#/definitions/PersistentVolumeClaimYamlSpec"
          },
          "type": {
            "type": "string",
            "enum": [
              "EmptyDir",
              "PersistentVolumeClaim",
              "HostPath"
            ]
          }
        }
      }
    ],
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "PersistentVolumeClaimYamlSpec": {
    "type": "object",
    "required": [
      "claimName"
    ],
    "properties": {
      "claimName": {
        "type": "string"
      },
      "readOnly": {
        "type": "boolean"
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "PipelineConfig": {
    "type": "object",
    "properties": {
      "pipeline": {
        "readOnly": true,
        "$ref": "#/definitions/PipelineInfoConfig"
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "PipelineEvent": {
    "type": "object",
    "properties": {
      "forStages": {
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "type": {
        "type": "string",
        "enum": [
          "AllEvents",
          "PipelineStart",
          "PipelineSuccess",
          "PipelineFailed",
          "PipelineEnd",
          "PipelinePaused",
          "StageSuccess",
          "StageFailed",
          "StageStart",
          "StepFailed"
        ]
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "PipelineInfoConfig": {
    "type": "object",
    "properties": {
      "allowStageExecutions": {
        "type": "boolean"
      },
      "delegateSelectors": {
        "oneOf": [
          {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "type": "string",
            "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
            "minLength": 1
          }
        ]
      },
      "description": {
        "type": "string"
      },
      "flowControl": {
        "$ref": "#/definitions/FlowControlConfig"
      },
      "identifier": {
        "type": "string",
        "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
      },
      "name": {
        "type": "string",
        "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
      },
      "notificationRules": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/NotificationRules"
        }
      },
      "orgIdentifier": {
        "type": "string",
        "const": "default"
      },
      "projectIdentifier": {
        "type": "string",
        "const": "naidusanity"
      },
      "properties": {
        "$ref": "#/definitions/NGProperties"
      },
      "stages": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/StageElementWrapperConfig"
        },
        "maxItems": 2147483647,
        "minItems": 1
      },
      "tags": {
        "type": "object",
        "additionalProperties": {
          "type": "string"
        }
      },
      "template": {
        "$ref": "#/definitions/TemplateLinkConfig"
      },
      "timeout": {
        "type": "string",
        "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(<\\+input>.*)|(.*<\\+.*>.*)|(^$))$"
      },
      "variables": {
        "type": "array",
        "items": {
          "oneOf": [
            {
              "$ref": "#/definitions/NumberNGVariable"
            },
            {
              "$ref": "#/definitions/SecretNGVariable"
            },
            {
              "$ref": "#/definitions/StringNGVariable"
            }
          ]
        }
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "PipelineRollbackFailureActionConfig": {
    "allOf": [
      {
        "$ref": "#/definitions/FailureStrategyActionConfig"
      },
      {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "PipelineRollback"
            ]
          }
        }
      }
    ],
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "PipelineStageConfig": {
    "allOf": [
      {
        "$ref": "#/definitions/StageInfoConfig"
      },
      {
        "type": "object",
        "required": [
          "org",
          "pipeline",
          "project"
        ],
        "properties": {
          "inputSetReferences": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "inputs": {
            "oneOf": [
              {
                "$ref": "#/definitions/JsonNode"
              },
              {
                "type": "string",
                "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                "minLength": 1
              }
            ]
          },
          "org": {
            "type": "string"
          },
          "outputs": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/PipelineStageOutputs"
            }
          },
          "pipeline": {
            "type": "string"
          },
          "pipelineInputs": {
            "oneOf": [
              {
                "$ref": "#/definitions/JsonNode"
              },
              {
                "type": "string",
                "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                "minLength": 1
              }
            ]
          },
          "project": {
            "type": "string"
          }
        }
      }
    ],
    "$schema": "http://json-schema.org/draft-07/schema#",
    "type": "object",
    "required": [
      "org",
      "pipeline",
      "project"
    ],
    "properties": {
      "inputSetReferences": {
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "inputs": {
        "oneOf": [
          {
            "$ref": "#/definitions/JsonNode"
          },
          {
            "type": "string",
            "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
            "minLength": 1
          }
        ]
      },
      "org": {
        "type": "string"
      },
      "outputs": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/PipelineStageOutputs"
        }
      },
      "pipeline": {
        "type": "string"
      },
      "pipelineInputs": {
        "oneOf": [
          {
            "$ref": "#/definitions/JsonNode"
          },
          {
            "type": "string",
            "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
            "minLength": 1
          }
        ]
      },
      "project": {
        "type": "string"
      }
    }
  },
  "PipelineStageOutputs": {
    "type": "object",
    "required": [
      "name",
      "value"
    ],
    "properties": {
      "name": {
        "type": "string",
        "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
      },
      "value": {
        "type": "string"
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "PmsEmailChannel": {
    "allOf": [
      {
        "$ref": "#/definitions/PmsNotificationChannel"
      },
      {
        "type": "object",
        "properties": {
          "recipients": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "userGroups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      }
    ],
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "PmsMSTeamChannel": {
    "allOf": [
      {
        "$ref": "#/definitions/PmsNotificationChannel"
      },
      {
        "type": "object",
        "properties": {
          "msTeamKeys": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "userGroups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      }
    ],
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "PmsNotificationChannel": {
    "type": "object",
    "discriminator": "type",
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "PmsPagerDutyChannel": {
    "allOf": [
      {
        "$ref": "#/definitions/PmsNotificationChannel"
      },
      {
        "type": "object",
        "properties": {
          "integrationKey": {
            "type": "string"
          },
          "userGroups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      }
    ],
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "PmsSlackChannel": {
    "allOf": [
      {
        "$ref": "#/definitions/PmsNotificationChannel"
      },
      {
        "type": "object",
        "properties": {
          "userGroups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "webhookUrl": {
            "type": "string"
          }
        }
      }
    ],
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "PolicyConfig": {
    "type": "object",
    "required": [
      "policySets"
    ],
    "properties": {
      "policySets": {
        "oneOf": [
          {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "type": "string",
            "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
            "minLength": 1
          }
        ]
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "PolicySpec": {
    "type": "object",
    "discriminator": "type",
    "properties": {
      "type": {
        "type": "string"
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "PolicyStepInfo": {
    "allOf": [
      {
        "$ref": "#/definitions/StepSpecType",
        "if": {
          "properties": {
            "type": {
              "const": "Custom"
            }
          }
        },
        "then": {
          "properties": {
            "policySpec": {
              "$ref": "#/definitions/CustomPolicyStepSpec"
            }
          }
        }
      },
      {
        "type": "object",
        "required": [
          "policySets"
        ],
        "properties": {
          "metadata": {
            "type": "string"
          },
          "policySets": {
            "oneOf": [
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              {
                "type": "string",
                "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                "minLength": 1
              }
            ]
          },
          "type": {
            "type": "string"
          }
        }
      },
      {
        "if": {
          "properties": {
            "type": {
              "const": "Custom"
            }
          }
        },
        "then": {
          "properties": {
            "policySpec": {
              "$ref": "#/definitions/CustomPolicyStepSpec"
            }
          }
        }
      }
    ],
    "$schema": "http://json-schema.org/draft-07/schema#",
    "type": "object",
    "required": [
      "policySets"
    ],
    "properties": {
      "metadata": {
        "type": "string"
      },
      "policySets": {
        "oneOf": [
          {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "type": "string",
            "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
            "minLength": 1
          }
        ]
      },
      "type": {
        "type": "string"
      }
    }
  },
  "ProceedWithDefaultValuesFailureActionConfig": {
    "allOf": [
      {
        "$ref": "#/definitions/FailureStrategyActionConfig"
      },
      {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "ProceedWithDefaultValues"
            ]
          }
        }
      }
    ],
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "QueueStepInfo": {
    "allOf": [
      {
        "$ref": "#/definitions/StepSpecType"
      },
      {
        "type": "object",
        "required": [
          "key",
          "scope"
        ],
        "properties": {
          "key": {
            "type": "string"
          },
          "scope": {
            "type": "string",
            "enum": [
              "Pipeline",
              "Stage"
            ]
          }
        }
      }
    ],
    "$schema": "http://json-schema.org/draft-07/schema#",
    "type": "object",
    "required": [
      "key",
      "scope"
    ],
    "properties": {
      "key": {
        "type": "string"
      },
      "scope": {
        "type": "string",
        "enum": [
          "Pipeline",
          "Stage"
        ]
      }
    }
  },
  "RemoveSegmentToVariationTargetMapYaml": {
    "allOf": [
      {
        "$ref": "#/definitions/PatchInstruction"
      },
      {
        "type": "object",
        "required": [
          "identifier",
          "spec",
          "type"
        ],
        "properties": {
          "identifier": {
            "type": "string"
          },
          "spec": {
            "$ref": "#/definitions/RemoveSegmentToVariationTargetMapYamlSpec"
          },
          "type": {
            "type": "string",
            "enum": [
              "RemoveSegmentToVariationTargetMap"
            ]
          }
        }
      }
    ],
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "RemoveSegmentToVariationTargetMapYamlSpec": {
    "type": "object",
    "required": [
      "segments",
      "variation"
    ],
    "properties": {
      "segments": {
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "variation": {
        "type": "string"
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "RemoveTargetsToVariationTargetMapYaml": {
    "allOf": [
      {
        "$ref": "#/definitions/PatchInstruction"
      },
      {
        "type": "object",
        "required": [
          "identifier",
          "spec",
          "type"
        ],
        "properties": {
          "identifier": {
            "type": "string"
          },
          "spec": {
            "$ref": "#/definitions/RemoveTargetsToVariationTargetMapYamlSpec"
          },
          "type": {
            "type": "string",
            "enum": [
              "RemoveTargetsToVariationTargetMap"
            ]
          }
        }
      }
    ],
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "RemoveTargetsToVariationTargetMapYamlSpec": {
    "type": "object",
    "required": [
      "targets",
      "variation"
    ],
    "properties": {
      "targets": {
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "variation": {
        "type": "string"
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "ResourceConstraintStepInfo": {
    "allOf": [
      {
        "$ref": "#/definitions/StepSpecType"
      },
      {
        "type": "object",
        "required": [
          "acquireMode",
          "holdingScope",
          "name",
          "permits",
          "resourceUnit"
        ],
        "properties": {
          "acquireMode": {
            "type": "string",
            "enum": [
              "ENSURE",
              "ACCUMULATE"
            ]
          },
          "holdingScope": {
            "type": "string",
            "enum": [
              "PLAN",
              "PIPELINE",
              "STAGE",
              "STEP_GROUP"
            ]
          },
          "name": {
            "type": "string"
          },
          "permits": {
            "type": "integer",
            "format": "int32"
          },
          "resourceUnit": {
            "$ref": "#/definitions/ParameterFieldString"
          }
        }
      }
    ],
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "RetryFailureActionConfig": {
    "allOf": [
      {
        "$ref": "#/definitions/FailureStrategyActionConfig"
      },
      {
        "type": "object",
        "required": [
          "spec",
          "type"
        ],
        "properties": {
          "spec": {
            "readOnly": true,
            "$ref": "#/definitions/RetryFailureSpecConfig"
          },
          "type": {
            "type": "string",
            "enum": [
              "Retry"
            ]
          }
        }
      }
    ],
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "RetryFailureSpecConfig": {
    "type": "object",
    "required": [
      "onRetryFailure",
      "retryCount",
      "retryIntervals"
    ],
    "properties": {
      "onRetryFailure": {
        "$ref": "#/definitions/OnRetryFailureConfig"
      },
      "retryCount": {
        "type": "integer",
        "format": "int32"
      },
      "retryIntervals": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "maxItems": 2147483647,
        "minItems": 1
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "SecretNGVariable": {
    "allOf": [
      {
        "$ref": "#/definitions/NGVariable"
      },
      {
        "type": "object",
        "required": [
          "value"
        ],
        "properties": {
          "default": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][0-9a-zA-Z_\\.$]{0,127}$"
          },
          "type": {
            "type": "string",
            "enum": [
              "Secret"
            ]
          },
          "value": {
            "type": "string"
          }
        }
      }
    ],
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "SecurityContext": {
    "type": "object",
    "properties": {
      "allowPrivilegeEscalation": {
        "oneOf": [
          {
            "type": "boolean"
          },
          {
            "type": "string",
            "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
            "minLength": 1
          }
        ]
      },
      "capabilities": {
        "$ref": "#/definitions/Capabilities"
      },
      "privileged": {
        "oneOf": [
          {
            "type": "boolean"
          },
          {
            "type": "string",
            "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
            "minLength": 1
          }
        ]
      },
      "procMount": {
        "type": "string"
      },
      "readOnlyRootFilesystem": {
        "oneOf": [
          {
            "type": "boolean"
          },
          {
            "type": "string",
            "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
            "minLength": 1
          }
        ]
      },
      "runAsGroup": {
        "oneOf": [
          {
            "type": "integer",
            "format": "int32"
          },
          {
            "type": "string",
            "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
            "minLength": 1
          }
        ]
      },
      "runAsNonRoot": {
        "oneOf": [
          {
            "type": "boolean"
          },
          {
            "type": "string",
            "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
            "minLength": 1
          }
        ]
      },
      "runAsUser": {
        "oneOf": [
          {
            "type": "integer",
            "format": "int32"
          },
          {
            "type": "string"
          }
        ]
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "Serve": {
    "type": "object",
    "properties": {
      "distribution": {
        "$ref": "#/definitions/Distribution"
      },
      "variation": {
        "type": "string"
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "ServiceNowApprovalStepInfo": {
    "allOf": [
      {
        "$ref": "#/definitions/StepSpecType"
      },
      {
        "type": "object",
        "required": [
          "approvalCriteria",
          "connectorRef",
          "ticketNumber",
          "ticketType"
        ],
        "properties": {
          "approvalCriteria": {
            "$ref": "#/definitions/CriteriaSpecWrapper"
          },
          "changeWindow": {
            "$ref": "#/definitions/ServiceNowChangeWindowSpec"
          },
          "connectorRef": {
            "type": "string"
          },
          "delegateSelectors": {
            "oneOf": [
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              {
                "type": "string",
                "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                "minLength": 1
              }
            ]
          },
          "rejectionCriteria": {
            "$ref": "#/definitions/CriteriaSpecWrapper"
          },
          "ticketNumber": {
            "type": "string"
          },
          "ticketType": {
            "type": "string"
          }
        }
      }
    ],
    "$schema": "http://json-schema.org/draft-07/schema#",
    "type": "object",
    "required": [
      "approvalCriteria",
      "connectorRef",
      "ticketNumber",
      "ticketType"
    ],
    "properties": {
      "approvalCriteria": {
        "$ref": "#/definitions/CriteriaSpecWrapper"
      },
      "changeWindow": {
        "$ref": "#/definitions/ServiceNowChangeWindowSpec"
      },
      "connectorRef": {
        "type": "string"
      },
      "delegateSelectors": {
        "oneOf": [
          {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "type": "string",
            "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
            "minLength": 1
          }
        ]
      },
      "rejectionCriteria": {
        "$ref": "#/definitions/CriteriaSpecWrapper"
      },
      "ticketNumber": {
        "type": "string"
      },
      "ticketType": {
        "type": "string"
      }
    }
  },
  "ServiceNowChangeWindowSpec": {
    "type": "object",
    "required": [
      "endField",
      "startField"
    ],
    "properties": {
      "endField": {
        "type": "string"
      },
      "startField": {
        "type": "string"
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "ServiceNowCreateStepInfo": {
    "allOf": [
      {
        "$ref": "#/definitions/StepSpecType"
      },
      {
        "type": "object",
        "required": [
          "connectorRef",
          "ticketType",
          "useServiceNowTemplate"
        ],
        "properties": {
          "connectorRef": {
            "type": "string"
          },
          "delegateSelectors": {
            "oneOf": [
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              {
                "type": "string",
                "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                "minLength": 1
              }
            ]
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ServiceNowField"
            }
          },
          "templateName": {
            "type": "string"
          },
          "ticketType": {
            "type": "string"
          },
          "useServiceNowTemplate": {
            "type": "boolean"
          }
        }
      }
    ],
    "$schema": "http://json-schema.org/draft-07/schema#",
    "type": "object",
    "required": [
      "connectorRef",
      "ticketType",
      "useServiceNowTemplate"
    ],
    "properties": {
      "connectorRef": {
        "type": "string"
      },
      "delegateSelectors": {
        "oneOf": [
          {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "type": "string",
            "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
            "minLength": 1
          }
        ]
      },
      "fields": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/ServiceNowField"
        }
      },
      "templateName": {
        "type": "string"
      },
      "ticketType": {
        "type": "string"
      },
      "useServiceNowTemplate": {
        "type": "boolean"
      }
    }
  },
  "ServiceNowField": {
    "type": "object",
    "required": [
      "name",
      "value"
    ],
    "properties": {
      "name": {
        "type": "string"
      },
      "value": {
        "type": "string"
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "ServiceNowImportSetStepInfo": {
    "allOf": [
      {
        "$ref": "#/definitions/StepSpecType"
      },
      {
        "type": "object",
        "required": [
          "connectorRef",
          "importData",
          "stagingTableName"
        ],
        "properties": {
          "connectorRef": {
            "type": "string"
          },
          "delegateSelectors": {
            "oneOf": [
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              {
                "type": "string",
                "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                "minLength": 1
              }
            ]
          },
          "importData": {
            "$ref": "#/definitions/ImportDataSpecWrapper"
          },
          "stagingTableName": {
            "type": "string"
          }
        }
      }
    ],
    "$schema": "http://json-schema.org/draft-07/schema#",
    "type": "object",
    "required": [
      "connectorRef",
      "importData",
      "stagingTableName"
    ],
    "properties": {
      "connectorRef": {
        "type": "string"
      },
      "delegateSelectors": {
        "oneOf": [
          {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "type": "string",
            "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
            "minLength": 1
          }
        ]
      },
      "importData": {
        "$ref": "#/definitions/ImportDataSpecWrapper"
      },
      "stagingTableName": {
        "type": "string"
      }
    }
  },
  "ServiceNowUpdateStepInfo": {
    "allOf": [
      {
        "$ref": "#/definitions/StepSpecType"
      },
      {
        "type": "object",
        "required": [
          "connectorRef",
          "ticketNumber",
          "ticketType",
          "useServiceNowTemplate"
        ],
        "properties": {
          "connectorRef": {
            "type": "string"
          },
          "delegateSelectors": {
            "oneOf": [
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              {
                "type": "string",
                "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                "minLength": 1
              }
            ]
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ServiceNowField"
            }
          },
          "templateName": {
            "type": "string"
          },
          "ticketNumber": {
            "type": "string"
          },
          "ticketType": {
            "type": "string"
          },
          "useServiceNowTemplate": {
            "type": "boolean"
          }
        }
      }
    ],
    "$schema": "http://json-schema.org/draft-07/schema#",
    "type": "object",
    "required": [
      "connectorRef",
      "ticketNumber",
      "ticketType",
      "useServiceNowTemplate"
    ],
    "properties": {
      "connectorRef": {
        "type": "string"
      },
      "delegateSelectors": {
        "oneOf": [
          {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "type": "string",
            "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
            "minLength": 1
          }
        ]
      },
      "fields": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/ServiceNowField"
        }
      },
      "templateName": {
        "type": "string"
      },
      "ticketNumber": {
        "type": "string"
      },
      "ticketType": {
        "type": "string"
      },
      "useServiceNowTemplate": {
        "type": "boolean"
      }
    }
  },
  "SetDefaultVariationsYaml": {
    "allOf": [
      {
        "$ref": "#/definitions/PatchInstruction"
      },
      {
        "type": "object",
        "required": [
          "identifier",
          "spec",
          "type"
        ],
        "properties": {
          "identifier": {
            "type": "string"
          },
          "spec": {
            "$ref": "#/definitions/SetDefaultVariationsYamlSpec"
          },
          "type": {
            "type": "string",
            "enum": [
              "SetDefaultVariations"
            ]
          }
        }
      }
    ],
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "SetDefaultVariationsYamlSpec": {
    "type": "object",
    "required": [
      "off",
      "on"
    ],
    "properties": {
      "off": {
        "type": "string"
      },
      "on": {
        "type": "string"
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "SetFeatureFlagStateYaml": {
    "allOf": [
      {
        "$ref": "#/definitions/PatchInstruction"
      },
      {
        "type": "object",
        "required": [
          "identifier",
          "spec",
          "type"
        ],
        "properties": {
          "identifier": {
            "type": "string"
          },
          "spec": {
            "$ref": "#/definitions/SetFeatureFlagStateYamlSpec"
          },
          "type": {
            "type": "string",
            "enum": [
              "SetFeatureFlagState"
            ]
          }
        }
      }
    ],
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "SetFeatureFlagStateYamlSpec": {
    "type": "object",
    "required": [
      "state"
    ],
    "properties": {
      "state": {
        "type": "string"
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "SetOffVariationYaml": {
    "allOf": [
      {
        "$ref": "#/definitions/PatchInstruction"
      },
      {
        "type": "object",
        "required": [
          "identifier",
          "spec",
          "type"
        ],
        "properties": {
          "identifier": {
            "type": "string"
          },
          "spec": {
            "$ref": "#/definitions/SetOffVariationYamlSpec"
          },
          "type": {
            "type": "string",
            "enum": [
              "SetOffVariation"
            ]
          }
        }
      }
    ],
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "SetOffVariationYamlSpec": {
    "type": "object",
    "required": [
      "variation"
    ],
    "properties": {
      "variation": {
        "type": "string"
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "SetOnVariationYaml": {
    "allOf": [
      {
        "$ref": "#/definitions/PatchInstruction"
      },
      {
        "type": "object",
        "required": [
          "identifier",
          "spec",
          "type"
        ],
        "properties": {
          "identifier": {
            "type": "string"
          },
          "spec": {
            "$ref": "#/definitions/SetOnVariationYamlSpec"
          },
          "type": {
            "type": "string",
            "enum": [
              "SetOnVariation"
            ]
          }
        }
      }
    ],
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "SetOnVariationYamlSpec": {
    "type": "object",
    "required": [
      "variation"
    ],
    "properties": {
      "variation": {
        "type": "string"
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "ShellScriptBaseSource": {
    "type": "object",
    "discriminator": "type",
    "properties": {
      "type": {
        "type": "string"
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "ShellScriptInlineSource": {
    "allOf": [
      {
        "$ref": "#/definitions/ShellScriptBaseSource"
      },
      {
        "type": "object",
        "properties": {
          "script": {
            "type": "string"
          }
        }
      }
    ],
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "ShellScriptSourceWrapper": {
    "type": "object",
    "required": [
      "spec",
      "type"
    ],
    "properties": {
      "type": {
        "type": "string"
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#",
    "allOf": [
      {
        "if": {
          "properties": {
            "type": {
              "const": "Harness"
            }
          }
        },
        "then": {
          "properties": {
            "spec": {
              "$ref": "#/definitions/HarnessFileStoreSource"
            }
          }
        }
      },
      {
        "if": {
          "properties": {
            "type": {
              "const": "Inline"
            }
          }
        },
        "then": {
          "properties": {
            "spec": {
              "$ref": "#/definitions/ShellScriptInlineSource"
            }
          }
        }
      }
    ]
  },
  "ShellScriptStepInfo": {
    "allOf": [
      {
        "$ref": "#/definitions/StepSpecType"
      },
      {
        "type": "object",
        "required": [
          "onDelegate",
          "shell",
          "source"
        ],
        "properties": {
          "delegateSelectors": {
            "oneOf": [
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              {
                "type": "string",
                "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                "minLength": 1
              }
            ]
          },
          "environmentVariables": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/definitions/NumberNGVariable"
                },
                {
                  "$ref": "#/definitions/SecretNGVariable"
                },
                {
                  "$ref": "#/definitions/StringNGVariable"
                }
              ]
            }
          },
          "executionTarget": {
            "$ref": "#/definitions/ExecutionTarget"
          },
          "metadata": {
            "type": "string"
          },
          "onDelegate": {
            "oneOf": [
              {
                "type": "boolean"
              },
              {
                "type": "string"
              }
            ]
          },
          "outputVariables": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/definitions/NumberNGVariable"
                },
                {
                  "$ref": "#/definitions/SecretNGVariable"
                },
                {
                  "$ref": "#/definitions/StringNGVariable"
                }
              ]
            }
          },
          "shell": {
            "type": "string",
            "enum": [
              "Bash",
              "PowerShell"
            ]
          },
          "source": {
            "$ref": "#/definitions/ShellScriptSourceWrapper"
          }
        }
      }
    ],
    "$schema": "http://json-schema.org/draft-07/schema#",
    "type": "object",
    "required": [
      "onDelegate",
      "shell",
      "source"
    ],
    "properties": {
      "delegateSelectors": {
        "oneOf": [
          {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "type": "string",
            "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
            "minLength": 1
          }
        ]
      },
      "environmentVariables": {
        "type": "array",
        "items": {
          "oneOf": [
            {
              "$ref": "#/definitions/NumberNGVariable"
            },
            {
              "$ref": "#/definitions/SecretNGVariable"
            },
            {
              "$ref": "#/definitions/StringNGVariable"
            }
          ]
        }
      },
      "executionTarget": {
        "$ref": "#/definitions/ExecutionTarget"
      },
      "metadata": {
        "type": "string"
      },
      "onDelegate": {
        "oneOf": [
          {
            "type": "boolean"
          },
          {
            "type": "string"
          }
        ]
      },
      "outputVariables": {
        "type": "array",
        "items": {
          "oneOf": [
            {
              "$ref": "#/definitions/NumberNGVariable"
            },
            {
              "$ref": "#/definitions/SecretNGVariable"
            },
            {
              "$ref": "#/definitions/StringNGVariable"
            }
          ]
        }
      },
      "shell": {
        "type": "string",
        "enum": [
          "Bash",
          "PowerShell"
        ]
      },
      "source": {
        "$ref": "#/definitions/ShellScriptSourceWrapper"
      }
    }
  },
  "StageElementConfig": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "identifier",
          "name",
          "template"
        ],
        "properties": {
          "description": {
            "type": "string"
          },
          "identifier": {
            "type": "string",
            "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
          },
          "skipInstances": {
            "oneOf": [
              {
                "type": "boolean"
              },
              {
                "type": "string"
              }
            ]
          },
          "strategy": {
            "$ref": "#/definitions/StrategyConfig"
          },
          "template": {
            "$ref": "#/definitions/TemplateLinkConfig"
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "identifier",
          "name",
          "type"
        ],
        "properties": {
          "delegateSelectors": {
            "oneOf": [
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              {
                "type": "string",
                "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                "minLength": 1
              }
            ]
          },
          "description": {
            "type": "string"
          },
          "failureStrategies": {
            "oneOf": [
              {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/FailureStrategyConfig"
                }
              },
              {
                "type": "string",
                "pattern": "^<\\+input>$",
                "minLength": 1
              }
            ]
          },
          "identifier": {
            "type": "string",
            "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
          },
          "skipInstances": {
            "oneOf": [
              {
                "type": "boolean"
              },
              {
                "type": "string"
              }
            ]
          },
          "spec": {},
          "strategy": {
            "$ref": "#/definitions/StrategyConfig"
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "type": {
            "type": "string",
            "enum": []
          },
          "variables": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/definitions/NumberNGVariable"
                },
                {
                  "$ref": "#/definitions/SecretNGVariable"
                },
                {
                  "$ref": "#/definitions/StringNGVariable"
                }
              ]
            }
          },
          "when": {
            "oneOf": [
              {
                "$ref": "#/definitions/StageWhenCondition"
              },
              {
                "type": "string",
                "pattern": "^<\\+input>$",
                "minLength": 1
              }
            ]
          }
        },
        "additionalProperties": false,
        "allOf": []
      }
    ]
  },
  "StageElementWrapperConfig": {
    "type": "object",
    "properties": {
      "parallel": {
        "$ref": "#/definitions/ParallelStageElementConfig"
      },
      "stage": {
        "oneOf": [
          {
            "$ref": "#/definitions/ci/IntegrationStageNode"
          },
          {
            "$ref": "#/definitions/cd/DeploymentStageNode"
          },
          {
            "$ref": "#/definitions/security/SecurityStageNode"
          },
          {
            "$ref": "#/definitions/approval/ApprovalStageNode"
          },
          {
            "$ref": "#/definitions/pipeline/PipelineStageNode"
          },
          {
            "$ref": "#/definitions/custom/CustomStageNode"
          },
          {
            "$ref": "#/definitions/cf/FeatureFlagStageNode"
          },
          {
            "$ref": "#/definitions/TemplateStageNode"
          }
        ]
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "StageInfoConfig": {
    "type": "object",
    "discriminator": "type",
    "properties": {
      "execution": {
        "$ref": "#/definitions/ExecutionElementConfig"
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "StageRollbackFailureActionConfig": {
    "allOf": [
      {
        "$ref": "#/definitions/FailureStrategyActionConfig"
      },
      {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "StageRollback"
            ]
          }
        }
      }
    ],
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "StageWhenCondition": {
    "type": "object",
    "required": [
      "pipelineStatus"
    ],
    "properties": {
      "condition": {
        "type": "string",
        "pattern": "^(?!<\\+input>.*\\.executionInput\\(\\)(.*)$)"
      },
      "pipelineStatus": {
        "type": "string",
        "enum": [
          "Success",
          "Failure",
          "All"
        ]
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "StepElementConfig": {
    "type": "object",
    "required": [
      "identifier",
      "name",
      "type"
    ],
    "properties": {
      "description": {
        "type": "string"
      },
      "enforce": {
        "$ref": "#/definitions/PolicyConfig"
      },
      "failureStrategies": {
        "oneOf": [
          {
            "type": "array",
            "items": {
              "$ref": "#/definitions/FailureStrategyConfig"
            }
          },
          {
            "type": "string",
            "pattern": "^<\\+input>$",
            "minLength": 1
          }
        ]
      },
      "identifier": {
        "type": "string",
        "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
      },
      "name": {
        "type": "string",
        "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
      },
      "strategy": {
        "$ref": "#/definitions/StrategyConfig"
      },
      "timeout": {
        "type": "string",
        "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(<\\+input>.*)|(.*<\\+.*>.*)|(^$))$"
      },
      "type": {
        "type": "string"
      },
      "when": {
        "oneOf": [
          {
            "$ref": "#/definitions/StepWhenCondition"
          },
          {
            "type": "string",
            "pattern": "^<\\+input>$",
            "minLength": 1
          }
        ]
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#",
    "allOf": []
  },
  "StepGroupElementConfig": {
    "type": "object",
    "required": [
      "identifier",
      "name"
    ],
    "properties": {
      "delegateSelectors": {
        "oneOf": [
          {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "type": "string",
            "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
            "minLength": 1
          }
        ]
      },
      "failureStrategies": {
        "oneOf": [
          {
            "type": "array",
            "items": {
              "$ref": "#/definitions/FailureStrategyConfig"
            }
          },
          {
            "type": "string",
            "pattern": "^<\\+input>$",
            "minLength": 1
          }
        ]
      },
      "identifier": {
        "type": "string",
        "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
      },
      "name": {
        "type": "string",
        "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
      },
      "steps": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/ExecutionWrapperConfig"
        },
        "maxItems": 2147483647,
        "minItems": 1
      },
      "strategy": {
        "$ref": "#/definitions/StrategyConfig"
      },
      "template": {
        "$ref": "#/definitions/TemplateLinkConfig"
      },
      "when": {
        "oneOf": [
          {
            "$ref": "#/definitions/StepWhenCondition"
          },
          {
            "type": "string",
            "pattern": "^<\\+input>$",
            "minLength": 1
          }
        ]
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#",
    "allOf": [
      {
        "oneOf": [
          {
            "required": [
              "template"
            ]
          },
          {
            "required": [
              "steps"
            ]
          }
        ]
      }
    ]
  },
  "StepGroupFailureActionConfig": {
    "allOf": [
      {
        "$ref": "#/definitions/FailureStrategyActionConfig"
      },
      {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "StepGroupRollback"
            ]
          }
        }
      }
    ],
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "StepSpecType": {
    "type": "object",
    "discriminator": "type",
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "StepWhenCondition": {
    "type": "object",
    "required": [
      "stageStatus"
    ],
    "properties": {
      "condition": {
        "type": "string",
        "pattern": "^(?!<\\+input>.*\\.executionInput\\(\\)(.*)$)"
      },
      "stageStatus": {
        "type": "string",
        "enum": [
          "Success",
          "Failure",
          "All"
        ]
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "StrategyConfig": {
    "type": "object",
    "properties": {
      "matrix": {
        "oneOf": [
          {
            "$ref": "#/definitions/ParameterFieldMatrixConfigInterface"
          },
          {
            "type": "string",
            "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
            "minLength": 1
          }
        ]
      },
      "parallelism": {
        "oneOf": [
          {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          {
            "type": "string",
            "pattern": "(<\\+.+>.*)",
            "minLength": 1
          }
        ]
      },
      "repeat": {
        "$ref": "#/definitions/HarnessForConfig"
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#",
    "allOf": [
      {
        "oneOf": [
          {
            "required": [
              "repeat"
            ]
          },
          {
            "required": [
              "parallelism"
            ]
          },
          {
            "required": [
              "matrix"
            ]
          }
        ]
      }
    ]
  },
  "StringNGVariable": {
    "allOf": [
      {
        "$ref": "#/definitions/NGVariable"
      },
      {
        "type": "object",
        "required": [
          "value"
        ],
        "properties": {
          "default": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z_][0-9a-zA-Z_\\.$]{0,127}$"
          },
          "type": {
            "type": "string",
            "enum": [
              "String"
            ]
          },
          "value": {
            "type": "string"
          }
        }
      }
    ],
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "TagBuildSpec": {
    "allOf": [
      {
        "$ref": "#/definitions/BuildSpec"
      },
      {
        "type": "object",
        "required": [
          "tag"
        ],
        "properties": {
          "tag": {
            "type": "string"
          }
        }
      }
    ],
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "TemplateLinkConfig": {
    "type": "object",
    "required": [
      "templateRef"
    ],
    "properties": {
      "templateInputs": {
        "$ref": "#/definitions/JsonNode"
      },
      "templateRef": {
        "type": "string"
      },
      "templateVariables": {
        "$ref": "#/definitions/JsonNode"
      },
      "versionLabel": {
        "type": "string",
        "pattern": "^[0-9a-zA-Z][^\\s]{0,63}$"
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "Toleration": {
    "type": "object",
    "properties": {
      "effect": {
        "type": "string"
      },
      "key": {
        "type": "string"
      },
      "operator": {
        "type": "string"
      },
      "tolerationSeconds": {
        "type": "integer",
        "format": "int32"
      },
      "value": {
        "type": "string"
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "TransitionTo": {
    "type": "object",
    "required": [
      "status"
    ],
    "properties": {
      "status": {
        "type": "string"
      },
      "transitionName": {
        "type": "string"
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "UpdateRuleYaml": {
    "allOf": [
      {
        "$ref": "#/definitions/PatchInstruction"
      },
      {
        "type": "object",
        "required": [
          "identifier",
          "spec",
          "type"
        ],
        "properties": {
          "identifier": {
            "type": "string"
          },
          "spec": {
            "$ref": "#/definitions/UpdateRuleYamlSpec"
          },
          "type": {
            "type": "string",
            "enum": [
              "UpdateRule"
            ]
          }
        }
      }
    ],
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "UpdateRuleYamlSpec": {
    "type": "object",
    "required": [
      "bucketBy",
      "ruleID"
    ],
    "properties": {
      "bucketBy": {
        "type": "string"
      },
      "ruleID": {
        "type": "string"
      },
      "serve": {
        "$ref": "#/definitions/Serve"
      },
      "variations": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/VariationYamlSpec"
        }
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "VariationYamlSpec": {
    "type": "object",
    "required": [
      "variation",
      "weight"
    ],
    "properties": {
      "variation": {
        "type": "string"
      },
      "weight": {
        "type": "integer",
        "format": "int32"
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "WaitStepInfo": {
    "allOf": [
      {
        "$ref": "#/definitions/StepSpecType"
      },
      {
        "type": "object",
        "required": [
          "duration"
        ],
        "properties": {
          "duration": {
            "type": "string",
            "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(<\\+input>.*)|(.*<\\+.*>.*)|(^$))$"
          },
          "metadata": {
            "type": "string"
          }
        }
      }
    ],
    "$schema": "http://json-schema.org/draft-07/schema#",
    "type": "object",
    "required": [
      "duration"
    ],
    "properties": {
      "duration": {
        "type": "string",
        "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(<\\+input>.*)|(.*<\\+.*>.*)|(^$))$"
      },
      "metadata": {
        "type": "string"
      }
    }
  },
  "WeightedVariation": {
    "type": "object",
    "required": [
      "variation",
      "weight"
    ],
    "properties": {
      "variation": {
        "type": "string"
      },
      "weight": {
        "type": "integer",
        "format": "int32"
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "PMSStepInfo": {
    "type": "object",
    "discriminator": "type",
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "HttpStepNode": {
    "type": "object",
    "required": [
      "identifier",
      "name",
      "spec",
      "type"
    ],
    "properties": {
      "description": {
        "type": "string"
      },
      "enforce": {
        "$ref": "#/definitions/PolicyConfig"
      },
      "failureStrategies": {
        "oneOf": [
          {
            "type": "array",
            "items": {
              "$ref": "#/definitions/FailureStrategyConfig"
            }
          },
          {
            "type": "string",
            "pattern": "^<\\+input>$",
            "minLength": 1
          }
        ]
      },
      "identifier": {
        "type": "string",
        "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
      },
      "name": {
        "type": "string",
        "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
      },
      "strategy": {
        "$ref": "#/definitions/StrategyConfig"
      },
      "timeout": {
        "type": "string",
        "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
      },
      "type": {
        "type": "string",
        "enum": [
          "Http"
        ]
      },
      "when": {
        "oneOf": [
          {
            "$ref": "#/definitions/StepWhenCondition"
          },
          {
            "type": "string",
            "pattern": "^<\\+input>$",
            "minLength": 1
          }
        ]
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#",
    "allOf": [
      {
        "if": {
          "properties": {
            "type": {
              "const": "Http"
            }
          }
        },
        "then": {
          "properties": {
            "spec": {
              "$ref": "#/definitions/HttpStepInfo"
            }
          }
        }
      }
    ]
  },
  "EmailStepNode": {
    "type": "object",
    "required": [
      "identifier",
      "name",
      "spec",
      "type"
    ],
    "properties": {
      "description": {
        "type": "string"
      },
      "enforce": {
        "$ref": "#/definitions/PolicyConfig"
      },
      "failureStrategies": {
        "oneOf": [
          {
            "type": "array",
            "items": {
              "$ref": "#/definitions/FailureStrategyConfig"
            }
          },
          {
            "type": "string",
            "pattern": "^<\\+input>$",
            "minLength": 1
          }
        ]
      },
      "identifier": {
        "type": "string",
        "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
      },
      "name": {
        "type": "string",
        "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
      },
      "strategy": {
        "$ref": "#/definitions/StrategyConfig"
      },
      "timeout": {
        "type": "string",
        "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
      },
      "type": {
        "type": "string",
        "enum": [
          "Email"
        ]
      },
      "when": {
        "oneOf": [
          {
            "$ref": "#/definitions/StepWhenCondition"
          },
          {
            "type": "string",
            "pattern": "^<\\+input>$",
            "minLength": 1
          }
        ]
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#",
    "allOf": [
      {
        "if": {
          "properties": {
            "type": {
              "const": "Email"
            }
          }
        },
        "then": {
          "properties": {
            "spec": {
              "$ref": "#/definitions/EmailStepInfo"
            }
          }
        }
      }
    ]
  },
  "QueueStepNode": {
    "type": "object",
    "required": [
      "identifier",
      "name",
      "spec",
      "type"
    ],
    "properties": {
      "description": {
        "type": "string"
      },
      "enforce": {
        "$ref": "#/definitions/PolicyConfig"
      },
      "failureStrategies": {
        "oneOf": [
          {
            "type": "array",
            "items": {
              "$ref": "#/definitions/FailureStrategyConfig"
            }
          },
          {
            "type": "string",
            "pattern": "^<\\+input>$",
            "minLength": 1
          }
        ]
      },
      "identifier": {
        "type": "string",
        "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
      },
      "name": {
        "type": "string",
        "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
      },
      "strategy": {
        "$ref": "#/definitions/StrategyConfig"
      },
      "timeout": {
        "type": "string",
        "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
      },
      "type": {
        "type": "string",
        "enum": [
          "Queue"
        ]
      },
      "when": {
        "oneOf": [
          {
            "$ref": "#/definitions/StepWhenCondition"
          },
          {
            "type": "string",
            "pattern": "^<\\+input>$",
            "minLength": 1
          }
        ]
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#",
    "allOf": [
      {
        "if": {
          "properties": {
            "type": {
              "const": "Queue"
            }
          }
        },
        "then": {
          "properties": {
            "spec": {
              "$ref": "#/definitions/QueueStepInfo"
            }
          }
        }
      }
    ]
  },
  "ShellScriptStepNode": {
    "type": "object",
    "required": [
      "identifier",
      "name",
      "spec",
      "type"
    ],
    "properties": {
      "description": {
        "type": "string"
      },
      "enforce": {
        "$ref": "#/definitions/PolicyConfig"
      },
      "failureStrategies": {
        "oneOf": [
          {
            "type": "array",
            "items": {
              "$ref": "#/definitions/FailureStrategyConfig"
            }
          },
          {
            "type": "string",
            "pattern": "^<\\+input>$",
            "minLength": 1
          }
        ]
      },
      "identifier": {
        "type": "string",
        "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
      },
      "name": {
        "type": "string",
        "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
      },
      "strategy": {
        "$ref": "#/definitions/StrategyConfig"
      },
      "timeout": {
        "type": "string",
        "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
      },
      "type": {
        "type": "string",
        "enum": [
          "ShellScript"
        ]
      },
      "when": {
        "oneOf": [
          {
            "$ref": "#/definitions/StepWhenCondition"
          },
          {
            "type": "string",
            "pattern": "^<\\+input>$",
            "minLength": 1
          }
        ]
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#",
    "allOf": [
      {
        "if": {
          "properties": {
            "type": {
              "const": "ShellScript"
            }
          }
        },
        "then": {
          "properties": {
            "spec": {
              "$ref": "#/definitions/ShellScriptStepInfo"
            }
          }
        }
      }
    ]
  },
  "TemplateStepNode": {
    "type": "object",
    "required": [
      "identifier",
      "name",
      "template"
    ],
    "properties": {
      "description": {
        "type": "string"
      },
      "identifier": {
        "type": "string",
        "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
      },
      "name": {
        "type": "string",
        "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
      },
      "template": {
        "$ref": "#/definitions/TemplateLinkConfig"
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "ServiceNowApprovalStepNode": {
    "type": "object",
    "required": [
      "identifier",
      "name",
      "spec",
      "type"
    ],
    "properties": {
      "description": {
        "type": "string"
      },
      "enforce": {
        "$ref": "#/definitions/PolicyConfig"
      },
      "failureStrategies": {
        "oneOf": [
          {
            "type": "array",
            "items": {
              "$ref": "#/definitions/FailureStrategyConfig"
            }
          },
          {
            "type": "string",
            "pattern": "^<\\+input>$",
            "minLength": 1
          }
        ]
      },
      "identifier": {
        "type": "string",
        "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
      },
      "name": {
        "type": "string",
        "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
      },
      "strategy": {
        "$ref": "#/definitions/StrategyConfig"
      },
      "timeout": {
        "type": "string",
        "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
      },
      "type": {
        "type": "string",
        "enum": [
          "ServiceNowApproval"
        ]
      },
      "when": {
        "oneOf": [
          {
            "$ref": "#/definitions/StepWhenCondition"
          },
          {
            "type": "string",
            "pattern": "^<\\+input>$",
            "minLength": 1
          }
        ]
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#",
    "allOf": [
      {
        "if": {
          "properties": {
            "type": {
              "const": "ServiceNowApproval"
            }
          }
        },
        "then": {
          "properties": {
            "spec": {
              "$ref": "#/definitions/ServiceNowApprovalStepInfo"
            }
          }
        }
      }
    ]
  },
  "BarrierStepNode": {
    "type": "object",
    "required": [
      "identifier",
      "name",
      "spec",
      "type"
    ],
    "properties": {
      "description": {
        "type": "string"
      },
      "enforce": {
        "$ref": "#/definitions/PolicyConfig"
      },
      "failureStrategies": {
        "oneOf": [
          {
            "type": "array",
            "items": {
              "$ref": "#/definitions/FailureStrategyConfig"
            }
          },
          {
            "type": "string",
            "pattern": "^<\\+input>$",
            "minLength": 1
          }
        ]
      },
      "identifier": {
        "type": "string",
        "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
      },
      "name": {
        "type": "string",
        "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
      },
      "strategy": {
        "$ref": "#/definitions/StrategyConfig"
      },
      "timeout": {
        "type": "string",
        "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
      },
      "type": {
        "type": "string",
        "enum": [
          "Barrier"
        ]
      },
      "when": {
        "oneOf": [
          {
            "$ref": "#/definitions/StepWhenCondition"
          },
          {
            "type": "string",
            "pattern": "^<\\+input>$",
            "minLength": 1
          }
        ]
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#",
    "allOf": [
      {
        "if": {
          "properties": {
            "type": {
              "const": "Barrier"
            }
          }
        },
        "then": {
          "properties": {
            "spec": {
              "$ref": "#/definitions/BarrierStepInfo"
            }
          }
        }
      }
    ]
  },
  "ServiceNowCreateStepNode": {
    "type": "object",
    "required": [
      "identifier",
      "name",
      "spec",
      "type"
    ],
    "properties": {
      "description": {
        "type": "string"
      },
      "enforce": {
        "$ref": "#/definitions/PolicyConfig"
      },
      "failureStrategies": {
        "oneOf": [
          {
            "type": "array",
            "items": {
              "$ref": "#/definitions/FailureStrategyConfig"
            }
          },
          {
            "type": "string",
            "pattern": "^<\\+input>$",
            "minLength": 1
          }
        ]
      },
      "identifier": {
        "type": "string",
        "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
      },
      "name": {
        "type": "string",
        "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
      },
      "strategy": {
        "$ref": "#/definitions/StrategyConfig"
      },
      "timeout": {
        "type": "string",
        "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
      },
      "type": {
        "type": "string",
        "enum": [
          "ServiceNowCreate"
        ]
      },
      "when": {
        "oneOf": [
          {
            "$ref": "#/definitions/StepWhenCondition"
          },
          {
            "type": "string",
            "pattern": "^<\\+input>$",
            "minLength": 1
          }
        ]
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#",
    "allOf": [
      {
        "if": {
          "properties": {
            "type": {
              "const": "ServiceNowCreate"
            }
          }
        },
        "then": {
          "properties": {
            "spec": {
              "$ref": "#/definitions/ServiceNowCreateStepInfo"
            }
          }
        }
      }
    ]
  },
  "ServiceNowUpdateStepNode": {
    "type": "object",
    "required": [
      "identifier",
      "name",
      "spec",
      "type"
    ],
    "properties": {
      "description": {
        "type": "string"
      },
      "enforce": {
        "$ref": "#/definitions/PolicyConfig"
      },
      "failureStrategies": {
        "oneOf": [
          {
            "type": "array",
            "items": {
              "$ref": "#/definitions/FailureStrategyConfig"
            }
          },
          {
            "type": "string",
            "pattern": "^<\\+input>$",
            "minLength": 1
          }
        ]
      },
      "identifier": {
        "type": "string",
        "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
      },
      "name": {
        "type": "string",
        "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
      },
      "strategy": {
        "$ref": "#/definitions/StrategyConfig"
      },
      "timeout": {
        "type": "string",
        "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
      },
      "type": {
        "type": "string",
        "enum": [
          "ServiceNowUpdate"
        ]
      },
      "when": {
        "oneOf": [
          {
            "$ref": "#/definitions/StepWhenCondition"
          },
          {
            "type": "string",
            "pattern": "^<\\+input>$",
            "minLength": 1
          }
        ]
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#",
    "allOf": [
      {
        "if": {
          "properties": {
            "type": {
              "const": "ServiceNowUpdate"
            }
          }
        },
        "then": {
          "properties": {
            "spec": {
              "$ref": "#/definitions/ServiceNowUpdateStepInfo"
            }
          }
        }
      }
    ]
  },
  "ServiceNowImportSetStepNode": {
    "type": "object",
    "required": [
      "identifier",
      "name",
      "spec",
      "type"
    ],
    "properties": {
      "description": {
        "type": "string"
      },
      "enforce": {
        "$ref": "#/definitions/PolicyConfig"
      },
      "failureStrategies": {
        "oneOf": [
          {
            "type": "array",
            "items": {
              "$ref": "#/definitions/FailureStrategyConfig"
            }
          },
          {
            "type": "string",
            "pattern": "^<\\+input>$",
            "minLength": 1
          }
        ]
      },
      "identifier": {
        "type": "string",
        "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
      },
      "name": {
        "type": "string",
        "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
      },
      "strategy": {
        "$ref": "#/definitions/StrategyConfig"
      },
      "timeout": {
        "type": "string",
        "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
      },
      "type": {
        "type": "string",
        "enum": [
          "ServiceNowImportSet"
        ]
      },
      "when": {
        "oneOf": [
          {
            "$ref": "#/definitions/StepWhenCondition"
          },
          {
            "type": "string",
            "pattern": "^<\\+input>$",
            "minLength": 1
          }
        ]
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#",
    "allOf": [
      {
        "if": {
          "properties": {
            "type": {
              "const": "ServiceNowImportSet"
            }
          }
        },
        "then": {
          "properties": {
            "spec": {
              "$ref": "#/definitions/ServiceNowImportSetStepInfo"
            }
          }
        }
      }
    ]
  },
  "PolicyStepNode": {
    "type": "object",
    "required": [
      "identifier",
      "name",
      "spec",
      "type"
    ],
    "properties": {
      "description": {
        "type": "string"
      },
      "enforce": {
        "$ref": "#/definitions/PolicyConfig"
      },
      "failureStrategies": {
        "oneOf": [
          {
            "type": "array",
            "items": {
              "$ref": "#/definitions/FailureStrategyConfig"
            }
          },
          {
            "type": "string",
            "pattern": "^<\\+input>$",
            "minLength": 1
          }
        ]
      },
      "identifier": {
        "type": "string",
        "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
      },
      "name": {
        "type": "string",
        "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
      },
      "strategy": {
        "$ref": "#/definitions/StrategyConfig"
      },
      "timeout": {
        "type": "string",
        "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
      },
      "type": {
        "type": "string",
        "enum": [
          "Policy"
        ]
      },
      "when": {
        "oneOf": [
          {
            "$ref": "#/definitions/StepWhenCondition"
          },
          {
            "type": "string",
            "pattern": "^<\\+input>$",
            "minLength": 1
          }
        ]
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#",
    "allOf": [
      {
        "if": {
          "properties": {
            "type": {
              "const": "Policy"
            }
          }
        },
        "then": {
          "properties": {
            "spec": {
              "$ref": "#/definitions/PolicyStepInfo"
            }
          }
        }
      }
    ]
  },
  "WaitStepNode": {
    "type": "object",
    "required": [
      "identifier",
      "name",
      "spec",
      "type"
    ],
    "properties": {
      "description": {
        "type": "string"
      },
      "enforce": {
        "$ref": "#/definitions/PolicyConfig"
      },
      "failureStrategies": {
        "oneOf": [
          {
            "type": "array",
            "items": {
              "$ref": "#/definitions/FailureStrategyConfig"
            }
          },
          {
            "type": "string",
            "pattern": "^<\\+input>$",
            "minLength": 1
          }
        ]
      },
      "identifier": {
        "type": "string",
        "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
      },
      "name": {
        "type": "string",
        "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
      },
      "strategy": {
        "$ref": "#/definitions/StrategyConfig"
      },
      "type": {
        "type": "string",
        "enum": [
          "Wait"
        ]
      },
      "when": {
        "oneOf": [
          {
            "$ref": "#/definitions/StepWhenCondition"
          },
          {
            "type": "string",
            "pattern": "^<\\+input>$",
            "minLength": 1
          }
        ]
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#",
    "allOf": [
      {
        "if": {
          "properties": {
            "type": {
              "const": "Wait"
            }
          }
        },
        "then": {
          "properties": {
            "spec": {
              "$ref": "#/definitions/WaitStepInfo"
            }
          }
        }
      }
    ]
  },
  "ContainerStepNode": {
    "type": "object",
    "required": [
      "identifier",
      "name",
      "spec",
      "type"
    ],
    "properties": {
      "description": {
        "type": "string"
      },
      "enforce": {
        "$ref": "#/definitions/PolicyConfig"
      },
      "failureStrategies": {
        "oneOf": [
          {
            "type": "array",
            "items": {
              "$ref": "#/definitions/FailureStrategyConfig"
            }
          },
          {
            "type": "string",
            "pattern": "^<\\+input>$",
            "minLength": 1
          }
        ]
      },
      "identifier": {
        "type": "string",
        "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
      },
      "name": {
        "type": "string",
        "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
      },
      "strategy": {
        "$ref": "#/definitions/StrategyConfig"
      },
      "timeout": {
        "type": "string",
        "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
      },
      "type": {
        "type": "string",
        "enum": [
          "Container"
        ]
      },
      "when": {
        "oneOf": [
          {
            "$ref": "#/definitions/StepWhenCondition"
          },
          {
            "type": "string",
            "pattern": "^<\\+input>$",
            "minLength": 1
          }
        ]
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#",
    "allOf": [
      {
        "if": {
          "properties": {
            "type": {
              "const": "Container"
            }
          }
        },
        "then": {
          "properties": {
            "spec": {
              "$ref": "#/definitions/ContainerStepInfo"
            }
          }
        }
      }
    ]
  },
  "CustomApprovalStepNode": {
    "type": "object",
    "required": [
      "identifier",
      "name",
      "spec",
      "type"
    ],
    "properties": {
      "description": {
        "type": "string"
      },
      "enforce": {
        "$ref": "#/definitions/PolicyConfig"
      },
      "failureStrategies": {
        "oneOf": [
          {
            "type": "array",
            "items": {
              "$ref": "#/definitions/FailureStrategyConfig"
            }
          },
          {
            "type": "string",
            "pattern": "^<\\+input>$",
            "minLength": 1
          }
        ]
      },
      "identifier": {
        "type": "string",
        "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
      },
      "name": {
        "type": "string",
        "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
      },
      "strategy": {
        "$ref": "#/definitions/StrategyConfig"
      },
      "timeout": {
        "type": "string",
        "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
      },
      "type": {
        "type": "string",
        "enum": [
          "CustomApproval"
        ]
      },
      "when": {
        "oneOf": [
          {
            "$ref": "#/definitions/StepWhenCondition"
          },
          {
            "type": "string",
            "pattern": "^<\\+input>$",
            "minLength": 1
          }
        ]
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#",
    "allOf": [
      {
        "if": {
          "properties": {
            "type": {
              "const": "CustomApproval"
            }
          }
        },
        "then": {
          "properties": {
            "spec": {
              "$ref": "#/definitions/CustomApprovalStepInfo"
            }
          }
        }
      }
    ]
  },
  "JiraCreateStepNode": {
    "type": "object",
    "required": [
      "identifier",
      "name",
      "spec",
      "type"
    ],
    "properties": {
      "description": {
        "type": "string"
      },
      "enforce": {
        "$ref": "#/definitions/PolicyConfig"
      },
      "failureStrategies": {
        "oneOf": [
          {
            "type": "array",
            "items": {
              "$ref": "#/definitions/FailureStrategyConfig"
            }
          },
          {
            "type": "string",
            "pattern": "^<\\+input>$",
            "minLength": 1
          }
        ]
      },
      "identifier": {
        "type": "string",
        "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
      },
      "name": {
        "type": "string",
        "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
      },
      "strategy": {
        "$ref": "#/definitions/StrategyConfig"
      },
      "timeout": {
        "type": "string",
        "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
      },
      "type": {
        "type": "string",
        "enum": [
          "JiraCreate"
        ]
      },
      "when": {
        "oneOf": [
          {
            "$ref": "#/definitions/StepWhenCondition"
          },
          {
            "type": "string",
            "pattern": "^<\\+input>$",
            "minLength": 1
          }
        ]
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#",
    "allOf": [
      {
        "if": {
          "properties": {
            "type": {
              "const": "JiraCreate"
            }
          }
        },
        "then": {
          "properties": {
            "spec": {
              "$ref": "#/definitions/JiraCreateStepInfo"
            }
          }
        }
      }
    ]
  },
  "JiraUpdateStepNode": {
    "type": "object",
    "required": [
      "identifier",
      "name",
      "spec",
      "type"
    ],
    "properties": {
      "description": {
        "type": "string"
      },
      "enforce": {
        "$ref": "#/definitions/PolicyConfig"
      },
      "failureStrategies": {
        "oneOf": [
          {
            "type": "array",
            "items": {
              "$ref": "#/definitions/FailureStrategyConfig"
            }
          },
          {
            "type": "string",
            "pattern": "^<\\+input>$",
            "minLength": 1
          }
        ]
      },
      "identifier": {
        "type": "string",
        "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
      },
      "name": {
        "type": "string",
        "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
      },
      "strategy": {
        "$ref": "#/definitions/StrategyConfig"
      },
      "timeout": {
        "type": "string",
        "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
      },
      "type": {
        "type": "string",
        "enum": [
          "JiraUpdate"
        ]
      },
      "when": {
        "oneOf": [
          {
            "$ref": "#/definitions/StepWhenCondition"
          },
          {
            "type": "string",
            "pattern": "^<\\+input>$",
            "minLength": 1
          }
        ]
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#",
    "allOf": [
      {
        "if": {
          "properties": {
            "type": {
              "const": "JiraUpdate"
            }
          }
        },
        "then": {
          "properties": {
            "spec": {
              "$ref": "#/definitions/JiraUpdateStepInfo"
            }
          }
        }
      }
    ]
  },
  "JiraApprovalStepNode": {
    "type": "object",
    "required": [
      "identifier",
      "name",
      "spec",
      "type"
    ],
    "properties": {
      "description": {
        "type": "string"
      },
      "enforce": {
        "$ref": "#/definitions/PolicyConfig"
      },
      "failureStrategies": {
        "oneOf": [
          {
            "type": "array",
            "items": {
              "$ref": "#/definitions/FailureStrategyConfig"
            }
          },
          {
            "type": "string",
            "pattern": "^<\\+input>$",
            "minLength": 1
          }
        ]
      },
      "identifier": {
        "type": "string",
        "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
      },
      "name": {
        "type": "string",
        "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
      },
      "strategy": {
        "$ref": "#/definitions/StrategyConfig"
      },
      "timeout": {
        "type": "string",
        "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
      },
      "type": {
        "type": "string",
        "enum": [
          "JiraApproval"
        ]
      },
      "when": {
        "oneOf": [
          {
            "$ref": "#/definitions/StepWhenCondition"
          },
          {
            "type": "string",
            "pattern": "^<\\+input>$",
            "minLength": 1
          }
        ]
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#",
    "allOf": [
      {
        "if": {
          "properties": {
            "type": {
              "const": "JiraApproval"
            }
          }
        },
        "then": {
          "properties": {
            "spec": {
              "$ref": "#/definitions/JiraApprovalStepInfo"
            }
          }
        }
      }
    ]
  },
  "HarnessApprovalStepNode": {
    "type": "object",
    "required": [
      "identifier",
      "name",
      "spec",
      "type"
    ],
    "properties": {
      "description": {
        "type": "string"
      },
      "enforce": {
        "$ref": "#/definitions/PolicyConfig"
      },
      "failureStrategies": {
        "oneOf": [
          {
            "type": "array",
            "items": {
              "$ref": "#/definitions/FailureStrategyConfig"
            }
          },
          {
            "type": "string",
            "pattern": "^<\\+input>$",
            "minLength": 1
          }
        ]
      },
      "identifier": {
        "type": "string",
        "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
      },
      "name": {
        "type": "string",
        "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
      },
      "strategy": {
        "$ref": "#/definitions/StrategyConfig"
      },
      "timeout": {
        "type": "string",
        "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
      },
      "type": {
        "type": "string",
        "enum": [
          "HarnessApproval"
        ]
      },
      "when": {
        "oneOf": [
          {
            "$ref": "#/definitions/StepWhenCondition"
          },
          {
            "type": "string",
            "pattern": "^<\\+input>$",
            "minLength": 1
          }
        ]
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#",
    "allOf": [
      {
        "if": {
          "properties": {
            "type": {
              "const": "HarnessApproval"
            }
          }
        },
        "then": {
          "properties": {
            "spec": {
              "$ref": "#/definitions/HarnessApprovalStepInfo"
            }
          }
        }
      }
    ]
  },
  "FlagConfigurationStepNode": {
    "type": "object",
    "required": [
      "identifier",
      "name",
      "spec",
      "type"
    ],
    "properties": {
      "description": {
        "type": "string"
      },
      "enforce": {
        "$ref": "#/definitions/PolicyConfig"
      },
      "failureStrategies": {
        "oneOf": [
          {
            "type": "array",
            "items": {
              "$ref": "#/definitions/FailureStrategyConfig"
            }
          },
          {
            "type": "string",
            "pattern": "^<\\+input>$",
            "minLength": 1
          }
        ]
      },
      "identifier": {
        "type": "string",
        "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
      },
      "name": {
        "type": "string",
        "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
      },
      "strategy": {
        "$ref": "#/definitions/StrategyConfig"
      },
      "timeout": {
        "type": "string",
        "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
      },
      "type": {
        "type": "string",
        "enum": [
          "FlagConfiguration"
        ]
      },
      "when": {
        "oneOf": [
          {
            "$ref": "#/definitions/StepWhenCondition"
          },
          {
            "type": "string",
            "pattern": "^<\\+input>$",
            "minLength": 1
          }
        ]
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#",
    "allOf": [
      {
        "if": {
          "properties": {
            "type": {
              "const": "FlagConfiguration"
            }
          }
        },
        "then": {
          "properties": {
            "spec": {
              "$ref": "#/definitions/FlagConfigurationStepInfo"
            }
          }
        }
      }
    ]
  },
  "ApprovalStageNode": {
    "type": "object",
    "required": [
      "identifier",
      "name",
      "type"
    ],
    "properties": {
      "delegateSelectors": {
        "oneOf": [
          {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "type": "string",
            "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
            "minLength": 1
          }
        ]
      },
      "description": {
        "type": "string"
      },
      "failureStrategies": {
        "oneOf": [
          {
            "type": "array",
            "items": {
              "$ref": "#/definitions/FailureStrategyConfig"
            }
          },
          {
            "type": "string",
            "pattern": "^<\\+input>$",
            "minLength": 1
          }
        ]
      },
      "identifier": {
        "type": "string",
        "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
      },
      "name": {
        "type": "string",
        "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
      },
      "strategy": {
        "$ref": "#/definitions/StrategyConfig"
      },
      "tags": {
        "type": "object",
        "additionalProperties": {
          "type": "string"
        }
      },
      "type": {
        "type": "string",
        "enum": [
          "Approval"
        ]
      },
      "variables": {
        "type": "array",
        "items": {
          "oneOf": [
            {
              "$ref": "#/definitions/NumberNGVariable"
            },
            {
              "$ref": "#/definitions/SecretNGVariable"
            },
            {
              "$ref": "#/definitions/StringNGVariable"
            }
          ]
        }
      },
      "when": {
        "oneOf": [
          {
            "$ref": "#/definitions/StageWhenCondition"
          },
          {
            "type": "string",
            "pattern": "^<\\+input>$",
            "minLength": 1
          }
        ]
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#",
    "allOf": [
      {
        "if": {
          "properties": {
            "type": {
              "const": "Approval"
            }
          }
        },
        "then": {
          "properties": {
            "spec": {
              "$ref": "#/definitions/ApprovalStageConfig"
            }
          }
        }
      }
    ]
  },
  "PipelineStageNode": {
    "type": "object",
    "required": [
      "identifier",
      "name",
      "type"
    ],
    "properties": {
      "delegateSelectors": {
        "oneOf": [
          {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "type": "string",
            "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
            "minLength": 1
          }
        ]
      },
      "description": {
        "type": "string"
      },
      "failureStrategies": {
        "oneOf": [
          {
            "type": "array",
            "items": {
              "$ref": "#/definitions/FailureStrategyConfig"
            }
          },
          {
            "type": "string",
            "pattern": "^<\\+input>$",
            "minLength": 1
          }
        ]
      },
      "identifier": {
        "type": "string",
        "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
      },
      "name": {
        "type": "string",
        "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
      },
      "strategy": {
        "$ref": "#/definitions/StrategyConfig"
      },
      "tags": {
        "type": "object",
        "additionalProperties": {
          "type": "string"
        }
      },
      "type": {
        "type": "string",
        "enum": [
          "Pipeline"
        ]
      },
      "variables": {
        "type": "array",
        "items": {
          "oneOf": [
            {
              "$ref": "#/definitions/NumberNGVariable"
            },
            {
              "$ref": "#/definitions/SecretNGVariable"
            },
            {
              "$ref": "#/definitions/StringNGVariable"
            }
          ]
        }
      },
      "when": {
        "oneOf": [
          {
            "$ref": "#/definitions/StageWhenCondition"
          },
          {
            "type": "string",
            "pattern": "^<\\+input>$",
            "minLength": 1
          }
        ]
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#",
    "allOf": [
      {
        "if": {
          "properties": {
            "type": {
              "const": "Pipeline"
            }
          }
        },
        "then": {
          "properties": {
            "spec": {
              "$ref": "#/definitions/PipelineStageConfig"
            }
          }
        }
      }
    ]
  },
  "CustomStageNode": {
    "type": "object",
    "required": [
      "identifier",
      "name",
      "type"
    ],
    "properties": {
      "delegateSelectors": {
        "oneOf": [
          {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "type": "string",
            "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
            "minLength": 1
          }
        ]
      },
      "description": {
        "type": "string"
      },
      "failureStrategies": {
        "oneOf": [
          {
            "type": "array",
            "items": {
              "$ref": "#/definitions/FailureStrategyConfig"
            }
          },
          {
            "type": "string",
            "pattern": "^<\\+input>$",
            "minLength": 1
          }
        ]
      },
      "identifier": {
        "type": "string",
        "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
      },
      "name": {
        "type": "string",
        "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
      },
      "strategy": {
        "$ref": "#/definitions/StrategyConfig"
      },
      "tags": {
        "type": "object",
        "additionalProperties": {
          "type": "string"
        }
      },
      "type": {
        "type": "string",
        "enum": [
          "Custom"
        ]
      },
      "variables": {
        "type": "array",
        "items": {
          "oneOf": [
            {
              "$ref": "#/definitions/NumberNGVariable"
            },
            {
              "$ref": "#/definitions/SecretNGVariable"
            },
            {
              "$ref": "#/definitions/StringNGVariable"
            }
          ]
        }
      },
      "when": {
        "oneOf": [
          {
            "$ref": "#/definitions/StageWhenCondition"
          },
          {
            "type": "string",
            "pattern": "^<\\+input>$",
            "minLength": 1
          }
        ]
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#",
    "allOf": [
      {
        "if": {
          "properties": {
            "type": {
              "const": "Custom"
            }
          }
        },
        "then": {
          "properties": {
            "spec": {
              "$ref": "#/definitions/CustomStageConfig"
            }
          }
        }
      }
    ]
  },
  "FeatureFlagStageNode": {
    "type": "object",
    "required": [
      "identifier",
      "name",
      "type"
    ],
    "properties": {
      "delegateSelectors": {
        "oneOf": [
          {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "type": "string",
            "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
            "minLength": 1
          }
        ]
      },
      "description": {
        "type": "string"
      },
      "failureStrategies": {
        "oneOf": [
          {
            "type": "array",
            "items": {
              "$ref": "#/definitions/FailureStrategyConfig"
            }
          },
          {
            "type": "string",
            "pattern": "^<\\+input>$",
            "minLength": 1
          }
        ]
      },
      "identifier": {
        "type": "string",
        "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
      },
      "name": {
        "type": "string",
        "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
      },
      "strategy": {
        "$ref": "#/definitions/StrategyConfig"
      },
      "tags": {
        "type": "object",
        "additionalProperties": {
          "type": "string"
        }
      },
      "type": {
        "type": "string",
        "enum": [
          "FeatureFlag"
        ]
      },
      "variables": {
        "type": "array",
        "items": {
          "oneOf": [
            {
              "$ref": "#/definitions/NumberNGVariable"
            },
            {
              "$ref": "#/definitions/SecretNGVariable"
            },
            {
              "$ref": "#/definitions/StringNGVariable"
            }
          ]
        }
      },
      "when": {
        "oneOf": [
          {
            "$ref": "#/definitions/StageWhenCondition"
          },
          {
            "type": "string",
            "pattern": "^<\\+input>$",
            "minLength": 1
          }
        ]
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#",
    "allOf": [
      {
        "if": {
          "properties": {
            "type": {
              "const": "FeatureFlag"
            }
          }
        },
        "then": {
          "properties": {
            "spec": {
              "$ref": "#/definitions/FeatureFlagStageConfig"
            }
          }
        }
      }
    ]
  },
  "TemplateStageNode": {
    "type": "object",
    "required": [
      "identifier",
      "name",
      "template"
    ],
    "properties": {
      "description": {
        "type": "string"
      },
      "identifier": {
        "type": "string",
        "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
      },
      "name": {
        "type": "string",
        "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
      },
      "template": {
        "$ref": "#/definitions/TemplateLinkConfig"
      }
    },
    "$schema": "http://json-schema.org/draft-07/schema#"
  },
  "ci": {
    "ACRStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/CIStepInfo"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "repository",
            "tags"
          ],
          "properties": {
            "baseImageConnectorRefs": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "buildArgs": {
              "oneOf": [
                {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "connectorRef": {
              "type": "string"
            },
            "context": {
              "type": "string"
            },
            "dockerfile": {
              "type": "string"
            },
            "labels": {
              "oneOf": [
                {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "optimize": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            },
            "remoteCacheImage": {
              "type": "string"
            },
            "repository": {
              "type": "string"
            },
            "resources": {
              "$ref": "#/definitions/ci/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "subscriptionId": {
              "type": "string"
            },
            "tags": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "target": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "connectorRef",
        "repository",
        "tags"
      ],
      "properties": {
        "baseImageConnectorRefs": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ]
        },
        "buildArgs": {
          "oneOf": [
            {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ]
        },
        "connectorRef": {
          "type": "string"
        },
        "context": {
          "type": "string"
        },
        "dockerfile": {
          "type": "string"
        },
        "labels": {
          "oneOf": [
            {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ]
        },
        "optimize": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ]
        },
        "remoteCacheImage": {
          "type": "string"
        },
        "repository": {
          "type": "string"
        },
        "resources": {
          "$ref": "#/definitions/ci/ContainerResource"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "subscriptionId": {
          "type": "string"
        },
        "tags": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ]
        },
        "target": {
          "type": "string"
        }
      }
    },
    "AbortFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "Abort"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ActionStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/CIStepInfo"
        },
        {
          "type": "object",
          "required": [
            "uses"
          ],
          "properties": {
            "env": {
              "oneOf": [
                {
                  "$ref": "#/definitions/ci/ParameterFieldMapStringString"
                },
                {
                  "type": "string"
                }
              ]
            },
            "uses": {
              "type": "string"
            },
            "with": {
              "oneOf": [
                {
                  "$ref": "#/definitions/ci/ParameterFieldMapStringString"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "uses"
      ],
      "properties": {
        "env": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/ParameterFieldMapStringString"
            },
            {
              "type": "string"
            }
          ]
        },
        "uses": {
          "type": "string"
        },
        "with": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/ParameterFieldMapStringString"
            },
            {
              "type": "string"
            }
          ]
        }
      }
    },
    "ActionStepInfoV1": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "uses"
          ],
          "properties": {
            "envs": {
              "oneOf": [
                {
                  "$ref": "#/definitions/ci/ParameterFieldMapStringString"
                },
                {
                  "type": "string"
                }
              ]
            },
            "outputs": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "resources": {
              "$ref": "#/definitions/ci/ContainerResource"
            },
            "uses": {
              "type": "string"
            },
            "with": {
              "oneOf": [
                {
                  "$ref": "#/definitions/ci/ParameterFieldMapStringString"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AquaTrivyStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "config",
            "mode",
            "target"
          ],
          "properties": {
            "advanced": {
              "$ref": "#/definitions/ci/STOYamlAdvancedSettings"
            },
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/ci/ParameterFieldListString"
            },
            "config": {
              "type": "string",
              "enum": [
                "default"
              ]
            },
            "image": {
              "$ref": "#/definitions/ci/STOYamlImage"
            },
            "imagePullPolicy": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Always",
                    "Never",
                    "IfNotPresent"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "ingestion": {
              "$ref": "#/definitions/ci/STOYamlIngestion"
            },
            "mode": {
              "type": "string",
              "enum": [
                "ingestion",
                "orchestration",
                "extraction"
              ]
            },
            "outputVariables": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ci/OutputNGVariable"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "privileged": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "resources": {
              "$ref": "#/definitions/ci/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "settings": {
              "oneOf": [
                {
                  "$ref": "#/definitions/ci/ParameterFieldMapStringJsonNode"
                },
                {
                  "type": "string"
                }
              ]
            },
            "target": {
              "$ref": "#/definitions/ci/STOYamlTarget"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "config",
        "mode",
        "target"
      ],
      "properties": {
        "advanced": {
          "$ref": "#/definitions/ci/STOYamlAdvancedSettings"
        },
        "baseImageConnectorRefs": {
          "$ref": "#/definitions/ci/ParameterFieldListString"
        },
        "config": {
          "type": "string",
          "enum": [
            "default"
          ]
        },
        "image": {
          "$ref": "#/definitions/ci/STOYamlImage"
        },
        "imagePullPolicy": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Always",
                "Never",
                "IfNotPresent"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "ingestion": {
          "$ref": "#/definitions/ci/STOYamlIngestion"
        },
        "mode": {
          "type": "string",
          "enum": [
            "ingestion",
            "orchestration",
            "extraction"
          ]
        },
        "outputVariables": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/OutputNGVariable"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "privileged": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "resources": {
          "$ref": "#/definitions/ci/ContainerResource"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "settings": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/ParameterFieldMapStringJsonNode"
            },
            {
              "type": "string"
            }
          ]
        },
        "target": {
          "$ref": "#/definitions/ci/STOYamlTarget"
        }
      }
    },
    "Attestation": {
      "type": "object",
      "required": [
        "privateKey"
      ],
      "properties": {
        "privateKey": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AwsEcrStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "config",
            "mode",
            "target"
          ],
          "properties": {
            "advanced": {
              "$ref": "#/definitions/ci/STOYamlAdvancedSettings"
            },
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/ci/ParameterFieldListString"
            },
            "config": {
              "type": "string",
              "enum": [
                "default"
              ]
            },
            "imagePullPolicy": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Always",
                    "Never",
                    "IfNotPresent"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "ingestion": {
              "$ref": "#/definitions/ci/STOYamlIngestion"
            },
            "mode": {
              "type": "string",
              "enum": [
                "ingestion",
                "orchestration",
                "extraction"
              ]
            },
            "outputVariables": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ci/OutputNGVariable"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "privileged": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "resources": {
              "$ref": "#/definitions/ci/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "settings": {
              "oneOf": [
                {
                  "$ref": "#/definitions/ci/ParameterFieldMapStringJsonNode"
                },
                {
                  "type": "string"
                }
              ]
            },
            "target": {
              "$ref": "#/definitions/ci/STOYamlTarget"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "config",
        "mode",
        "target"
      ],
      "properties": {
        "advanced": {
          "$ref": "#/definitions/ci/STOYamlAdvancedSettings"
        },
        "baseImageConnectorRefs": {
          "$ref": "#/definitions/ci/ParameterFieldListString"
        },
        "config": {
          "type": "string",
          "enum": [
            "default"
          ]
        },
        "imagePullPolicy": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Always",
                "Never",
                "IfNotPresent"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "ingestion": {
          "$ref": "#/definitions/ci/STOYamlIngestion"
        },
        "mode": {
          "type": "string",
          "enum": [
            "ingestion",
            "orchestration",
            "extraction"
          ]
        },
        "outputVariables": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/OutputNGVariable"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "privileged": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "resources": {
          "$ref": "#/definitions/ci/ContainerResource"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "settings": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/ParameterFieldMapStringJsonNode"
            },
            {
              "type": "string"
            }
          ]
        },
        "target": {
          "$ref": "#/definitions/ci/STOYamlTarget"
        }
      }
    },
    "BackgroundStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/CIStepInfo"
        },
        {
          "type": "object",
          "properties": {
            "command": {
              "type": "string"
            },
            "connectorRef": {
              "type": "string"
            },
            "entrypoint": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "envVariables": {
              "oneOf": [
                {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "image": {
              "type": "string"
            },
            "imagePullPolicy": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Always",
                    "Never",
                    "IfNotPresent"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "portBindings": {
              "oneOf": [
                {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "privileged": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "reports": {
              "oneOf": [
                {
                  "$ref": "#/definitions/ci/UnitTestReport"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "resources": {
              "$ref": "#/definitions/ci/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "shell": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Sh",
                    "Bash",
                    "Powershell",
                    "Pwsh",
                    "Python"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "properties": {
        "command": {
          "type": "string"
        },
        "connectorRef": {
          "type": "string"
        },
        "entrypoint": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ]
        },
        "envVariables": {
          "oneOf": [
            {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ]
        },
        "image": {
          "type": "string"
        },
        "imagePullPolicy": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Always",
                "Never",
                "IfNotPresent"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "portBindings": {
          "oneOf": [
            {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ]
        },
        "privileged": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "reports": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/UnitTestReport"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "resources": {
          "$ref": "#/definitions/ci/ContainerResource"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "shell": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Sh",
                "Bash",
                "Powershell",
                "Pwsh",
                "Python"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      }
    },
    "BackgroundStepInfoV1": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "run"
          ],
          "properties": {
            "args": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "entrypoint": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "string"
                }
              ]
            },
            "entrypointList": {
              "$ref": "#/definitions/ci/ParameterFieldListString"
            },
            "envs": {
              "oneOf": [
                {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "image": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "network": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "string"
                }
              ]
            },
            "ports": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "privileged": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "pull": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "always",
                    "never",
                    "if-not-exists"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "resources": {
              "$ref": "#/definitions/ci/ContainerResource"
            },
            "run": {
              "type": "string"
            },
            "shell": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "sh",
                    "bash",
                    "powershell",
                    "pwsh",
                    "python"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "user": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "BanditStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "config",
            "mode",
            "target"
          ],
          "properties": {
            "advanced": {
              "$ref": "#/definitions/ci/STOYamlAdvancedSettings"
            },
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/ci/ParameterFieldListString"
            },
            "config": {
              "type": "string",
              "enum": [
                "default"
              ]
            },
            "imagePullPolicy": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Always",
                    "Never",
                    "IfNotPresent"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "ingestion": {
              "$ref": "#/definitions/ci/STOYamlIngestion"
            },
            "mode": {
              "type": "string",
              "enum": [
                "ingestion",
                "orchestration",
                "extraction"
              ]
            },
            "outputVariables": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ci/OutputNGVariable"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "privileged": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "resources": {
              "$ref": "#/definitions/ci/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "settings": {
              "oneOf": [
                {
                  "$ref": "#/definitions/ci/ParameterFieldMapStringJsonNode"
                },
                {
                  "type": "string"
                }
              ]
            },
            "target": {
              "$ref": "#/definitions/ci/STOYamlTarget"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "config",
        "mode",
        "target"
      ],
      "properties": {
        "advanced": {
          "$ref": "#/definitions/ci/STOYamlAdvancedSettings"
        },
        "baseImageConnectorRefs": {
          "$ref": "#/definitions/ci/ParameterFieldListString"
        },
        "config": {
          "type": "string",
          "enum": [
            "default"
          ]
        },
        "imagePullPolicy": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Always",
                "Never",
                "IfNotPresent"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "ingestion": {
          "$ref": "#/definitions/ci/STOYamlIngestion"
        },
        "mode": {
          "type": "string",
          "enum": [
            "ingestion",
            "orchestration",
            "extraction"
          ]
        },
        "outputVariables": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/OutputNGVariable"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "privileged": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "resources": {
          "$ref": "#/definitions/ci/ContainerResource"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "settings": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/ParameterFieldMapStringJsonNode"
            },
            {
              "type": "string"
            }
          ]
        },
        "target": {
          "$ref": "#/definitions/ci/STOYamlTarget"
        }
      }
    },
    "BitriseStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/CIStepInfo"
        },
        {
          "type": "object",
          "required": [
            "uses"
          ],
          "properties": {
            "env": {
              "oneOf": [
                {
                  "$ref": "#/definitions/ci/ParameterFieldMapStringString"
                },
                {
                  "type": "string"
                }
              ]
            },
            "uses": {
              "type": "string"
            },
            "with": {
              "oneOf": [
                {
                  "$ref": "#/definitions/ci/ParameterFieldMapStringString"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "uses"
      ],
      "properties": {
        "env": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/ParameterFieldMapStringString"
            },
            {
              "type": "string"
            }
          ]
        },
        "uses": {
          "type": "string"
        },
        "with": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/ParameterFieldMapStringString"
            },
            {
              "type": "string"
            }
          ]
        }
      }
    },
    "BitriseStepInfoV1": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "uses"
          ],
          "properties": {
            "envs": {
              "oneOf": [
                {
                  "$ref": "#/definitions/ci/ParameterFieldMapStringString"
                },
                {
                  "type": "string"
                }
              ]
            },
            "outputs": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "resources": {
              "$ref": "#/definitions/ci/ContainerResource"
            },
            "uses": {
              "type": "string"
            },
            "with": {
              "oneOf": [
                {
                  "$ref": "#/definitions/ci/ParameterFieldMapStringString"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "BlackDuckStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "config",
            "mode",
            "target"
          ],
          "properties": {
            "advanced": {
              "$ref": "#/definitions/ci/STOYamlAdvancedSettings"
            },
            "auth": {
              "$ref": "#/definitions/ci/STOYamlAuth"
            },
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/ci/ParameterFieldListString"
            },
            "config": {
              "type": "string",
              "enum": [
                "default"
              ]
            },
            "image": {
              "$ref": "#/definitions/ci/STOYamlImage"
            },
            "imagePullPolicy": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Always",
                    "Never",
                    "IfNotPresent"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "ingestion": {
              "$ref": "#/definitions/ci/STOYamlIngestion"
            },
            "mode": {
              "type": "string",
              "enum": [
                "ingestion",
                "orchestration",
                "extraction"
              ]
            },
            "outputVariables": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ci/OutputNGVariable"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "privileged": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "resources": {
              "$ref": "#/definitions/ci/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "settings": {
              "oneOf": [
                {
                  "$ref": "#/definitions/ci/ParameterFieldMapStringJsonNode"
                },
                {
                  "type": "string"
                }
              ]
            },
            "target": {
              "$ref": "#/definitions/ci/STOYamlTarget"
            },
            "tool": {
              "$ref": "#/definitions/ci/STOYamlBlackduckToolData"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "config",
        "mode",
        "target"
      ],
      "properties": {
        "advanced": {
          "$ref": "#/definitions/ci/STOYamlAdvancedSettings"
        },
        "auth": {
          "$ref": "#/definitions/ci/STOYamlAuth"
        },
        "baseImageConnectorRefs": {
          "$ref": "#/definitions/ci/ParameterFieldListString"
        },
        "config": {
          "type": "string",
          "enum": [
            "default"
          ]
        },
        "image": {
          "$ref": "#/definitions/ci/STOYamlImage"
        },
        "imagePullPolicy": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Always",
                "Never",
                "IfNotPresent"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "ingestion": {
          "$ref": "#/definitions/ci/STOYamlIngestion"
        },
        "mode": {
          "type": "string",
          "enum": [
            "ingestion",
            "orchestration",
            "extraction"
          ]
        },
        "outputVariables": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/OutputNGVariable"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "privileged": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "resources": {
          "$ref": "#/definitions/ci/ContainerResource"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "settings": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/ParameterFieldMapStringJsonNode"
            },
            {
              "type": "string"
            }
          ]
        },
        "target": {
          "$ref": "#/definitions/ci/STOYamlTarget"
        },
        "tool": {
          "$ref": "#/definitions/ci/STOYamlBlackduckToolData"
        }
      }
    },
    "BrakemanStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "config",
            "mode",
            "target"
          ],
          "properties": {
            "advanced": {
              "$ref": "#/definitions/ci/STOYamlAdvancedSettings"
            },
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/ci/ParameterFieldListString"
            },
            "config": {
              "type": "string",
              "enum": [
                "default"
              ]
            },
            "imagePullPolicy": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Always",
                    "Never",
                    "IfNotPresent"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "ingestion": {
              "$ref": "#/definitions/ci/STOYamlIngestion"
            },
            "mode": {
              "type": "string",
              "enum": [
                "ingestion",
                "orchestration",
                "extraction"
              ]
            },
            "outputVariables": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ci/OutputNGVariable"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "privileged": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "resources": {
              "$ref": "#/definitions/ci/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "settings": {
              "oneOf": [
                {
                  "$ref": "#/definitions/ci/ParameterFieldMapStringJsonNode"
                },
                {
                  "type": "string"
                }
              ]
            },
            "target": {
              "$ref": "#/definitions/ci/STOYamlTarget"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "config",
        "mode",
        "target"
      ],
      "properties": {
        "advanced": {
          "$ref": "#/definitions/ci/STOYamlAdvancedSettings"
        },
        "baseImageConnectorRefs": {
          "$ref": "#/definitions/ci/ParameterFieldListString"
        },
        "config": {
          "type": "string",
          "enum": [
            "default"
          ]
        },
        "imagePullPolicy": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Always",
                "Never",
                "IfNotPresent"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "ingestion": {
          "$ref": "#/definitions/ci/STOYamlIngestion"
        },
        "mode": {
          "type": "string",
          "enum": [
            "ingestion",
            "orchestration",
            "extraction"
          ]
        },
        "outputVariables": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/OutputNGVariable"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "privileged": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "resources": {
          "$ref": "#/definitions/ci/ContainerResource"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "settings": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/ParameterFieldMapStringJsonNode"
            },
            {
              "type": "string"
            }
          ]
        },
        "target": {
          "$ref": "#/definitions/ci/STOYamlTarget"
        }
      }
    },
    "BranchBuildSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/BuildSpec"
        },
        {
          "type": "object",
          "required": [
            "branch"
          ],
          "properties": {
            "branch": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "BranchWebhookEvent": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/WebhookEvent"
        },
        {
          "type": "object",
          "properties": {
            "baseAttributes": {
              "$ref": "#/definitions/ci/WebhookBaseAttributes"
            },
            "branchName": {
              "type": "string"
            },
            "commitDetailsList": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/CommitDetails"
              }
            },
            "link": {
              "type": "string"
            },
            "repository": {
              "$ref": "#/definitions/ci/Repository"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "Build": {
      "type": "object",
      "required": [
        "spec",
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "branch",
            "tag",
            "PR"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "PR"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/PRBuildSpec"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "branch"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/BranchBuildSpec"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "tag"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/TagBuildSpec"
              }
            }
          }
        }
      ]
    },
    "BuildJobEnvInfo": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "K8",
            "VM",
            "DOCKER"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "BuildSpec": {
      "type": "object",
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "BurpStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "config",
            "mode",
            "target"
          ],
          "properties": {
            "advanced": {
              "$ref": "#/definitions/ci/STOYamlAdvancedSettings"
            },
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/ci/ParameterFieldListString"
            },
            "config": {
              "type": "string",
              "enum": [
                "default"
              ]
            },
            "imagePullPolicy": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Always",
                    "Never",
                    "IfNotPresent"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "ingestion": {
              "$ref": "#/definitions/ci/STOYamlIngestion"
            },
            "instance": {
              "$ref": "#/definitions/ci/STOYamlInstance"
            },
            "mode": {
              "type": "string",
              "enum": [
                "ingestion",
                "orchestration",
                "extraction"
              ]
            },
            "outputVariables": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ci/OutputNGVariable"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "privileged": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "resources": {
              "$ref": "#/definitions/ci/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "settings": {
              "oneOf": [
                {
                  "$ref": "#/definitions/ci/ParameterFieldMapStringJsonNode"
                },
                {
                  "type": "string"
                }
              ]
            },
            "target": {
              "$ref": "#/definitions/ci/STOYamlTarget"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "config",
        "mode",
        "target"
      ],
      "properties": {
        "advanced": {
          "$ref": "#/definitions/ci/STOYamlAdvancedSettings"
        },
        "baseImageConnectorRefs": {
          "$ref": "#/definitions/ci/ParameterFieldListString"
        },
        "config": {
          "type": "string",
          "enum": [
            "default"
          ]
        },
        "imagePullPolicy": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Always",
                "Never",
                "IfNotPresent"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "ingestion": {
          "$ref": "#/definitions/ci/STOYamlIngestion"
        },
        "instance": {
          "$ref": "#/definitions/ci/STOYamlInstance"
        },
        "mode": {
          "type": "string",
          "enum": [
            "ingestion",
            "orchestration",
            "extraction"
          ]
        },
        "outputVariables": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/OutputNGVariable"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "privileged": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "resources": {
          "$ref": "#/definitions/ci/ContainerResource"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "settings": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/ParameterFieldMapStringJsonNode"
            },
            {
              "type": "string"
            }
          ]
        },
        "target": {
          "$ref": "#/definitions/ci/STOYamlTarget"
        }
      }
    },
    "CIExecutionArgs": {
      "type": "object",
      "properties": {
        "executionSource": {
          "$ref": "#/definitions/ci/ExecutionSource"
        },
        "runSequence": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CIServiceInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/DependencySpecType"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "image"
          ],
          "properties": {
            "args": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "connectorRef": {
              "type": "string"
            },
            "entrypoint": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "envVariables": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "image": {
              "type": "string"
            },
            "imagePullPolicy": {
              "type": "string",
              "enum": [
                "Always",
                "Never",
                "IfNotPresent"
              ]
            },
            "portBindings": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "privileged": {
              "type": "boolean"
            },
            "resources": {
              "$ref": "#/definitions/ci/ContainerResource"
            },
            "runAsUser": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CIVolume": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "EmptyDir",
            "PersistentVolumeClaim",
            "HostPath"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "Caching": {
      "type": "object",
      "properties": {
        "enabled": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "key": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "paths": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "Capabilities": {
      "type": "object",
      "properties": {
        "add": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "drop": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CheckmarxStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "config",
            "mode",
            "target"
          ],
          "properties": {
            "advanced": {
              "$ref": "#/definitions/ci/STOYamlAdvancedSettings"
            },
            "auth": {
              "$ref": "#/definitions/ci/STOYamlAuth"
            },
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/ci/ParameterFieldListString"
            },
            "config": {
              "type": "string",
              "enum": [
                "default"
              ]
            },
            "image": {
              "$ref": "#/definitions/ci/STOYamlImage"
            },
            "imagePullPolicy": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Always",
                    "Never",
                    "IfNotPresent"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "ingestion": {
              "$ref": "#/definitions/ci/STOYamlIngestion"
            },
            "mode": {
              "type": "string",
              "enum": [
                "ingestion",
                "orchestration",
                "extraction"
              ]
            },
            "outputVariables": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ci/OutputNGVariable"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "privileged": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "resources": {
              "$ref": "#/definitions/ci/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "settings": {
              "oneOf": [
                {
                  "$ref": "#/definitions/ci/ParameterFieldMapStringJsonNode"
                },
                {
                  "type": "string"
                }
              ]
            },
            "target": {
              "$ref": "#/definitions/ci/STOYamlTarget"
            },
            "tool": {
              "$ref": "#/definitions/ci/STOYamlCheckmarxToolData"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "config",
        "mode",
        "target"
      ],
      "properties": {
        "advanced": {
          "$ref": "#/definitions/ci/STOYamlAdvancedSettings"
        },
        "auth": {
          "$ref": "#/definitions/ci/STOYamlAuth"
        },
        "baseImageConnectorRefs": {
          "$ref": "#/definitions/ci/ParameterFieldListString"
        },
        "config": {
          "type": "string",
          "enum": [
            "default"
          ]
        },
        "image": {
          "$ref": "#/definitions/ci/STOYamlImage"
        },
        "imagePullPolicy": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Always",
                "Never",
                "IfNotPresent"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "ingestion": {
          "$ref": "#/definitions/ci/STOYamlIngestion"
        },
        "mode": {
          "type": "string",
          "enum": [
            "ingestion",
            "orchestration",
            "extraction"
          ]
        },
        "outputVariables": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/OutputNGVariable"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "privileged": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "resources": {
          "$ref": "#/definitions/ci/ContainerResource"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "settings": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/ParameterFieldMapStringJsonNode"
            },
            {
              "type": "string"
            }
          ]
        },
        "target": {
          "$ref": "#/definitions/ci/STOYamlTarget"
        },
        "tool": {
          "$ref": "#/definitions/ci/STOYamlCheckmarxToolData"
        }
      }
    },
    "ClairStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "config",
            "mode",
            "target"
          ],
          "properties": {
            "advanced": {
              "$ref": "#/definitions/ci/STOYamlAdvancedSettings"
            },
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/ci/ParameterFieldListString"
            },
            "config": {
              "type": "string",
              "enum": [
                "default"
              ]
            },
            "imagePullPolicy": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Always",
                    "Never",
                    "IfNotPresent"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "ingestion": {
              "$ref": "#/definitions/ci/STOYamlIngestion"
            },
            "mode": {
              "type": "string",
              "enum": [
                "ingestion",
                "orchestration",
                "extraction"
              ]
            },
            "outputVariables": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ci/OutputNGVariable"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "privileged": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "resources": {
              "$ref": "#/definitions/ci/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "settings": {
              "oneOf": [
                {
                  "$ref": "#/definitions/ci/ParameterFieldMapStringJsonNode"
                },
                {
                  "type": "string"
                }
              ]
            },
            "target": {
              "$ref": "#/definitions/ci/STOYamlTarget"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "config",
        "mode",
        "target"
      ],
      "properties": {
        "advanced": {
          "$ref": "#/definitions/ci/STOYamlAdvancedSettings"
        },
        "baseImageConnectorRefs": {
          "$ref": "#/definitions/ci/ParameterFieldListString"
        },
        "config": {
          "type": "string",
          "enum": [
            "default"
          ]
        },
        "imagePullPolicy": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Always",
                "Never",
                "IfNotPresent"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "ingestion": {
          "$ref": "#/definitions/ci/STOYamlIngestion"
        },
        "mode": {
          "type": "string",
          "enum": [
            "ingestion",
            "orchestration",
            "extraction"
          ]
        },
        "outputVariables": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/OutputNGVariable"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "privileged": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "resources": {
          "$ref": "#/definitions/ci/ContainerResource"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "settings": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/ParameterFieldMapStringJsonNode"
            },
            {
              "type": "string"
            }
          ]
        },
        "target": {
          "$ref": "#/definitions/ci/STOYamlTarget"
        }
      }
    },
    "CleanupStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "infrastructure",
            "podName"
          ],
          "properties": {
            "infrastructure": {
              "$ref": "#/definitions/ci/Infrastructure"
            },
            "podName": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CloudRuntime": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/Runtime"
        },
        {
          "type": "object",
          "required": [
            "spec",
            "type"
          ],
          "properties": {
            "spec": {
              "$ref": "#/definitions/ci/CloudRuntimeSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "Cloud"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CloudRuntimeSpec": {
      "type": "object",
      "properties": {
        "size": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CodeBase": {
      "type": "object",
      "required": [
        "build",
        "connectorRef"
      ],
      "properties": {
        "build": {
          "$ref": "#/definitions/ci/Build"
        },
        "connectorRef": {
          "type": "string"
        },
        "depth": {
          "type": "integer",
          "format": "int32"
        },
        "prCloneStrategy": {
          "type": "string",
          "enum": [
            "MergeCommit",
            "SourceBranch"
          ]
        },
        "repoName": {
          "type": "string"
        },
        "resources": {
          "$ref": "#/definitions/ci/ContainerResource"
        },
        "sslVerify": {
          "type": "boolean"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CommitDetails": {
      "type": "object",
      "properties": {
        "commitId": {
          "type": "string"
        },
        "link": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "ownerEmail": {
          "type": "string"
        },
        "ownerId": {
          "type": "string"
        },
        "ownerName": {
          "type": "string"
        },
        "timeStamp": {
          "type": "integer",
          "format": "int64"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ConnectorConversionInfo": {
      "type": "object",
      "properties": {
        "connectorRef": {
          "type": "string"
        },
        "envToSecretsMap": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ContainerDefinitionInfo": {
      "type": "object",
      "properties": {
        "args": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "commands": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "containerImageDetails": {
          "$ref": "#/definitions/ci/ContainerImageDetails"
        },
        "containerResourceParams": {
          "$ref": "#/definitions/ci/ContainerResourceParams"
        },
        "containerType": {
          "type": "string",
          "enum": [
            "STEP_EXECUTOR",
            "ADD_ON",
            "RUN",
            "PLUGIN",
            "SERVICE",
            "LITE_ENGINE",
            "TEST_INTELLIGENCE",
            "BACKGROUND"
          ]
        },
        "envVars": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "envVarsWithSecretRef": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "harnessManagedImage": {
          "type": "boolean"
        },
        "imagePullPolicy": {
          "type": "string"
        },
        "mainLiteEngine": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "ports": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "privileged": {
          "type": "boolean"
        },
        "runAsUser": {
          "type": "integer",
          "format": "int32"
        },
        "secretVariables": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ci/SecretNGVariable"
          }
        },
        "stepIdentifier": {
          "type": "string"
        },
        "stepName": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ContainerImageDetails": {
      "type": "object",
      "properties": {
        "connectorIdentifier": {
          "type": "string"
        },
        "imageDetails": {
          "$ref": "#/definitions/ci/ImageDetails"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ContainerResource": {
      "type": "object",
      "required": [
        "limits"
      ],
      "properties": {
        "limits": {
          "$ref": "#/definitions/ci/Limits"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ContainerResourceParams": {
      "type": "object",
      "properties": {
        "resourceLimitMemoryMiB": {
          "type": "integer",
          "format": "int32"
        },
        "resourceLimitMilliCpu": {
          "type": "integer",
          "format": "int32"
        },
        "resourceRequestMemoryMiB": {
          "type": "integer",
          "format": "int32"
        },
        "resourceRequestMilliCpu": {
          "type": "integer",
          "format": "int32"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CustomExecutionSource": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/ExecutionSource"
        },
        {
          "type": "object",
          "properties": {
            "branch": {
              "type": "string"
            },
            "tag": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "DataTheoremStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "config",
            "mode",
            "target"
          ],
          "properties": {
            "advanced": {
              "$ref": "#/definitions/ci/STOYamlAdvancedSettings"
            },
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/ci/ParameterFieldListString"
            },
            "config": {
              "type": "string",
              "enum": [
                "default"
              ]
            },
            "imagePullPolicy": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Always",
                    "Never",
                    "IfNotPresent"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "ingestion": {
              "$ref": "#/definitions/ci/STOYamlIngestion"
            },
            "mode": {
              "type": "string",
              "enum": [
                "ingestion",
                "orchestration",
                "extraction"
              ]
            },
            "outputVariables": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ci/OutputNGVariable"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "privileged": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "resources": {
              "$ref": "#/definitions/ci/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "settings": {
              "oneOf": [
                {
                  "$ref": "#/definitions/ci/ParameterFieldMapStringJsonNode"
                },
                {
                  "type": "string"
                }
              ]
            },
            "target": {
              "$ref": "#/definitions/ci/STOYamlTarget"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "config",
        "mode",
        "target"
      ],
      "properties": {
        "advanced": {
          "$ref": "#/definitions/ci/STOYamlAdvancedSettings"
        },
        "baseImageConnectorRefs": {
          "$ref": "#/definitions/ci/ParameterFieldListString"
        },
        "config": {
          "type": "string",
          "enum": [
            "default"
          ]
        },
        "imagePullPolicy": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Always",
                "Never",
                "IfNotPresent"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "ingestion": {
          "$ref": "#/definitions/ci/STOYamlIngestion"
        },
        "mode": {
          "type": "string",
          "enum": [
            "ingestion",
            "orchestration",
            "extraction"
          ]
        },
        "outputVariables": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/OutputNGVariable"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "privileged": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "resources": {
          "$ref": "#/definitions/ci/ContainerResource"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "settings": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/ParameterFieldMapStringJsonNode"
            },
            {
              "type": "string"
            }
          ]
        },
        "target": {
          "$ref": "#/definitions/ci/STOYamlTarget"
        }
      }
    },
    "DependencyElement": {
      "type": "object",
      "required": [
        "identifier",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "identifier": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "spec": {
          "$ref": "#/definitions/ci/DependencySpecType"
        },
        "type": {
          "type": "string",
          "enum": [
            "Service"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "DependencySpecType": {
      "type": "object",
      "discriminator": "type",
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "DockerContentTrustStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "config",
            "mode",
            "target"
          ],
          "properties": {
            "advanced": {
              "$ref": "#/definitions/ci/STOYamlAdvancedSettings"
            },
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/ci/ParameterFieldListString"
            },
            "config": {
              "type": "string",
              "enum": [
                "default"
              ]
            },
            "imagePullPolicy": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Always",
                    "Never",
                    "IfNotPresent"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "ingestion": {
              "$ref": "#/definitions/ci/STOYamlIngestion"
            },
            "mode": {
              "type": "string",
              "enum": [
                "ingestion",
                "orchestration",
                "extraction"
              ]
            },
            "outputVariables": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ci/OutputNGVariable"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "privileged": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "resources": {
              "$ref": "#/definitions/ci/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "settings": {
              "oneOf": [
                {
                  "$ref": "#/definitions/ci/ParameterFieldMapStringJsonNode"
                },
                {
                  "type": "string"
                }
              ]
            },
            "target": {
              "$ref": "#/definitions/ci/STOYamlTarget"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "config",
        "mode",
        "target"
      ],
      "properties": {
        "advanced": {
          "$ref": "#/definitions/ci/STOYamlAdvancedSettings"
        },
        "baseImageConnectorRefs": {
          "$ref": "#/definitions/ci/ParameterFieldListString"
        },
        "config": {
          "type": "string",
          "enum": [
            "default"
          ]
        },
        "imagePullPolicy": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Always",
                "Never",
                "IfNotPresent"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "ingestion": {
          "$ref": "#/definitions/ci/STOYamlIngestion"
        },
        "mode": {
          "type": "string",
          "enum": [
            "ingestion",
            "orchestration",
            "extraction"
          ]
        },
        "outputVariables": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/OutputNGVariable"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "privileged": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "resources": {
          "$ref": "#/definitions/ci/ContainerResource"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "settings": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/ParameterFieldMapStringJsonNode"
            },
            {
              "type": "string"
            }
          ]
        },
        "target": {
          "$ref": "#/definitions/ci/STOYamlTarget"
        }
      }
    },
    "DockerInfraSpec": {
      "type": "object",
      "required": [
        "platform"
      ],
      "properties": {
        "platform": {
          "$ref": "#/definitions/ci/ParameterFieldPlatform"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "DockerInfraYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/Infrastructure"
        },
        {
          "type": "object",
          "required": [
            "spec",
            "type"
          ],
          "properties": {
            "spec": {
              "$ref": "#/definitions/ci/DockerInfraSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "KubernetesDirect",
                "UseFromStage",
                "VM",
                "KubernetesHosted"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "DockerRuntime": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/Runtime"
        },
        {
          "type": "object",
          "required": [
            "spec",
            "type"
          ],
          "properties": {
            "spec": {
              "$ref": "#/definitions/ci/DockerRuntimeSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "Docker"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "DockerRuntimeSpec": {
      "type": "object",
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "DockerStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/CIStepInfo"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "repo",
            "tags"
          ],
          "properties": {
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/ci/ParameterFieldListString"
            },
            "buildArgs": {
              "oneOf": [
                {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "connectorRef": {
              "type": "string"
            },
            "context": {
              "type": "string"
            },
            "dockerfile": {
              "type": "string"
            },
            "labels": {
              "oneOf": [
                {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "optimize": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            },
            "remoteCacheRepo": {
              "type": "string"
            },
            "repo": {
              "type": "string"
            },
            "resources": {
              "$ref": "#/definitions/ci/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "tags": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "target": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "connectorRef",
        "repo",
        "tags"
      ],
      "properties": {
        "baseImageConnectorRefs": {
          "$ref": "#/definitions/ci/ParameterFieldListString"
        },
        "buildArgs": {
          "oneOf": [
            {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ]
        },
        "connectorRef": {
          "type": "string"
        },
        "context": {
          "type": "string"
        },
        "dockerfile": {
          "type": "string"
        },
        "labels": {
          "oneOf": [
            {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ]
        },
        "optimize": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ]
        },
        "remoteCacheRepo": {
          "type": "string"
        },
        "repo": {
          "type": "string"
        },
        "resources": {
          "$ref": "#/definitions/ci/ContainerResource"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "tags": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ]
        },
        "target": {
          "type": "string"
        }
      }
    },
    "ECRStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/CIStepInfo"
        },
        {
          "type": "object",
          "required": [
            "account",
            "connectorRef",
            "imageName",
            "region",
            "tags"
          ],
          "properties": {
            "account": {
              "type": "string"
            },
            "baseImageConnectorRefs": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "buildArgs": {
              "oneOf": [
                {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "connectorRef": {
              "type": "string"
            },
            "context": {
              "type": "string"
            },
            "dockerfile": {
              "type": "string"
            },
            "imageName": {
              "type": "string"
            },
            "labels": {
              "oneOf": [
                {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "optimize": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            },
            "region": {
              "type": "string"
            },
            "remoteCacheImage": {
              "type": "string"
            },
            "resources": {
              "$ref": "#/definitions/ci/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "tags": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "target": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "account",
        "connectorRef",
        "imageName",
        "region",
        "tags"
      ],
      "properties": {
        "account": {
          "type": "string"
        },
        "baseImageConnectorRefs": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ]
        },
        "buildArgs": {
          "oneOf": [
            {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ]
        },
        "connectorRef": {
          "type": "string"
        },
        "context": {
          "type": "string"
        },
        "dockerfile": {
          "type": "string"
        },
        "imageName": {
          "type": "string"
        },
        "labels": {
          "oneOf": [
            {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ]
        },
        "optimize": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ]
        },
        "region": {
          "type": "string"
        },
        "remoteCacheImage": {
          "type": "string"
        },
        "resources": {
          "$ref": "#/definitions/ci/ContainerResource"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "tags": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ]
        },
        "target": {
          "type": "string"
        }
      }
    },
    "EmptyDirVolume": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/PodVolume"
        },
        {
          "type": "object",
          "required": [
            "mountPath",
            "name"
          ],
          "properties": {
            "medium": {
              "type": "string"
            },
            "mountPath": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "sizeMib": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "EmptyDirYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/ContainerVolume"
        },
        {
          "type": "object",
          "required": [
            "mountPath",
            "spec",
            "type"
          ],
          "properties": {
            "mountPath": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/ci/EmptyDirYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "EmptyDir",
                "PersistentVolumeClaim",
                "HostPath"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "EmptyDirYamlSpec": {
      "type": "object",
      "properties": {
        "medium": {
          "type": "string"
        },
        "size": {
          "type": "string",
          "pattern": "^(([0-9]*[.])?[0-9]+)([GM]i?)|<\\+input>$"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ExecutionElementConfig": {
      "type": "object",
      "required": [
        "steps"
      ],
      "properties": {
        "steps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ci/ExecutionWrapperConfig"
          },
          "maxItems": 2147483647,
          "minItems": 1
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ExecutionSource": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "WEBHOOK",
            "MANUAL",
            "CUSTOM"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ExecutionWrapperConfig": {
      "type": "object",
      "properties": {
        "parallel": {
          "$ref": "#/definitions/ci/ParallelStepElementConfig"
        },
        "step": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/StepElementConfig"
            },
            {
              "$ref": "#/definitions/ci/NessusScanNode"
            },
            {
              "$ref": "#/definitions/ci/PrismaCloudScanNode"
            },
            {
              "$ref": "#/definitions/ci/SaveCacheS3Node"
            },
            {
              "$ref": "#/definitions/ci/GrypeScanNode"
            },
            {
              "$ref": "#/definitions/ci/FortifyOnDemandScanNode"
            },
            {
              "$ref": "#/definitions/ci/ActionStepNode"
            },
            {
              "$ref": "#/definitions/ci/NmapScanNode"
            },
            {
              "$ref": "#/definitions/ci/BanditScanNode"
            },
            {
              "$ref": "#/definitions/ci/QualysScanNode"
            },
            {
              "$ref": "#/definitions/ci/AwsEcrScanNode"
            },
            {
              "$ref": "#/definitions/ci/BurpScanNode"
            },
            {
              "$ref": "#/definitions/ci/S3UploadNode"
            },
            {
              "$ref": "#/definitions/ci/BitriseStepNode"
            },
            {
              "$ref": "#/definitions/ci/SaveCacheGCSNode"
            },
            {
              "$ref": "#/definitions/ci/MetasploitScanNode"
            },
            {
              "$ref": "#/definitions/ci/MendScanNode"
            },
            {
              "$ref": "#/definitions/ci/NexusIQScanNode"
            },
            {
              "$ref": "#/definitions/ci/OwaspScanNode"
            },
            {
              "$ref": "#/definitions/ci/BuildAndPushACRNode"
            },
            {
              "$ref": "#/definitions/ci/SysdigScanNode"
            },
            {
              "$ref": "#/definitions/ci/RestoreCacheS3Node"
            },
            {
              "$ref": "#/definitions/ci/ZapScanNode"
            },
            {
              "$ref": "#/definitions/ci/SniperScanNode"
            },
            {
              "$ref": "#/definitions/ci/ProwlerScanNode"
            },
            {
              "$ref": "#/definitions/ci/SonarqubeScanNode"
            },
            {
              "$ref": "#/definitions/ci/ArtifactoryUploadNode"
            },
            {
              "$ref": "#/definitions/ci/SecurityNode"
            },
            {
              "$ref": "#/definitions/ci/CheckmarxScanNode"
            },
            {
              "$ref": "#/definitions/ci/RunTestStepNode"
            },
            {
              "$ref": "#/definitions/ci/ClairScanNode"
            },
            {
              "$ref": "#/definitions/ci/DataTheoremScanNode"
            },
            {
              "$ref": "#/definitions/ci/OpenvasScanNode"
            },
            {
              "$ref": "#/definitions/ci/JfrogXrayScanNode"
            },
            {
              "$ref": "#/definitions/ci/GitCloneStepNode"
            },
            {
              "$ref": "#/definitions/ci/BuildAndPushGCRNode"
            },
            {
              "$ref": "#/definitions/ci/GCSUploadNode"
            },
            {
              "$ref": "#/definitions/ci/VeracodeScanNode"
            },
            {
              "$ref": "#/definitions/ci/RunStepNode"
            },
            {
              "$ref": "#/definitions/ci/BackgroundStepNode"
            },
            {
              "$ref": "#/definitions/ci/BuildAndPushECRNode"
            },
            {
              "$ref": "#/definitions/ci/BrakemanScanNode"
            },
            {
              "$ref": "#/definitions/ci/AquaTrivyScanNode"
            },
            {
              "$ref": "#/definitions/ci/BlackDuckScanNode"
            },
            {
              "$ref": "#/definitions/ci/ExternalScanNode"
            },
            {
              "$ref": "#/definitions/ci/SnykScanNode"
            },
            {
              "$ref": "#/definitions/ci/NiktoScanNode"
            },
            {
              "$ref": "#/definitions/ci/BuildAndPushDockerNode"
            },
            {
              "$ref": "#/definitions/ci/TenableScanNode"
            },
            {
              "$ref": "#/definitions/ci/RestoreCacheGCSNode"
            },
            {
              "$ref": "#/definitions/ci/DockerContentTrustScanNode"
            },
            {
              "$ref": "#/definitions/ci/PluginStepNode"
            },
            {
              "$ref": "#/definitions/ci/ReapsawScanNode"
            },
            {
              "$ref": "#/definitions/ci/ShiftLeftScanNode"
            },
            {
              "$ref": "#/definitions/TemplateStepNode"
            },
            {
              "$ref": "#/definitions/PolicyStepNode"
            },
            {
              "$ref": "#/definitions/WaitStepNode"
            }
          ]
        },
        "stepGroup": {
          "$ref": "#/definitions/ci/StepGroupElementConfig"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ExternalStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "config",
            "mode",
            "target"
          ],
          "properties": {
            "advanced": {
              "$ref": "#/definitions/ci/STOYamlAdvancedSettings"
            },
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/ci/ParameterFieldListString"
            },
            "config": {
              "type": "string",
              "enum": [
                "default"
              ]
            },
            "imagePullPolicy": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Always",
                    "Never",
                    "IfNotPresent"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "ingestion": {
              "$ref": "#/definitions/ci/STOYamlIngestion"
            },
            "mode": {
              "type": "string",
              "enum": [
                "ingestion",
                "orchestration",
                "extraction"
              ]
            },
            "outputVariables": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ci/OutputNGVariable"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "privileged": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "resources": {
              "$ref": "#/definitions/ci/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "settings": {
              "oneOf": [
                {
                  "$ref": "#/definitions/ci/ParameterFieldMapStringJsonNode"
                },
                {
                  "type": "string"
                }
              ]
            },
            "target": {
              "$ref": "#/definitions/ci/STOYamlTarget"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "config",
        "mode",
        "target"
      ],
      "properties": {
        "advanced": {
          "$ref": "#/definitions/ci/STOYamlAdvancedSettings"
        },
        "baseImageConnectorRefs": {
          "$ref": "#/definitions/ci/ParameterFieldListString"
        },
        "config": {
          "type": "string",
          "enum": [
            "default"
          ]
        },
        "imagePullPolicy": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Always",
                "Never",
                "IfNotPresent"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "ingestion": {
          "$ref": "#/definitions/ci/STOYamlIngestion"
        },
        "mode": {
          "type": "string",
          "enum": [
            "ingestion",
            "orchestration",
            "extraction"
          ]
        },
        "outputVariables": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/OutputNGVariable"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "privileged": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "resources": {
          "$ref": "#/definitions/ci/ContainerResource"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "settings": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/ParameterFieldMapStringJsonNode"
            },
            {
              "type": "string"
            }
          ]
        },
        "target": {
          "$ref": "#/definitions/ci/STOYamlTarget"
        }
      }
    },
    "FailureStrategyActionConfig": {
      "type": "object",
      "required": [
        "type"
      ],
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "Ignore",
            "Retry",
            "MarkAsSuccess",
            "Abort",
            "StageRollback",
            "StepGroupRollback",
            "PipelineRollback",
            "ManualIntervention",
            "ProceedWithDefaultValues",
            "MarkAsFailure"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "FailureStrategyConfig": {
      "type": "object",
      "required": [
        "onFailure"
      ],
      "properties": {
        "onFailure": {
          "$ref": "#/definitions/ci/OnFailureConfig"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "FortifyOnDemandStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "config",
            "mode",
            "target"
          ],
          "properties": {
            "advanced": {
              "$ref": "#/definitions/ci/STOYamlAdvancedSettings"
            },
            "auth": {
              "$ref": "#/definitions/ci/STOYamlAuth"
            },
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/ci/ParameterFieldListString"
            },
            "config": {
              "type": "string",
              "enum": [
                "default"
              ]
            },
            "image": {
              "$ref": "#/definitions/ci/STOYamlImage"
            },
            "imagePullPolicy": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Always",
                    "Never",
                    "IfNotPresent"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "ingestion": {
              "$ref": "#/definitions/ci/STOYamlIngestion"
            },
            "mode": {
              "type": "string",
              "enum": [
                "ingestion",
                "orchestration",
                "extraction"
              ]
            },
            "outputVariables": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ci/OutputNGVariable"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "privileged": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "resources": {
              "$ref": "#/definitions/ci/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "settings": {
              "oneOf": [
                {
                  "$ref": "#/definitions/ci/ParameterFieldMapStringJsonNode"
                },
                {
                  "type": "string"
                }
              ]
            },
            "target": {
              "$ref": "#/definitions/ci/STOYamlTarget"
            },
            "tool": {
              "$ref": "#/definitions/ci/STOYamlFODToolData"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "config",
        "mode",
        "target"
      ],
      "properties": {
        "advanced": {
          "$ref": "#/definitions/ci/STOYamlAdvancedSettings"
        },
        "auth": {
          "$ref": "#/definitions/ci/STOYamlAuth"
        },
        "baseImageConnectorRefs": {
          "$ref": "#/definitions/ci/ParameterFieldListString"
        },
        "config": {
          "type": "string",
          "enum": [
            "default"
          ]
        },
        "image": {
          "$ref": "#/definitions/ci/STOYamlImage"
        },
        "imagePullPolicy": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Always",
                "Never",
                "IfNotPresent"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "ingestion": {
          "$ref": "#/definitions/ci/STOYamlIngestion"
        },
        "mode": {
          "type": "string",
          "enum": [
            "ingestion",
            "orchestration",
            "extraction"
          ]
        },
        "outputVariables": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/OutputNGVariable"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "privileged": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "resources": {
          "$ref": "#/definitions/ci/ContainerResource"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "settings": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/ParameterFieldMapStringJsonNode"
            },
            {
              "type": "string"
            }
          ]
        },
        "target": {
          "$ref": "#/definitions/ci/STOYamlTarget"
        },
        "tool": {
          "$ref": "#/definitions/ci/STOYamlFODToolData"
        }
      }
    },
    "GCRStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/CIStepInfo"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "host",
            "imageName",
            "projectID",
            "tags"
          ],
          "properties": {
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/ci/ParameterFieldListString"
            },
            "buildArgs": {
              "oneOf": [
                {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "connectorRef": {
              "type": "string"
            },
            "context": {
              "type": "string"
            },
            "dockerfile": {
              "type": "string"
            },
            "host": {
              "type": "string"
            },
            "imageName": {
              "type": "string"
            },
            "labels": {
              "oneOf": [
                {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "optimize": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            },
            "projectID": {
              "type": "string"
            },
            "remoteCacheImage": {
              "type": "string"
            },
            "resources": {
              "$ref": "#/definitions/ci/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "tags": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "target": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "connectorRef",
        "host",
        "imageName",
        "projectID",
        "tags"
      ],
      "properties": {
        "baseImageConnectorRefs": {
          "$ref": "#/definitions/ci/ParameterFieldListString"
        },
        "buildArgs": {
          "oneOf": [
            {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ]
        },
        "connectorRef": {
          "type": "string"
        },
        "context": {
          "type": "string"
        },
        "dockerfile": {
          "type": "string"
        },
        "host": {
          "type": "string"
        },
        "imageName": {
          "type": "string"
        },
        "labels": {
          "oneOf": [
            {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ]
        },
        "optimize": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ]
        },
        "projectID": {
          "type": "string"
        },
        "remoteCacheImage": {
          "type": "string"
        },
        "resources": {
          "$ref": "#/definitions/ci/ContainerResource"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "tags": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ]
        },
        "target": {
          "type": "string"
        }
      }
    },
    "GitCloneStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/CIStepInfo"
        },
        {
          "type": "object",
          "required": [
            "build",
            "connectorRef"
          ],
          "properties": {
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/ci/ParameterFieldListString"
            },
            "build": {
              "oneOf": [
                {
                  "$ref": "#/definitions/ci/Build"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "cloneDirectory": {
              "type": "string"
            },
            "connectorRef": {
              "type": "string"
            },
            "depth": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "projectName": {
              "type": "string"
            },
            "repoName": {
              "type": "string"
            },
            "resources": {
              "$ref": "#/definitions/ci/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "sslVerify": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "build",
        "connectorRef"
      ],
      "properties": {
        "baseImageConnectorRefs": {
          "$ref": "#/definitions/ci/ParameterFieldListString"
        },
        "build": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/Build"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "cloneDirectory": {
          "type": "string"
        },
        "connectorRef": {
          "type": "string"
        },
        "depth": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "projectName": {
          "type": "string"
        },
        "repoName": {
          "type": "string"
        },
        "resources": {
          "$ref": "#/definitions/ci/ContainerResource"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "sslVerify": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      }
    },
    "GrypeStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "config",
            "mode",
            "target"
          ],
          "properties": {
            "advanced": {
              "$ref": "#/definitions/ci/STOYamlAdvancedSettings"
            },
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/ci/ParameterFieldListString"
            },
            "config": {
              "type": "string",
              "enum": [
                "default"
              ]
            },
            "image": {
              "$ref": "#/definitions/ci/STOYamlImage"
            },
            "imagePullPolicy": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Always",
                    "Never",
                    "IfNotPresent"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "ingestion": {
              "$ref": "#/definitions/ci/STOYamlIngestion"
            },
            "mode": {
              "type": "string",
              "enum": [
                "ingestion",
                "orchestration",
                "extraction"
              ]
            },
            "outputVariables": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ci/OutputNGVariable"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "privileged": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "resources": {
              "$ref": "#/definitions/ci/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "settings": {
              "oneOf": [
                {
                  "$ref": "#/definitions/ci/ParameterFieldMapStringJsonNode"
                },
                {
                  "type": "string"
                }
              ]
            },
            "target": {
              "$ref": "#/definitions/ci/STOYamlTarget"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "config",
        "mode",
        "target"
      ],
      "properties": {
        "advanced": {
          "$ref": "#/definitions/ci/STOYamlAdvancedSettings"
        },
        "baseImageConnectorRefs": {
          "$ref": "#/definitions/ci/ParameterFieldListString"
        },
        "config": {
          "type": "string",
          "enum": [
            "default"
          ]
        },
        "image": {
          "$ref": "#/definitions/ci/STOYamlImage"
        },
        "imagePullPolicy": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Always",
                "Never",
                "IfNotPresent"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "ingestion": {
          "$ref": "#/definitions/ci/STOYamlIngestion"
        },
        "mode": {
          "type": "string",
          "enum": [
            "ingestion",
            "orchestration",
            "extraction"
          ]
        },
        "outputVariables": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/OutputNGVariable"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "privileged": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "resources": {
          "$ref": "#/definitions/ci/ContainerResource"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "settings": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/ParameterFieldMapStringJsonNode"
            },
            {
              "type": "string"
            }
          ]
        },
        "target": {
          "$ref": "#/definitions/ci/STOYamlTarget"
        }
      }
    },
    "HarnessForConfig": {
      "type": "object",
      "properties": {
        "end": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            },
            {
              "type": "string",
              "pattern": "(<\\+.+>.*)",
              "minLength": 1
            }
          ]
        },
        "items": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "(<\\+.+>.*)",
              "minLength": 1
            }
          ]
        },
        "maxConcurrency": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            },
            {
              "type": "string",
              "pattern": "(<\\+.+>.*)",
              "minLength": 1
            }
          ]
        },
        "partitionSize": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            },
            {
              "type": "string",
              "pattern": "(<\\+.+>.*)",
              "minLength": 1
            }
          ]
        },
        "start": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            },
            {
              "type": "string",
              "pattern": "(<\\+.+>.*)",
              "minLength": 1
            }
          ]
        },
        "times": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            },
            {
              "type": "string",
              "pattern": "(<\\+.+>.*)",
              "minLength": 1
            }
          ]
        },
        "unit": {
          "type": "string",
          "enum": [
            "Percentage",
            "Count"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "oneOf": [
            {
              "required": [
                "times"
              ]
            },
            {
              "required": [
                "items"
              ]
            }
          ]
        }
      ]
    },
    "HostPathVolume": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/PodVolume"
        },
        {
          "type": "object",
          "required": [
            "mountPath",
            "name",
            "path"
          ],
          "properties": {
            "hostPathType": {
              "type": "string"
            },
            "mountPath": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "path": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "HostPathYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/ContainerVolume"
        },
        {
          "type": "object",
          "required": [
            "mountPath",
            "spec",
            "type"
          ],
          "properties": {
            "mountPath": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/ci/HostPathYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "EmptyDir",
                "PersistentVolumeClaim",
                "HostPath"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "HostPathYamlSpec": {
      "type": "object",
      "required": [
        "path"
      ],
      "properties": {
        "path": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "HostedVmInfraSpec": {
      "type": "object",
      "required": [
        "platform"
      ],
      "properties": {
        "platform": {
          "$ref": "#/definitions/ci/ParameterFieldPlatform"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "HostedVmInfraYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/Infrastructure"
        },
        {
          "type": "object",
          "required": [
            "spec",
            "type"
          ],
          "properties": {
            "spec": {
              "$ref": "#/definitions/ci/HostedVmInfraSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "KubernetesDirect",
                "UseFromStage",
                "VM",
                "KubernetesHosted"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "IACMStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/StepSpecType"
        },
        {
          "type": "object"
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "IACMTemplateInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/StepSpecType"
        },
        {
          "type": "object"
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "IACMTerraformPlanInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/StepSpecType"
        },
        {
          "type": "object",
          "properties": {
            "env": {
              "oneOf": [
                {
                  "$ref": "#/definitions/ci/ParameterFieldMapStringString"
                },
                {
                  "type": "string"
                }
              ]
            },
            "tfVars": {
              "oneOf": [
                {
                  "$ref": "#/definitions/ci/ParameterFieldMapStringString"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "IgnoreFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "Ignore"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ImageDetails": {
      "type": "object",
      "properties": {
        "domainName": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "registryUrl": {
          "type": "string"
        },
        "sourceName": {
          "type": "string"
        },
        "tag": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "usernameRef": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ImageSbomSource": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/SbomSourceSpec"
        },
        {
          "type": "object",
          "properties": {
            "connector": {
              "type": "string"
            },
            "image": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "Infrastructure": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "KubernetesDirect",
            "UseFromStage",
            "VM",
            "KubernetesHosted"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "InitializeStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "accountId",
            "executionElementConfig",
            "infrastructure",
            "skipGitClone"
          ],
          "properties": {
            "accountId": {
              "type": "string"
            },
            "buildJobEnvInfo": {
              "$ref": "#/definitions/ci/BuildJobEnvInfo"
            },
            "ciCodebase": {
              "$ref": "#/definitions/ci/CodeBase"
            },
            "executionElementConfig": {
              "$ref": "#/definitions/ci/ExecutionElementConfig"
            },
            "executionSource": {
              "$ref": "#/definitions/ci/ExecutionSource"
            },
            "infrastructure": {
              "$ref": "#/definitions/ci/Infrastructure"
            },
            "pipelineVariables": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/NGVariable"
              }
            },
            "skipGitClone": {
              "type": "boolean"
            },
            "stageElementConfig": {
              "$ref": "#/definitions/ci/IntegrationStageConfig"
            },
            "stageIdentifier": {
              "type": "string"
            },
            "strategyExpansionMap": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/ci/StrategyExpansionData"
              }
            },
            "variables": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/NGVariable"
              }
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "InputSetValidator": {
      "type": "object",
      "properties": {
        "parameters": {
          "type": "string"
        },
        "validatorType": {
          "type": "string",
          "enum": [
            "ALLOWED_VALUES",
            "REGEX"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "IntegrationStageConfig": {
      "type": "object",
      "properties": {
        "caching": {
          "$ref": "#/definitions/ci/Caching"
        },
        "cloneCodebase": {
          "$ref": "#/definitions/ci/ParameterFieldBoolean"
        },
        "execution": {
          "$ref": "#/definitions/ci/ExecutionElementConfig"
        },
        "infrastructure": {
          "$ref": "#/definitions/ci/Infrastructure"
        },
        "platform": {
          "$ref": "#/definitions/ci/ParameterFieldPlatform"
        },
        "runtime": {
          "$ref": "#/definitions/ci/Runtime"
        },
        "serviceDependencies": {
          "$ref": "#/definitions/ci/ParameterFieldListDependencyElement"
        },
        "sharedPaths": {
          "$ref": "#/definitions/ci/ParameterFieldListString"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "IntegrationStageConfigImpl": {
      "type": "object",
      "properties": {
        "caching": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/Caching"
            }
          ]
        },
        "cloneCodebase": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "execution": {
          "$ref": "#/definitions/ci/ExecutionElementConfig"
        },
        "infrastructure": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/DockerInfraYaml"
            },
            {
              "$ref": "#/definitions/ci/HostedVmInfraYaml"
            },
            {
              "$ref": "#/definitions/ci/K8sDirectInfraYaml"
            },
            {
              "$ref": "#/definitions/ci/K8sHostedInfraYaml"
            },
            {
              "$ref": "#/definitions/ci/UseFromStageInfraYaml"
            },
            {
              "$ref": "#/definitions/ci/VmInfraYaml"
            }
          ]
        },
        "platform": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/Platform"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "runtime": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/CloudRuntime"
            },
            {
              "$ref": "#/definitions/ci/DockerRuntime"
            }
          ]
        },
        "serviceDependencies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/DependencyElement"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "sharedPaths": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "IntegrationStageNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "type"
      ],
      "properties": {
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "description": {
          "type": "string"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "pipelineVariables": {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/ci/NumberNGVariable"
              },
              {
                "$ref": "#/definitions/ci/SecretNGVariable"
              },
              {
                "$ref": "#/definitions/ci/StringNGVariable"
              }
            ]
          }
        },
        "strategy": {
          "$ref": "#/definitions/ci/StrategyConfig"
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "type": {
          "type": "string",
          "enum": [
            "CI"
          ]
        },
        "variables": {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/ci/NumberNGVariable"
              },
              {
                "$ref": "#/definitions/ci/SecretNGVariable"
              },
              {
                "$ref": "#/definitions/ci/StringNGVariable"
              }
            ]
          }
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/StageWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "CI"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/IntegrationStageConfigImpl"
              }
            }
          }
        }
      ]
    },
    "JUnitTestReport": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/UnitTestReportSpec"
        },
        {
          "type": "object",
          "properties": {
            "paths": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "JfrogXrayStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "config",
            "mode",
            "target"
          ],
          "properties": {
            "advanced": {
              "$ref": "#/definitions/ci/STOYamlAdvancedSettings"
            },
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/ci/ParameterFieldListString"
            },
            "config": {
              "type": "string",
              "enum": [
                "default"
              ]
            },
            "imagePullPolicy": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Always",
                    "Never",
                    "IfNotPresent"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "ingestion": {
              "$ref": "#/definitions/ci/STOYamlIngestion"
            },
            "mode": {
              "type": "string",
              "enum": [
                "ingestion",
                "orchestration",
                "extraction"
              ]
            },
            "outputVariables": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ci/OutputNGVariable"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "privileged": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "resources": {
              "$ref": "#/definitions/ci/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "settings": {
              "oneOf": [
                {
                  "$ref": "#/definitions/ci/ParameterFieldMapStringJsonNode"
                },
                {
                  "type": "string"
                }
              ]
            },
            "target": {
              "$ref": "#/definitions/ci/STOYamlTarget"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "config",
        "mode",
        "target"
      ],
      "properties": {
        "advanced": {
          "$ref": "#/definitions/ci/STOYamlAdvancedSettings"
        },
        "baseImageConnectorRefs": {
          "$ref": "#/definitions/ci/ParameterFieldListString"
        },
        "config": {
          "type": "string",
          "enum": [
            "default"
          ]
        },
        "imagePullPolicy": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Always",
                "Never",
                "IfNotPresent"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "ingestion": {
          "$ref": "#/definitions/ci/STOYamlIngestion"
        },
        "mode": {
          "type": "string",
          "enum": [
            "ingestion",
            "orchestration",
            "extraction"
          ]
        },
        "outputVariables": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/OutputNGVariable"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "privileged": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "resources": {
          "$ref": "#/definitions/ci/ContainerResource"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "settings": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/ParameterFieldMapStringJsonNode"
            },
            {
              "type": "string"
            }
          ]
        },
        "target": {
          "$ref": "#/definitions/ci/STOYamlTarget"
        }
      }
    },
    "JsonNode": {
      "type": "object",
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "K8BuildJobEnvInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/BuildJobEnvInfo"
        },
        {
          "type": "object",
          "properties": {
            "podsSetupInfo": {
              "$ref": "#/definitions/ci/PodsSetupInfo"
            },
            "stepConnectorRefs": {
              "type": "object",
              "additionalProperties": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ci/ConnectorConversionInfo"
                }
              }
            },
            "workDir": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "K8sDirectInfraYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/Infrastructure"
        },
        {
          "type": "object",
          "required": [
            "spec",
            "type"
          ],
          "properties": {
            "spec": {
              "$ref": "#/definitions/ci/K8sDirectInfraYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "KubernetesDirect",
                "UseFromStage",
                "VM",
                "KubernetesHosted"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "K8sDirectInfraYamlSpec": {
      "type": "object",
      "required": [
        "connectorRef",
        "namespace"
      ],
      "properties": {
        "annotations": {
          "oneOf": [
            {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ]
        },
        "automountServiceAccountToken": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "connectorRef": {
          "type": "string"
        },
        "containerSecurityContext": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/SecurityContext"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "harnessImageConnectorRef": {
          "type": "string"
        },
        "hostNames": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "initTimeout": {
          "type": "string"
        },
        "labels": {
          "oneOf": [
            {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ]
        },
        "namespace": {
          "type": "string",
          "minLength": 1,
          "maxLength": 2147483647
        },
        "nodeSelector": {
          "oneOf": [
            {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "os": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Linux",
                "MacOS",
                "Windows"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "priorityClassName": {
          "type": "string"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "serviceAccountName": {
          "type": "string"
        },
        "tolerations": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/Toleration"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "volumes": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/CIVolume"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "K8sHostedInfraYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/Infrastructure"
        },
        {
          "type": "object",
          "required": [
            "spec",
            "type"
          ],
          "properties": {
            "spec": {
              "$ref": "#/definitions/ci/K8sHostedInfraYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "KubernetesDirect",
                "UseFromStage",
                "VM",
                "KubernetesHosted"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "K8sHostedInfraYamlSpec": {
      "type": "object",
      "required": [
        "identifier"
      ],
      "properties": {
        "identifier": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "Limits": {
      "type": "object",
      "properties": {
        "cpu": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "number"
            }
          ]
        },
        "memory": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ManualExecutionSource": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/ExecutionSource"
        },
        {
          "type": "object",
          "properties": {
            "branch": {
              "type": "string"
            },
            "commitSha": {
              "type": "string"
            },
            "prNumber": {
              "type": "string"
            },
            "tag": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ManualFailureSpecConfig": {
      "type": "object",
      "required": [
        "onTimeout",
        "timeout"
      ],
      "properties": {
        "onTimeout": {
          "$ref": "#/definitions/ci/OnTimeoutConfig"
        },
        "timeout": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ManualInterventionFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": [
            "spec",
            "type"
          ],
          "properties": {
            "spec": {
              "readOnly": true,
              "$ref": "#/definitions/ci/ManualFailureSpecConfig"
            },
            "type": {
              "type": "string",
              "enum": [
                "ManualIntervention"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "MarkAsFailFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "MarkAsFailure"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "MarkAsSuccessFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "MarkAsSuccess"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "MatrixConfigInterface": {
      "type": "object",
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "MendStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "config",
            "mode",
            "target"
          ],
          "properties": {
            "advanced": {
              "$ref": "#/definitions/ci/STOYamlAdvancedSettings"
            },
            "auth": {
              "$ref": "#/definitions/ci/STOYamlAuth"
            },
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/ci/ParameterFieldListString"
            },
            "config": {
              "type": "string",
              "enum": [
                "default"
              ]
            },
            "image": {
              "$ref": "#/definitions/ci/STOYamlImage"
            },
            "imagePullPolicy": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Always",
                    "Never",
                    "IfNotPresent"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "ingestion": {
              "$ref": "#/definitions/ci/STOYamlIngestion"
            },
            "mode": {
              "type": "string",
              "enum": [
                "ingestion",
                "orchestration",
                "extraction"
              ]
            },
            "outputVariables": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ci/OutputNGVariable"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "privileged": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "resources": {
              "$ref": "#/definitions/ci/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "settings": {
              "oneOf": [
                {
                  "$ref": "#/definitions/ci/ParameterFieldMapStringJsonNode"
                },
                {
                  "type": "string"
                }
              ]
            },
            "target": {
              "$ref": "#/definitions/ci/STOYamlTarget"
            },
            "tool": {
              "$ref": "#/definitions/ci/STOYamlMendToolData"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "config",
        "mode",
        "target"
      ],
      "properties": {
        "advanced": {
          "$ref": "#/definitions/ci/STOYamlAdvancedSettings"
        },
        "auth": {
          "$ref": "#/definitions/ci/STOYamlAuth"
        },
        "baseImageConnectorRefs": {
          "$ref": "#/definitions/ci/ParameterFieldListString"
        },
        "config": {
          "type": "string",
          "enum": [
            "default"
          ]
        },
        "image": {
          "$ref": "#/definitions/ci/STOYamlImage"
        },
        "imagePullPolicy": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Always",
                "Never",
                "IfNotPresent"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "ingestion": {
          "$ref": "#/definitions/ci/STOYamlIngestion"
        },
        "mode": {
          "type": "string",
          "enum": [
            "ingestion",
            "orchestration",
            "extraction"
          ]
        },
        "outputVariables": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/OutputNGVariable"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "privileged": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "resources": {
          "$ref": "#/definitions/ci/ContainerResource"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "settings": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/ParameterFieldMapStringJsonNode"
            },
            {
              "type": "string"
            }
          ]
        },
        "target": {
          "$ref": "#/definitions/ci/STOYamlTarget"
        },
        "tool": {
          "$ref": "#/definitions/ci/STOYamlMendToolData"
        }
      }
    },
    "MetasploitStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "config",
            "mode",
            "target"
          ],
          "properties": {
            "advanced": {
              "$ref": "#/definitions/ci/STOYamlAdvancedSettings"
            },
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/ci/ParameterFieldListString"
            },
            "config": {
              "type": "string",
              "enum": [
                "default"
              ]
            },
            "imagePullPolicy": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Always",
                    "Never",
                    "IfNotPresent"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "ingestion": {
              "$ref": "#/definitions/ci/STOYamlIngestion"
            },
            "mode": {
              "type": "string",
              "enum": [
                "ingestion",
                "orchestration",
                "extraction"
              ]
            },
            "outputVariables": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ci/OutputNGVariable"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "privileged": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "resources": {
              "$ref": "#/definitions/ci/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "settings": {
              "oneOf": [
                {
                  "$ref": "#/definitions/ci/ParameterFieldMapStringJsonNode"
                },
                {
                  "type": "string"
                }
              ]
            },
            "target": {
              "$ref": "#/definitions/ci/STOYamlTarget"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "config",
        "mode",
        "target"
      ],
      "properties": {
        "advanced": {
          "$ref": "#/definitions/ci/STOYamlAdvancedSettings"
        },
        "baseImageConnectorRefs": {
          "$ref": "#/definitions/ci/ParameterFieldListString"
        },
        "config": {
          "type": "string",
          "enum": [
            "default"
          ]
        },
        "imagePullPolicy": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Always",
                "Never",
                "IfNotPresent"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "ingestion": {
          "$ref": "#/definitions/ci/STOYamlIngestion"
        },
        "mode": {
          "type": "string",
          "enum": [
            "ingestion",
            "orchestration",
            "extraction"
          ]
        },
        "outputVariables": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/OutputNGVariable"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "privileged": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "resources": {
          "$ref": "#/definitions/ci/ContainerResource"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "settings": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/ParameterFieldMapStringJsonNode"
            },
            {
              "type": "string"
            }
          ]
        },
        "target": {
          "$ref": "#/definitions/ci/STOYamlTarget"
        }
      }
    },
    "NGVariable": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "description": {
          "type": "string"
        },
        "metadata": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "required": {
          "type": "boolean"
        },
        "type": {
          "type": "string",
          "enum": [
            "String",
            "Number",
            "Secret"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "NessusStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "config",
            "mode",
            "target"
          ],
          "properties": {
            "advanced": {
              "$ref": "#/definitions/ci/STOYamlAdvancedSettings"
            },
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/ci/ParameterFieldListString"
            },
            "config": {
              "type": "string",
              "enum": [
                "default"
              ]
            },
            "imagePullPolicy": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Always",
                    "Never",
                    "IfNotPresent"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "ingestion": {
              "$ref": "#/definitions/ci/STOYamlIngestion"
            },
            "mode": {
              "type": "string",
              "enum": [
                "ingestion",
                "orchestration",
                "extraction"
              ]
            },
            "outputVariables": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ci/OutputNGVariable"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "privileged": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "resources": {
              "$ref": "#/definitions/ci/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "settings": {
              "oneOf": [
                {
                  "$ref": "#/definitions/ci/ParameterFieldMapStringJsonNode"
                },
                {
                  "type": "string"
                }
              ]
            },
            "target": {
              "$ref": "#/definitions/ci/STOYamlTarget"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "config",
        "mode",
        "target"
      ],
      "properties": {
        "advanced": {
          "$ref": "#/definitions/ci/STOYamlAdvancedSettings"
        },
        "baseImageConnectorRefs": {
          "$ref": "#/definitions/ci/ParameterFieldListString"
        },
        "config": {
          "type": "string",
          "enum": [
            "default"
          ]
        },
        "imagePullPolicy": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Always",
                "Never",
                "IfNotPresent"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "ingestion": {
          "$ref": "#/definitions/ci/STOYamlIngestion"
        },
        "mode": {
          "type": "string",
          "enum": [
            "ingestion",
            "orchestration",
            "extraction"
          ]
        },
        "outputVariables": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/OutputNGVariable"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "privileged": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "resources": {
          "$ref": "#/definitions/ci/ContainerResource"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "settings": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/ParameterFieldMapStringJsonNode"
            },
            {
              "type": "string"
            }
          ]
        },
        "target": {
          "$ref": "#/definitions/ci/STOYamlTarget"
        }
      }
    },
    "NexusIQStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "config",
            "mode",
            "target"
          ],
          "properties": {
            "advanced": {
              "$ref": "#/definitions/ci/STOYamlAdvancedSettings"
            },
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/ci/ParameterFieldListString"
            },
            "config": {
              "type": "string",
              "enum": [
                "default"
              ]
            },
            "imagePullPolicy": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Always",
                    "Never",
                    "IfNotPresent"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "ingestion": {
              "$ref": "#/definitions/ci/STOYamlIngestion"
            },
            "mode": {
              "type": "string",
              "enum": [
                "ingestion",
                "orchestration",
                "extraction"
              ]
            },
            "outputVariables": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ci/OutputNGVariable"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "privileged": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "resources": {
              "$ref": "#/definitions/ci/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "settings": {
              "oneOf": [
                {
                  "$ref": "#/definitions/ci/ParameterFieldMapStringJsonNode"
                },
                {
                  "type": "string"
                }
              ]
            },
            "target": {
              "$ref": "#/definitions/ci/STOYamlTarget"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "config",
        "mode",
        "target"
      ],
      "properties": {
        "advanced": {
          "$ref": "#/definitions/ci/STOYamlAdvancedSettings"
        },
        "baseImageConnectorRefs": {
          "$ref": "#/definitions/ci/ParameterFieldListString"
        },
        "config": {
          "type": "string",
          "enum": [
            "default"
          ]
        },
        "imagePullPolicy": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Always",
                "Never",
                "IfNotPresent"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "ingestion": {
          "$ref": "#/definitions/ci/STOYamlIngestion"
        },
        "mode": {
          "type": "string",
          "enum": [
            "ingestion",
            "orchestration",
            "extraction"
          ]
        },
        "outputVariables": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/OutputNGVariable"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "privileged": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "resources": {
          "$ref": "#/definitions/ci/ContainerResource"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "settings": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/ParameterFieldMapStringJsonNode"
            },
            {
              "type": "string"
            }
          ]
        },
        "target": {
          "$ref": "#/definitions/ci/STOYamlTarget"
        }
      }
    },
    "NiktoStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "config",
            "mode",
            "target"
          ],
          "properties": {
            "advanced": {
              "$ref": "#/definitions/ci/STOYamlAdvancedSettings"
            },
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/ci/ParameterFieldListString"
            },
            "config": {
              "type": "string",
              "enum": [
                "default"
              ]
            },
            "imagePullPolicy": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Always",
                    "Never",
                    "IfNotPresent"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "ingestion": {
              "$ref": "#/definitions/ci/STOYamlIngestion"
            },
            "mode": {
              "type": "string",
              "enum": [
                "ingestion",
                "orchestration",
                "extraction"
              ]
            },
            "outputVariables": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ci/OutputNGVariable"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "privileged": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "resources": {
              "$ref": "#/definitions/ci/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "settings": {
              "oneOf": [
                {
                  "$ref": "#/definitions/ci/ParameterFieldMapStringJsonNode"
                },
                {
                  "type": "string"
                }
              ]
            },
            "target": {
              "$ref": "#/definitions/ci/STOYamlTarget"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "config",
        "mode",
        "target"
      ],
      "properties": {
        "advanced": {
          "$ref": "#/definitions/ci/STOYamlAdvancedSettings"
        },
        "baseImageConnectorRefs": {
          "$ref": "#/definitions/ci/ParameterFieldListString"
        },
        "config": {
          "type": "string",
          "enum": [
            "default"
          ]
        },
        "imagePullPolicy": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Always",
                "Never",
                "IfNotPresent"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "ingestion": {
          "$ref": "#/definitions/ci/STOYamlIngestion"
        },
        "mode": {
          "type": "string",
          "enum": [
            "ingestion",
            "orchestration",
            "extraction"
          ]
        },
        "outputVariables": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/OutputNGVariable"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "privileged": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "resources": {
          "$ref": "#/definitions/ci/ContainerResource"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "settings": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/ParameterFieldMapStringJsonNode"
            },
            {
              "type": "string"
            }
          ]
        },
        "target": {
          "$ref": "#/definitions/ci/STOYamlTarget"
        }
      }
    },
    "NmapStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "config",
            "mode",
            "target"
          ],
          "properties": {
            "advanced": {
              "$ref": "#/definitions/ci/STOYamlAdvancedSettings"
            },
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/ci/ParameterFieldListString"
            },
            "config": {
              "type": "string",
              "enum": [
                "default"
              ]
            },
            "imagePullPolicy": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Always",
                    "Never",
                    "IfNotPresent"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "ingestion": {
              "$ref": "#/definitions/ci/STOYamlIngestion"
            },
            "mode": {
              "type": "string",
              "enum": [
                "ingestion",
                "orchestration",
                "extraction"
              ]
            },
            "outputVariables": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ci/OutputNGVariable"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "privileged": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "resources": {
              "$ref": "#/definitions/ci/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "settings": {
              "oneOf": [
                {
                  "$ref": "#/definitions/ci/ParameterFieldMapStringJsonNode"
                },
                {
                  "type": "string"
                }
              ]
            },
            "target": {
              "$ref": "#/definitions/ci/STOYamlTarget"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "config",
        "mode",
        "target"
      ],
      "properties": {
        "advanced": {
          "$ref": "#/definitions/ci/STOYamlAdvancedSettings"
        },
        "baseImageConnectorRefs": {
          "$ref": "#/definitions/ci/ParameterFieldListString"
        },
        "config": {
          "type": "string",
          "enum": [
            "default"
          ]
        },
        "imagePullPolicy": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Always",
                "Never",
                "IfNotPresent"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "ingestion": {
          "$ref": "#/definitions/ci/STOYamlIngestion"
        },
        "mode": {
          "type": "string",
          "enum": [
            "ingestion",
            "orchestration",
            "extraction"
          ]
        },
        "outputVariables": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/OutputNGVariable"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "privileged": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "resources": {
          "$ref": "#/definitions/ci/ContainerResource"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "settings": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/ParameterFieldMapStringJsonNode"
            },
            {
              "type": "string"
            }
          ]
        },
        "target": {
          "$ref": "#/definitions/ci/STOYamlTarget"
        }
      }
    },
    "NumberNGVariable": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/NGVariable"
        },
        {
          "type": "object",
          "required": [
            "value"
          ],
          "properties": {
            "default": {
              "type": "number",
              "format": "double"
            },
            "name": {
              "type": "string",
              "pattern": "^[a-zA-Z_][0-9a-zA-Z_\\.$]{0,127}$"
            },
            "type": {
              "type": "string",
              "enum": [
                "Number"
              ]
            },
            "value": {
              "oneOf": [
                {
                  "type": "number",
                  "format": "double"
                },
                {
                  "type": "string",
                  "pattern": "((^[+-]?[0-9]*\\.?[0-9]+$)|(<\\+.+>.*))"
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "OnFailureConfig": {
      "type": "object",
      "required": [
        "action",
        "errors"
      ],
      "properties": {
        "action": {
          "$ref": "#/definitions/ci/FailureStrategyActionConfig"
        },
        "errors": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Unknown",
              "AllErrors",
              "Authentication",
              "Connectivity",
              "Timeout",
              "Authorization",
              "Verification",
              "DelegateProvisioning",
              "PolicyEvaluationFailure",
              "InputTimeoutError",
              "ApprovalRejection",
              "DelegateRestart"
            ]
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "OnRetryFailureConfig": {
      "type": "object",
      "properties": {
        "action": {
          "$ref": "#/definitions/ci/FailureStrategyActionConfig"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "OnTimeoutConfig": {
      "type": "object",
      "properties": {
        "action": {
          "$ref": "#/definitions/ci/FailureStrategyActionConfig"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "OpenvasStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "config",
            "mode",
            "target"
          ],
          "properties": {
            "advanced": {
              "$ref": "#/definitions/ci/STOYamlAdvancedSettings"
            },
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/ci/ParameterFieldListString"
            },
            "config": {
              "type": "string",
              "enum": [
                "default"
              ]
            },
            "imagePullPolicy": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Always",
                    "Never",
                    "IfNotPresent"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "ingestion": {
              "$ref": "#/definitions/ci/STOYamlIngestion"
            },
            "mode": {
              "type": "string",
              "enum": [
                "ingestion",
                "orchestration",
                "extraction"
              ]
            },
            "outputVariables": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ci/OutputNGVariable"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "privileged": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "resources": {
              "$ref": "#/definitions/ci/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "settings": {
              "oneOf": [
                {
                  "$ref": "#/definitions/ci/ParameterFieldMapStringJsonNode"
                },
                {
                  "type": "string"
                }
              ]
            },
            "target": {
              "$ref": "#/definitions/ci/STOYamlTarget"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "config",
        "mode",
        "target"
      ],
      "properties": {
        "advanced": {
          "$ref": "#/definitions/ci/STOYamlAdvancedSettings"
        },
        "baseImageConnectorRefs": {
          "$ref": "#/definitions/ci/ParameterFieldListString"
        },
        "config": {
          "type": "string",
          "enum": [
            "default"
          ]
        },
        "imagePullPolicy": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Always",
                "Never",
                "IfNotPresent"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "ingestion": {
          "$ref": "#/definitions/ci/STOYamlIngestion"
        },
        "mode": {
          "type": "string",
          "enum": [
            "ingestion",
            "orchestration",
            "extraction"
          ]
        },
        "outputVariables": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/OutputNGVariable"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "privileged": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "resources": {
          "$ref": "#/definitions/ci/ContainerResource"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "settings": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/ParameterFieldMapStringJsonNode"
            },
            {
              "type": "string"
            }
          ]
        },
        "target": {
          "$ref": "#/definitions/ci/STOYamlTarget"
        }
      }
    },
    "OutputNGVariable": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "OwaspStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "config",
            "mode",
            "target"
          ],
          "properties": {
            "advanced": {
              "$ref": "#/definitions/ci/STOYamlAdvancedSettings"
            },
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/ci/ParameterFieldListString"
            },
            "config": {
              "type": "string",
              "enum": [
                "default"
              ]
            },
            "imagePullPolicy": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Always",
                    "Never",
                    "IfNotPresent"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "ingestion": {
              "$ref": "#/definitions/ci/STOYamlIngestion"
            },
            "mode": {
              "type": "string",
              "enum": [
                "ingestion",
                "orchestration",
                "extraction"
              ]
            },
            "outputVariables": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ci/OutputNGVariable"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "privileged": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "resources": {
              "$ref": "#/definitions/ci/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "settings": {
              "oneOf": [
                {
                  "$ref": "#/definitions/ci/ParameterFieldMapStringJsonNode"
                },
                {
                  "type": "string"
                }
              ]
            },
            "target": {
              "$ref": "#/definitions/ci/STOYamlTarget"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "config",
        "mode",
        "target"
      ],
      "properties": {
        "advanced": {
          "$ref": "#/definitions/ci/STOYamlAdvancedSettings"
        },
        "baseImageConnectorRefs": {
          "$ref": "#/definitions/ci/ParameterFieldListString"
        },
        "config": {
          "type": "string",
          "enum": [
            "default"
          ]
        },
        "imagePullPolicy": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Always",
                "Never",
                "IfNotPresent"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "ingestion": {
          "$ref": "#/definitions/ci/STOYamlIngestion"
        },
        "mode": {
          "type": "string",
          "enum": [
            "ingestion",
            "orchestration",
            "extraction"
          ]
        },
        "outputVariables": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/OutputNGVariable"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "privileged": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "resources": {
          "$ref": "#/definitions/ci/ContainerResource"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "settings": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/ParameterFieldMapStringJsonNode"
            },
            {
              "type": "string"
            }
          ]
        },
        "target": {
          "$ref": "#/definitions/ci/STOYamlTarget"
        }
      }
    },
    "PRBuildSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/BuildSpec"
        },
        {
          "type": "object",
          "required": [
            "number"
          ],
          "properties": {
            "number": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PRWebhookEvent": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/WebhookEvent"
        },
        {
          "type": "object",
          "properties": {
            "baseAttributes": {
              "$ref": "#/definitions/ci/WebhookBaseAttributes"
            },
            "closed": {
              "type": "boolean"
            },
            "commitDetailsList": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/CommitDetails"
              }
            },
            "merged": {
              "type": "boolean"
            },
            "pullRequestBody": {
              "type": "string"
            },
            "pullRequestId": {
              "type": "integer",
              "format": "int64"
            },
            "pullRequestLink": {
              "type": "string"
            },
            "repository": {
              "$ref": "#/definitions/ci/Repository"
            },
            "sourceBranch": {
              "type": "string"
            },
            "targetBranch": {
              "type": "string"
            },
            "title": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PVCParams": {
      "type": "object",
      "properties": {
        "claimName": {
          "type": "string"
        },
        "present": {
          "type": "boolean"
        },
        "sizeMib": {
          "type": "integer",
          "format": "int32"
        },
        "storageClass": {
          "type": "string"
        },
        "volumeName": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PVCVolume": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/PodVolume"
        },
        {
          "type": "object",
          "required": [
            "claimName",
            "mountPath",
            "name"
          ],
          "properties": {
            "claimName": {
              "type": "string"
            },
            "mountPath": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "readOnly": {
              "type": "boolean"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ParallelStepElementConfig": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ci/ExecutionWrapperConfig"
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ParameterField": {
      "type": "object",
      "properties": {
        "defaultValue": {
          "type": "object"
        },
        "executionInput": {
          "type": "boolean"
        },
        "expression": {
          "type": "boolean"
        },
        "expressionValue": {
          "type": "string"
        },
        "inputSetValidator": {
          "$ref": "#/definitions/ci/InputSetValidator"
        },
        "jsonResponseField": {
          "type": "boolean"
        },
        "responseField": {
          "type": "string"
        },
        "typeString": {
          "type": "boolean"
        },
        "value": {
          "type": "object"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ParameterFieldBoolean": {
      "type": "object",
      "properties": {
        "defaultValue": {
          "type": "boolean"
        },
        "executionInput": {
          "type": "boolean"
        },
        "expression": {
          "type": "boolean"
        },
        "expressionValue": {
          "type": "string"
        },
        "inputSetValidator": {
          "$ref": "#/definitions/ci/InputSetValidator"
        },
        "jsonResponseField": {
          "type": "boolean"
        },
        "responseField": {
          "type": "string"
        },
        "typeString": {
          "type": "boolean"
        },
        "value": {
          "type": "boolean"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ParameterFieldListDependencyElement": {
      "type": "object",
      "properties": {
        "defaultValue": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ci/DependencyElement"
          }
        },
        "executionInput": {
          "type": "boolean"
        },
        "expression": {
          "type": "boolean"
        },
        "expressionValue": {
          "type": "string"
        },
        "inputSetValidator": {
          "$ref": "#/definitions/ci/InputSetValidator"
        },
        "jsonResponseField": {
          "type": "boolean"
        },
        "responseField": {
          "type": "string"
        },
        "typeString": {
          "type": "boolean"
        },
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ci/DependencyElement"
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ParameterFieldListString": {
      "type": "object",
      "properties": {
        "defaultValue": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "executionInput": {
          "type": "boolean"
        },
        "expression": {
          "type": "boolean"
        },
        "expressionValue": {
          "type": "string"
        },
        "inputSetValidator": {
          "$ref": "#/definitions/ci/InputSetValidator"
        },
        "jsonResponseField": {
          "type": "boolean"
        },
        "responseField": {
          "type": "string"
        },
        "typeString": {
          "type": "boolean"
        },
        "value": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ParameterFieldMapStringJsonNode": {
      "type": "object",
      "properties": {
        "defaultValue": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ci/JsonNode"
          }
        },
        "executionInput": {
          "type": "boolean"
        },
        "expression": {
          "type": "boolean"
        },
        "expressionValue": {
          "type": "string"
        },
        "inputSetValidator": {
          "$ref": "#/definitions/ci/InputSetValidator"
        },
        "jsonResponseField": {
          "type": "boolean"
        },
        "responseField": {
          "type": "string"
        },
        "typeString": {
          "type": "boolean"
        },
        "value": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ci/JsonNode"
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ParameterFieldMapStringString": {
      "type": "object",
      "properties": {
        "defaultValue": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "executionInput": {
          "type": "boolean"
        },
        "expression": {
          "type": "boolean"
        },
        "expressionValue": {
          "type": "string"
        },
        "inputSetValidator": {
          "$ref": "#/definitions/ci/InputSetValidator"
        },
        "jsonResponseField": {
          "type": "boolean"
        },
        "responseField": {
          "type": "string"
        },
        "typeString": {
          "type": "boolean"
        },
        "value": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ParameterFieldMatrixConfigInterface": {
      "type": "object",
      "properties": {
        "defaultValue": {
          "$ref": "#/definitions/ci/MatrixConfigInterface"
        },
        "executionInput": {
          "type": "boolean"
        },
        "expression": {
          "type": "boolean"
        },
        "expressionValue": {
          "type": "string"
        },
        "inputSetValidator": {
          "$ref": "#/definitions/ci/InputSetValidator"
        },
        "jsonResponseField": {
          "type": "boolean"
        },
        "responseField": {
          "type": "string"
        },
        "typeString": {
          "type": "boolean"
        },
        "value": {
          "$ref": "#/definitions/ci/MatrixConfigInterface"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ParameterFieldPlatform": {
      "type": "object",
      "properties": {
        "defaultValue": {
          "$ref": "#/definitions/ci/Platform"
        },
        "executionInput": {
          "type": "boolean"
        },
        "expression": {
          "type": "boolean"
        },
        "expressionValue": {
          "type": "string"
        },
        "inputSetValidator": {
          "$ref": "#/definitions/ci/InputSetValidator"
        },
        "jsonResponseField": {
          "type": "boolean"
        },
        "responseField": {
          "type": "string"
        },
        "typeString": {
          "type": "boolean"
        },
        "value": {
          "$ref": "#/definitions/ci/Platform"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ParameterFieldTILanguage": {
      "type": "object",
      "properties": {
        "defaultValue": {
          "type": "string",
          "enum": [
            "Java",
            "Kotlin",
            "Scala",
            "Csharp"
          ]
        },
        "executionInput": {
          "type": "boolean"
        },
        "expression": {
          "type": "boolean"
        },
        "expressionValue": {
          "type": "string"
        },
        "inputSetValidator": {
          "$ref": "#/definitions/ci/InputSetValidator"
        },
        "jsonResponseField": {
          "type": "boolean"
        },
        "responseField": {
          "type": "string"
        },
        "typeString": {
          "type": "boolean"
        },
        "value": {
          "type": "string",
          "enum": [
            "Java",
            "Kotlin",
            "Scala",
            "Csharp"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PersistentVolumeClaimYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/ContainerVolume"
        },
        {
          "type": "object",
          "required": [
            "mountPath",
            "spec",
            "type"
          ],
          "properties": {
            "mountPath": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/ci/PersistentVolumeClaimYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "EmptyDir",
                "PersistentVolumeClaim",
                "HostPath"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PersistentVolumeClaimYamlSpec": {
      "type": "object",
      "required": [
        "claimName"
      ],
      "properties": {
        "claimName": {
          "type": "string"
        },
        "readOnly": {
          "type": "boolean"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PipelineRollbackFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "PipelineRollback"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "Platform": {
      "type": "object",
      "properties": {
        "arch": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Amd64",
                "Arm64"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "os": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Linux",
                "MacOS",
                "Windows"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PluginStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/CIStepInfo"
        },
        {
          "type": "object",
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "entrypoint": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "image": {
              "type": "string"
            },
            "imagePullPolicy": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Always",
                    "Never",
                    "IfNotPresent"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "privileged": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "reports": {
              "oneOf": [
                {
                  "$ref": "#/definitions/ci/UnitTestReport"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "resources": {
              "$ref": "#/definitions/ci/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "settings": {
              "oneOf": [
                {
                  "$ref": "#/definitions/ci/ParameterFieldMapStringJsonNode"
                },
                {
                  "type": "string"
                }
              ]
            },
            "uses": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "properties": {
        "connectorRef": {
          "type": "string"
        },
        "entrypoint": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ]
        },
        "image": {
          "type": "string"
        },
        "imagePullPolicy": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Always",
                "Never",
                "IfNotPresent"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "privileged": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "reports": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/UnitTestReport"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "resources": {
          "$ref": "#/definitions/ci/ContainerResource"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "settings": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/ParameterFieldMapStringJsonNode"
            },
            {
              "type": "string"
            }
          ]
        },
        "uses": {
          "type": "string"
        }
      }
    },
    "PluginStepInfoV1": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/StepSpecType"
        },
        {
          "type": "object",
          "properties": {
            "envs": {
              "oneOf": [
                {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "image": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "privileged": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "pull": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "always",
                    "never",
                    "if-not-exists"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "resources": {
              "$ref": "#/definitions/ci/ContainerResource"
            },
            "user": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "uses": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "with": {
              "oneOf": [
                {
                  "$ref": "#/definitions/ci/ParameterFieldMapStringJsonNode"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PodSetupInfo": {
      "type": "object",
      "required": [
        "stageCpuRequest",
        "stageMemoryRequest",
        "volumeToMountPath"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "podSetupParams": {
          "$ref": "#/definitions/ci/PodSetupParams"
        },
        "pvcParamsList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ci/PVCParams"
          }
        },
        "serviceGrpcPortList": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "serviceIdList": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "stageCpuRequest": {
          "type": "integer",
          "format": "int32"
        },
        "stageMemoryRequest": {
          "type": "integer",
          "format": "int32"
        },
        "volumeToMountPath": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "volumes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ci/PodVolume"
          }
        },
        "workDirPath": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PodSetupParams": {
      "type": "object",
      "properties": {
        "containerDefinitionInfos": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ci/ContainerDefinitionInfo"
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PodVolume": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "EmptyDir",
            "PersistentVolumeClaim",
            "HostPath"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PodsSetupInfo": {
      "type": "object",
      "properties": {
        "podSetupInfoList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ci/PodSetupInfo"
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PolicyConfig": {
      "type": "object",
      "required": [
        "policySets"
      ],
      "properties": {
        "policySets": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PrismaCloudStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "config",
            "mode",
            "target"
          ],
          "properties": {
            "advanced": {
              "$ref": "#/definitions/ci/STOYamlAdvancedSettings"
            },
            "auth": {
              "$ref": "#/definitions/ci/STOYamlAuth"
            },
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/ci/ParameterFieldListString"
            },
            "config": {
              "type": "string",
              "enum": [
                "default"
              ]
            },
            "image": {
              "$ref": "#/definitions/ci/STOYamlImage"
            },
            "imagePullPolicy": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Always",
                    "Never",
                    "IfNotPresent"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "ingestion": {
              "$ref": "#/definitions/ci/STOYamlIngestion"
            },
            "mode": {
              "type": "string",
              "enum": [
                "ingestion",
                "orchestration",
                "extraction"
              ]
            },
            "outputVariables": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ci/OutputNGVariable"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "privileged": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "resources": {
              "$ref": "#/definitions/ci/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "settings": {
              "oneOf": [
                {
                  "$ref": "#/definitions/ci/ParameterFieldMapStringJsonNode"
                },
                {
                  "type": "string"
                }
              ]
            },
            "target": {
              "$ref": "#/definitions/ci/STOYamlTarget"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "config",
        "mode",
        "target"
      ],
      "properties": {
        "advanced": {
          "$ref": "#/definitions/ci/STOYamlAdvancedSettings"
        },
        "auth": {
          "$ref": "#/definitions/ci/STOYamlAuth"
        },
        "baseImageConnectorRefs": {
          "$ref": "#/definitions/ci/ParameterFieldListString"
        },
        "config": {
          "type": "string",
          "enum": [
            "default"
          ]
        },
        "image": {
          "$ref": "#/definitions/ci/STOYamlImage"
        },
        "imagePullPolicy": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Always",
                "Never",
                "IfNotPresent"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "ingestion": {
          "$ref": "#/definitions/ci/STOYamlIngestion"
        },
        "mode": {
          "type": "string",
          "enum": [
            "ingestion",
            "orchestration",
            "extraction"
          ]
        },
        "outputVariables": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/OutputNGVariable"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "privileged": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "resources": {
          "$ref": "#/definitions/ci/ContainerResource"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "settings": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/ParameterFieldMapStringJsonNode"
            },
            {
              "type": "string"
            }
          ]
        },
        "target": {
          "$ref": "#/definitions/ci/STOYamlTarget"
        }
      }
    },
    "ProceedWithDefaultValuesFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "ProceedWithDefaultValues"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ProwlerStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "config",
            "mode",
            "target"
          ],
          "properties": {
            "advanced": {
              "$ref": "#/definitions/ci/STOYamlAdvancedSettings"
            },
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/ci/ParameterFieldListString"
            },
            "config": {
              "type": "string",
              "enum": [
                "default"
              ]
            },
            "imagePullPolicy": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Always",
                    "Never",
                    "IfNotPresent"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "ingestion": {
              "$ref": "#/definitions/ci/STOYamlIngestion"
            },
            "mode": {
              "type": "string",
              "enum": [
                "ingestion",
                "orchestration",
                "extraction"
              ]
            },
            "outputVariables": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ci/OutputNGVariable"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "privileged": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "resources": {
              "$ref": "#/definitions/ci/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "settings": {
              "oneOf": [
                {
                  "$ref": "#/definitions/ci/ParameterFieldMapStringJsonNode"
                },
                {
                  "type": "string"
                }
              ]
            },
            "target": {
              "$ref": "#/definitions/ci/STOYamlTarget"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "config",
        "mode",
        "target"
      ],
      "properties": {
        "advanced": {
          "$ref": "#/definitions/ci/STOYamlAdvancedSettings"
        },
        "baseImageConnectorRefs": {
          "$ref": "#/definitions/ci/ParameterFieldListString"
        },
        "config": {
          "type": "string",
          "enum": [
            "default"
          ]
        },
        "imagePullPolicy": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Always",
                "Never",
                "IfNotPresent"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "ingestion": {
          "$ref": "#/definitions/ci/STOYamlIngestion"
        },
        "mode": {
          "type": "string",
          "enum": [
            "ingestion",
            "orchestration",
            "extraction"
          ]
        },
        "outputVariables": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/OutputNGVariable"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "privileged": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "resources": {
          "$ref": "#/definitions/ci/ContainerResource"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "settings": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/ParameterFieldMapStringJsonNode"
            },
            {
              "type": "string"
            }
          ]
        },
        "target": {
          "$ref": "#/definitions/ci/STOYamlTarget"
        }
      }
    },
    "QualysStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "config",
            "mode",
            "target"
          ],
          "properties": {
            "advanced": {
              "$ref": "#/definitions/ci/STOYamlAdvancedSettings"
            },
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/ci/ParameterFieldListString"
            },
            "config": {
              "type": "string",
              "enum": [
                "default"
              ]
            },
            "imagePullPolicy": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Always",
                    "Never",
                    "IfNotPresent"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "ingestion": {
              "$ref": "#/definitions/ci/STOYamlIngestion"
            },
            "mode": {
              "type": "string",
              "enum": [
                "ingestion",
                "orchestration",
                "extraction"
              ]
            },
            "outputVariables": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ci/OutputNGVariable"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "privileged": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "resources": {
              "$ref": "#/definitions/ci/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "settings": {
              "oneOf": [
                {
                  "$ref": "#/definitions/ci/ParameterFieldMapStringJsonNode"
                },
                {
                  "type": "string"
                }
              ]
            },
            "target": {
              "$ref": "#/definitions/ci/STOYamlTarget"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "config",
        "mode",
        "target"
      ],
      "properties": {
        "advanced": {
          "$ref": "#/definitions/ci/STOYamlAdvancedSettings"
        },
        "baseImageConnectorRefs": {
          "$ref": "#/definitions/ci/ParameterFieldListString"
        },
        "config": {
          "type": "string",
          "enum": [
            "default"
          ]
        },
        "imagePullPolicy": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Always",
                "Never",
                "IfNotPresent"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "ingestion": {
          "$ref": "#/definitions/ci/STOYamlIngestion"
        },
        "mode": {
          "type": "string",
          "enum": [
            "ingestion",
            "orchestration",
            "extraction"
          ]
        },
        "outputVariables": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/OutputNGVariable"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "privileged": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "resources": {
          "$ref": "#/definitions/ci/ContainerResource"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "settings": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/ParameterFieldMapStringJsonNode"
            },
            {
              "type": "string"
            }
          ]
        },
        "target": {
          "$ref": "#/definitions/ci/STOYamlTarget"
        }
      }
    },
    "ReapsawStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "config",
            "mode",
            "target"
          ],
          "properties": {
            "advanced": {
              "$ref": "#/definitions/ci/STOYamlAdvancedSettings"
            },
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/ci/ParameterFieldListString"
            },
            "config": {
              "type": "string",
              "enum": [
                "default"
              ]
            },
            "imagePullPolicy": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Always",
                    "Never",
                    "IfNotPresent"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "ingestion": {
              "$ref": "#/definitions/ci/STOYamlIngestion"
            },
            "mode": {
              "type": "string",
              "enum": [
                "ingestion",
                "orchestration",
                "extraction"
              ]
            },
            "outputVariables": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ci/OutputNGVariable"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "privileged": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "resources": {
              "$ref": "#/definitions/ci/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "settings": {
              "oneOf": [
                {
                  "$ref": "#/definitions/ci/ParameterFieldMapStringJsonNode"
                },
                {
                  "type": "string"
                }
              ]
            },
            "target": {
              "$ref": "#/definitions/ci/STOYamlTarget"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "config",
        "mode",
        "target"
      ],
      "properties": {
        "advanced": {
          "$ref": "#/definitions/ci/STOYamlAdvancedSettings"
        },
        "baseImageConnectorRefs": {
          "$ref": "#/definitions/ci/ParameterFieldListString"
        },
        "config": {
          "type": "string",
          "enum": [
            "default"
          ]
        },
        "imagePullPolicy": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Always",
                "Never",
                "IfNotPresent"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "ingestion": {
          "$ref": "#/definitions/ci/STOYamlIngestion"
        },
        "mode": {
          "type": "string",
          "enum": [
            "ingestion",
            "orchestration",
            "extraction"
          ]
        },
        "outputVariables": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/OutputNGVariable"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "privileged": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "resources": {
          "$ref": "#/definitions/ci/ContainerResource"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "settings": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/ParameterFieldMapStringJsonNode"
            },
            {
              "type": "string"
            }
          ]
        },
        "target": {
          "$ref": "#/definitions/ci/STOYamlTarget"
        }
      }
    },
    "Repository": {
      "type": "object",
      "properties": {
        "branch": {
          "type": "string"
        },
        "httpURL": {
          "type": "string"
        },
        "link": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "private": {
          "type": "boolean"
        },
        "slug": {
          "type": "string"
        },
        "sshURL": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "RestoreCacheGCSStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/CIStepInfo"
        },
        {
          "type": "object",
          "required": [
            "bucket",
            "connectorRef",
            "key"
          ],
          "properties": {
            "archiveFormat": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Tar",
                    "Gzip"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/ci/ParameterFieldListString"
            },
            "bucket": {
              "type": "string"
            },
            "connectorRef": {
              "type": "string"
            },
            "failIfKeyNotFound": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            },
            "key": {
              "type": "string"
            },
            "resources": {
              "$ref": "#/definitions/ci/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "bucket",
        "connectorRef",
        "key"
      ],
      "properties": {
        "archiveFormat": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Tar",
                "Gzip"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "baseImageConnectorRefs": {
          "$ref": "#/definitions/ci/ParameterFieldListString"
        },
        "bucket": {
          "type": "string"
        },
        "connectorRef": {
          "type": "string"
        },
        "failIfKeyNotFound": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ]
        },
        "key": {
          "type": "string"
        },
        "resources": {
          "$ref": "#/definitions/ci/ContainerResource"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        }
      }
    },
    "RestoreCacheS3StepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/CIStepInfo"
        },
        {
          "type": "object",
          "required": [
            "bucket",
            "connectorRef",
            "key"
          ],
          "properties": {
            "archiveFormat": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Tar",
                    "Gzip"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/ci/ParameterFieldListString"
            },
            "bucket": {
              "type": "string"
            },
            "connectorRef": {
              "type": "string"
            },
            "endpoint": {
              "type": "string"
            },
            "failIfKeyNotFound": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            },
            "key": {
              "type": "string"
            },
            "pathStyle": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            },
            "region": {
              "type": "string"
            },
            "resources": {
              "$ref": "#/definitions/ci/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "bucket",
        "connectorRef",
        "key"
      ],
      "properties": {
        "archiveFormat": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Tar",
                "Gzip"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "baseImageConnectorRefs": {
          "$ref": "#/definitions/ci/ParameterFieldListString"
        },
        "bucket": {
          "type": "string"
        },
        "connectorRef": {
          "type": "string"
        },
        "endpoint": {
          "type": "string"
        },
        "failIfKeyNotFound": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ]
        },
        "key": {
          "type": "string"
        },
        "pathStyle": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ]
        },
        "region": {
          "type": "string"
        },
        "resources": {
          "$ref": "#/definitions/ci/ContainerResource"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        }
      }
    },
    "RetryFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": [
            "spec",
            "type"
          ],
          "properties": {
            "spec": {
              "readOnly": true,
              "$ref": "#/definitions/ci/RetryFailureSpecConfig"
            },
            "type": {
              "type": "string",
              "enum": [
                "Retry"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "RetryFailureSpecConfig": {
      "type": "object",
      "required": [
        "onRetryFailure",
        "retryCount",
        "retryIntervals"
      ],
      "properties": {
        "onRetryFailure": {
          "$ref": "#/definitions/ci/OnRetryFailureConfig"
        },
        "retryCount": {
          "type": "integer",
          "format": "int32"
        },
        "retryIntervals": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "maxItems": 2147483647,
          "minItems": 1
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "RunStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/CIStepInfo"
        },
        {
          "type": "object",
          "required": [
            "command"
          ],
          "properties": {
            "command": {
              "type": "string"
            },
            "connectorRef": {
              "type": "string"
            },
            "envVariables": {
              "oneOf": [
                {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "image": {
              "type": "string"
            },
            "imagePullPolicy": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Always",
                    "Never",
                    "IfNotPresent"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "outputVariables": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ci/OutputNGVariable"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "privileged": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "reports": {
              "oneOf": [
                {
                  "$ref": "#/definitions/ci/UnitTestReport"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "resources": {
              "$ref": "#/definitions/ci/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "shell": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Sh",
                    "Bash",
                    "Powershell",
                    "Pwsh",
                    "Python"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "command"
      ],
      "properties": {
        "command": {
          "type": "string"
        },
        "connectorRef": {
          "type": "string"
        },
        "envVariables": {
          "oneOf": [
            {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ]
        },
        "image": {
          "type": "string"
        },
        "imagePullPolicy": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Always",
                "Never",
                "IfNotPresent"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "outputVariables": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/OutputNGVariable"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "privileged": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "reports": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/UnitTestReport"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "resources": {
          "$ref": "#/definitions/ci/ContainerResource"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "shell": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Sh",
                "Bash",
                "Powershell",
                "Pwsh",
                "Python"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      }
    },
    "RunTestsStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/CIStepInfo"
        },
        {
          "type": "object",
          "required": [
            "args",
            "buildTool",
            "language"
          ],
          "properties": {
            "args": {
              "type": "string"
            },
            "buildEnvironment": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Core",
                    "Framework"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "buildTool": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Maven",
                    "Bazel",
                    "Gradle",
                    "Dotnet",
                    "Nunitconsole",
                    "SBT"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "connectorRef": {
              "type": "string"
            },
            "enableTestSplitting": {
              "type": "boolean"
            },
            "envVariables": {
              "oneOf": [
                {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "frameworkVersion": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "5.0",
                    "6.0"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "image": {
              "type": "string"
            },
            "imagePullPolicy": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Always",
                    "Never",
                    "IfNotPresent"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "language": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Java",
                    "Kotlin",
                    "Scala",
                    "Csharp"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "namespaces": {
              "type": "string"
            },
            "outputVariables": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ci/OutputNGVariable"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "packages": {
              "type": "string"
            },
            "postCommand": {
              "type": "string"
            },
            "preCommand": {
              "type": "string"
            },
            "privileged": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "reports": {
              "oneOf": [
                {
                  "$ref": "#/definitions/ci/UnitTestReport"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "resources": {
              "$ref": "#/definitions/ci/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "runOnlySelectedTests": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            },
            "shell": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Sh",
                    "Bash",
                    "Powershell",
                    "Pwsh",
                    "Python"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "testAnnotations": {
              "type": "string"
            },
            "testGlobs": {
              "type": "string"
            },
            "testSplitStrategy": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "ClassTiming",
                    "TestCount"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "args",
        "buildTool",
        "language"
      ],
      "properties": {
        "args": {
          "type": "string"
        },
        "buildEnvironment": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Core",
                "Framework"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "buildTool": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Maven",
                "Bazel",
                "Gradle",
                "Dotnet",
                "Nunitconsole",
                "SBT"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "connectorRef": {
          "type": "string"
        },
        "enableTestSplitting": {
          "type": "boolean"
        },
        "envVariables": {
          "oneOf": [
            {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ]
        },
        "frameworkVersion": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "5.0",
                "6.0"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "image": {
          "type": "string"
        },
        "imagePullPolicy": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Always",
                "Never",
                "IfNotPresent"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "language": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Java",
                "Kotlin",
                "Scala",
                "Csharp"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "namespaces": {
          "type": "string"
        },
        "outputVariables": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/OutputNGVariable"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "packages": {
          "type": "string"
        },
        "postCommand": {
          "type": "string"
        },
        "preCommand": {
          "type": "string"
        },
        "privileged": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "reports": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/UnitTestReport"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "resources": {
          "$ref": "#/definitions/ci/ContainerResource"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "runOnlySelectedTests": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ]
        },
        "shell": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Sh",
                "Bash",
                "Powershell",
                "Pwsh",
                "Python"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "testAnnotations": {
          "type": "string"
        },
        "testGlobs": {
          "type": "string"
        },
        "testSplitStrategy": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "ClassTiming",
                "TestCount"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      }
    },
    "Runtime": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "Docker",
            "Cloud"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "STOYamlAdvancedSettings": {
      "type": "object",
      "properties": {
        "args": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/STOYamlArgs"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "fail_on_severity": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "critical",
                "high",
                "medium",
                "low",
                "none"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "include_raw": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "log": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/STOYamlLog"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "STOYamlArgs": {
      "type": "object",
      "properties": {
        "cli": {
          "type": "string"
        },
        "passthrough": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "STOYamlAuth": {
      "type": "object",
      "required": [
        "access_token"
      ],
      "properties": {
        "access_id": {
          "type": "string"
        },
        "access_token": {
          "type": "string"
        },
        "domain": {
          "type": "string"
        },
        "ssl": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "type": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "apiKey",
                "usernamePassword"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "version": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "STOYamlBlackduckToolData": {
      "type": "object",
      "properties": {
        "project_name": {
          "type": "string"
        },
        "project_version": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "STOYamlCheckmarxToolData": {
      "type": "object",
      "properties": {
        "project_name": {
          "type": "string"
        },
        "team_name": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "STOYamlFODToolData": {
      "type": "object",
      "properties": {
        "app_name": {
          "type": "string"
        },
        "audit_type": {
          "type": "string"
        },
        "data_center": {
          "type": "string"
        },
        "entitlement": {
          "type": "string"
        },
        "lookup_type": {
          "type": "string"
        },
        "owner_id": {
          "type": "string"
        },
        "release_name": {
          "type": "string"
        },
        "scan_settings": {
          "type": "string"
        },
        "scan_type": {
          "type": "string"
        },
        "target_language": {
          "type": "string"
        },
        "target_language_version": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "STOYamlImage": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "access_id": {
          "type": "string"
        },
        "access_token": {
          "type": "string"
        },
        "domain": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "tag": {
          "type": "string"
        },
        "type": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "aws_ecr",
                "docker_v2",
                "jfrog_artifactory",
                "local_image"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "STOYamlIngestion": {
      "type": "object",
      "properties": {
        "file": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "STOYamlInstance": {
      "type": "object",
      "properties": {
        "access_id": {
          "type": "string"
        },
        "access_token": {
          "type": "string"
        },
        "domain": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "port": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "protocol": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "STOYamlJavaParameters": {
      "type": "object",
      "properties": {
        "binaries": {
          "type": "string"
        },
        "libraries": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "STOYamlLog": {
      "type": "object",
      "properties": {
        "level": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "info",
                "debug",
                "warning",
                "error"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "serializer": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "simple",
                "basic",
                "bunyan",
                "simple_onprem",
                "onprem"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "STOYamlMendToolData": {
      "type": "object",
      "properties": {
        "exclude": {
          "type": "string"
        },
        "include": {
          "type": "string"
        },
        "product_name": {
          "type": "string"
        },
        "product_token": {
          "type": "string"
        },
        "project_name": {
          "type": "string"
        },
        "project_token": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "STOYamlSonarqubeToolData": {
      "type": "object",
      "properties": {
        "exclude": {
          "type": "string"
        },
        "include": {
          "type": "string"
        },
        "java": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/STOYamlJavaParameters"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "STOYamlTarget": {
      "type": "object",
      "required": [
        "name",
        "type",
        "variant"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "type": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "repository",
                "container",
                "instance",
                "configuration"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "variant": {
          "type": "string"
        },
        "workspace": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "STOYamlVeracodeToolData": {
      "type": "object",
      "properties": {
        "app_id": {
          "type": "string"
        },
        "project_name": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "STOYamlZapToolData": {
      "type": "object",
      "properties": {
        "context": {
          "type": "string"
        },
        "port": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SaveCacheGCSStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/CIStepInfo"
        },
        {
          "type": "object",
          "required": [
            "bucket",
            "connectorRef",
            "key",
            "sourcePaths"
          ],
          "properties": {
            "archiveFormat": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Tar",
                    "Gzip"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/ci/ParameterFieldListString"
            },
            "bucket": {
              "type": "string"
            },
            "connectorRef": {
              "type": "string"
            },
            "key": {
              "type": "string"
            },
            "override": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            },
            "resources": {
              "$ref": "#/definitions/ci/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "sourcePaths": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "bucket",
        "connectorRef",
        "key",
        "sourcePaths"
      ],
      "properties": {
        "archiveFormat": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Tar",
                "Gzip"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "baseImageConnectorRefs": {
          "$ref": "#/definitions/ci/ParameterFieldListString"
        },
        "bucket": {
          "type": "string"
        },
        "connectorRef": {
          "type": "string"
        },
        "key": {
          "type": "string"
        },
        "override": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ]
        },
        "resources": {
          "$ref": "#/definitions/ci/ContainerResource"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "sourcePaths": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ]
        }
      }
    },
    "SaveCacheS3StepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/CIStepInfo"
        },
        {
          "type": "object",
          "required": [
            "bucket",
            "connectorRef",
            "key",
            "sourcePaths"
          ],
          "properties": {
            "archiveFormat": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Tar",
                    "Gzip"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/ci/ParameterFieldListString"
            },
            "bucket": {
              "type": "string"
            },
            "connectorRef": {
              "type": "string"
            },
            "endpoint": {
              "type": "string"
            },
            "key": {
              "type": "string"
            },
            "override": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            },
            "pathStyle": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            },
            "region": {
              "type": "string"
            },
            "resources": {
              "$ref": "#/definitions/ci/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "sourcePaths": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "bucket",
        "connectorRef",
        "key",
        "sourcePaths"
      ],
      "properties": {
        "archiveFormat": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Tar",
                "Gzip"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "baseImageConnectorRefs": {
          "$ref": "#/definitions/ci/ParameterFieldListString"
        },
        "bucket": {
          "type": "string"
        },
        "connectorRef": {
          "type": "string"
        },
        "endpoint": {
          "type": "string"
        },
        "key": {
          "type": "string"
        },
        "override": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ]
        },
        "pathStyle": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ]
        },
        "region": {
          "type": "string"
        },
        "resources": {
          "$ref": "#/definitions/ci/ContainerResource"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "sourcePaths": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ]
        }
      }
    },
    "SbomOrchestrationSpec": {
      "type": "object",
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SbomOrchestrationTool": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "Syft"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Syft"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/SyftSbomOrchestration"
              }
            }
          }
        }
      ]
    },
    "SbomSource": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "image"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "image"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/ImageSbomSource"
              }
            }
          }
        }
      ]
    },
    "SbomSourceSpec": {
      "type": "object",
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ScriptStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "run"
          ],
          "properties": {
            "envs": {
              "oneOf": [
                {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "image": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "outputs": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "privileged": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "pull": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "always",
                    "never",
                    "if-not-exists"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "resources": {
              "$ref": "#/definitions/ci/ContainerResource"
            },
            "run": {
              "type": "string"
            },
            "shell": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "sh",
                    "bash",
                    "powershell",
                    "pwsh",
                    "python"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "user": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SecretNGVariable": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/NGVariable"
        },
        {
          "type": "object",
          "required": [
            "value"
          ],
          "properties": {
            "default": {
              "type": "string"
            },
            "name": {
              "type": "string",
              "pattern": "^[a-zA-Z_][0-9a-zA-Z_\\.$]{0,127}$"
            },
            "type": {
              "type": "string",
              "enum": [
                "Secret"
              ]
            },
            "value": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SecurityContext": {
      "type": "object",
      "properties": {
        "allowPrivilegeEscalation": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "capabilities": {
          "$ref": "#/definitions/ci/Capabilities"
        },
        "privileged": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "procMount": {
          "type": "string"
        },
        "readOnlyRootFilesystem": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "runAsGroup": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "runAsNonRoot": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SecurityStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/CIStepInfo"
        },
        {
          "type": "object",
          "properties": {
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/ci/ParameterFieldListString"
            },
            "imagePullPolicy": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Always",
                    "Never",
                    "IfNotPresent"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "outputVariables": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ci/OutputNGVariable"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "privileged": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "resources": {
              "$ref": "#/definitions/ci/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "settings": {
              "oneOf": [
                {
                  "$ref": "#/definitions/ci/ParameterFieldMapStringJsonNode"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "properties": {
        "baseImageConnectorRefs": {
          "$ref": "#/definitions/ci/ParameterFieldListString"
        },
        "imagePullPolicy": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Always",
                "Never",
                "IfNotPresent"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "outputVariables": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/OutputNGVariable"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "privileged": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "resources": {
          "$ref": "#/definitions/ci/ContainerResource"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "settings": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/ParameterFieldMapStringJsonNode"
            },
            {
              "type": "string"
            }
          ]
        }
      }
    },
    "ShiftLeftStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "config",
            "mode",
            "target"
          ],
          "properties": {
            "advanced": {
              "$ref": "#/definitions/ci/STOYamlAdvancedSettings"
            },
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/ci/ParameterFieldListString"
            },
            "config": {
              "type": "string",
              "enum": [
                "default"
              ]
            },
            "imagePullPolicy": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Always",
                    "Never",
                    "IfNotPresent"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "ingestion": {
              "$ref": "#/definitions/ci/STOYamlIngestion"
            },
            "mode": {
              "type": "string",
              "enum": [
                "ingestion",
                "orchestration",
                "extraction"
              ]
            },
            "outputVariables": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ci/OutputNGVariable"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "privileged": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "resources": {
              "$ref": "#/definitions/ci/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "settings": {
              "oneOf": [
                {
                  "$ref": "#/definitions/ci/ParameterFieldMapStringJsonNode"
                },
                {
                  "type": "string"
                }
              ]
            },
            "target": {
              "$ref": "#/definitions/ci/STOYamlTarget"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "config",
        "mode",
        "target"
      ],
      "properties": {
        "advanced": {
          "$ref": "#/definitions/ci/STOYamlAdvancedSettings"
        },
        "baseImageConnectorRefs": {
          "$ref": "#/definitions/ci/ParameterFieldListString"
        },
        "config": {
          "type": "string",
          "enum": [
            "default"
          ]
        },
        "imagePullPolicy": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Always",
                "Never",
                "IfNotPresent"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "ingestion": {
          "$ref": "#/definitions/ci/STOYamlIngestion"
        },
        "mode": {
          "type": "string",
          "enum": [
            "ingestion",
            "orchestration",
            "extraction"
          ]
        },
        "outputVariables": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/OutputNGVariable"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "privileged": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "resources": {
          "$ref": "#/definitions/ci/ContainerResource"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "settings": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/ParameterFieldMapStringJsonNode"
            },
            {
              "type": "string"
            }
          ]
        },
        "target": {
          "$ref": "#/definitions/ci/STOYamlTarget"
        }
      }
    },
    "SniperStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "config",
            "mode",
            "target"
          ],
          "properties": {
            "advanced": {
              "$ref": "#/definitions/ci/STOYamlAdvancedSettings"
            },
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/ci/ParameterFieldListString"
            },
            "config": {
              "type": "string",
              "enum": [
                "default"
              ]
            },
            "imagePullPolicy": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Always",
                    "Never",
                    "IfNotPresent"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "ingestion": {
              "$ref": "#/definitions/ci/STOYamlIngestion"
            },
            "mode": {
              "type": "string",
              "enum": [
                "ingestion",
                "orchestration",
                "extraction"
              ]
            },
            "outputVariables": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ci/OutputNGVariable"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "privileged": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "resources": {
              "$ref": "#/definitions/ci/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "settings": {
              "oneOf": [
                {
                  "$ref": "#/definitions/ci/ParameterFieldMapStringJsonNode"
                },
                {
                  "type": "string"
                }
              ]
            },
            "target": {
              "$ref": "#/definitions/ci/STOYamlTarget"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "config",
        "mode",
        "target"
      ],
      "properties": {
        "advanced": {
          "$ref": "#/definitions/ci/STOYamlAdvancedSettings"
        },
        "baseImageConnectorRefs": {
          "$ref": "#/definitions/ci/ParameterFieldListString"
        },
        "config": {
          "type": "string",
          "enum": [
            "default"
          ]
        },
        "imagePullPolicy": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Always",
                "Never",
                "IfNotPresent"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "ingestion": {
          "$ref": "#/definitions/ci/STOYamlIngestion"
        },
        "mode": {
          "type": "string",
          "enum": [
            "ingestion",
            "orchestration",
            "extraction"
          ]
        },
        "outputVariables": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/OutputNGVariable"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "privileged": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "resources": {
          "$ref": "#/definitions/ci/ContainerResource"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "settings": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/ParameterFieldMapStringJsonNode"
            },
            {
              "type": "string"
            }
          ]
        },
        "target": {
          "$ref": "#/definitions/ci/STOYamlTarget"
        }
      }
    },
    "SnykStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "config",
            "mode",
            "target"
          ],
          "properties": {
            "advanced": {
              "$ref": "#/definitions/ci/STOYamlAdvancedSettings"
            },
            "auth": {
              "$ref": "#/definitions/ci/STOYamlAuth"
            },
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/ci/ParameterFieldListString"
            },
            "config": {
              "type": "string",
              "enum": [
                "default"
              ]
            },
            "image": {
              "$ref": "#/definitions/ci/STOYamlImage"
            },
            "imagePullPolicy": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Always",
                    "Never",
                    "IfNotPresent"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "ingestion": {
              "$ref": "#/definitions/ci/STOYamlIngestion"
            },
            "mode": {
              "type": "string",
              "enum": [
                "ingestion",
                "orchestration",
                "extraction"
              ]
            },
            "outputVariables": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ci/OutputNGVariable"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "privileged": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "resources": {
              "$ref": "#/definitions/ci/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "settings": {
              "oneOf": [
                {
                  "$ref": "#/definitions/ci/ParameterFieldMapStringJsonNode"
                },
                {
                  "type": "string"
                }
              ]
            },
            "target": {
              "$ref": "#/definitions/ci/STOYamlTarget"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "config",
        "mode",
        "target"
      ],
      "properties": {
        "advanced": {
          "$ref": "#/definitions/ci/STOYamlAdvancedSettings"
        },
        "auth": {
          "$ref": "#/definitions/ci/STOYamlAuth"
        },
        "baseImageConnectorRefs": {
          "$ref": "#/definitions/ci/ParameterFieldListString"
        },
        "config": {
          "type": "string",
          "enum": [
            "default"
          ]
        },
        "image": {
          "$ref": "#/definitions/ci/STOYamlImage"
        },
        "imagePullPolicy": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Always",
                "Never",
                "IfNotPresent"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "ingestion": {
          "$ref": "#/definitions/ci/STOYamlIngestion"
        },
        "mode": {
          "type": "string",
          "enum": [
            "ingestion",
            "orchestration",
            "extraction"
          ]
        },
        "outputVariables": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/OutputNGVariable"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "privileged": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "resources": {
          "$ref": "#/definitions/ci/ContainerResource"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "settings": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/ParameterFieldMapStringJsonNode"
            },
            {
              "type": "string"
            }
          ]
        },
        "target": {
          "$ref": "#/definitions/ci/STOYamlTarget"
        }
      }
    },
    "SonarqubeStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "config",
            "mode",
            "target"
          ],
          "properties": {
            "advanced": {
              "$ref": "#/definitions/ci/STOYamlAdvancedSettings"
            },
            "auth": {
              "$ref": "#/definitions/ci/STOYamlAuth"
            },
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/ci/ParameterFieldListString"
            },
            "config": {
              "type": "string",
              "enum": [
                "default"
              ]
            },
            "imagePullPolicy": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Always",
                    "Never",
                    "IfNotPresent"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "ingestion": {
              "$ref": "#/definitions/ci/STOYamlIngestion"
            },
            "mode": {
              "type": "string",
              "enum": [
                "ingestion",
                "orchestration",
                "extraction"
              ]
            },
            "outputVariables": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ci/OutputNGVariable"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "privileged": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "resources": {
              "$ref": "#/definitions/ci/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "settings": {
              "oneOf": [
                {
                  "$ref": "#/definitions/ci/ParameterFieldMapStringJsonNode"
                },
                {
                  "type": "string"
                }
              ]
            },
            "target": {
              "$ref": "#/definitions/ci/STOYamlTarget"
            },
            "tool": {
              "$ref": "#/definitions/ci/STOYamlSonarqubeToolData"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "config",
        "mode",
        "target"
      ],
      "properties": {
        "advanced": {
          "$ref": "#/definitions/ci/STOYamlAdvancedSettings"
        },
        "auth": {
          "$ref": "#/definitions/ci/STOYamlAuth"
        },
        "baseImageConnectorRefs": {
          "$ref": "#/definitions/ci/ParameterFieldListString"
        },
        "config": {
          "type": "string",
          "enum": [
            "default"
          ]
        },
        "imagePullPolicy": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Always",
                "Never",
                "IfNotPresent"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "ingestion": {
          "$ref": "#/definitions/ci/STOYamlIngestion"
        },
        "mode": {
          "type": "string",
          "enum": [
            "ingestion",
            "orchestration",
            "extraction"
          ]
        },
        "outputVariables": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/OutputNGVariable"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "privileged": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "resources": {
          "$ref": "#/definitions/ci/ContainerResource"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "settings": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/ParameterFieldMapStringJsonNode"
            },
            {
              "type": "string"
            }
          ]
        },
        "target": {
          "$ref": "#/definitions/ci/STOYamlTarget"
        },
        "tool": {
          "$ref": "#/definitions/ci/STOYamlSonarqubeToolData"
        }
      }
    },
    "Splitting": {
      "type": "object",
      "properties": {
        "concurrency": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "enabled": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "strategy": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "class_timing",
            "test_count"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SscaOrchestrationStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "attestation",
            "source",
            "tool"
          ],
          "properties": {
            "attestation": {
              "$ref": "#/definitions/ci/Attestation"
            },
            "source": {
              "$ref": "#/definitions/ci/SbomSource"
            },
            "tool": {
              "$ref": "#/definitions/ci/SbomOrchestrationTool"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "attestation",
        "source",
        "tool"
      ],
      "properties": {
        "attestation": {
          "$ref": "#/definitions/ci/Attestation"
        },
        "source": {
          "$ref": "#/definitions/ci/SbomSource"
        },
        "tool": {
          "$ref": "#/definitions/ci/SbomOrchestrationTool"
        }
      }
    },
    "StageRollbackFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "StageRollback"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "StageWhenCondition": {
      "type": "object",
      "required": [
        "pipelineStatus"
      ],
      "properties": {
        "condition": {
          "type": "string",
          "pattern": "^(?!<\\+input>.*\\.executionInput\\(\\)(.*)$)"
        },
        "pipelineStatus": {
          "type": "string",
          "enum": [
            "Success",
            "Failure",
            "All"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "StepElementConfig": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/ci/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/ci/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(<\\+input>.*)|(.*<\\+.*>.*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": []
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": []
    },
    "StepGroupElementConfig": {
      "type": "object",
      "required": [
        "identifier",
        "name"
      ],
      "properties": {
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "steps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ci/ExecutionWrapperConfig"
          },
          "maxItems": 2147483647,
          "minItems": 1
        },
        "strategy": {
          "$ref": "#/definitions/ci/StrategyConfig"
        },
        "template": {
          "$ref": "#/definitions/ci/TemplateLinkConfig"
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "oneOf": [
            {
              "required": [
                "template"
              ]
            },
            {
              "required": [
                "steps"
              ]
            }
          ]
        }
      ]
    },
    "StepGroupFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "StepGroupRollback"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "StepSpecType": {
      "type": "object",
      "discriminator": "type",
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "StepWhenCondition": {
      "type": "object",
      "required": [
        "stageStatus"
      ],
      "properties": {
        "condition": {
          "type": "string",
          "pattern": "^(?!<\\+input>.*\\.executionInput\\(\\)(.*)$)"
        },
        "stageStatus": {
          "type": "string",
          "enum": [
            "Success",
            "Failure",
            "All"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "StrategyConfig": {
      "type": "object",
      "properties": {
        "matrix": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/ParameterFieldMatrixConfigInterface"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "parallelism": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            },
            {
              "type": "string",
              "pattern": "(<\\+.+>.*)",
              "minLength": 1
            }
          ]
        },
        "repeat": {
          "$ref": "#/definitions/ci/HarnessForConfig"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "oneOf": [
            {
              "required": [
                "repeat"
              ]
            },
            {
              "required": [
                "parallelism"
              ]
            },
            {
              "required": [
                "matrix"
              ]
            }
          ]
        }
      ]
    },
    "StrategyExpansionData": {
      "type": "object",
      "properties": {
        "maxConcurrency": {
          "type": "integer",
          "format": "int32"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "StringNGVariable": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/NGVariable"
        },
        {
          "type": "object",
          "required": [
            "value"
          ],
          "properties": {
            "default": {
              "type": "string"
            },
            "name": {
              "type": "string",
              "pattern": "^[a-zA-Z_][0-9a-zA-Z_\\.$]{0,127}$"
            },
            "type": {
              "type": "string",
              "enum": [
                "String"
              ]
            },
            "value": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SyftSbomOrchestration": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/SbomOrchestrationSpec"
        },
        {
          "type": "object",
          "properties": {
            "format": {
              "type": "string",
              "enum": [
                "spdx-json"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SysdigStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "config",
            "mode",
            "target"
          ],
          "properties": {
            "advanced": {
              "$ref": "#/definitions/ci/STOYamlAdvancedSettings"
            },
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/ci/ParameterFieldListString"
            },
            "config": {
              "type": "string",
              "enum": [
                "default"
              ]
            },
            "imagePullPolicy": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Always",
                    "Never",
                    "IfNotPresent"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "ingestion": {
              "$ref": "#/definitions/ci/STOYamlIngestion"
            },
            "mode": {
              "type": "string",
              "enum": [
                "ingestion",
                "orchestration",
                "extraction"
              ]
            },
            "outputVariables": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ci/OutputNGVariable"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "privileged": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "resources": {
              "$ref": "#/definitions/ci/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "settings": {
              "oneOf": [
                {
                  "$ref": "#/definitions/ci/ParameterFieldMapStringJsonNode"
                },
                {
                  "type": "string"
                }
              ]
            },
            "target": {
              "$ref": "#/definitions/ci/STOYamlTarget"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "config",
        "mode",
        "target"
      ],
      "properties": {
        "advanced": {
          "$ref": "#/definitions/ci/STOYamlAdvancedSettings"
        },
        "baseImageConnectorRefs": {
          "$ref": "#/definitions/ci/ParameterFieldListString"
        },
        "config": {
          "type": "string",
          "enum": [
            "default"
          ]
        },
        "imagePullPolicy": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Always",
                "Never",
                "IfNotPresent"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "ingestion": {
          "$ref": "#/definitions/ci/STOYamlIngestion"
        },
        "mode": {
          "type": "string",
          "enum": [
            "ingestion",
            "orchestration",
            "extraction"
          ]
        },
        "outputVariables": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/OutputNGVariable"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "privileged": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "resources": {
          "$ref": "#/definitions/ci/ContainerResource"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "settings": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/ParameterFieldMapStringJsonNode"
            },
            {
              "type": "string"
            }
          ]
        },
        "target": {
          "$ref": "#/definitions/ci/STOYamlTarget"
        }
      }
    },
    "TagBuildSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/BuildSpec"
        },
        {
          "type": "object",
          "required": [
            "tag"
          ],
          "properties": {
            "tag": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "TemplateLinkConfig": {
      "type": "object",
      "required": [
        "templateRef"
      ],
      "properties": {
        "templateInputs": {
          "$ref": "#/definitions/ci/JsonNode"
        },
        "templateRef": {
          "type": "string"
        },
        "templateVariables": {
          "$ref": "#/definitions/ci/JsonNode"
        },
        "versionLabel": {
          "type": "string",
          "pattern": "^[0-9a-zA-Z][^\\s]{0,63}$"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "TenableStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "config",
            "mode",
            "target"
          ],
          "properties": {
            "advanced": {
              "$ref": "#/definitions/ci/STOYamlAdvancedSettings"
            },
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/ci/ParameterFieldListString"
            },
            "config": {
              "type": "string",
              "enum": [
                "default"
              ]
            },
            "imagePullPolicy": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Always",
                    "Never",
                    "IfNotPresent"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "ingestion": {
              "$ref": "#/definitions/ci/STOYamlIngestion"
            },
            "mode": {
              "type": "string",
              "enum": [
                "ingestion",
                "orchestration",
                "extraction"
              ]
            },
            "outputVariables": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ci/OutputNGVariable"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "privileged": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "resources": {
              "$ref": "#/definitions/ci/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "settings": {
              "oneOf": [
                {
                  "$ref": "#/definitions/ci/ParameterFieldMapStringJsonNode"
                },
                {
                  "type": "string"
                }
              ]
            },
            "target": {
              "$ref": "#/definitions/ci/STOYamlTarget"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "config",
        "mode",
        "target"
      ],
      "properties": {
        "advanced": {
          "$ref": "#/definitions/ci/STOYamlAdvancedSettings"
        },
        "baseImageConnectorRefs": {
          "$ref": "#/definitions/ci/ParameterFieldListString"
        },
        "config": {
          "type": "string",
          "enum": [
            "default"
          ]
        },
        "imagePullPolicy": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Always",
                "Never",
                "IfNotPresent"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "ingestion": {
          "$ref": "#/definitions/ci/STOYamlIngestion"
        },
        "mode": {
          "type": "string",
          "enum": [
            "ingestion",
            "orchestration",
            "extraction"
          ]
        },
        "outputVariables": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/OutputNGVariable"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "privileged": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "resources": {
          "$ref": "#/definitions/ci/ContainerResource"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "settings": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/ParameterFieldMapStringJsonNode"
            },
            {
              "type": "string"
            }
          ]
        },
        "target": {
          "$ref": "#/definitions/ci/STOYamlTarget"
        }
      }
    },
    "TestStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/StepSpecType"
        },
        {
          "type": "object",
          "properties": {
            "envs": {
              "oneOf": [
                {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "image": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "language": {
              "$ref": "#/definitions/ci/ParameterFieldTILanguage"
            },
            "outputs": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "privileged": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "pull": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "always",
                    "never",
                    "if-not-exists"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "resources": {
              "$ref": "#/definitions/ci/ContainerResource"
            },
            "shell": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "sh",
                    "bash",
                    "powershell",
                    "pwsh",
                    "python"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "splitting": {
              "$ref": "#/definitions/ci/Splitting"
            },
            "user": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "uses": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "maven",
                    "bazel",
                    "gradle",
                    "dotnet",
                    "nunit_console",
                    "sbt"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "with": {
              "oneOf": [
                {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/definitions/ci/JsonNode"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "Toleration": {
      "type": "object",
      "properties": {
        "effect": {
          "type": "string"
        },
        "key": {
          "type": "string"
        },
        "operator": {
          "type": "string"
        },
        "tolerationSeconds": {
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "UnitTestReport": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "JUnit"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "JUnit"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/JUnitTestReport"
              }
            }
          }
        }
      ]
    },
    "UnitTestReportSpec": {
      "type": "object",
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "UploadToArtifactoryStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/CIStepInfo"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "sourcePath",
            "target"
          ],
          "properties": {
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/ci/ParameterFieldListString"
            },
            "connectorRef": {
              "type": "string"
            },
            "resources": {
              "$ref": "#/definitions/ci/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "sourcePath": {
              "type": "string"
            },
            "target": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "connectorRef",
        "sourcePath",
        "target"
      ],
      "properties": {
        "baseImageConnectorRefs": {
          "$ref": "#/definitions/ci/ParameterFieldListString"
        },
        "connectorRef": {
          "type": "string"
        },
        "resources": {
          "$ref": "#/definitions/ci/ContainerResource"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "sourcePath": {
          "type": "string"
        },
        "target": {
          "type": "string"
        }
      }
    },
    "UploadToGCSStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/CIStepInfo"
        },
        {
          "type": "object",
          "required": [
            "bucket",
            "connectorRef",
            "sourcePath"
          ],
          "properties": {
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/ci/ParameterFieldListString"
            },
            "bucket": {
              "type": "string"
            },
            "connectorRef": {
              "type": "string"
            },
            "resources": {
              "$ref": "#/definitions/ci/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "sourcePath": {
              "type": "string"
            },
            "target": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "bucket",
        "connectorRef",
        "sourcePath"
      ],
      "properties": {
        "baseImageConnectorRefs": {
          "$ref": "#/definitions/ci/ParameterFieldListString"
        },
        "bucket": {
          "type": "string"
        },
        "connectorRef": {
          "type": "string"
        },
        "resources": {
          "$ref": "#/definitions/ci/ContainerResource"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "sourcePath": {
          "type": "string"
        },
        "target": {
          "type": "string"
        }
      }
    },
    "UploadToS3StepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/CIStepInfo"
        },
        {
          "type": "object",
          "required": [
            "bucket",
            "connectorRef",
            "region",
            "sourcePath"
          ],
          "properties": {
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/ci/ParameterFieldListString"
            },
            "bucket": {
              "type": "string"
            },
            "connectorRef": {
              "type": "string"
            },
            "endpoint": {
              "type": "string"
            },
            "region": {
              "type": "string"
            },
            "resources": {
              "$ref": "#/definitions/ci/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "sourcePath": {
              "type": "string"
            },
            "stripPrefix": {
              "type": "string"
            },
            "target": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "bucket",
        "connectorRef",
        "region",
        "sourcePath"
      ],
      "properties": {
        "baseImageConnectorRefs": {
          "$ref": "#/definitions/ci/ParameterFieldListString"
        },
        "bucket": {
          "type": "string"
        },
        "connectorRef": {
          "type": "string"
        },
        "endpoint": {
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "resources": {
          "$ref": "#/definitions/ci/ContainerResource"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "sourcePath": {
          "type": "string"
        },
        "stripPrefix": {
          "type": "string"
        },
        "target": {
          "type": "string"
        }
      }
    },
    "UseFromStageInfraYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/Infrastructure"
        },
        {
          "type": "object",
          "required": [
            "useFromStage"
          ],
          "properties": {
            "useFromStage": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "VeracodeStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "config",
            "mode",
            "target"
          ],
          "properties": {
            "advanced": {
              "$ref": "#/definitions/ci/STOYamlAdvancedSettings"
            },
            "auth": {
              "$ref": "#/definitions/ci/STOYamlAuth"
            },
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/ci/ParameterFieldListString"
            },
            "config": {
              "type": "string",
              "enum": [
                "default"
              ]
            },
            "imagePullPolicy": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Always",
                    "Never",
                    "IfNotPresent"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "ingestion": {
              "$ref": "#/definitions/ci/STOYamlIngestion"
            },
            "mode": {
              "type": "string",
              "enum": [
                "ingestion",
                "orchestration",
                "extraction"
              ]
            },
            "outputVariables": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ci/OutputNGVariable"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "privileged": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "resources": {
              "$ref": "#/definitions/ci/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "settings": {
              "oneOf": [
                {
                  "$ref": "#/definitions/ci/ParameterFieldMapStringJsonNode"
                },
                {
                  "type": "string"
                }
              ]
            },
            "target": {
              "$ref": "#/definitions/ci/STOYamlTarget"
            },
            "tool": {
              "$ref": "#/definitions/ci/STOYamlVeracodeToolData"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "config",
        "mode",
        "target"
      ],
      "properties": {
        "advanced": {
          "$ref": "#/definitions/ci/STOYamlAdvancedSettings"
        },
        "auth": {
          "$ref": "#/definitions/ci/STOYamlAuth"
        },
        "baseImageConnectorRefs": {
          "$ref": "#/definitions/ci/ParameterFieldListString"
        },
        "config": {
          "type": "string",
          "enum": [
            "default"
          ]
        },
        "imagePullPolicy": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Always",
                "Never",
                "IfNotPresent"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "ingestion": {
          "$ref": "#/definitions/ci/STOYamlIngestion"
        },
        "mode": {
          "type": "string",
          "enum": [
            "ingestion",
            "orchestration",
            "extraction"
          ]
        },
        "outputVariables": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/OutputNGVariable"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "privileged": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "resources": {
          "$ref": "#/definitions/ci/ContainerResource"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "settings": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/ParameterFieldMapStringJsonNode"
            },
            {
              "type": "string"
            }
          ]
        },
        "target": {
          "$ref": "#/definitions/ci/STOYamlTarget"
        },
        "tool": {
          "$ref": "#/definitions/ci/STOYamlVeracodeToolData"
        }
      }
    },
    "VmBuildJobInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/BuildJobEnvInfo"
        },
        {
          "type": "object",
          "properties": {
            "ciExecutionArgs": {
              "$ref": "#/definitions/ci/CIExecutionArgs"
            },
            "connectorRefs": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "serviceDependencies": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/DependencyElement"
              }
            },
            "stageVars": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/NGVariable"
              }
            },
            "volToMountPath": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "workDir": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "VmInfraSpec": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "Pool"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "VmInfraYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/Infrastructure"
        },
        {
          "type": "object",
          "required": [
            "spec",
            "type"
          ],
          "properties": {
            "spec": {
              "oneOf": [
                {
                  "$ref": "#/definitions/ci/VmPoolYaml"
                }
              ]
            },
            "type": {
              "type": "string",
              "enum": [
                "KubernetesDirect",
                "UseFromStage",
                "VM",
                "KubernetesHosted"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "VmPoolYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/VmInfraSpec"
        },
        {
          "type": "object",
          "required": [
            "spec",
            "type"
          ],
          "properties": {
            "spec": {
              "$ref": "#/definitions/ci/VmPoolYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "Pool"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "VmPoolYamlSpec": {
      "type": "object",
      "properties": {
        "harnessImageConnectorRef": {
          "type": "string"
        },
        "identifier": {
          "type": "string"
        },
        "initTimeout": {
          "type": "string"
        },
        "os": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Linux",
                "MacOS",
                "Windows"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "poolName": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "WebhookBaseAttributes": {
      "type": "object",
      "properties": {
        "action": {
          "type": "string"
        },
        "after": {
          "type": "string"
        },
        "authorAvatar": {
          "type": "string"
        },
        "authorEmail": {
          "type": "string"
        },
        "authorLogin": {
          "type": "string"
        },
        "authorName": {
          "type": "string"
        },
        "before": {
          "type": "string"
        },
        "link": {
          "type": "string"
        },
        "mergeSha": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "ref": {
          "type": "string"
        },
        "sender": {
          "type": "string"
        },
        "source": {
          "type": "string"
        },
        "target": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "WebhookEvent": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "PR",
            "BRANCH"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "WebhookExecutionSource": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/ExecutionSource"
        },
        {
          "type": "object",
          "properties": {
            "triggerName": {
              "type": "string"
            },
            "user": {
              "$ref": "#/definitions/ci/WebhookGitUser"
            },
            "webhookEvent": {
              "$ref": "#/definitions/ci/WebhookEvent"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "WebhookGitUser": {
      "type": "object",
      "properties": {
        "avatar": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "gitId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ZapStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "config",
            "mode",
            "target"
          ],
          "properties": {
            "advanced": {
              "$ref": "#/definitions/ci/STOYamlAdvancedSettings"
            },
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/ci/ParameterFieldListString"
            },
            "config": {
              "type": "string",
              "enum": [
                "default",
                "quick",
                "attack",
                "standard"
              ]
            },
            "imagePullPolicy": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Always",
                    "Never",
                    "IfNotPresent"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "ingestion": {
              "$ref": "#/definitions/ci/STOYamlIngestion"
            },
            "instance": {
              "$ref": "#/definitions/ci/STOYamlInstance"
            },
            "mode": {
              "type": "string",
              "enum": [
                "ingestion",
                "orchestration",
                "extraction"
              ]
            },
            "outputVariables": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ci/OutputNGVariable"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "privileged": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "resources": {
              "$ref": "#/definitions/ci/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "settings": {
              "oneOf": [
                {
                  "$ref": "#/definitions/ci/ParameterFieldMapStringJsonNode"
                },
                {
                  "type": "string"
                }
              ]
            },
            "target": {
              "$ref": "#/definitions/ci/STOYamlTarget"
            },
            "tool": {
              "$ref": "#/definitions/ci/STOYamlZapToolData"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "config",
        "mode",
        "target"
      ],
      "properties": {
        "advanced": {
          "$ref": "#/definitions/ci/STOYamlAdvancedSettings"
        },
        "baseImageConnectorRefs": {
          "$ref": "#/definitions/ci/ParameterFieldListString"
        },
        "config": {
          "type": "string",
          "enum": [
            "default",
            "quick",
            "attack",
            "standard"
          ]
        },
        "imagePullPolicy": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Always",
                "Never",
                "IfNotPresent"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "ingestion": {
          "$ref": "#/definitions/ci/STOYamlIngestion"
        },
        "instance": {
          "$ref": "#/definitions/ci/STOYamlInstance"
        },
        "mode": {
          "type": "string",
          "enum": [
            "ingestion",
            "orchestration",
            "extraction"
          ]
        },
        "outputVariables": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/OutputNGVariable"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "privileged": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "resources": {
          "$ref": "#/definitions/ci/ContainerResource"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "settings": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/ParameterFieldMapStringJsonNode"
            },
            {
              "type": "string"
            }
          ]
        },
        "target": {
          "$ref": "#/definitions/ci/STOYamlTarget"
        },
        "tool": {
          "$ref": "#/definitions/ci/STOYamlZapToolData"
        }
      }
    },
    "CIStepInfo": {
      "type": "object",
      "discriminator": "type",
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SscaOrchestrationStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/ci/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/ci/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "SscaOrchestration"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "SscaOrchestration"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/SscaOrchestrationStepInfo"
              }
            }
          }
        }
      ]
    },
    "RunStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/ci/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/ci/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "Run"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Run"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/RunStepInfo"
              }
            }
          }
        }
      ]
    },
    "BackgroundStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/ci/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/ci/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "Background"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Background"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/BackgroundStepInfo"
              }
            }
          }
        }
      ]
    },
    "RunTestStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/ci/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/ci/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "RunTests"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "RunTests"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/RunTestsStepInfo"
              }
            }
          }
        }
      ]
    },
    "ArtifactoryUploadNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/ci/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/ci/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "ArtifactoryUpload"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "ArtifactoryUpload"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/UploadToArtifactoryStepInfo"
              }
            }
          }
        }
      ]
    },
    "S3UploadNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/ci/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/ci/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "S3Upload"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "S3Upload"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/UploadToS3StepInfo"
              }
            }
          }
        }
      ]
    },
    "GCSUploadNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/ci/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/ci/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "GCSUpload"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "GCSUpload"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/UploadToGCSStepInfo"
              }
            }
          }
        }
      ]
    },
    "BuildAndPushDockerNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/ci/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/ci/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "BuildAndPushDockerRegistry"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "BuildAndPushDockerRegistry"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/DockerStepInfo"
              }
            }
          }
        }
      ]
    },
    "BuildAndPushECRNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/ci/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/ci/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "BuildAndPushECR"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "BuildAndPushECR"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/ECRStepInfo"
              }
            }
          }
        }
      ]
    },
    "BuildAndPushGCRNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/ci/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/ci/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "BuildAndPushGCR"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "BuildAndPushGCR"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/GCRStepInfo"
              }
            }
          }
        }
      ]
    },
    "BuildAndPushACRNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/ci/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/ci/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "BuildAndPushACR"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "BuildAndPushACR"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/ACRStepInfo"
              }
            }
          }
        }
      ]
    },
    "PluginStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/ci/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/ci/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "Plugin"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Plugin"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/PluginStepInfo"
              }
            }
          }
        }
      ]
    },
    "RestoreCacheGCSNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/ci/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/ci/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "RestoreCacheGCS"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "RestoreCacheGCS"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/RestoreCacheGCSStepInfo"
              }
            }
          }
        }
      ]
    },
    "RestoreCacheS3Node": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/ci/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/ci/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "RestoreCacheS3"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "RestoreCacheS3"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/RestoreCacheS3StepInfo"
              }
            }
          }
        }
      ]
    },
    "SaveCacheGCSNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/ci/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/ci/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "SaveCacheGCS"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "SaveCacheGCS"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/SaveCacheGCSStepInfo"
              }
            }
          }
        }
      ]
    },
    "SaveCacheS3Node": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/ci/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/ci/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "SaveCacheS3"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "SaveCacheS3"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/SaveCacheS3StepInfo"
              }
            }
          }
        }
      ]
    },
    "SecurityNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/ci/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/ci/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "Security"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "AWSECR"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/AwsEcrStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "AquaTrivy"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/AquaTrivyStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Bandit"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/BanditStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "BlackDuck"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/BlackDuckStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Brakeman"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/BrakemanStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Burp"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/BurpStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Checkmarx"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/CheckmarxStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Clair"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/ClairStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "DataTheorem"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/DataTheoremStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "DockerContentTrust"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/DockerContentTrustStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "External"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/ExternalStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "FortifyOnDemand"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/FortifyOnDemandStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Grype"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/GrypeStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "JfrogXray"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/JfrogXrayStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Mend"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/MendStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Metasploit"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/MetasploitStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Nessus"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/NessusStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "NexusIQ"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/NexusIQStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Nikto"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/NiktoStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Nmap"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/NmapStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Openvas"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/OpenvasStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Owasp"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/OwaspStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "PrismaCloud"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/PrismaCloudStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Prowler"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/ProwlerStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Qualys"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/QualysStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Reapsaw"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/ReapsawStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Security"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/SecurityStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "ShiftLeft"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/ShiftLeftStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Sniper"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/SniperStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Snyk"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/SnykStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Sonarqube"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/SonarqubeStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Sysdig"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/SysdigStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Tenable"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/TenableStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Veracode"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/VeracodeStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Zap"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/ZapStepInfo"
              }
            }
          }
        }
      ]
    },
    "AquaTrivyScanNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/ci/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/ci/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "AquaTrivy"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "AquaTrivy"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/AquaTrivyStepInfo"
              }
            }
          }
        }
      ]
    },
    "AwsEcrScanNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/ci/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/ci/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "AWSECR"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "AWSECR"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/AwsEcrStepInfo"
              }
            }
          }
        }
      ]
    },
    "BanditScanNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/ci/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/ci/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "Bandit"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Bandit"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/BanditStepInfo"
              }
            }
          }
        }
      ]
    },
    "BlackDuckScanNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/ci/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/ci/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "BlackDuck"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "BlackDuck"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/BlackDuckStepInfo"
              }
            }
          }
        }
      ]
    },
    "BrakemanScanNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/ci/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/ci/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "Brakeman"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Brakeman"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/BrakemanStepInfo"
              }
            }
          }
        }
      ]
    },
    "BurpScanNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/ci/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/ci/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "Burp"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Burp"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/BurpStepInfo"
              }
            }
          }
        }
      ]
    },
    "CheckmarxScanNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/ci/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/ci/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "Checkmarx"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Checkmarx"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/CheckmarxStepInfo"
              }
            }
          }
        }
      ]
    },
    "ClairScanNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/ci/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/ci/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "Clair"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Clair"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/ClairStepInfo"
              }
            }
          }
        }
      ]
    },
    "DataTheoremScanNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/ci/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/ci/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "DataTheorem"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "DataTheorem"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/DataTheoremStepInfo"
              }
            }
          }
        }
      ]
    },
    "DockerContentTrustScanNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/ci/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/ci/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "DockerContentTrust"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "DockerContentTrust"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/DockerContentTrustStepInfo"
              }
            }
          }
        }
      ]
    },
    "ExternalScanNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/ci/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/ci/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "External"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "External"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/ExternalStepInfo"
              }
            }
          }
        }
      ]
    },
    "FortifyOnDemandScanNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/ci/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/ci/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "FortifyOnDemand"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "FortifyOnDemand"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/FortifyOnDemandStepInfo"
              }
            }
          }
        }
      ]
    },
    "GrypeScanNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/ci/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/ci/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "Grype"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Grype"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/GrypeStepInfo"
              }
            }
          }
        }
      ]
    },
    "JfrogXrayScanNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/ci/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/ci/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "JfrogXray"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "JfrogXray"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/JfrogXrayStepInfo"
              }
            }
          }
        }
      ]
    },
    "MendScanNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/ci/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/ci/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "Mend"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Mend"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/MendStepInfo"
              }
            }
          }
        }
      ]
    },
    "MetasploitScanNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/ci/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/ci/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "Metasploit"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Metasploit"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/MetasploitStepInfo"
              }
            }
          }
        }
      ]
    },
    "NessusScanNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/ci/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/ci/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "Nessus"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Nessus"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/NessusStepInfo"
              }
            }
          }
        }
      ]
    },
    "NexusIQScanNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/ci/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/ci/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "NexusIQ"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "NexusIQ"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/NexusIQStepInfo"
              }
            }
          }
        }
      ]
    },
    "NiktoScanNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/ci/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/ci/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "Nikto"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Nikto"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/NiktoStepInfo"
              }
            }
          }
        }
      ]
    },
    "NmapScanNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/ci/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/ci/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "Nmap"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Nmap"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/NmapStepInfo"
              }
            }
          }
        }
      ]
    },
    "OpenvasScanNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/ci/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/ci/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "Openvas"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Openvas"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/OpenvasStepInfo"
              }
            }
          }
        }
      ]
    },
    "OwaspScanNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/ci/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/ci/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "Owasp"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Owasp"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/OwaspStepInfo"
              }
            }
          }
        }
      ]
    },
    "PrismaCloudScanNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/ci/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/ci/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "PrismaCloud"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "PrismaCloud"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/PrismaCloudStepInfo"
              }
            }
          }
        }
      ]
    },
    "ProwlerScanNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/ci/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/ci/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "Prowler"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Prowler"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/ProwlerStepInfo"
              }
            }
          }
        }
      ]
    },
    "QualysScanNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/ci/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/ci/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "Qualys"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Qualys"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/QualysStepInfo"
              }
            }
          }
        }
      ]
    },
    "ReapsawScanNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/ci/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/ci/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "Reapsaw"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Reapsaw"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/ReapsawStepInfo"
              }
            }
          }
        }
      ]
    },
    "ShiftLeftScanNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/ci/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/ci/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "ShiftLeft"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "ShiftLeft"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/ShiftLeftStepInfo"
              }
            }
          }
        }
      ]
    },
    "SniperScanNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/ci/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/ci/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "Sniper"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Sniper"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/SniperStepInfo"
              }
            }
          }
        }
      ]
    },
    "SnykScanNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/ci/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/ci/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "Snyk"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Snyk"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/SnykStepInfo"
              }
            }
          }
        }
      ]
    },
    "SonarqubeScanNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/ci/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/ci/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "Sonarqube"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Sonarqube"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/SonarqubeStepInfo"
              }
            }
          }
        }
      ]
    },
    "SysdigScanNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/ci/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/ci/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "Sysdig"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Sysdig"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/SysdigStepInfo"
              }
            }
          }
        }
      ]
    },
    "TenableScanNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/ci/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/ci/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "Tenable"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Tenable"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/TenableStepInfo"
              }
            }
          }
        }
      ]
    },
    "VeracodeScanNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/ci/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/ci/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "Veracode"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Veracode"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/VeracodeStepInfo"
              }
            }
          }
        }
      ]
    },
    "ZapScanNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/ci/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/ci/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "Zap"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Zap"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/ZapStepInfo"
              }
            }
          }
        }
      ]
    },
    "GitCloneStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/ci/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/ci/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "GitClone"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "GitClone"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/GitCloneStepInfo"
              }
            }
          }
        }
      ]
    },
    "ActionStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/ci/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/ci/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "Action"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Action"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/ActionStepInfo"
              }
            }
          }
        }
      ]
    },
    "BitriseStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/ci/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/ci/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "Bitrise"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Bitrise"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/BitriseStepInfo"
              }
            }
          }
        }
      ]
    },
    "AddRuleYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/PatchInstruction"
        },
        {
          "type": "object",
          "required": [
            "identifier",
            "spec",
            "type"
          ],
          "properties": {
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/ci/AddRuleYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "AddRule"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AddRuleYamlSpec": {
      "type": "object",
      "properties": {
        "clauses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ci/Clause"
          }
        },
        "distribution": {
          "$ref": "#/definitions/ci/DistributionYamlSpec"
        },
        "priority": {
          "type": "integer",
          "format": "int32"
        },
        "serve": {
          "$ref": "#/definitions/ci/Serve"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AddSegmentToVariationTargetMapYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/PatchInstruction"
        },
        {
          "type": "object",
          "required": [
            "identifier",
            "spec",
            "type"
          ],
          "properties": {
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/ci/AddSegmentToVariationTargetMapYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "AddSegmentToVariationTargetMap"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AddSegmentToVariationTargetMapYamlSpec": {
      "type": "object",
      "required": [
        "segments",
        "variation"
      ],
      "properties": {
        "segments": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "variation": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AddTargetsToVariationTargetMapYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/PatchInstruction"
        },
        {
          "type": "object",
          "required": [
            "identifier",
            "spec",
            "type"
          ],
          "properties": {
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/ci/AddTargetsToVariationTargetMapYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "AddTargetsToVariationTargetMap"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AddTargetsToVariationTargetMapYamlSpec": {
      "type": "object",
      "required": [
        "targets",
        "variation"
      ],
      "properties": {
        "targets": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "variation": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ApproverInputInfo": {
      "type": "object",
      "properties": {
        "defaultValue": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "minLength": 1
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "Approvers": {
      "type": "object",
      "required": [
        "disallowPipelineExecutor",
        "minimumCount",
        "userGroups"
      ],
      "properties": {
        "disallowPipelineExecutor": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ]
        },
        "minimumCount": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "userGroups": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              },
              "maxItems": 2147483647,
              "minItems": 1
            },
            {
              "type": "string",
              "pattern": "(<\\+.+>.*)",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "BarrierStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "barrierRef"
          ],
          "properties": {
            "barrierRef": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "Clause": {
      "type": "object",
      "required": [
        "attribute",
        "id",
        "negate",
        "op",
        "values"
      ],
      "properties": {
        "attribute": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "negate": {
          "type": "boolean"
        },
        "op": {
          "type": "string"
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ClauseYamlSpec": {
      "type": "object",
      "required": [
        "op",
        "values"
      ],
      "properties": {
        "attribute": {
          "type": "string"
        },
        "op": {
          "type": "string"
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "Condition": {
      "type": "object",
      "required": [
        "key",
        "operator",
        "value"
      ],
      "properties": {
        "key": {
          "type": "string"
        },
        "operator": {
          "type": "string",
          "enum": [
            "equals",
            "not equals",
            "in",
            "not in"
          ]
        },
        "value": {
          "type": "string",
          "minLength": 1
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ContainerInfraYamlSpec": {
      "type": "object",
      "required": [
        "connectorRef",
        "namespace",
        "resources"
      ],
      "properties": {
        "annotations": {
          "oneOf": [
            {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ]
        },
        "automountServiceAccountToken": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "connectorRef": {
          "type": "string"
        },
        "containerSecurityContext": {
          "oneOf": [
            {
              "$ref": "#/definitions/ci/SecurityContext"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "initTimeout": {
          "type": "string"
        },
        "labels": {
          "oneOf": [
            {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ]
        },
        "namespace": {
          "type": "string",
          "minLength": 1,
          "maxLength": 2147483647
        },
        "nodeSelector": {
          "oneOf": [
            {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "os": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Linux",
                "MacOS",
                "Windows"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "priorityClassName": {
          "type": "string"
        },
        "resources": {
          "$ref": "#/definitions/ci/ContainerResource"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "serviceAccountName": {
          "type": "string"
        },
        "tolerations": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/Toleration"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "volumes": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/ContainerVolume"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ContainerK8sInfra": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/ContainerStepInfra"
        },
        {
          "type": "object",
          "required": [
            "spec",
            "type"
          ],
          "properties": {
            "spec": {
              "$ref": "#/definitions/ci/ContainerInfraYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "KubernetesDirect"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ContainerStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "command",
            "infrastructure"
          ],
          "properties": {
            "command": {
              "type": "string"
            },
            "connectorRef": {
              "type": "string"
            },
            "entrypoint": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "envVariables": {
              "oneOf": [
                {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "image": {
              "type": "string"
            },
            "imagePullPolicy": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Always",
                    "Never",
                    "IfNotPresent"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "infrastructure": {
              "oneOf": [
                {
                  "$ref": "#/definitions/ci/ContainerK8sInfra"
                }
              ]
            },
            "metadata": {
              "type": "string"
            },
            "outputVariables": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ci/OutputNGVariable"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "privileged": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "settings": {
              "oneOf": [
                {
                  "$ref": "#/definitions/ci/ParameterFieldMapStringJsonNode"
                },
                {
                  "type": "string"
                }
              ]
            },
            "shell": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Sh",
                    "Bash",
                    "Powershell",
                    "Pwsh",
                    "Python"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ContainerStepInfra": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "KubernetesDirect"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ContainerVolume": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "EmptyDir",
            "PersistentVolumeClaim",
            "HostPath"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CriteriaSpec": {
      "type": "object",
      "discriminator": "type",
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CriteriaSpecWrapper": {
      "type": "object",
      "required": [
        "spec",
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "Jexl",
            "KeyValues"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Jexl"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/JexlCriteriaSpec"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "KeyValues"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/KeyValuesCriteriaSpec"
              }
            }
          }
        }
      ]
    },
    "CustomApprovalStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "approvalCriteria",
            "retryInterval",
            "scriptTimeout",
            "shell",
            "source"
          ],
          "properties": {
            "approvalCriteria": {
              "$ref": "#/definitions/ci/CriteriaSpecWrapper"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "environmentVariables": {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/ci/NumberNGVariable"
                  },
                  {
                    "$ref": "#/definitions/ci/SecretNGVariable"
                  },
                  {
                    "$ref": "#/definitions/ci/StringNGVariable"
                  }
                ]
              }
            },
            "outputVariables": {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/ci/NumberNGVariable"
                  },
                  {
                    "$ref": "#/definitions/ci/SecretNGVariable"
                  },
                  {
                    "$ref": "#/definitions/ci/StringNGVariable"
                  }
                ]
              }
            },
            "rejectionCriteria": {
              "$ref": "#/definitions/ci/CriteriaSpecWrapper"
            },
            "retryInterval": {
              "type": "string",
              "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(<\\+input>.*)|(.*<\\+.*>.*)|(^$))$"
            },
            "scriptTimeout": {
              "type": "string",
              "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(<\\+input>.*)|(.*<\\+.*>.*)|(^$))$"
            },
            "shell": {
              "type": "string",
              "enum": [
                "Bash",
                "PowerShell"
              ]
            },
            "source": {
              "$ref": "#/definitions/ci/ShellScriptSourceWrapper"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CustomPolicyStepSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/PolicySpec"
        },
        {
          "type": "object",
          "required": [
            "payload"
          ],
          "properties": {
            "payload": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "Distribution": {
      "type": "object",
      "required": [
        "bucketBy",
        "variations"
      ],
      "properties": {
        "bucketBy": {
          "type": "string"
        },
        "variations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ci/WeightedVariation"
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "DistributionYamlSpec": {
      "type": "object",
      "required": [
        "bucketBy"
      ],
      "properties": {
        "bucketBy": {
          "type": "string"
        },
        "clauses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ci/ClauseYamlSpec"
          }
        },
        "variations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ci/VariationYamlSpec"
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "EmailStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "subject",
            "to"
          ],
          "properties": {
            "body": {
              "type": "string"
            },
            "cc": {
              "type": "string"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "subject": {
              "type": "string"
            },
            "to": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ExecutionTarget": {
      "type": "object",
      "properties": {
        "connectorRef": {
          "type": "string"
        },
        "host": {
          "type": "string"
        },
        "workingDirectory": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "FlagConfigurationStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "environment",
            "feature",
            "instructions"
          ],
          "properties": {
            "environment": {
              "type": "string"
            },
            "feature": {
              "type": "string"
            },
            "instructions": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ci/PatchInstruction"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "HarnessApprovalStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "approvers",
            "includePipelineExecutionHistory"
          ],
          "properties": {
            "approvalMessage": {
              "type": "string",
              "minLength": 1
            },
            "approverInputs": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/ApproverInputInfo"
              }
            },
            "approvers": {
              "$ref": "#/definitions/ci/Approvers"
            },
            "includePipelineExecutionHistory": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "HarnessFileStoreSource": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/ShellScriptBaseSource"
        },
        {
          "type": "object",
          "properties": {
            "file": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "HttpHeaderConfig": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "HttpStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "method",
            "url"
          ],
          "properties": {
            "assertion": {
              "type": "string"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "headers": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/HttpHeaderConfig"
              }
            },
            "method": {
              "type": "string"
            },
            "outputVariables": {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/ci/NumberNGVariable"
                  },
                  {
                    "$ref": "#/definitions/ci/SecretNGVariable"
                  },
                  {
                    "$ref": "#/definitions/ci/StringNGVariable"
                  }
                ]
              }
            },
            "requestBody": {
              "type": "string"
            },
            "url": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ImportDataSpec": {
      "type": "object",
      "discriminator": "type",
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ImportDataSpecWrapper": {
      "type": "object",
      "required": [
        "spec",
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "Json",
            "KeyValues"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Json"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/JsonImportDataSpec"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "KeyValues"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/KeyValuesImportDataSpec"
              }
            }
          }
        }
      ]
    },
    "JexlCriteriaSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/CriteriaSpec"
        },
        {
          "type": "object",
          "required": [
            "expression"
          ],
          "properties": {
            "expression": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "JiraApprovalStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "approvalCriteria",
            "connectorRef",
            "issueKey"
          ],
          "properties": {
            "approvalCriteria": {
              "$ref": "#/definitions/ci/CriteriaSpecWrapper"
            },
            "connectorRef": {
              "type": "string"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "issueKey": {
              "type": "string"
            },
            "issueType": {
              "type": "string"
            },
            "projectKey": {
              "type": "string"
            },
            "rejectionCriteria": {
              "$ref": "#/definitions/ci/CriteriaSpecWrapper"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "JiraCreateStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "issueType",
            "projectKey"
          ],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "fields": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/JiraField"
              }
            },
            "issueType": {
              "type": "string"
            },
            "projectKey": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "JiraField": {
      "type": "object",
      "required": [
        "value"
      ],
      "properties": {
        "name": {
          "type": "string",
          "minLength": 1
        },
        "value": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "JiraUpdateStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "issueKey"
          ],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "fields": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/JiraField"
              }
            },
            "issueKey": {
              "type": "string"
            },
            "transitionTo": {
              "$ref": "#/definitions/ci/TransitionTo"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "JsonImportDataSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/ImportDataSpec"
        },
        {
          "type": "object",
          "required": [
            "jsonBody"
          ],
          "properties": {
            "jsonBody": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "KeyValuesCriteriaSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/CriteriaSpec"
        },
        {
          "type": "object",
          "required": [
            "conditions"
          ],
          "properties": {
            "conditions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/Condition"
              }
            },
            "matchAnyCondition": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "KeyValuesImportDataSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/ImportDataSpec"
        },
        {
          "type": "object",
          "required": [
            "fields"
          ],
          "properties": {
            "fields": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/ServiceNowField"
              }
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PMSStepInfo": {
      "type": "object",
      "discriminator": "type",
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PatchInstruction": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "SetFeatureFlagState",
            "SetOnVariation",
            "SetOffVariation",
            "SetDefaultVariations",
            "AddRule",
            "UpdateRule",
            "AddTargetsToVariationTargetMap",
            "RemoveTargetsToVariationTargetMap",
            "AddSegmentToVariationTargetMap",
            "RemoveSegmentsToVariationTargetMap"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PolicySpec": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PolicyStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "policySets"
          ],
          "properties": {
            "metadata": {
              "type": "string"
            },
            "policySets": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "type": {
              "type": "string"
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Custom"
              }
            }
          },
          "then": {
            "properties": {
              "policySpec": {
                "$ref": "#/definitions/ci/CustomPolicyStepSpec"
              }
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "QueueStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "key",
            "scope"
          ],
          "properties": {
            "key": {
              "type": "string"
            },
            "scope": {
              "type": "string",
              "enum": [
                "Pipeline",
                "Stage"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "RemoveSegmentToVariationTargetMapYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/PatchInstruction"
        },
        {
          "type": "object",
          "required": [
            "identifier",
            "spec",
            "type"
          ],
          "properties": {
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/ci/RemoveSegmentToVariationTargetMapYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "RemoveSegmentToVariationTargetMap"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "RemoveSegmentToVariationTargetMapYamlSpec": {
      "type": "object",
      "required": [
        "segments",
        "variation"
      ],
      "properties": {
        "segments": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "variation": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "RemoveTargetsToVariationTargetMapYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/PatchInstruction"
        },
        {
          "type": "object",
          "required": [
            "identifier",
            "spec",
            "type"
          ],
          "properties": {
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/ci/RemoveTargetsToVariationTargetMapYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "RemoveTargetsToVariationTargetMap"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "RemoveTargetsToVariationTargetMapYamlSpec": {
      "type": "object",
      "required": [
        "targets",
        "variation"
      ],
      "properties": {
        "targets": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "variation": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "Serve": {
      "type": "object",
      "properties": {
        "distribution": {
          "$ref": "#/definitions/ci/Distribution"
        },
        "variation": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ServiceNowApprovalStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "approvalCriteria",
            "connectorRef",
            "ticketNumber",
            "ticketType"
          ],
          "properties": {
            "approvalCriteria": {
              "$ref": "#/definitions/ci/CriteriaSpecWrapper"
            },
            "changeWindow": {
              "$ref": "#/definitions/ci/ServiceNowChangeWindowSpec"
            },
            "connectorRef": {
              "type": "string"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "rejectionCriteria": {
              "$ref": "#/definitions/ci/CriteriaSpecWrapper"
            },
            "ticketNumber": {
              "type": "string"
            },
            "ticketType": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ServiceNowChangeWindowSpec": {
      "type": "object",
      "required": [
        "endField",
        "startField"
      ],
      "properties": {
        "endField": {
          "type": "string"
        },
        "startField": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ServiceNowCreateStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "ticketType",
            "useServiceNowTemplate"
          ],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "fields": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/ServiceNowField"
              }
            },
            "templateName": {
              "type": "string"
            },
            "ticketType": {
              "type": "string"
            },
            "useServiceNowTemplate": {
              "type": "boolean"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ServiceNowField": {
      "type": "object",
      "required": [
        "name",
        "value"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ServiceNowImportSetStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "importData",
            "stagingTableName"
          ],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "importData": {
              "$ref": "#/definitions/ci/ImportDataSpecWrapper"
            },
            "stagingTableName": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ServiceNowUpdateStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "ticketNumber",
            "ticketType",
            "useServiceNowTemplate"
          ],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "fields": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ci/ServiceNowField"
              }
            },
            "templateName": {
              "type": "string"
            },
            "ticketNumber": {
              "type": "string"
            },
            "ticketType": {
              "type": "string"
            },
            "useServiceNowTemplate": {
              "type": "boolean"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SetDefaultVariationsYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/PatchInstruction"
        },
        {
          "type": "object",
          "required": [
            "identifier",
            "spec",
            "type"
          ],
          "properties": {
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/ci/SetDefaultVariationsYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "SetDefaultVariations"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SetDefaultVariationsYamlSpec": {
      "type": "object",
      "required": [
        "off",
        "on"
      ],
      "properties": {
        "off": {
          "type": "string"
        },
        "on": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SetFeatureFlagStateYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/PatchInstruction"
        },
        {
          "type": "object",
          "required": [
            "identifier",
            "spec",
            "type"
          ],
          "properties": {
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/ci/SetFeatureFlagStateYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "SetFeatureFlagState"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SetFeatureFlagStateYamlSpec": {
      "type": "object",
      "required": [
        "state"
      ],
      "properties": {
        "state": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SetOffVariationYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/PatchInstruction"
        },
        {
          "type": "object",
          "required": [
            "identifier",
            "spec",
            "type"
          ],
          "properties": {
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/ci/SetOffVariationYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "SetOffVariation"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SetOffVariationYamlSpec": {
      "type": "object",
      "required": [
        "variation"
      ],
      "properties": {
        "variation": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SetOnVariationYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/PatchInstruction"
        },
        {
          "type": "object",
          "required": [
            "identifier",
            "spec",
            "type"
          ],
          "properties": {
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/ci/SetOnVariationYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "SetOnVariation"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SetOnVariationYamlSpec": {
      "type": "object",
      "required": [
        "variation"
      ],
      "properties": {
        "variation": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ShellScriptBaseSource": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ShellScriptInlineSource": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/ShellScriptBaseSource"
        },
        {
          "type": "object",
          "properties": {
            "script": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ShellScriptSourceWrapper": {
      "type": "object",
      "required": [
        "spec",
        "type"
      ],
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Harness"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/HarnessFileStoreSource"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Inline"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/ci/ShellScriptInlineSource"
              }
            }
          }
        }
      ]
    },
    "ShellScriptStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "onDelegate",
            "shell",
            "source"
          ],
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "environmentVariables": {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/ci/NumberNGVariable"
                  },
                  {
                    "$ref": "#/definitions/ci/SecretNGVariable"
                  },
                  {
                    "$ref": "#/definitions/ci/StringNGVariable"
                  }
                ]
              }
            },
            "executionTarget": {
              "$ref": "#/definitions/ci/ExecutionTarget"
            },
            "metadata": {
              "type": "string"
            },
            "onDelegate": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            },
            "outputVariables": {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/ci/NumberNGVariable"
                  },
                  {
                    "$ref": "#/definitions/ci/SecretNGVariable"
                  },
                  {
                    "$ref": "#/definitions/ci/StringNGVariable"
                  }
                ]
              }
            },
            "shell": {
              "type": "string",
              "enum": [
                "Bash",
                "PowerShell"
              ]
            },
            "source": {
              "$ref": "#/definitions/ci/ShellScriptSourceWrapper"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "TransitionTo": {
      "type": "object",
      "required": [
        "status"
      ],
      "properties": {
        "status": {
          "type": "string"
        },
        "transitionName": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "UpdateRuleYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/PatchInstruction"
        },
        {
          "type": "object",
          "required": [
            "identifier",
            "spec",
            "type"
          ],
          "properties": {
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/ci/UpdateRuleYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "UpdateRule"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "UpdateRuleYamlSpec": {
      "type": "object",
      "required": [
        "bucketBy",
        "ruleID"
      ],
      "properties": {
        "bucketBy": {
          "type": "string"
        },
        "ruleID": {
          "type": "string"
        },
        "serve": {
          "$ref": "#/definitions/ci/Serve"
        },
        "variations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ci/VariationYamlSpec"
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "VariationYamlSpec": {
      "type": "object",
      "required": [
        "variation",
        "weight"
      ],
      "properties": {
        "variation": {
          "type": "string"
        },
        "weight": {
          "type": "integer",
          "format": "int32"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "WaitStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/ci/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "duration"
          ],
          "properties": {
            "duration": {
              "type": "string",
              "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(<\\+input>.*)|(.*<\\+.*>.*)|(^$))$"
            },
            "metadata": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "WeightedVariation": {
      "type": "object",
      "required": [
        "variation",
        "weight"
      ],
      "properties": {
        "variation": {
          "type": "string"
        },
        "weight": {
          "type": "integer",
          "format": "int32"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  "cd": {
    "AMIArtifactConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/ArtifactConfig"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "region"
          ],
          "properties": {
            "connectorRef": {
              "type": "string",
              "minLength": 1
            },
            "filters": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/cd/AMIFilter"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "region": {
              "type": "string",
              "minLength": 1
            },
            "tags": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/cd/AMITag"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "version": {
              "type": "string"
            },
            "versionRegex": {
              "type": "string"
            }
          }
        },
        {
          "oneOf": [
            {
              "required": [
                "versionRegex"
              ]
            },
            {
              "required": [
                "version"
              ]
            }
          ]
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AMIFilter": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AMITag": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AbortFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "Abort"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AcrArtifactConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/ArtifactConfig"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "registry",
            "repository",
            "subscriptionId"
          ],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "registry": {
              "type": "string"
            },
            "repository": {
              "type": "string"
            },
            "subscriptionId": {
              "type": "string"
            },
            "tag": {
              "type": "string"
            },
            "tagRegex": {
              "type": "string"
            }
          }
        },
        {
          "oneOf": [
            {
              "required": [
                "tagRegex"
              ]
            },
            {
              "required": [
                "tag"
              ]
            }
          ]
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AgentApplicationTargets": {
      "type": "object",
      "properties": {
        "agentId": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "applicationName": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AllHostsFilter": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/HostFilterSpec"
        },
        {
          "type": "object"
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AllowAllFilter": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/FilterSpec"
        },
        {
          "type": "object"
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AmazonS3ArtifactConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/ArtifactConfig"
        },
        {
          "type": "object",
          "required": [
            "bucketName",
            "connectorRef"
          ],
          "properties": {
            "bucketName": {
              "type": "string",
              "minLength": 1
            },
            "connectorRef": {
              "type": "string"
            },
            "filePath": {
              "type": "string"
            },
            "filePathRegex": {
              "type": "string"
            },
            "region": {
              "type": "string"
            }
          }
        },
        {
          "oneOf": [
            {
              "required": [
                "filePath"
              ]
            },
            {
              "required": [
                "filePathRegex"
              ]
            }
          ]
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ApplicationSettingsConfiguration": {
      "type": "object",
      "required": [
        "store"
      ],
      "properties": {
        "metadata": {
          "type": "string"
        },
        "store": {
          "$ref": "#/definitions/cd/StoreConfigWrapper"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ArtifactConfig": {
      "type": "object",
      "discriminator": "type",
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ArtifactListConfig": {
      "type": "object",
      "properties": {
        "primary": {
          "$ref": "#/definitions/cd/PrimaryArtifact"
        },
        "sidecars": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cd/SidecarArtifactWrapper"
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ArtifactOverrideSetWrapper": {
      "type": "object",
      "properties": {
        "overrideSet": {
          "$ref": "#/definitions/cd/ArtifactOverrideSets"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ArtifactOverrideSets": {
      "type": "object",
      "properties": {
        "artifacts": {
          "$ref": "#/definitions/cd/ArtifactListConfig"
        },
        "identifier": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ArtifactSource": {
      "type": "object",
      "required": [
        "identifier"
      ],
      "properties": {
        "identifier": {
          "type": "string"
        },
        "metadata": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "template": {
          "$ref": "#/definitions/cd/TemplateLinkConfig"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "DockerRegistry",
            "Gcr",
            "Ecr",
            "Nexus3Registry",
            "Nexus2Registry",
            "ArtifactoryRegistry",
            "CustomArtifact",
            "Acr",
            "Jenkins",
            "AmazonS3",
            "GoogleArtifactRegistry",
            "GithubPackageRegistry",
            "AzureArtifacts",
            "AmazonMachineImage",
            "Bamboo",
            "GoogleCloudStorage",
            "GoogleCloudSource"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Acr"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/AcrArtifactConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "AmazonMachineImage"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/AMIArtifactConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "AmazonS3"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/AmazonS3ArtifactConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "ArtifactoryRegistry"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/ArtifactoryRegistryArtifactConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "AzureArtifacts"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/AzureArtifactsConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Bamboo"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/BambooArtifactConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "CustomArtifact"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/CustomArtifactConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "DockerRegistry"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/DockerHubArtifactConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Ecr"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/EcrArtifactConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Gcr"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/GcrArtifactConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "GithubPackageRegistry"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/GithubPackagesArtifactConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "GoogleArtifactRegistry"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/GoogleArtifactRegistryConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "GoogleCloudSource"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/GoogleCloudSourceArtifactConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "GoogleCloudStorage"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/GoogleCloudStorageArtifactConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Jenkins"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/JenkinsArtifactConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Nexus2Registry"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/Nexus2RegistryArtifactConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Nexus3Registry"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/NexusRegistryArtifactConfig"
              }
            }
          }
        }
      ]
    },
    "ArtifactoryRegistryArtifactConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/ArtifactConfig"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "repository",
            "repositoryFormat"
          ],
          "properties": {
            "artifactDirectory": {
              "type": "string"
            },
            "artifactPath": {
              "type": "string"
            },
            "artifactPathFilter": {
              "type": "string"
            },
            "connectorRef": {
              "type": "string"
            },
            "repository": {
              "type": "string"
            },
            "repositoryFormat": {
              "type": "string",
              "enum": [
                "docker",
                "generic"
              ]
            },
            "repositoryUrl": {
              "type": "string"
            },
            "tag": {
              "type": "string"
            },
            "tagRegex": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ArtifactoryStoreConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/StoreConfig"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "repositoryName"
          ],
          "properties": {
            "artifactPaths": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "connectorRef": {
              "type": "string"
            },
            "metadata": {
              "type": "string"
            },
            "repositoryName": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AsgBlueGreenDeployStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "loadBalancer",
            "prodListener",
            "prodListenerRuleArn",
            "stageListener",
            "stageListenerRuleArn"
          ],
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "loadBalancer": {
              "type": "string"
            },
            "prodListener": {
              "type": "string"
            },
            "prodListenerRuleArn": {
              "type": "string"
            },
            "stageListener": {
              "type": "string"
            },
            "stageListenerRuleArn": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "loadBalancer",
        "prodListener",
        "prodListenerRuleArn",
        "stageListener",
        "stageListenerRuleArn"
      ],
      "properties": {
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "loadBalancer": {
          "type": "string"
        },
        "prodListener": {
          "type": "string"
        },
        "prodListenerRuleArn": {
          "type": "string"
        },
        "stageListener": {
          "type": "string"
        },
        "stageListenerRuleArn": {
          "type": "string"
        }
      }
    },
    "AsgBlueGreenRollbackStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/StepSpecType"
        },
        {
          "type": "object",
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "properties": {
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      }
    },
    "AsgBlueGreenSwapServiceStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "downsizeOldAsg"
          ],
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "downsizeOldAsg": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "(<\\+.+>.*)",
                  "minLength": 1
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "downsizeOldAsg"
      ],
      "properties": {
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "downsizeOldAsg": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "(<\\+.+>.*)",
              "minLength": 1
            }
          ]
        }
      }
    },
    "AsgCanaryDeleteStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/StepSpecType"
        },
        {
          "type": "object",
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "properties": {
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      }
    },
    "AsgCanaryDeployStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "instanceSelection"
          ],
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "instanceSelection": {
              "$ref": "#/definitions/cd/Capacity"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "instanceSelection"
      ],
      "properties": {
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "instanceSelection": {
          "$ref": "#/definitions/cd/Capacity"
        }
      }
    },
    "AsgConfigurationManifest": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/ManifestAttributes"
        },
        {
          "type": "object",
          "properties": {
            "metadata": {
              "type": "string"
            },
            "store": {
              "$ref": "#/definitions/cd/StoreConfigWrapper"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AsgInfrastructure": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/Infrastructure"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "region"
          ],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "metadata": {
              "type": "string"
            },
            "region": {
              "type": "string",
              "minLength": 1
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AsgLaunchTemplateManifest": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/ManifestAttributes"
        },
        {
          "type": "object",
          "properties": {
            "metadata": {
              "type": "string"
            },
            "store": {
              "$ref": "#/definitions/cd/StoreConfigWrapper"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AsgRollingDeployStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "useAlreadyRunningInstances"
          ],
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "instanceWarmup": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32",
                  "minimum": 0
                },
                {
                  "type": "string",
                  "pattern": "(<\\+.+>.*)",
                  "minLength": 1
                }
              ]
            },
            "minimumHealthyPercentage": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32",
                  "minimum": 0,
                  "maximum": 100
                },
                {
                  "type": "string",
                  "pattern": "(<\\+.+>.*)",
                  "minLength": 1
                }
              ]
            },
            "skipMatching": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "(<\\+.+>.*)",
                  "minLength": 1
                }
              ]
            },
            "useAlreadyRunningInstances": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "(<\\+.+>.*)",
                  "minLength": 1
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "useAlreadyRunningInstances"
      ],
      "properties": {
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "instanceWarmup": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            },
            {
              "type": "string",
              "pattern": "(<\\+.+>.*)",
              "minLength": 1
            }
          ]
        },
        "minimumHealthyPercentage": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32",
              "minimum": 0,
              "maximum": 100
            },
            {
              "type": "string",
              "pattern": "(<\\+.+>.*)",
              "minLength": 1
            }
          ]
        },
        "skipMatching": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "(<\\+.+>.*)",
              "minLength": 1
            }
          ]
        },
        "useAlreadyRunningInstances": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "(<\\+.+>.*)",
              "minLength": 1
            }
          ]
        }
      }
    },
    "AsgRollingRollbackStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/StepSpecType"
        },
        {
          "type": "object",
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "properties": {
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      }
    },
    "AsgScalingPolicyManifest": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/ManifestAttributes"
        },
        {
          "type": "object",
          "properties": {
            "metadata": {
              "type": "string"
            },
            "store": {
              "$ref": "#/definitions/cd/StoreConfigWrapper"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AsgScheduledUpdateGroupActionManifest": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/ManifestAttributes"
        },
        {
          "type": "object",
          "properties": {
            "metadata": {
              "type": "string"
            },
            "store": {
              "$ref": "#/definitions/cd/StoreConfigWrapper"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AsgServiceSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/ServiceSpec"
        },
        {
          "type": "object",
          "properties": {}
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AutoScalerManifest": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/ManifestAttributes"
        },
        {
          "type": "object",
          "properties": {
            "metadata": {
              "type": "string"
            },
            "skipResourceVersioning": {
              "oneOf": [
                {
                  "$ref": "#/definitions/cd/ParameterFieldBoolean"
                },
                {
                  "type": "string"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "store": {
              "$ref": "#/definitions/cd/StoreConfigWrapper"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AwsCloudProviderBasicConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/CloudProviderSpec"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "region"
          ],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "region": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AwsInstanceFilter": {
      "type": "object",
      "properties": {
        "tags": {
          "oneOf": [
            {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ]
        },
        "vpcs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AwsLambdaDefinitionManifest": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/ManifestAttributes"
        },
        {
          "type": "object",
          "properties": {
            "metadata": {
              "type": "string"
            },
            "store": {
              "$ref": "#/definitions/cd/StoreConfigWrapper"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AwsLambdaDeployStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/StepSpecType"
        },
        {
          "type": "object",
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "properties": {
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      }
    },
    "AwsLambdaFunctionAliasDefinitionManifest": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/ManifestAttributes"
        },
        {
          "type": "object",
          "properties": {
            "metadata": {
              "type": "string"
            },
            "store": {
              "$ref": "#/definitions/cd/StoreConfigWrapper"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AwsLambdaInfrastructure": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/Infrastructure"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "region"
          ],
          "properties": {
            "connectorRef": {
              "type": "string",
              "minLength": 1
            },
            "metadata": {
              "type": "string"
            },
            "region": {
              "type": "string",
              "minLength": 1
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AwsLambdaRollbackStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/StepSpecType"
        },
        {
          "type": "object",
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "properties": {
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      }
    },
    "AwsLambdaServiceSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/ServiceSpec"
        },
        {
          "type": "object",
          "properties": {}
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AwsLoadBalancerConfigYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/LoadBalancerSpec"
        },
        {
          "type": "object",
          "required": [
            "loadBalancer",
            "prodListenerPort",
            "prodListenerRuleArn",
            "stageListenerPort",
            "stageListenerRuleArn"
          ],
          "properties": {
            "loadBalancer": {
              "type": "string"
            },
            "prodListenerPort": {
              "type": "string"
            },
            "prodListenerRuleArn": {
              "type": "string"
            },
            "stageListenerPort": {
              "type": "string"
            },
            "stageListenerRuleArn": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AwsSamDeployStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/StepSpecType"
        },
        {
          "type": "object",
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "properties": {
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      }
    },
    "AwsSamDirectoryManifest": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/ManifestAttributes"
        },
        {
          "type": "object",
          "properties": {
            "metadata": {
              "type": "string"
            },
            "store": {
              "$ref": "#/definitions/cd/StoreConfigWrapper"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AwsSamInfrastructure": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/Infrastructure"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "region"
          ],
          "properties": {
            "connectorRef": {
              "type": "string",
              "minLength": 1
            },
            "metadata": {
              "type": "string"
            },
            "region": {
              "type": "string",
              "minLength": 1
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AwsSamRollbackStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/StepSpecType"
        },
        {
          "type": "object",
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "properties": {
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      }
    },
    "AwsSamServiceSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/ServiceSpec"
        },
        {
          "type": "object",
          "properties": {}
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AzureARMRollbackStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "provisionerIdentifier"
          ],
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "provisionerIdentifier": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "provisionerIdentifier"
      ],
      "properties": {
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "provisionerIdentifier": {
          "type": "string"
        }
      }
    },
    "AzureArtifactsConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/ArtifactConfig"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "feed",
            "package",
            "packageType",
            "scope"
          ],
          "properties": {
            "connectorRef": {
              "type": "string",
              "minLength": 1
            },
            "feed": {
              "type": "string",
              "minLength": 1
            },
            "package": {
              "type": "string",
              "minLength": 1
            },
            "packageType": {
              "type": "string",
              "enum": [
                "maven",
                "nuget"
              ]
            },
            "project": {
              "type": "string"
            },
            "scope": {
              "type": "string",
              "enum": [
                "project",
                "org"
              ]
            },
            "version": {
              "type": "string"
            },
            "versionRegex": {
              "type": "string"
            }
          }
        },
        {
          "oneOf": [
            {
              "required": [
                "versionRegex"
              ]
            },
            {
              "required": [
                "version"
              ]
            }
          ]
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AzureCreateARMResourceParameterFile": {
      "type": "object",
      "required": [
        "store"
      ],
      "properties": {
        "store": {
          "$ref": "#/definitions/cd/StoreConfigWrapper"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AzureCreateARMResourceStepConfiguration": {
      "type": "object",
      "required": [
        "connectorRef",
        "scope",
        "template"
      ],
      "properties": {
        "connectorRef": {
          "type": "string"
        },
        "parameters": {
          "$ref": "#/definitions/cd/AzureCreateARMResourceParameterFile"
        },
        "scope": {
          "$ref": "#/definitions/cd/AzureCreateARMResourceStepScope"
        },
        "template": {
          "$ref": "#/definitions/cd/AzureTemplateFile"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AzureCreateARMResourceStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "configuration",
            "provisionerIdentifier"
          ],
          "properties": {
            "configuration": {
              "$ref": "#/definitions/cd/AzureCreateARMResourceStepConfiguration"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "metadata": {
              "type": "string"
            },
            "provisionerIdentifier": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "configuration",
        "provisionerIdentifier"
      ],
      "properties": {
        "configuration": {
          "$ref": "#/definitions/cd/AzureCreateARMResourceStepConfiguration"
        },
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "metadata": {
          "type": "string"
        },
        "provisionerIdentifier": {
          "type": "string"
        }
      }
    },
    "AzureCreateARMResourceStepScope": {
      "type": "object",
      "required": [
        "spec",
        "type"
      ],
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "ManagementGroup"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/AzureManagementSpec"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "ResourceGroup"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/AzureResourceGroupSpec"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Subscription"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/AzureSubscriptionSpec"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Tenant"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/AzureTenantSpec"
              }
            }
          }
        }
      ]
    },
    "AzureCreateBPStepConfiguration": {
      "type": "object",
      "required": [
        "connectorRef",
        "scope",
        "template"
      ],
      "properties": {
        "assignmentName": {
          "type": "string"
        },
        "connectorRef": {
          "type": "string"
        },
        "scope": {
          "type": "string",
          "enum": [
            "Subscription",
            "ManagementGroup"
          ]
        },
        "template": {
          "$ref": "#/definitions/cd/AzureTemplateFile"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AzureCreateBPStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "configuration"
          ],
          "properties": {
            "configuration": {
              "$ref": "#/definitions/cd/AzureCreateBPStepConfiguration"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "metadata": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "configuration"
      ],
      "properties": {
        "configuration": {
          "$ref": "#/definitions/cd/AzureCreateBPStepConfiguration"
        },
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "metadata": {
          "type": "string"
        }
      }
    },
    "AzureManagementSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/AzureScopeType"
        },
        {
          "type": "object",
          "required": [
            "location",
            "managementGroupId"
          ],
          "properties": {
            "location": {
              "type": "string"
            },
            "managementGroupId": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AzureRepoStore": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/StoreConfig"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "gitFetchType"
          ],
          "properties": {
            "branch": {
              "type": "string"
            },
            "commitId": {
              "type": "string"
            },
            "connectorRef": {
              "type": "string"
            },
            "folderPath": {
              "type": "string"
            },
            "gitFetchType": {
              "type": "string",
              "enum": [
                "Branch",
                "Commit"
              ]
            },
            "paths": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "repoName": {
              "type": "string"
            }
          }
        },
        {
          "oneOf": [
            {
              "required": [
                "commitId"
              ]
            },
            {
              "required": [
                "branch"
              ]
            }
          ]
        },
        {
          "oneOf": [
            {
              "required": [
                "folderPath"
              ]
            },
            {
              "required": [
                "paths"
              ]
            }
          ]
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AzureResourceGroupSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/AzureScopeType"
        },
        {
          "type": "object",
          "required": [
            "resourceGroup",
            "subscription"
          ],
          "properties": {
            "mode": {
              "type": "string",
              "enum": [
                "Incremental",
                "Complete"
              ]
            },
            "resourceGroup": {
              "type": "string"
            },
            "subscription": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AzureScopeType": {
      "type": "object",
      "discriminator": "type",
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AzureSubscriptionSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/AzureScopeType"
        },
        {
          "type": "object",
          "required": [
            "location",
            "subscription"
          ],
          "properties": {
            "location": {
              "type": "string"
            },
            "subscription": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AzureTemplateFile": {
      "type": "object",
      "required": [
        "store"
      ],
      "properties": {
        "store": {
          "$ref": "#/definitions/cd/StoreConfigWrapper"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AzureTenantSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/AzureScopeType"
        },
        {
          "type": "object",
          "required": [
            "location"
          ],
          "properties": {
            "location": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AzureWebAppInfrastructure": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/Infrastructure"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "resourceGroup",
            "subscriptionId"
          ],
          "properties": {
            "connectorRef": {
              "type": "string",
              "minLength": 1
            },
            "resourceGroup": {
              "type": "string",
              "minLength": 1
            },
            "subscriptionId": {
              "type": "string",
              "minLength": 1
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AzureWebAppRollbackStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/StepSpecType"
        },
        {
          "type": "object",
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "properties": {
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      }
    },
    "AzureWebAppServiceSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/ServiceSpec"
        },
        {
          "type": "object",
          "properties": {
            "applicationSettings": {
              "$ref": "#/definitions/cd/ApplicationSettingsConfiguration"
            },
            "connectionStrings": {
              "$ref": "#/definitions/cd/ConnectionStringsConfiguration"
            },
            "startupCommand": {
              "$ref": "#/definitions/cd/StartupCommandConfiguration"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AzureWebAppSlotDeploymentStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "deploymentSlot",
            "webApp"
          ],
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "deploymentSlot": {
              "type": "string",
              "minLength": 1
            },
            "webApp": {
              "type": "string",
              "minLength": 1
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "deploymentSlot",
        "webApp"
      ],
      "properties": {
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "deploymentSlot": {
          "type": "string",
          "minLength": 1
        },
        "webApp": {
          "type": "string",
          "minLength": 1
        }
      }
    },
    "AzureWebAppSwapSlotStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "targetSlot"
          ],
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "targetSlot": {
              "type": "string",
              "minLength": 1
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "targetSlot"
      ],
      "properties": {
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "targetSlot": {
          "type": "string",
          "minLength": 1
        }
      }
    },
    "AzureWebAppTrafficShiftStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "traffic"
          ],
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "traffic": {
              "oneOf": [
                {
                  "$ref": "#/definitions/cd/ParameterFieldString"
                },
                {
                  "type": "string"
                },
                {
                  "type": "number"
                }
              ],
              "minLength": 1
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "traffic"
      ],
      "properties": {
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "traffic": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/ParameterFieldString"
            },
            {
              "type": "string"
            },
            {
              "type": "number"
            }
          ],
          "minLength": 1
        }
      }
    },
    "BambooArtifactConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/ArtifactConfig"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "planKey"
          ],
          "properties": {
            "artifactPaths": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "build": {
              "type": "string"
            },
            "connectorRef": {
              "type": "string"
            },
            "planKey": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "BambooBuildStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "planName"
          ],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "metadata": {
              "type": "string"
            },
            "planName": {
              "type": "string"
            },
            "planParameter": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/cd/BambooParameterField"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "connectorRef",
        "planName"
      ],
      "properties": {
        "connectorRef": {
          "type": "string"
        },
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "metadata": {
          "type": "string"
        },
        "planName": {
          "type": "string"
        },
        "planParameter": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/BambooParameterField"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      }
    },
    "BambooParameterField": {
      "type": "object",
      "required": [
        "value"
      ],
      "properties": {
        "metadata": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "String",
            "Number"
          ]
        },
        "value": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "BitbucketStore": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/StoreConfig"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "gitFetchType"
          ],
          "properties": {
            "branch": {
              "type": "string"
            },
            "commitId": {
              "type": "string"
            },
            "connectorRef": {
              "type": "string"
            },
            "folderPath": {
              "type": "string"
            },
            "gitFetchType": {
              "type": "string",
              "enum": [
                "Branch",
                "Commit"
              ]
            },
            "paths": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "repoName": {
              "type": "string"
            }
          }
        },
        {
          "oneOf": [
            {
              "required": [
                "commitId"
              ]
            },
            {
              "required": [
                "branch"
              ]
            }
          ]
        },
        {
          "oneOf": [
            {
              "required": [
                "folderPath"
              ]
            },
            {
              "required": [
                "paths"
              ]
            }
          ]
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "Capacity": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Count"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/CountCapacitySpec"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Percentage"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/PercentageCapacitySpec"
              }
            }
          }
        }
      ]
    },
    "CapacitySpec": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ChaosStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "expectedResilienceScore",
            "experimentRef"
          ],
          "properties": {
            "assertion": {
              "type": "string"
            },
            "expectedResilienceScore": {
              "type": "number",
              "format": "double"
            },
            "experimentRef": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "expectedResilienceScore",
        "experimentRef"
      ],
      "properties": {
        "assertion": {
          "type": "string"
        },
        "expectedResilienceScore": {
          "type": "number",
          "format": "double"
        },
        "experimentRef": {
          "type": "string"
        }
      }
    },
    "CloudProvider": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "AWS"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "AWS"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/AwsCloudProviderBasicConfig"
              }
            }
          }
        }
      ]
    },
    "CloudProviderSpec": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "AWS"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CloudformationCreateStackStepConfiguration": {
      "type": "object",
      "required": [
        "connectorRef",
        "region",
        "stackName",
        "templateFile"
      ],
      "properties": {
        "capabilities": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ]
        },
        "connectorRef": {
          "type": "string"
        },
        "parameterOverrides": {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/cd/NumberNGVariable"
              },
              {
                "$ref": "#/definitions/cd/SecretNGVariable"
              },
              {
                "$ref": "#/definitions/cd/StringNGVariable"
              }
            ]
          }
        },
        "parameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cd/CloudformationParametersFileSpec"
          }
        },
        "region": {
          "type": "string"
        },
        "roleArn": {
          "type": "string"
        },
        "skipOnStackStatuses": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ]
        },
        "stackName": {
          "type": "string"
        },
        "tags": {
          "$ref": "#/definitions/cd/CloudformationTags"
        },
        "templateFile": {
          "$ref": "#/definitions/cd/CloudformationTemplateFile"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CloudformationCreateStackStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "configuration",
            "provisionerIdentifier"
          ],
          "properties": {
            "configuration": {
              "$ref": "#/definitions/cd/CloudformationCreateStackStepConfiguration"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "metadata": {
              "type": "string"
            },
            "provisionerIdentifier": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "configuration",
        "provisionerIdentifier"
      ],
      "properties": {
        "configuration": {
          "$ref": "#/definitions/cd/CloudformationCreateStackStepConfiguration"
        },
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "metadata": {
          "type": "string"
        },
        "provisionerIdentifier": {
          "type": "string"
        }
      }
    },
    "CloudformationDeleteStackStepConfiguration": {
      "type": "object",
      "required": [
        "spec",
        "type"
      ],
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Inherited"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/InheritedCloudformationDeleteStackStepConfiguration"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Inline"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/InlineCloudformationDeleteStackStepConfiguration"
              }
            }
          }
        }
      ]
    },
    "CloudformationDeleteStackStepConfigurationSpec": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CloudformationDeleteStackStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "configuration"
          ],
          "properties": {
            "configuration": {
              "$ref": "#/definitions/cd/CloudformationDeleteStackStepConfiguration"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "metadata": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "configuration"
      ],
      "properties": {
        "configuration": {
          "$ref": "#/definitions/cd/CloudformationDeleteStackStepConfiguration"
        },
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "metadata": {
          "type": "string"
        }
      }
    },
    "CloudformationParametersFileSpec": {
      "type": "object",
      "required": [
        "identifier",
        "store"
      ],
      "properties": {
        "identifier": {
          "type": "string"
        },
        "store": {
          "$ref": "#/definitions/cd/StoreConfigWrapper"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CloudformationRollbackStepConfiguration": {
      "type": "object",
      "required": [
        "provisionerIdentifier"
      ],
      "properties": {
        "provisionerIdentifier": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CloudformationRollbackStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "configuration"
          ],
          "properties": {
            "configuration": {
              "$ref": "#/definitions/cd/CloudformationRollbackStepConfiguration"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "metadata": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "configuration"
      ],
      "properties": {
        "configuration": {
          "$ref": "#/definitions/cd/CloudformationRollbackStepConfiguration"
        },
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "metadata": {
          "type": "string"
        }
      }
    },
    "CloudformationTags": {
      "type": "object",
      "required": [
        "spec",
        "type"
      ],
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Inline"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/InlineCloudformationTagsFileSpec"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Remote"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/RemoteCloudformationTagsFileSpec"
              }
            }
          }
        }
      ]
    },
    "CloudformationTagsFileSpec": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CloudformationTemplateFile": {
      "type": "object",
      "required": [
        "spec",
        "type"
      ],
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Inline"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/InlineCloudformationTemplateFileSpec"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Remote"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/RemoteCloudformationTemplateFileSpec"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "S3URL"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/S3UrlCloudformationTemplateFileSpec"
              }
            }
          }
        }
      ]
    },
    "CloudformationTemplateFileSpec": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ClusterYaml": {
      "type": "object",
      "required": [
        "identifier"
      ],
      "properties": {
        "identifier": {
          "type": "string"
        },
        "metadata": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CommandStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "onDelegate"
          ],
          "properties": {
            "commandUnits": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/CommandUnitWrapper"
              }
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "environmentVariables": {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/cd/NumberNGVariable"
                  },
                  {
                    "$ref": "#/definitions/cd/SecretNGVariable"
                  },
                  {
                    "$ref": "#/definitions/cd/StringNGVariable"
                  }
                ]
              }
            },
            "host": {
              "type": "string"
            },
            "metadata": {
              "type": "string"
            },
            "onDelegate": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            },
            "outputVariables": {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/cd/NumberNGVariable"
                  },
                  {
                    "$ref": "#/definitions/cd/SecretNGVariable"
                  },
                  {
                    "$ref": "#/definitions/cd/StringNGVariable"
                  }
                ]
              }
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "onDelegate"
      ],
      "properties": {
        "commandUnits": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cd/CommandUnitWrapper"
          }
        },
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "environmentVariables": {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/cd/NumberNGVariable"
              },
              {
                "$ref": "#/definitions/cd/SecretNGVariable"
              },
              {
                "$ref": "#/definitions/cd/StringNGVariable"
              }
            ]
          }
        },
        "host": {
          "type": "string"
        },
        "metadata": {
          "type": "string"
        },
        "onDelegate": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ]
        },
        "outputVariables": {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/cd/NumberNGVariable"
              },
              {
                "$ref": "#/definitions/cd/SecretNGVariable"
              },
              {
                "$ref": "#/definitions/cd/StringNGVariable"
              }
            ]
          }
        }
      }
    },
    "CommandUnitBaseSpec": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CommandUnitWrapper": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "type"
      ],
      "properties": {
        "identifier": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Copy"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/CopyCommandUnitSpec"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "DownloadArtifact"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/DownloadArtifactCommandUnitSpec"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Script"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/ScriptCommandUnitSpec"
              }
            }
          }
        }
      ]
    },
    "ConfigFile": {
      "type": "object",
      "required": [
        "identifier",
        "spec"
      ],
      "properties": {
        "identifier": {
          "type": "string"
        },
        "spec": {
          "$ref": "#/definitions/cd/ConfigFileAttributes"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ConfigFileAttributeStepParameters": {
      "type": "object",
      "properties": {
        "store": {
          "$ref": "#/definitions/cd/StoreConfigWrapperParameters"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ConfigFileAttributes": {
      "type": "object",
      "required": [
        "store"
      ],
      "properties": {
        "configFileAttributeStepParameters": {
          "$ref": "#/definitions/cd/ConfigFileAttributeStepParameters"
        },
        "store": {
          "$ref": "#/definitions/cd/StoreConfigWrapper"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ConfigFileOverrideSetWrapper": {
      "type": "object",
      "properties": {
        "overrideSet": {
          "$ref": "#/definitions/cd/ConfigFileOverrideSets"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ConfigFileOverrideSets": {
      "type": "object",
      "properties": {
        "configFiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cd/ConfigFileWrapper"
          }
        },
        "identifier": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ConfigFileWrapper": {
      "type": "object",
      "properties": {
        "configFile": {
          "$ref": "#/definitions/cd/ConfigFile"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ConnectionStringsConfiguration": {
      "type": "object",
      "required": [
        "store"
      ],
      "properties": {
        "metadata": {
          "type": "string"
        },
        "store": {
          "$ref": "#/definitions/cd/StoreConfigWrapper"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CopyCommandUnitSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/CommandUnitBaseSpec"
        },
        {
          "type": "object",
          "required": [
            "destinationPath",
            "sourceType"
          ],
          "properties": {
            "destinationPath": {
              "type": "string"
            },
            "sourceType": {
              "type": "string",
              "enum": [
                "Artifact",
                "Config"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CountCapacitySpec": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/CapacitySpec"
        },
        {
          "type": "object",
          "required": [
            "count"
          ],
          "properties": {
            "count": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32",
                  "minimum": 0
                },
                {
                  "type": "string",
                  "pattern": "(<\\+.+>.*)",
                  "minLength": 1
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CountInstanceSelection": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/InstanceSelectionBase"
        },
        {
          "type": "object",
          "properties": {
            "count": {
              "oneOf": [
                {
                  "$ref": "#/definitions/cd/ParameterFieldString"
                },
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CreatePRStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "overrideConfig",
            "shell"
          ],
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "overrideConfig": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            },
            "shell": {
              "type": "string",
              "enum": [
                "Bash"
              ]
            },
            "source": {
              "$ref": "#/definitions/cd/CreatePRStepUpdateConfigScriptWrapper"
            },
            "stringMap": {
              "$ref": "#/definitions/cd/ParameterFieldMapStringString"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "overrideConfig",
        "shell"
      ],
      "properties": {
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "overrideConfig": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ]
        },
        "shell": {
          "type": "string",
          "enum": [
            "Bash"
          ]
        },
        "source": {
          "$ref": "#/definitions/cd/CreatePRStepUpdateConfigScriptWrapper"
        },
        "stringMap": {
          "$ref": "#/definitions/cd/ParameterFieldMapStringString"
        }
      }
    },
    "CreatePRStepUpdateConfigScriptBaseSource": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CreatePRStepUpdateConfigScriptInlineSource": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/CreatePRStepUpdateConfigScriptBaseSource"
        },
        {
          "type": "object",
          "properties": {
            "updateConfigScript": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CreatePRStepUpdateConfigScriptWrapper": {
      "type": "object",
      "required": [
        "spec",
        "type"
      ],
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Inline"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/CreatePRStepUpdateConfigScriptInlineSource"
              }
            }
          }
        }
      ]
    },
    "CustomArtifactConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/ArtifactConfig"
        },
        {
          "type": "object",
          "required": [
            "version"
          ],
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "inputs": {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/cd/NumberNGVariable"
                  },
                  {
                    "$ref": "#/definitions/cd/SecretNGVariable"
                  },
                  {
                    "$ref": "#/definitions/cd/StringNGVariable"
                  }
                ]
              }
            },
            "metadata": {
              "type": "string"
            },
            "scripts": {
              "$ref": "#/definitions/cd/CustomArtifactScripts"
            },
            "timeout": {
              "type": "string",
              "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(<\\+input>.*)|(.*<\\+.*>.*)|(^$))$"
            },
            "version": {
              "type": "string"
            },
            "versionRegex": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CustomArtifactScriptInfo": {
      "type": "object",
      "required": [
        "shell",
        "source"
      ],
      "properties": {
        "shell": {
          "type": "string",
          "enum": [
            "Bash",
            "PowerShell"
          ]
        },
        "source": {
          "$ref": "#/definitions/cd/CustomArtifactScriptSourceWrapper"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CustomArtifactScriptSourceWrapper": {
      "type": "object",
      "required": [
        "spec",
        "type"
      ],
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Inline"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/CustomScriptInlineSource"
              }
            }
          }
        }
      ]
    },
    "CustomArtifactScripts": {
      "type": "object",
      "required": [
        "fetchAllArtifacts"
      ],
      "properties": {
        "fetchAllArtifacts": {
          "$ref": "#/definitions/cd/FetchAllArtifacts"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CustomDeploymentConnectorNGVariable": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/CustomDeploymentNGVariable"
        },
        {
          "type": "object",
          "required": [
            "value"
          ],
          "properties": {
            "name": {
              "type": "string",
              "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
            },
            "type": {
              "type": "string",
              "enum": [
                "Connector"
              ]
            },
            "value": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CustomDeploymentInfrastructure": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/Infrastructure"
        },
        {
          "type": "object",
          "required": [
            "customDeploymentRef"
          ],
          "properties": {
            "customDeploymentRef": {
              "minLength": 1,
              "$ref": "#/definitions/cd/StepTemplateRef"
            },
            "metadata": {
              "type": "string"
            },
            "variables": {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/cd/CustomDeploymentConnectorNGVariable"
                  },
                  {
                    "$ref": "#/definitions/cd/CustomDeploymentNumberNGVariable"
                  },
                  {
                    "$ref": "#/definitions/cd/CustomDeploymentSecretNGVariable"
                  },
                  {
                    "$ref": "#/definitions/cd/CustomDeploymentStringNGVariable"
                  }
                ]
              }
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CustomDeploymentNGVariable": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "description": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "required": {
          "type": "boolean"
        },
        "type": {
          "type": "string",
          "enum": [
            "String",
            "Number",
            "Secret",
            "Connector"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CustomDeploymentNumberNGVariable": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/CustomDeploymentNGVariable"
        },
        {
          "type": "object",
          "required": [
            "value"
          ],
          "properties": {
            "name": {
              "type": "string",
              "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
            },
            "type": {
              "type": "string",
              "enum": [
                "Number"
              ]
            },
            "value": {
              "oneOf": [
                {
                  "type": "number",
                  "format": "double"
                },
                {
                  "type": "string",
                  "pattern": "(^[+-]?[0-9]+\\.?[0-9]*$|(<\\+.+>.*)|^$)"
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CustomDeploymentSecretNGVariable": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/CustomDeploymentNGVariable"
        },
        {
          "type": "object",
          "required": [
            "value"
          ],
          "properties": {
            "name": {
              "type": "string",
              "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
            },
            "type": {
              "type": "string",
              "enum": [
                "Secret"
              ]
            },
            "value": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CustomDeploymentServiceSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/ServiceSpec"
        },
        {
          "type": "object",
          "required": [
            "customDeploymentRef"
          ],
          "properties": {
            "customDeploymentRef": {
              "minLength": 1,
              "$ref": "#/definitions/cd/StepTemplateRef"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CustomDeploymentStringNGVariable": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/CustomDeploymentNGVariable"
        },
        {
          "type": "object",
          "required": [
            "value"
          ],
          "properties": {
            "name": {
              "type": "string",
              "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
            },
            "type": {
              "type": "string",
              "enum": [
                "String"
              ]
            },
            "value": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CustomRemoteStoreConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/StoreConfig"
        },
        {
          "type": "object",
          "required": [
            "extractionScript",
            "filePath"
          ],
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "extractionScript": {
              "type": "string"
            },
            "filePath": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CustomScriptBaseSource": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CustomScriptInlineSource": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/CustomScriptBaseSource"
        },
        {
          "type": "object",
          "properties": {
            "script": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "DeleteManifestPathSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/DeleteResourcesBaseSpec"
        },
        {
          "type": "object",
          "properties": {
            "allManifestPaths": {
              "type": "boolean"
            },
            "manifestPaths": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "DeleteReleaseNameSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/DeleteResourcesBaseSpec"
        },
        {
          "type": "object",
          "properties": {
            "deleteNamespace": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "DeleteResourceNameSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/DeleteResourcesBaseSpec"
        },
        {
          "type": "object",
          "required": [
            "resourceNames"
          ],
          "properties": {
            "resourceNames": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ],
              "minLength": 1
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "DeleteResourcesBaseSpec": {
      "type": "object",
      "discriminator": "type",
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "DeleteResourcesWrapper": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "ResourceName",
            "ReleaseName",
            "ManifestPath"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "ManifestPath"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/DeleteManifestPathSpec"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "ReleaseName"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/DeleteReleaseNameSpec"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "ResourceName"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/DeleteResourceNameSpec"
              }
            }
          }
        }
      ]
    },
    "DeploymentStageConfig": {
      "type": "object",
      "required": [
        "execution"
      ],
      "properties": {
        "customDeploymentRef": {
          "$ref": "#/definitions/cd/StepTemplateRef"
        },
        "deploymentType": {
          "type": "string",
          "enum": [
            "Kubernetes",
            "NativeHelm",
            "Ssh",
            "WinRm",
            "ServerlessAwsLambda",
            "AzureWebApp",
            "CustomDeployment",
            "ECS",
            "Elastigroup",
            "TAS",
            "Asg",
            "GoogleCloudFunctions",
            "AwsLambda",
            "AWS_SAM"
          ]
        },
        "environment": {
          "$ref": "#/definitions/cd/EnvironmentYamlV2"
        },
        "environmentGroup": {
          "$ref": "#/definitions/cd/EnvironmentGroupYaml"
        },
        "environments": {
          "$ref": "#/definitions/cd/EnvironmentsYaml"
        },
        "execution": {
          "$ref": "#/definitions/cd/ExecutionElementConfig"
        },
        "gitOpsEnabled": {
          "type": "boolean"
        },
        "infrastructure": {
          "$ref": "#/definitions/cd/PipelineInfrastructure"
        },
        "service": {
          "$ref": "#/definitions/cd/ServiceYamlV2"
        },
        "serviceConfig": {
          "$ref": "#/definitions/cd/ServiceConfig"
        },
        "services": {
          "$ref": "#/definitions/cd/ServicesYaml"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "oneOf": [
            {
              "required": [
                "serviceConfig"
              ]
            },
            {
              "required": [
                "service"
              ]
            },
            {
              "required": [
                "services"
              ]
            }
          ]
        },
        {
          "oneOf": [
            {
              "required": [
                "environment"
              ]
            },
            {
              "required": [
                "environmentGroup"
              ]
            },
            {
              "required": [
                "environments"
              ]
            },
            {
              "required": [
                "infrastructure"
              ]
            }
          ]
        }
      ]
    },
    "DeploymentStageNode": {
      "type": "object",
      "required": [
        "failureStrategies",
        "identifier",
        "name",
        "type"
      ],
      "properties": {
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "description": {
          "type": "string"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "skipInstances": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ]
        },
        "strategy": {
          "$ref": "#/definitions/cd/StrategyConfig"
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "type": {
          "type": "string",
          "enum": [
            "Deployment"
          ]
        },
        "variables": {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/cd/NumberNGVariable"
              },
              {
                "$ref": "#/definitions/cd/SecretNGVariable"
              },
              {
                "$ref": "#/definitions/cd/StringNGVariable"
              }
            ]
          }
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/StageWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Deployment"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/DeploymentStageConfig"
              }
            }
          }
        }
      ]
    },
    "DockerHubArtifactConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/ArtifactConfig"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "imagePath"
          ],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "digest": {
              "type": "string"
            },
            "imagePath": {
              "type": "string"
            },
            "tag": {
              "type": "string"
            },
            "tagRegex": {
              "type": "string"
            }
          }
        },
        {
          "oneOf": [
            {
              "required": [
                "tagRegex"
              ]
            },
            {
              "required": [
                "tag"
              ]
            }
          ]
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "DownloadArtifactCommandUnitSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/CommandUnitBaseSpec"
        },
        {
          "type": "object",
          "required": [
            "destinationPath"
          ],
          "properties": {
            "destinationPath": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "EcrArtifactConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/ArtifactConfig"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "imagePath",
            "region"
          ],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "imagePath": {
              "type": "string"
            },
            "metadata": {
              "type": "string"
            },
            "region": {
              "type": "string"
            },
            "tag": {
              "type": "string"
            },
            "tagRegex": {
              "type": "string"
            }
          }
        },
        {
          "oneOf": [
            {
              "required": [
                "tagRegex"
              ]
            },
            {
              "required": [
                "tag"
              ]
            }
          ]
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "EcsBlueGreenCreateServiceStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "loadBalancer",
            "prodListener",
            "prodListenerRuleArn",
            "stageListener",
            "stageListenerRuleArn"
          ],
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "loadBalancer": {
              "type": "string"
            },
            "prodListener": {
              "type": "string"
            },
            "prodListenerRuleArn": {
              "type": "string"
            },
            "stageListener": {
              "type": "string"
            },
            "stageListenerRuleArn": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "loadBalancer",
        "prodListener",
        "prodListenerRuleArn",
        "stageListener",
        "stageListenerRuleArn"
      ],
      "properties": {
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "loadBalancer": {
          "type": "string"
        },
        "prodListener": {
          "type": "string"
        },
        "prodListenerRuleArn": {
          "type": "string"
        },
        "stageListener": {
          "type": "string"
        },
        "stageListenerRuleArn": {
          "type": "string"
        }
      }
    },
    "EcsBlueGreenRollbackStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/StepSpecType"
        },
        {
          "type": "object",
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "properties": {
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      }
    },
    "EcsBlueGreenSwapTargetGroupsStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/StepSpecType"
        },
        {
          "type": "object",
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "doNotDownsizeOldService": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "properties": {
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "doNotDownsizeOldService": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ]
        }
      }
    },
    "EcsCanaryDeleteStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/StepSpecType"
        },
        {
          "type": "object",
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "properties": {
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      }
    },
    "EcsCanaryDeployStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/StepSpecType"
        },
        {
          "type": "object",
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "properties": {
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      }
    },
    "EcsInfrastructure": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/Infrastructure"
        },
        {
          "type": "object",
          "required": [
            "cluster",
            "connectorRef",
            "region"
          ],
          "properties": {
            "cluster": {
              "type": "string",
              "minLength": 1
            },
            "connectorRef": {
              "type": "string",
              "minLength": 1
            },
            "metadata": {
              "type": "string"
            },
            "region": {
              "type": "string",
              "minLength": 1
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "EcsRollingDeployStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/StepSpecType"
        },
        {
          "type": "object",
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "forceNewDeployment": {
              "type": "boolean"
            },
            "sameAsAlreadyRunningInstances": {
              "type": "boolean"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "properties": {
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "forceNewDeployment": {
          "type": "boolean"
        },
        "sameAsAlreadyRunningInstances": {
          "type": "boolean"
        }
      }
    },
    "EcsRollingRollbackStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/StepSpecType"
        },
        {
          "type": "object",
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "properties": {
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      }
    },
    "EcsRunTaskStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "runTaskRequestDefinition"
          ],
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "runTaskRequestDefinition": {
              "$ref": "#/definitions/cd/StoreConfigWrapper"
            },
            "skipSteadyStateCheck": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "taskDefinition": {
              "$ref": "#/definitions/cd/StoreConfigWrapper"
            },
            "taskDefinitionArn": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "runTaskRequestDefinition"
      ],
      "properties": {
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "runTaskRequestDefinition": {
          "$ref": "#/definitions/cd/StoreConfigWrapper"
        },
        "skipSteadyStateCheck": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "taskDefinition": {
          "$ref": "#/definitions/cd/StoreConfigWrapper"
        },
        "taskDefinitionArn": {
          "type": "string"
        }
      }
    },
    "EcsScalableTargetDefinitionManifest": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/ManifestAttributes"
        },
        {
          "type": "object",
          "properties": {
            "metadata": {
              "type": "string"
            },
            "store": {
              "$ref": "#/definitions/cd/StoreConfigWrapper"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "EcsScalingPolicyDefinitionManifest": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/ManifestAttributes"
        },
        {
          "type": "object",
          "properties": {
            "metadata": {
              "type": "string"
            },
            "store": {
              "$ref": "#/definitions/cd/StoreConfigWrapper"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "EcsServiceDefinitionManifest": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/ManifestAttributes"
        },
        {
          "type": "object",
          "properties": {
            "metadata": {
              "type": "string"
            },
            "store": {
              "$ref": "#/definitions/cd/StoreConfigWrapper"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "EcsServiceSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/ServiceSpec"
        },
        {
          "type": "object",
          "properties": {
            "ecsTaskDefinitionArn": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "EcsTaskDefinitionManifest": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/ManifestAttributes"
        },
        {
          "type": "object",
          "properties": {
            "metadata": {
              "type": "string"
            },
            "store": {
              "$ref": "#/definitions/cd/StoreConfigWrapper"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ElastigroupBGStageSetupStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "connectedCloudProvider",
            "instances",
            "loadBalancers"
          ],
          "properties": {
            "connectedCloudProvider": {
              "$ref": "#/definitions/cd/CloudProvider"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "instances": {
              "$ref": "#/definitions/cd/ElastigroupInstances"
            },
            "loadBalancers": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/LoadBalancer"
              }
            },
            "name": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "connectedCloudProvider",
        "instances",
        "loadBalancers"
      ],
      "properties": {
        "connectedCloudProvider": {
          "$ref": "#/definitions/cd/CloudProvider"
        },
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "instances": {
          "$ref": "#/definitions/cd/ElastigroupInstances"
        },
        "loadBalancers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cd/LoadBalancer"
          }
        },
        "name": {
          "type": "string"
        }
      }
    },
    "ElastigroupConfiguration": {
      "type": "object",
      "required": [
        "store"
      ],
      "properties": {
        "metadata": {
          "type": "string"
        },
        "store": {
          "$ref": "#/definitions/cd/StoreConfigWrapper"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ElastigroupCurrentRunningInstances": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/ElastigroupInstancesSpec"
        },
        {
          "type": "object"
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ElastigroupDeployStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "newService"
          ],
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "metadata": {
              "type": "string"
            },
            "newService": {
              "$ref": "#/definitions/cd/Capacity"
            },
            "oldService": {
              "$ref": "#/definitions/cd/Capacity"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "newService"
      ],
      "properties": {
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "metadata": {
          "type": "string"
        },
        "newService": {
          "$ref": "#/definitions/cd/Capacity"
        },
        "oldService": {
          "$ref": "#/definitions/cd/Capacity"
        }
      }
    },
    "ElastigroupFixedInstances": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/ElastigroupInstancesSpec"
        },
        {
          "type": "object",
          "required": [
            "desired",
            "max",
            "min"
          ],
          "properties": {
            "desired": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string",
                  "pattern": "(<\\+.+>.*)",
                  "minLength": 1
                }
              ]
            },
            "max": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string",
                  "pattern": "(<\\+.+>.*)",
                  "minLength": 1
                }
              ]
            },
            "min": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string",
                  "pattern": "(<\\+.+>.*)",
                  "minLength": 1
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ElastigroupInfrastructure": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/Infrastructure"
        },
        {
          "type": "object",
          "required": [
            "configuration",
            "connectorRef"
          ],
          "properties": {
            "configuration": {
              "$ref": "#/definitions/cd/ElastigroupConfiguration"
            },
            "connectorRef": {
              "type": "string"
            },
            "metadata": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ElastigroupInstances": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "Fixed",
            "CurrentRunning"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "CurrentRunning"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/ElastigroupCurrentRunningInstances"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Fixed"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/ElastigroupFixedInstances"
              }
            }
          }
        }
      ]
    },
    "ElastigroupInstancesSpec": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "Fixed",
            "CurrentRunning"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ElastigroupRollbackStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/StepSpecType"
        },
        {
          "type": "object",
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "metadata": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "properties": {
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "metadata": {
          "type": "string"
        }
      }
    },
    "ElastigroupServiceSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/ServiceSpec"
        },
        {
          "type": "object",
          "properties": {
            "startupScript": {
              "$ref": "#/definitions/cd/StartupScriptConfiguration"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ElastigroupSetupStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "instances"
          ],
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "instances": {
              "$ref": "#/definitions/cd/ElastigroupInstances"
            },
            "name": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "instances"
      ],
      "properties": {
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "instances": {
          "$ref": "#/definitions/cd/ElastigroupInstances"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "ElastigroupSwapRouteStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "downsizeOldElastigroup"
          ],
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "downsizeOldElastigroup": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "downsizeOldElastigroup"
      ],
      "properties": {
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "downsizeOldElastigroup": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ]
        }
      }
    },
    "EnvironmentGroupMetadata": {
      "type": "object",
      "properties": {
        "parallel": {
          "type": "boolean"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "EnvironmentGroupYaml": {
      "type": "object",
      "required": [
        "envGroupRef"
      ],
      "properties": {
        "__uuid": {
          "type": "string"
        },
        "deployToAll": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "envGroupRef": {
          "type": "string"
        },
        "environments": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/EnvironmentYamlV2"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "filters": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/FilterYaml"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "metadata": {
          "$ref": "#/definitions/cd/EnvironmentGroupMetadata"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "EnvironmentYaml": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "identifier": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "type": {
          "type": "string",
          "enum": [
            "PreProduction",
            "Production"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "EnvironmentYamlV2": {
      "type": "object",
      "required": [
        "environmentRef"
      ],
      "properties": {
        "deployToAll": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "environmentInputs": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/JsonNode"
            },
            {
              "type": "string",
              "pattern": "(^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$|^$)"
            }
          ]
        },
        "environmentRef": {
          "type": "string"
        },
        "filters": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/FilterYaml"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "gitOpsClusters": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/ClusterYaml"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "infrastructureDefinition": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/InfraStructureDefinitionYaml"
            },
            {
              "type": "string",
              "pattern": "(<\\+.+>.*)",
              "minLength": 1
            }
          ]
        },
        "infrastructureDefinitions": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/InfraStructureDefinitionYaml"
              }
            },
            {
              "type": "string",
              "pattern": "(^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$|^$)"
            }
          ]
        },
        "provisioner": {
          "$ref": "#/definitions/cd/ExecutionElementConfig"
        },
        "serviceOverrideInputs": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/JsonNode"
            },
            {
              "type": "string",
              "pattern": "(^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$|^$)"
            }
          ]
        },
        "servicesOverrides": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cd/ServiceOverrideInputsYaml"
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "EnvironmentsMetadata": {
      "type": "object",
      "properties": {
        "parallel": {
          "type": "boolean"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "EnvironmentsYaml": {
      "type": "object",
      "properties": {
        "filters": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/FilterYaml"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "metadata": {
          "readOnly": true,
          "$ref": "#/definitions/cd/EnvironmentsMetadata"
        },
        "values": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/EnvironmentYamlV2"
              }
            },
            {
              "type": "string",
              "pattern": "(<\\+.+>.*)",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ExecutionElementConfig": {
      "type": "object",
      "required": [
        "steps"
      ],
      "properties": {
        "rollbackSteps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cd/ExecutionWrapperConfig"
          }
        },
        "steps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cd/ExecutionWrapperConfig"
          },
          "maxItems": 2147483647,
          "minItems": 1
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ExecutionWrapperConfig": {
      "type": "object",
      "properties": {
        "parallel": {
          "$ref": "#/definitions/cd/ParallelStepElementConfig"
        },
        "step": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/StepElementConfig"
            },
            {
              "$ref": "#/definitions/cd/AsgBlueGreenDeployStepNode"
            },
            {
              "$ref": "#/definitions/cd/AzureARMRollbackStepNode"
            },
            {
              "$ref": "#/definitions/cd/CloudformationRollbackStepNode"
            },
            {
              "$ref": "#/definitions/cd/ElastigroupSwapRouteStepNode"
            },
            {
              "$ref": "#/definitions/cd/TerraformCloudRunStepNode"
            },
            {
              "$ref": "#/definitions/cd/AsgRollingDeployStepNode"
            },
            {
              "$ref": "#/definitions/cd/GoogleFunctionsRollbackStepNode"
            },
            {
              "$ref": "#/definitions/cd/FetchInstanceScriptStepNode"
            },
            {
              "$ref": "#/definitions/cd/JenkinsBuildStepNode"
            },
            {
              "$ref": "#/definitions/cd/AsgRollingRollbackStepNode"
            },
            {
              "$ref": "#/definitions/cd/AsgCanaryDeleteStepNode"
            },
            {
              "$ref": "#/definitions/cd/TasCanaryAppSetupStepNode"
            },
            {
              "$ref": "#/definitions/cd/TasRollbackStepNode"
            },
            {
              "$ref": "#/definitions/cd/AwsLambdaRollbackStepNode"
            },
            {
              "$ref": "#/definitions/cd/EcsRollingDeployStepNode"
            },
            {
              "$ref": "#/definitions/cd/GoogleFunctionsDeployStepNode"
            },
            {
              "$ref": "#/definitions/cd/K8sRollingStepNode"
            },
            {
              "$ref": "#/definitions/cd/GoogleFunctionsDeployWithoutTrafficStepNode"
            },
            {
              "$ref": "#/definitions/cd/ElastigroupDeployStepNode"
            },
            {
              "$ref": "#/definitions/cd/K8sApplyStepNode"
            },
            {
              "$ref": "#/definitions/cd/EcsBlueGreenCreateServiceStepNode"
            },
            {
              "$ref": "#/definitions/cd/AsgCanaryDeployStepNode"
            },
            {
              "$ref": "#/definitions/cd/TerraformDestroyStepNode"
            },
            {
              "$ref": "#/definitions/cd/AzureWebAppRollbackStepNode"
            },
            {
              "$ref": "#/definitions/cd/CustomDeploymentConfig"
            },
            {
              "$ref": "#/definitions/cd/ServerlessAwsLambdaRollbackStepNode"
            },
            {
              "$ref": "#/definitions/cd/ElastigroupBGStageSetupStepNode"
            },
            {
              "$ref": "#/definitions/cd/TerraformApplyStepNode"
            },
            {
              "$ref": "#/definitions/cd/AzureWebAppTrafficShiftStepNode"
            },
            {
              "$ref": "#/definitions/cd/TerragruntRollbackStepNode"
            },
            {
              "$ref": "#/definitions/cd/AwsSamDeployStepNode"
            },
            {
              "$ref": "#/definitions/cd/ServerlessAwsLambdaDeployStepNode"
            },
            {
              "$ref": "#/definitions/cd/EcsBlueGreenSwapTargetGroupsStepNode"
            },
            {
              "$ref": "#/definitions/cd/EcsRunTaskStepNode"
            },
            {
              "$ref": "#/definitions/cd/CloudformationDeleteStackStepNode"
            },
            {
              "$ref": "#/definitions/cd/TasAppResizeStepNode"
            },
            {
              "$ref": "#/definitions/cd/ShellScriptProvisionStepNode"
            },
            {
              "$ref": "#/definitions/cd/AsgBlueGreenRollbackStepNode"
            },
            {
              "$ref": "#/definitions/cd/TasRollingRollbackStepNode"
            },
            {
              "$ref": "#/definitions/cd/EcsBlueGreenRollbackStepNode"
            },
            {
              "$ref": "#/definitions/cd/K8sDryRunManifestStepNode"
            },
            {
              "$ref": "#/definitions/cd/CreatePRStepNode"
            },
            {
              "$ref": "#/definitions/cd/K8sRollingRollbackStepNode"
            },
            {
              "$ref": "#/definitions/cd/TerragruntDestroyStepNode"
            },
            {
              "$ref": "#/definitions/cd/AsgBlueGreenSwapServiceStepNode"
            },
            {
              "$ref": "#/definitions/cd/CommandStepNode"
            },
            {
              "$ref": "#/definitions/cd/EcsCanaryDeployStepNode"
            },
            {
              "$ref": "#/definitions/cd/SyncStepNode"
            },
            {
              "$ref": "#/definitions/cd/AzureWebAppSlotDeploymentStepNode"
            },
            {
              "$ref": "#/definitions/cd/K8sBGSwapServicesStepNode"
            },
            {
              "$ref": "#/definitions/cd/TerragruntPlanStepNode"
            },
            {
              "$ref": "#/definitions/cd/AwsLambdaDeployStepNode"
            },
            {
              "$ref": "#/definitions/cd/TasSwapRollbackStepNode"
            },
            {
              "$ref": "#/definitions/cd/AzureWebAppSwapSlotStepNode"
            },
            {
              "$ref": "#/definitions/cd/TerraformPlanStepNode"
            },
            {
              "$ref": "#/definitions/cd/HelmDeployStepNode"
            },
            {
              "$ref": "#/definitions/cd/AzureCreateBPStepNode"
            },
            {
              "$ref": "#/definitions/cd/EcsRollingRollbackStepNode"
            },
            {
              "$ref": "#/definitions/cd/ChaosStepNode"
            },
            {
              "$ref": "#/definitions/cd/K8sDeleteStepNode"
            },
            {
              "$ref": "#/definitions/cd/UpdateReleaseRepoStepNode"
            },
            {
              "$ref": "#/definitions/cd/K8sBlueGreenStepNode"
            },
            {
              "$ref": "#/definitions/cd/TasCommandStepNode"
            },
            {
              "$ref": "#/definitions/cd/ElastigroupRollbackStepNode"
            },
            {
              "$ref": "#/definitions/cd/FetchLinkedAppsStepNode"
            },
            {
              "$ref": "#/definitions/cd/TasSwapRoutesStepNode"
            },
            {
              "$ref": "#/definitions/cd/AwsSamRollbackStepNode"
            },
            {
              "$ref": "#/definitions/cd/MergePRStepNode"
            },
            {
              "$ref": "#/definitions/cd/TasRollingDeployStepNode"
            },
            {
              "$ref": "#/definitions/cd/AzureCreateARMResourceStepNode"
            },
            {
              "$ref": "#/definitions/cd/K8sCanaryDeleteStepNode"
            },
            {
              "$ref": "#/definitions/cd/ElastigroupSetupStepNode"
            },
            {
              "$ref": "#/definitions/cd/TerragruntApplyStepNode"
            },
            {
              "$ref": "#/definitions/cd/TasBGAppSetupStepNode"
            },
            {
              "$ref": "#/definitions/cd/HelmRollbackStepNode"
            },
            {
              "$ref": "#/definitions/cd/TasBasicAppSetupStepNode"
            },
            {
              "$ref": "#/definitions/cd/TerraformCloudRollbackStepNode"
            },
            {
              "$ref": "#/definitions/cd/TerraformRollbackStepNode"
            },
            {
              "$ref": "#/definitions/cd/CloudformationCreateStackStepNode"
            },
            {
              "$ref": "#/definitions/cd/EcsCanaryDeleteStepNode"
            },
            {
              "$ref": "#/definitions/cd/BambooBuildStepNode"
            },
            {
              "$ref": "#/definitions/cd/K8sCanaryStepNode"
            },
            {
              "$ref": "#/definitions/cd/GoogleFunctionsTrafficShiftStepNode"
            },
            {
              "$ref": "#/definitions/cd/K8sScaleStepNode"
            },
            {
              "$ref": "#/definitions/cvng/CVVerifyStepNode"
            },
            {
              "$ref": "#/definitions/HttpStepNode"
            },
            {
              "$ref": "#/definitions/EmailStepNode"
            },
            {
              "$ref": "#/definitions/QueueStepNode"
            },
            {
              "$ref": "#/definitions/ShellScriptStepNode"
            },
            {
              "$ref": "#/definitions/CustomApprovalStepNode"
            },
            {
              "$ref": "#/definitions/JiraCreateStepNode"
            },
            {
              "$ref": "#/definitions/JiraUpdateStepNode"
            },
            {
              "$ref": "#/definitions/TemplateStepNode"
            },
            {
              "$ref": "#/definitions/ServiceNowApprovalStepNode"
            },
            {
              "$ref": "#/definitions/JiraApprovalStepNode"
            },
            {
              "$ref": "#/definitions/HarnessApprovalStepNode"
            },
            {
              "$ref": "#/definitions/BarrierStepNode"
            },
            {
              "$ref": "#/definitions/ServiceNowCreateStepNode"
            },
            {
              "$ref": "#/definitions/ServiceNowUpdateStepNode"
            },
            {
              "$ref": "#/definitions/ServiceNowImportSetStepNode"
            },
            {
              "$ref": "#/definitions/PolicyStepNode"
            },
            {
              "$ref": "#/definitions/WaitStepNode"
            },
            {
              "$ref": "#/definitions/ContainerStepNode"
            }
          ]
        },
        "stepGroup": {
          "$ref": "#/definitions/cd/StepGroupElementConfig"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "FailureStrategyActionConfig": {
      "type": "object",
      "required": [
        "type"
      ],
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "Ignore",
            "Retry",
            "MarkAsSuccess",
            "Abort",
            "StageRollback",
            "StepGroupRollback",
            "PipelineRollback",
            "ManualIntervention",
            "ProceedWithDefaultValues",
            "MarkAsFailure"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "FailureStrategyConfig": {
      "type": "object",
      "required": [
        "onFailure"
      ],
      "properties": {
        "onFailure": {
          "$ref": "#/definitions/cd/OnFailureConfig"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "FetchAllArtifacts": {
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "artifactsArrayPath": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/ParameterFieldString"
            },
            {
              "type": "string"
            }
          ]
        },
        "attributes": {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/cd/NumberNGVariable"
              },
              {
                "$ref": "#/definitions/cd/SecretNGVariable"
              },
              {
                "$ref": "#/definitions/cd/StringNGVariable"
              }
            ]
          }
        },
        "spec": {
          "$ref": "#/definitions/cd/CustomArtifactScriptInfo"
        },
        "versionPath": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/ParameterFieldString"
            },
            {
              "type": "string"
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "FetchInstanceScriptStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/StepSpecType"
        },
        {
          "type": "object",
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "properties": {
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      }
    },
    "FetchLinkedAppsStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/StepSpecType"
        },
        {
          "type": "object",
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "properties": {
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      }
    },
    "FilterSpec": {
      "type": "object",
      "discriminator": "type",
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "FilterYaml": {
      "type": "object",
      "required": [
        "entities",
        "identifier",
        "spec",
        "type"
      ],
      "properties": {
        "entities": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "infrastructures",
              "gitOpsClusters",
              "environments"
            ]
          }
        },
        "identifier": {
          "type": "string"
        },
        "spec": {
          "$ref": "#/definitions/cd/FilterSpec"
        },
        "type": {
          "type": "string",
          "enum": [
            "tags",
            "all"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "GcrArtifactConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/ArtifactConfig"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "imagePath",
            "registryHostname"
          ],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "imagePath": {
              "type": "string"
            },
            "registryHostname": {
              "type": "string"
            },
            "tag": {
              "type": "string"
            },
            "tagRegex": {
              "type": "string"
            }
          }
        },
        {
          "oneOf": [
            {
              "required": [
                "tagRegex"
              ]
            },
            {
              "required": [
                "tag"
              ]
            }
          ]
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "GcsStoreConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/StoreConfig"
        },
        {
          "type": "object",
          "properties": {
            "bucketName": {
              "type": "string"
            },
            "connectorRef": {
              "type": "string"
            },
            "folderPath": {
              "type": "string"
            },
            "metadata": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "GitLabStore": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/StoreConfig"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "gitFetchType"
          ],
          "properties": {
            "branch": {
              "type": "string"
            },
            "commitId": {
              "type": "string"
            },
            "connectorRef": {
              "type": "string"
            },
            "folderPath": {
              "type": "string"
            },
            "gitFetchType": {
              "type": "string",
              "enum": [
                "Branch",
                "Commit"
              ]
            },
            "paths": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "repoName": {
              "type": "string"
            }
          }
        },
        {
          "oneOf": [
            {
              "required": [
                "commitId"
              ]
            },
            {
              "required": [
                "branch"
              ]
            }
          ]
        },
        {
          "oneOf": [
            {
              "required": [
                "folderPath"
              ]
            },
            {
              "required": [
                "paths"
              ]
            }
          ]
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "GitOpsDeploymentRepoManifest": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/ManifestAttributes"
        },
        {
          "type": "object",
          "properties": {
            "store": {
              "$ref": "#/definitions/cd/StoreConfigWrapper"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "GitStore": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/StoreConfig"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "gitFetchType"
          ],
          "properties": {
            "branch": {
              "type": "string"
            },
            "commitId": {
              "type": "string"
            },
            "connectorRef": {
              "type": "string"
            },
            "folderPath": {
              "type": "string"
            },
            "gitFetchType": {
              "type": "string",
              "enum": [
                "Branch",
                "Commit"
              ]
            },
            "paths": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "repoName": {
              "type": "string"
            }
          }
        },
        {
          "oneOf": [
            {
              "required": [
                "commitId"
              ]
            },
            {
              "required": [
                "branch"
              ]
            }
          ]
        },
        {
          "oneOf": [
            {
              "required": [
                "folderPath"
              ]
            },
            {
              "required": [
                "paths"
              ]
            }
          ]
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "GithubPackagesArtifactConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/ArtifactConfig"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "packageName",
            "packageType"
          ],
          "properties": {
            "connectorRef": {
              "type": "string",
              "minLength": 1
            },
            "org": {
              "type": "string"
            },
            "packageName": {
              "type": "string",
              "minLength": 1
            },
            "packageType": {
              "type": "string",
              "enum": [
                "npm",
                "maven",
                "rubygems",
                "nuget",
                "container"
              ]
            },
            "version": {
              "type": "string"
            },
            "versionRegex": {
              "type": "string"
            }
          }
        },
        {
          "oneOf": [
            {
              "required": [
                "versionRegex"
              ]
            },
            {
              "required": [
                "version"
              ]
            }
          ]
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "GithubStore": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/StoreConfig"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "gitFetchType"
          ],
          "properties": {
            "branch": {
              "type": "string"
            },
            "commitId": {
              "type": "string"
            },
            "connectorRef": {
              "type": "string"
            },
            "folderPath": {
              "type": "string"
            },
            "gitFetchType": {
              "type": "string",
              "enum": [
                "Branch",
                "Commit"
              ]
            },
            "paths": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "repoName": {
              "type": "string"
            }
          }
        },
        {
          "oneOf": [
            {
              "required": [
                "commitId"
              ]
            },
            {
              "required": [
                "branch"
              ]
            }
          ]
        },
        {
          "oneOf": [
            {
              "required": [
                "folderPath"
              ]
            },
            {
              "required": [
                "paths"
              ]
            }
          ]
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "GoogleArtifactRegistryConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/ArtifactConfig"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "package",
            "project",
            "region",
            "repositoryName",
            "repositoryType"
          ],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "metadata": {
              "type": "string"
            },
            "package": {
              "type": "string"
            },
            "project": {
              "type": "string"
            },
            "region": {
              "type": "string"
            },
            "repositoryName": {
              "type": "string"
            },
            "repositoryType": {
              "type": "string",
              "enum": [
                "docker"
              ]
            },
            "version": {
              "type": "string"
            },
            "versionRegex": {
              "type": "string"
            }
          }
        },
        {
          "oneOf": [
            {
              "required": [
                "versionRegex"
              ]
            },
            {
              "required": [
                "version"
              ]
            }
          ]
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "GoogleCloudFunctionDefinitionManifest": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/ManifestAttributes"
        },
        {
          "type": "object",
          "properties": {
            "metadata": {
              "type": "string"
            },
            "store": {
              "$ref": "#/definitions/cd/StoreConfigWrapper"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "GoogleCloudFunctionsServiceSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/ServiceSpec"
        },
        {
          "type": "object",
          "properties": {}
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "GoogleCloudSourceArtifactConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/ArtifactConfig"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "project",
            "repository",
            "sourceDirectory"
          ],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "project": {
              "type": "string"
            },
            "repository": {
              "type": "string"
            },
            "sourceDirectory": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "GoogleCloudStorageArtifactConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/ArtifactConfig"
        },
        {
          "type": "object",
          "required": [
            "artifactPath",
            "bucket",
            "connectorRef",
            "project"
          ],
          "properties": {
            "artifactPath": {
              "type": "string"
            },
            "bucket": {
              "type": "string"
            },
            "connectorRef": {
              "type": "string"
            },
            "project": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "GoogleFunctionsDeployStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/StepSpecType"
        },
        {
          "type": "object",
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "updateFieldMask": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "properties": {
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "updateFieldMask": {
          "type": "string"
        }
      }
    },
    "GoogleFunctionsDeployWithoutTrafficStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/StepSpecType"
        },
        {
          "type": "object",
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "updateFieldMask": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "properties": {
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "updateFieldMask": {
          "type": "string"
        }
      }
    },
    "GoogleFunctionsInfrastructure": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/Infrastructure"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "project",
            "region"
          ],
          "properties": {
            "connectorRef": {
              "type": "string",
              "minLength": 1
            },
            "metadata": {
              "type": "string"
            },
            "project": {
              "type": "string",
              "minLength": 1
            },
            "region": {
              "type": "string",
              "minLength": 1
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "GoogleFunctionsRollbackStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/StepSpecType"
        },
        {
          "type": "object",
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "properties": {
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      }
    },
    "GoogleFunctionsTrafficShiftStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/StepSpecType"
        },
        {
          "type": "object",
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "trafficPercent": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "properties": {
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "trafficPercent": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "HarnessFileStoreSource": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/ShellScriptBaseSource"
        },
        {
          "type": "object",
          "properties": {
            "file": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "HarnessForConfig": {
      "type": "object",
      "properties": {
        "end": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            },
            {
              "type": "string",
              "pattern": "(<\\+.+>.*)",
              "minLength": 1
            }
          ]
        },
        "items": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "(<\\+.+>.*)",
              "minLength": 1
            }
          ]
        },
        "maxConcurrency": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            },
            {
              "type": "string",
              "pattern": "(<\\+.+>.*)",
              "minLength": 1
            }
          ]
        },
        "partitionSize": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            },
            {
              "type": "string",
              "pattern": "(<\\+.+>.*)",
              "minLength": 1
            }
          ]
        },
        "start": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            },
            {
              "type": "string",
              "pattern": "(<\\+.+>.*)",
              "minLength": 1
            }
          ]
        },
        "times": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            },
            {
              "type": "string",
              "pattern": "(<\\+.+>.*)",
              "minLength": 1
            }
          ]
        },
        "unit": {
          "type": "string",
          "enum": [
            "Percentage",
            "Count"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "oneOf": [
            {
              "required": [
                "times"
              ]
            },
            {
              "required": [
                "items"
              ]
            }
          ]
        }
      ]
    },
    "HarnessStore": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/StoreConfig"
        },
        {
          "type": "object",
          "properties": {
            "files": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "secretFiles": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "HelmChartManifest": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/ManifestAttributes"
        },
        {
          "type": "object",
          "properties": {
            "chartName": {
              "type": "string"
            },
            "chartVersion": {
              "type": "string"
            },
            "commandFlags": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/HelmManifestCommandFlag"
              }
            },
            "enableDeclarativeRollback": {
              "oneOf": [
                {
                  "$ref": "#/definitions/cd/ParameterFieldBoolean"
                },
                {
                  "type": "string"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "helmVersion": {
              "type": "string",
              "enum": [
                "V2",
                "V3",
                "V380"
              ]
            },
            "metadata": {
              "type": "string"
            },
            "skipResourceVersioning": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            },
            "store": {
              "$ref": "#/definitions/cd/StoreConfigWrapper"
            },
            "subChartName": {
              "type": "string"
            },
            "valuesPaths": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "HelmDeployStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/StepSpecType"
        },
        {
          "type": "object",
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "ignoreReleaseHistFailStatus": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "properties": {
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "ignoreReleaseHistFailStatus": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ]
        }
      }
    },
    "HelmManifestCommandFlag": {
      "type": "object",
      "required": [
        "commandType"
      ],
      "properties": {
        "commandType": {
          "type": "string",
          "enum": [
            "Fetch",
            "Template",
            "Pull",
            "Install",
            "Upgrade",
            "Rollback",
            "History",
            "Delete",
            "Uninstall",
            "List",
            "Add",
            "Update",
            "Version"
          ]
        },
        "flag": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "HelmRepoOverrideManifest": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/ManifestAttributes"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "type"
          ],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "metadata": {
              "type": "string"
            },
            "type": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "HelmRollbackStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/StepSpecType"
        },
        {
          "type": "object",
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "properties": {
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      }
    },
    "HostAttributesFilter": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/HostFilterSpec"
        },
        {
          "type": "object",
          "properties": {
            "value": {
              "oneOf": [
                {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "(<\\+.+>.*)",
                  "minLength": 1
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "HostFilter": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "All",
            "HostNames",
            "HostAttributes"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "All"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/AllHostsFilter"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "HostAttributes"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/HostAttributesFilter"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "HostNames"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/HostNamesFilter"
              }
            }
          }
        }
      ]
    },
    "HostFilterSpec": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "All",
            "HostNames",
            "HostAttributes"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "HostNamesFilter": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/HostFilterSpec"
        },
        {
          "type": "object",
          "properties": {
            "value": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "(<\\+.+>.*)",
                  "minLength": 1
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "HttpStoreConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/StoreConfig"
        },
        {
          "type": "object",
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "metadata": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "IgnoreFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "Ignore"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "InfraOverrides": {
      "type": "object",
      "properties": {
        "environment": {
          "$ref": "#/definitions/cd/EnvironmentYaml"
        },
        "infrastructureDefinition": {
          "$ref": "#/definitions/cd/InfrastructureDef"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "InfraStructureDefinitionYaml": {
      "type": "object",
      "required": [
        "identifier"
      ],
      "properties": {
        "identifier": {
          "type": "string"
        },
        "inputs": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/JsonNode"
            },
            {
              "type": "string",
              "pattern": "(<\\+.+>.*)",
              "minLength": 1
            }
          ]
        },
        "metadata": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "InfraUseFromStage": {
      "type": "object",
      "required": [
        "stage"
      ],
      "properties": {
        "overrides": {
          "$ref": "#/definitions/cd/InfraOverrides"
        },
        "stage": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "Infrastructure": {
      "type": "object",
      "discriminator": "type",
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "InfrastructureDef": {
      "type": "object",
      "required": [
        "spec",
        "type"
      ],
      "properties": {
        "provisioner": {
          "$ref": "#/definitions/cd/ExecutionElementConfig"
        },
        "type": {
          "type": "string",
          "enum": [
            "KubernetesDirect",
            "KubernetesGcp",
            "KubernetesAzure",
            "Pdc",
            "SshWinRmAzure",
            "ServerlessAwsLambda",
            "AzureWebApp",
            "SshWinRmAws",
            "CustomDeployment",
            "ECS",
            "Elastigroup",
            "TAS",
            "Asg",
            "GoogleCloudFunctions",
            "AWS_SAM",
            "AwsLambda"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "AWS_SAM"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/AwsSamInfrastructure"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Asg"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/AsgInfrastructure"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "AwsLambda"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/AwsLambdaInfrastructure"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "AzureWebApp"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/AzureWebAppInfrastructure"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "CustomDeployment"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/CustomDeploymentInfrastructure"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "ECS"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/EcsInfrastructure"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Elastigroup"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/ElastigroupInfrastructure"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "GoogleCloudFunctions"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/GoogleFunctionsInfrastructure"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "KubernetesAzure"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/K8sAzureInfrastructure"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "KubernetesDirect"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/K8SDirectInfrastructure"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "KubernetesGcp"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/K8sGcpInfrastructure"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Pdc"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/PdcInfrastructure"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "ServerlessAwsLambda"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/ServerlessAwsLambdaInfrastructure"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "SshWinRmAws"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/SshWinRmAwsInfrastructure"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "SshWinRmAzure"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/SshWinRmAzureInfrastructure"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "TAS"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/TanzuApplicationServiceInfrastructure"
              }
            }
          }
        }
      ]
    },
    "InheritFromManifestStoreConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/StoreConfig"
        },
        {
          "type": "object",
          "properties": {
            "paths": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "InheritedCloudformationDeleteStackStepConfiguration": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/CloudformationDeleteStackStepConfigurationSpec"
        },
        {
          "type": "object",
          "required": [
            "provisionerIdentifier"
          ],
          "properties": {
            "provisionerIdentifier": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "InlineCloudformationDeleteStackStepConfiguration": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/CloudformationDeleteStackStepConfigurationSpec"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "region",
            "stackName"
          ],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "region": {
              "type": "string"
            },
            "roleArn": {
              "type": "string"
            },
            "stackName": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "InlineCloudformationTagsFileSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/CloudformationTagsFileSpec"
        },
        {
          "type": "object",
          "required": [
            "content"
          ],
          "properties": {
            "content": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "InlineCloudformationTemplateFileSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/CloudformationTemplateFileSpec"
        },
        {
          "type": "object",
          "required": [
            "templateBody"
          ],
          "properties": {
            "templateBody": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "InlineStoreConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/StoreConfig"
        },
        {
          "type": "object",
          "required": [
            "content"
          ],
          "properties": {
            "content": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "InlineTerraformBackendConfigSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/TerraformBackendConfigSpec"
        },
        {
          "type": "object",
          "properties": {
            "content": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "InlineTerraformVarFileSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/TerraformVarFileSpec"
        },
        {
          "type": "object",
          "properties": {
            "content": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "InlineTerragruntBackendConfigSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/TerragruntBackendConfigSpec"
        },
        {
          "type": "object",
          "properties": {
            "content": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "InlineTerragruntVarFileSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/TerragruntVarFileSpec"
        },
        {
          "type": "object",
          "properties": {
            "content": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "InputSetValidator": {
      "type": "object",
      "properties": {
        "parameters": {
          "type": "string"
        },
        "validatorType": {
          "type": "string",
          "enum": [
            "ALLOWED_VALUES",
            "REGEX"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "InstanceSelectionBase": {
      "type": "object",
      "discriminator": "type",
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "InstanceSelectionWrapper": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "Count",
            "Percentage"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Count"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/CountInstanceSelection"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Percentage"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/PercentageInstanceSelection"
              }
            }
          }
        }
      ]
    },
    "JenkinsArtifactConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/ArtifactConfig"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "jobName"
          ],
          "properties": {
            "artifactPath": {
              "type": "string"
            },
            "build": {
              "type": "string"
            },
            "connectorRef": {
              "type": "string"
            },
            "jobName": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "JenkinsBuildStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "jobName"
          ],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "jobName": {
              "type": "string"
            },
            "jobParameter": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/cd/JenkinsParameterField"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "metadata": {
              "type": "string"
            },
            "unstableStatusAsSuccess": {
              "type": "boolean"
            },
            "useConnectorUrlForJobExecution": {
              "type": "boolean"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "connectorRef",
        "jobName"
      ],
      "properties": {
        "connectorRef": {
          "type": "string"
        },
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "jobName": {
          "type": "string"
        },
        "jobParameter": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/JenkinsParameterField"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "metadata": {
          "type": "string"
        },
        "unstableStatusAsSuccess": {
          "type": "boolean"
        },
        "useConnectorUrlForJobExecution": {
          "type": "boolean"
        }
      }
    },
    "JenkinsParameterField": {
      "type": "object",
      "required": [
        "value"
      ],
      "properties": {
        "metadata": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "String",
            "Number"
          ]
        },
        "value": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "JsonNode": {
      "type": "object",
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "K8SDirectInfrastructure": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/Infrastructure"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "namespace",
            "releaseName"
          ],
          "properties": {
            "connectorRef": {
              "type": "string",
              "minLength": 1
            },
            "namespace": {
              "oneOf": [
                {
                  "type": "string",
                  "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                },
                {
                  "type": "string",
                  "pattern": "(<\\+.+>.*)",
                  "minLength": 1
                }
              ],
              "minLength": 1
            },
            "releaseName": {
              "type": "string",
              "minLength": 1
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "K8sApplyStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/StepSpecType"
        },
        {
          "type": "object",
          "properties": {
            "commandFlags": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/cd/K8sStepCommandFlag"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "filePaths": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "overrides": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/ManifestConfigWrapper"
              }
            },
            "skipDryRun": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            },
            "skipRendering": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            },
            "skipSteadyStateCheck": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "properties": {
        "commandFlags": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/K8sStepCommandFlag"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "filePaths": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "overrides": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cd/ManifestConfigWrapper"
          }
        },
        "skipDryRun": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ]
        },
        "skipRendering": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ]
        },
        "skipSteadyStateCheck": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ]
        }
      }
    },
    "K8sAzureInfrastructure": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/Infrastructure"
        },
        {
          "type": "object",
          "required": [
            "cluster",
            "connectorRef",
            "namespace",
            "releaseName",
            "resourceGroup",
            "subscriptionId"
          ],
          "properties": {
            "cluster": {
              "type": "string",
              "minLength": 1
            },
            "connectorRef": {
              "type": "string",
              "minLength": 1
            },
            "namespace": {
              "oneOf": [
                {
                  "type": "string",
                  "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                },
                {
                  "type": "string",
                  "pattern": "(<\\+.+>.*)",
                  "minLength": 1
                }
              ],
              "minLength": 1
            },
            "releaseName": {
              "type": "string",
              "minLength": 1
            },
            "resourceGroup": {
              "type": "string",
              "minLength": 1
            },
            "subscriptionId": {
              "type": "string",
              "minLength": 1
            },
            "useClusterAdminCredentials": {
              "type": "boolean"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "K8sBGSwapServicesStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/StepSpecType"
        },
        {
          "type": "object",
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "properties": {
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      }
    },
    "K8sBlueGreenStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/StepSpecType"
        },
        {
          "type": "object",
          "properties": {
            "commandFlags": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/cd/K8sStepCommandFlag"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "pruningEnabled": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            },
            "skipDryRun": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "properties": {
        "commandFlags": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/K8sStepCommandFlag"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "pruningEnabled": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ]
        },
        "skipDryRun": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ]
        }
      }
    },
    "K8sCanaryDeleteStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/StepSpecType"
        },
        {
          "type": "object",
          "properties": {
            "delegateSelectors": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "properties": {
        "delegateSelectors": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "K8sCanaryStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "instanceSelection"
          ],
          "properties": {
            "commandFlags": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/cd/K8sStepCommandFlag"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "instanceSelection": {
              "$ref": "#/definitions/cd/InstanceSelectionWrapper"
            },
            "skipDryRun": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "instanceSelection"
      ],
      "properties": {
        "commandFlags": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/K8sStepCommandFlag"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "instanceSelection": {
          "$ref": "#/definitions/cd/InstanceSelectionWrapper"
        },
        "skipDryRun": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ]
        }
      }
    },
    "K8sDeleteStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "deleteResources"
          ],
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "deleteResources": {
              "$ref": "#/definitions/cd/DeleteResourcesWrapper"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "deleteResources"
      ],
      "properties": {
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "deleteResources": {
          "$ref": "#/definitions/cd/DeleteResourcesWrapper"
        }
      }
    },
    "K8sDryRunManifestStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/StepSpecType"
        },
        {
          "type": "object",
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "properties": {
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      }
    },
    "K8sGcpInfrastructure": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/Infrastructure"
        },
        {
          "type": "object",
          "required": [
            "cluster",
            "connectorRef",
            "namespace",
            "releaseName"
          ],
          "properties": {
            "cluster": {
              "type": "string",
              "minLength": 1
            },
            "connectorRef": {
              "type": "string",
              "minLength": 1
            },
            "metadata": {
              "type": "string"
            },
            "namespace": {
              "oneOf": [
                {
                  "type": "string",
                  "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                },
                {
                  "type": "string",
                  "pattern": "(<\\+.+>.*)",
                  "minLength": 1
                }
              ],
              "minLength": 1
            },
            "releaseName": {
              "type": "string",
              "minLength": 1
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "K8sManifest": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/ManifestAttributes"
        },
        {
          "type": "object",
          "properties": {
            "enableDeclarativeRollback": {
              "oneOf": [
                {
                  "$ref": "#/definitions/cd/ParameterFieldBoolean"
                },
                {
                  "type": "string"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "metadata": {
              "type": "string"
            },
            "skipResourceVersioning": {
              "oneOf": [
                {
                  "$ref": "#/definitions/cd/ParameterFieldBoolean"
                },
                {
                  "type": "string"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "store": {
              "$ref": "#/definitions/cd/StoreConfigWrapper"
            },
            "valuesPaths": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "K8sRollingRollbackStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/StepSpecType"
        },
        {
          "type": "object",
          "properties": {
            "commandFlags": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/cd/K8sStepCommandFlag"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "pruningEnabled": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "properties": {
        "commandFlags": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/K8sStepCommandFlag"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "pruningEnabled": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ]
        }
      }
    },
    "K8sRollingStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/StepSpecType"
        },
        {
          "type": "object",
          "properties": {
            "commandFlags": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/cd/K8sStepCommandFlag"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "pruningEnabled": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            },
            "skipDryRun": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "properties": {
        "commandFlags": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/K8sStepCommandFlag"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "pruningEnabled": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ]
        },
        "skipDryRun": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ]
        }
      }
    },
    "K8sScaleStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "instanceSelection",
            "workload"
          ],
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "instanceSelection": {
              "$ref": "#/definitions/cd/InstanceSelectionWrapper"
            },
            "skipSteadyStateCheck": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            },
            "workload": {
              "type": "string",
              "minLength": 1
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "instanceSelection",
        "workload"
      ],
      "properties": {
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "instanceSelection": {
          "$ref": "#/definitions/cd/InstanceSelectionWrapper"
        },
        "skipSteadyStateCheck": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ]
        },
        "workload": {
          "type": "string",
          "minLength": 1
        }
      }
    },
    "K8sStepCommandFlag": {
      "type": "object",
      "required": [
        "commandType"
      ],
      "properties": {
        "commandType": {
          "type": "string",
          "enum": [
            "Apply"
          ]
        },
        "flag": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "KubernetesServiceSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/ServiceSpec"
        },
        {
          "type": "object",
          "properties": {}
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "KustomizeManifest": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/ManifestAttributes"
        },
        {
          "type": "object",
          "properties": {
            "enableDeclarativeRollback": {
              "oneOf": [
                {
                  "$ref": "#/definitions/cd/ParameterFieldBoolean"
                },
                {
                  "type": "string"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "metadata": {
              "type": "string"
            },
            "overlayConfiguration": {
              "$ref": "#/definitions/cd/OverlayConfiguration"
            },
            "patchesPaths": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "pluginPath": {
              "type": "string"
            },
            "skipResourceVersioning": {
              "oneOf": [
                {
                  "$ref": "#/definitions/cd/ParameterFieldBoolean"
                },
                {
                  "type": "string"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "store": {
              "$ref": "#/definitions/cd/StoreConfigWrapper"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "KustomizePatchesManifest": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/ManifestAttributes"
        },
        {
          "type": "object",
          "properties": {
            "metadata": {
              "type": "string"
            },
            "store": {
              "$ref": "#/definitions/cd/StoreConfigWrapper"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "LoadBalancer": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "AWSLoadBalancerConfig"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "AWSLoadBalancerConfig"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/AwsLoadBalancerConfigYaml"
              }
            }
          }
        }
      ]
    },
    "LoadBalancerSpec": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "AWSLoadBalancerConfig"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ManifestAttributes": {
      "type": "object",
      "discriminator": "type",
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ManifestConfig": {
      "type": "object",
      "required": [
        "identifier",
        "spec",
        "type"
      ],
      "properties": {
        "identifier": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "HelmChart",
            "HelmRepoOverride",
            "K8sManifest",
            "Kustomize",
            "KustomizePatches",
            "OpenshiftParam",
            "OpenshiftTemplate",
            "Values",
            "ServerlessAwsLambda",
            "ReleaseRepo",
            "DeploymentRepo",
            "EcsTaskDefinition",
            "EcsServiceDefinition",
            "EcsScalableTargetDefinition",
            "EcsScalingPolicyDefinition",
            "TasManifest",
            "TasVars",
            "TasAutoScaler",
            "AsgLaunchTemplate",
            "AsgConfiguration",
            "AsgScalingPolicy",
            "AsgScheduledUpdateGroupAction",
            "GoogleCloudFunctionDefinition",
            "AwsLambdaFunctionDefinition",
            "AwsLambdaFunctionAliasDefinition",
            "AwsSamDirectory"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "AsgConfiguration"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/AsgConfigurationManifest"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "AsgLaunchTemplate"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/AsgLaunchTemplateManifest"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "AsgScalingPolicy"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/AsgScalingPolicyManifest"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "AsgScheduledUpdateGroupAction"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/AsgScheduledUpdateGroupActionManifest"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "AwsLambdaFunctionAliasDefinition"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/AwsLambdaFunctionAliasDefinitionManifest"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "AwsLambdaFunctionDefinition"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/AwsLambdaDefinitionManifest"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "AwsSamDirectory"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/AwsSamDirectoryManifest"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "DeploymentRepo"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/GitOpsDeploymentRepoManifest"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "EcsScalableTargetDefinition"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/EcsScalableTargetDefinitionManifest"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "EcsScalingPolicyDefinition"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/EcsScalingPolicyDefinitionManifest"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "EcsServiceDefinition"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/EcsServiceDefinitionManifest"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "EcsTaskDefinition"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/EcsTaskDefinitionManifest"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "GoogleCloudFunctionDefinition"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/GoogleCloudFunctionDefinitionManifest"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "HelmChart"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/HelmChartManifest"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "HelmRepoOverride"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/HelmRepoOverrideManifest"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "K8sManifest"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/K8sManifest"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Kustomize"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/KustomizeManifest"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "KustomizePatches"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/KustomizePatchesManifest"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "OpenshiftParam"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/OpenshiftParamManifest"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "OpenshiftTemplate"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/OpenshiftManifest"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "ReleaseRepo"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/ReleaseRepoManifest"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "ServerlessAwsLambda"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/ServerlessAwsLambdaManifest"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "TasAutoScaler"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/AutoScalerManifest"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "TasManifest"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/TasManifest"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "TasVars"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/VarsManifest"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Values"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/ValuesManifest"
              }
            }
          }
        }
      ]
    },
    "ManifestConfigWrapper": {
      "type": "object",
      "properties": {
        "manifest": {
          "$ref": "#/definitions/cd/ManifestConfig"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ManifestOverrideSetWrapper": {
      "type": "object",
      "properties": {
        "overrideSet": {
          "$ref": "#/definitions/cd/ManifestOverrideSets"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ManifestOverrideSets": {
      "type": "object",
      "properties": {
        "identifier": {
          "type": "string"
        },
        "manifests": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cd/ManifestConfigWrapper"
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ManualFailureSpecConfig": {
      "type": "object",
      "required": [
        "onTimeout",
        "timeout"
      ],
      "properties": {
        "onTimeout": {
          "$ref": "#/definitions/cd/OnTimeoutConfig"
        },
        "timeout": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ManualInterventionFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": [
            "spec",
            "type"
          ],
          "properties": {
            "spec": {
              "readOnly": true,
              "$ref": "#/definitions/cd/ManualFailureSpecConfig"
            },
            "type": {
              "type": "string",
              "enum": [
                "ManualIntervention"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "MarkAsFailFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "MarkAsFailure"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "MarkAsSuccessFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "MarkAsSuccess"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "MatrixConfigInterface": {
      "type": "object",
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "MergePRStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "deleteSourceBranch"
          ],
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "deleteSourceBranch": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            },
            "variables": {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/cd/NumberNGVariable"
                  },
                  {
                    "$ref": "#/definitions/cd/SecretNGVariable"
                  },
                  {
                    "$ref": "#/definitions/cd/StringNGVariable"
                  }
                ]
              }
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "deleteSourceBranch"
      ],
      "properties": {
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "deleteSourceBranch": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ]
        },
        "variables": {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/cd/NumberNGVariable"
              },
              {
                "$ref": "#/definitions/cd/SecretNGVariable"
              },
              {
                "$ref": "#/definitions/cd/StringNGVariable"
              }
            ]
          }
        }
      }
    },
    "ModuleSource": {
      "type": "object",
      "required": [
        "useConnectorCredentials"
      ],
      "properties": {
        "useConnectorCredentials": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/ParameterFieldBoolean"
            },
            {
              "type": "string"
            },
            {
              "type": "boolean"
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "NGVariable": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "description": {
          "type": "string"
        },
        "metadata": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "required": {
          "type": "boolean"
        },
        "type": {
          "type": "string",
          "enum": [
            "String",
            "Number",
            "Secret"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "NGVariableOverrideSetWrapper": {
      "type": "object",
      "properties": {
        "overrideSet": {
          "$ref": "#/definitions/cd/NGVariableOverrideSets"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "NGVariableOverrideSets": {
      "type": "object",
      "properties": {
        "identifier": {
          "type": "string"
        },
        "variables": {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/cd/NumberNGVariable"
              },
              {
                "$ref": "#/definitions/cd/SecretNGVariable"
              },
              {
                "$ref": "#/definitions/cd/StringNGVariable"
              }
            ]
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "NativeHelmServiceSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/ServiceSpec"
        },
        {
          "type": "object",
          "properties": {}
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "Nexus2RegistryArtifactConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/ArtifactConfig"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "repository",
            "repositoryFormat"
          ],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "metadata": {
              "type": "string"
            },
            "repository": {
              "type": "string"
            },
            "repositoryFormat": {
              "type": "string",
              "enum": [
                "maven",
                "npm",
                "nuget"
              ]
            },
            "tag": {
              "type": "string"
            },
            "tagRegex": {
              "type": "string"
            }
          }
        },
        {
          "if": {
            "properties": {
              "repositoryFormat": {
                "const": "docker"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/NexusRegistryDockerConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "repositoryFormat": {
                "const": "maven"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/NexusRegistryMavenConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "repositoryFormat": {
                "const": "npm"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/NexusRegistryNpmConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "repositoryFormat": {
                "const": "nuget"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/NexusRegistryNugetConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "repositoryFormat": {
                "const": "raw"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/NexusRegistryRawConfig"
              }
            }
          }
        },
        {
          "oneOf": [
            {
              "required": [
                "tagRegex"
              ]
            },
            {
              "required": [
                "tag"
              ]
            }
          ]
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "NexusRegistryArtifactConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/ArtifactConfig"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "repository",
            "repositoryFormat"
          ],
          "properties": {
            "artifactPath": {
              "type": "string"
            },
            "connectorRef": {
              "type": "string"
            },
            "metadata": {
              "type": "string"
            },
            "repository": {
              "type": "string"
            },
            "repositoryFormat": {
              "type": "string",
              "enum": [
                "docker",
                "maven",
                "npm",
                "nuget",
                "raw"
              ]
            },
            "repositoryPort": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "repositoryUrl": {
              "type": "string"
            },
            "tag": {
              "type": "string"
            },
            "tagRegex": {
              "type": "string"
            }
          }
        },
        {
          "if": {
            "properties": {
              "repositoryFormat": {
                "const": "docker"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/NexusRegistryDockerConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "repositoryFormat": {
                "const": "maven"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/NexusRegistryMavenConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "repositoryFormat": {
                "const": "npm"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/NexusRegistryNpmConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "repositoryFormat": {
                "const": "nuget"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/NexusRegistryNugetConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "repositoryFormat": {
                "const": "raw"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/NexusRegistryRawConfig"
              }
            }
          }
        },
        {
          "oneOf": [
            {
              "required": [
                "tagRegex"
              ]
            },
            {
              "required": [
                "tag"
              ]
            }
          ]
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "NexusRegistryConfigSpec": {
      "type": "object",
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "NexusRegistryDockerConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/NexusRegistryConfigSpec"
        },
        {
          "type": "object",
          "required": [
            "artifactPath"
          ],
          "properties": {
            "artifactPath": {
              "type": "string"
            },
            "repositoryPort": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "repositoryUrl": {
              "type": "string"
            }
          }
        },
        {
          "oneOf": [
            {
              "required": [
                "repositoryPort"
              ]
            },
            {
              "required": [
                "repositoryUrl"
              ]
            }
          ]
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "NexusRegistryMavenConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/NexusRegistryConfigSpec"
        },
        {
          "type": "object",
          "required": [
            "artifactId",
            "groupId"
          ],
          "properties": {
            "artifactId": {
              "type": "string"
            },
            "classifier": {
              "type": "string"
            },
            "extension": {
              "type": "string"
            },
            "groupId": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "NexusRegistryNpmConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/NexusRegistryConfigSpec"
        },
        {
          "type": "object",
          "required": [
            "packageName"
          ],
          "properties": {
            "packageName": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "NexusRegistryNugetConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/NexusRegistryConfigSpec"
        },
        {
          "type": "object",
          "required": [
            "packageName"
          ],
          "properties": {
            "packageName": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "NexusRegistryRawConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/NexusRegistryConfigSpec"
        },
        {
          "type": "object",
          "required": [
            "group"
          ],
          "properties": {
            "group": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "NumberNGVariable": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/NGVariable"
        },
        {
          "type": "object",
          "required": [
            "value"
          ],
          "properties": {
            "default": {
              "type": "number",
              "format": "double"
            },
            "name": {
              "type": "string",
              "pattern": "^[a-zA-Z_][0-9a-zA-Z_\\.$]{0,127}$"
            },
            "type": {
              "type": "string",
              "enum": [
                "Number"
              ]
            },
            "value": {
              "oneOf": [
                {
                  "type": "number",
                  "format": "double"
                },
                {
                  "type": "string",
                  "pattern": "((^[+-]?[0-9]*\\.?[0-9]+$)|(<\\+.+>.*))"
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "OciHelmChartConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/StoreConfig"
        },
        {
          "type": "object",
          "properties": {
            "basePath": {
              "type": "string"
            },
            "config": {
              "$ref": "#/definitions/cd/OciHelmChartStoreConfigWrapper"
            },
            "metadata": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "OciHelmChartStoreConfig": {
      "type": "object",
      "discriminator": "type",
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "OciHelmChartStoreConfigWrapper": {
      "type": "object",
      "required": [
        "spec",
        "type"
      ],
      "properties": {
        "metadata": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "Generic"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Generic"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/OciHelmChartStoreGenericConfig"
              }
            }
          }
        }
      ]
    },
    "OciHelmChartStoreGenericConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/OciHelmChartStoreConfig"
        },
        {
          "type": "object",
          "properties": {
            "connectorRef": {
              "oneOf": [
                {
                  "$ref": "#/definitions/cd/ParameterFieldString"
                },
                {
                  "type": "string"
                }
              ]
            },
            "metadata": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "OnFailureConfig": {
      "type": "object",
      "required": [
        "action",
        "errors"
      ],
      "properties": {
        "action": {
          "$ref": "#/definitions/cd/FailureStrategyActionConfig"
        },
        "errors": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Unknown",
              "AllErrors",
              "Authentication",
              "Connectivity",
              "Timeout",
              "Authorization",
              "Verification",
              "DelegateProvisioning",
              "PolicyEvaluationFailure",
              "InputTimeoutError",
              "ApprovalRejection",
              "DelegateRestart"
            ]
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "OnRetryFailureConfig": {
      "type": "object",
      "properties": {
        "action": {
          "$ref": "#/definitions/cd/FailureStrategyActionConfig"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "OnTimeoutConfig": {
      "type": "object",
      "properties": {
        "action": {
          "$ref": "#/definitions/cd/FailureStrategyActionConfig"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "OpenshiftManifest": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/ManifestAttributes"
        },
        {
          "type": "object",
          "properties": {
            "enableDeclarativeRollback": {
              "oneOf": [
                {
                  "$ref": "#/definitions/cd/ParameterFieldBoolean"
                },
                {
                  "type": "string"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "metadata": {
              "type": "string"
            },
            "paramsPaths": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "skipResourceVersioning": {
              "oneOf": [
                {
                  "$ref": "#/definitions/cd/ParameterFieldBoolean"
                },
                {
                  "type": "string"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "store": {
              "$ref": "#/definitions/cd/StoreConfigWrapper"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "OpenshiftParamManifest": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/ManifestAttributes"
        },
        {
          "type": "object",
          "properties": {
            "metadata": {
              "type": "string"
            },
            "store": {
              "$ref": "#/definitions/cd/StoreConfigWrapper"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "OverlayConfiguration": {
      "type": "object",
      "required": [
        "kustomizeYamlFolderPath"
      ],
      "properties": {
        "kustomizeYamlFolderPath": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ParallelStepElementConfig": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/cd/ExecutionWrapperConfig"
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ParameterField": {
      "type": "object",
      "properties": {
        "defaultValue": {
          "type": "object"
        },
        "executionInput": {
          "type": "boolean"
        },
        "expression": {
          "type": "boolean"
        },
        "expressionValue": {
          "type": "string"
        },
        "inputSetValidator": {
          "$ref": "#/definitions/cd/InputSetValidator"
        },
        "jsonResponseField": {
          "type": "boolean"
        },
        "responseField": {
          "type": "string"
        },
        "typeString": {
          "type": "boolean"
        },
        "value": {
          "type": "object"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ParameterFieldBoolean": {
      "type": "object",
      "properties": {
        "defaultValue": {
          "type": "boolean"
        },
        "executionInput": {
          "type": "boolean"
        },
        "expression": {
          "type": "boolean"
        },
        "expressionValue": {
          "type": "string"
        },
        "inputSetValidator": {
          "$ref": "#/definitions/cd/InputSetValidator"
        },
        "jsonResponseField": {
          "type": "boolean"
        },
        "responseField": {
          "type": "string"
        },
        "typeString": {
          "type": "boolean"
        },
        "value": {
          "type": "boolean"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ParameterFieldMapStringString": {
      "type": "object",
      "properties": {
        "defaultValue": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "executionInput": {
          "type": "boolean"
        },
        "expression": {
          "type": "boolean"
        },
        "expressionValue": {
          "type": "string"
        },
        "inputSetValidator": {
          "$ref": "#/definitions/cd/InputSetValidator"
        },
        "jsonResponseField": {
          "type": "boolean"
        },
        "responseField": {
          "type": "string"
        },
        "typeString": {
          "type": "boolean"
        },
        "value": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ParameterFieldMatrixConfigInterface": {
      "type": "object",
      "properties": {
        "defaultValue": {
          "$ref": "#/definitions/cd/MatrixConfigInterface"
        },
        "executionInput": {
          "type": "boolean"
        },
        "expression": {
          "type": "boolean"
        },
        "expressionValue": {
          "type": "string"
        },
        "inputSetValidator": {
          "$ref": "#/definitions/cd/InputSetValidator"
        },
        "jsonResponseField": {
          "type": "boolean"
        },
        "responseField": {
          "type": "string"
        },
        "typeString": {
          "type": "boolean"
        },
        "value": {
          "$ref": "#/definitions/cd/MatrixConfigInterface"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ParameterFieldString": {
      "type": "object",
      "properties": {
        "defaultValue": {
          "type": "string"
        },
        "executionInput": {
          "type": "boolean"
        },
        "expression": {
          "type": "boolean"
        },
        "expressionValue": {
          "type": "string"
        },
        "inputSetValidator": {
          "$ref": "#/definitions/cd/InputSetValidator"
        },
        "jsonResponseField": {
          "type": "boolean"
        },
        "responseField": {
          "type": "string"
        },
        "typeString": {
          "type": "boolean"
        },
        "value": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PdcInfrastructure": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/Infrastructure"
        },
        {}
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "credentialsRef",
            "hostFilter",
            "connectorRef"
          ],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "credentialsRef": {
              "type": "string"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "dynamicallyProvisioned": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            },
            "hostAttributes": {
              "oneOf": [
                {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "hostFilter": {
              "$ref": "#/definitions/cd/HostFilter"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "credentialsRef",
            "hostFilter",
            "hosts"
          ],
          "properties": {
            "credentialsRef": {
              "type": "string"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "dynamicallyProvisioned": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            },
            "hostAttributes": {
              "oneOf": [
                {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "hostFilter": {
              "$ref": "#/definitions/cd/HostFilter"
            },
            "hosts": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "credentialsRef",
            "hostFilter",
            "hostObjectArray"
          ],
          "properties": {
            "credentialsRef": {
              "type": "string"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "dynamicallyProvisioned": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            },
            "hostAttributes": {
              "oneOf": [
                {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "hostFilter": {
              "$ref": "#/definitions/cd/HostFilter"
            },
            "hostObjectArray": {
              "oneOf": [
                {
                  "$ref": "#/definitions/cd/JsonNode"
                },
                {
                  "type": "string",
                  "pattern": "(<\\+.+>.*)",
                  "minLength": 1
                }
              ]
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "PercentageCapacitySpec": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/CapacitySpec"
        },
        {
          "type": "object",
          "required": [
            "percentage"
          ],
          "properties": {
            "percentage": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32",
                  "minimum": 0,
                  "maximum": 100
                },
                {
                  "type": "string",
                  "pattern": "(<\\+.+>.*)",
                  "minLength": 1
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PercentageInstanceSelection": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/InstanceSelectionBase"
        },
        {
          "type": "object",
          "properties": {
            "percentage": {
              "oneOf": [
                {
                  "$ref": "#/definitions/cd/ParameterFieldString"
                },
                {
                  "type": "string"
                },
                {
                  "type": "number"
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PipelineInfrastructure": {
      "type": "object",
      "properties": {
        "allowSimultaneousDeployments": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ]
        },
        "environment": {
          "$ref": "#/definitions/cd/EnvironmentYaml"
        },
        "environmentRef": {
          "type": "string"
        },
        "infrastructureDefinition": {
          "$ref": "#/definitions/cd/InfrastructureDef"
        },
        "infrastructureKey": {
          "type": "string"
        },
        "useFromStage": {
          "$ref": "#/definitions/cd/InfraUseFromStage"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "oneOf": [
            {
              "required": [
                "environment"
              ]
            },
            {
              "required": [
                "environmentRef"
              ]
            }
          ]
        },
        {
          "oneOf": [
            {
              "required": [
                "useFromStage"
              ]
            },
            {
              "required": [
                "infrastructureDefinition"
              ]
            }
          ]
        }
      ]
    },
    "PipelineRollbackFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "PipelineRollback"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PolicyConfig": {
      "type": "object",
      "required": [
        "policySets"
      ],
      "properties": {
        "policySets": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PrimaryArtifact": {
      "type": "object",
      "properties": {
        "primaryArtifactRef": {
          "type": "string"
        },
        "sources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cd/ArtifactSource"
          }
        },
        "type": {
          "type": "string",
          "enum": [
            "DockerRegistry",
            "Gcr",
            "Ecr",
            "Nexus3Registry",
            "Nexus2Registry",
            "ArtifactoryRegistry",
            "CustomArtifact",
            "Acr",
            "Jenkins",
            "AmazonS3",
            "GoogleArtifactRegistry",
            "GithubPackageRegistry",
            "AzureArtifacts",
            "AmazonMachineImage",
            "Bamboo",
            "GoogleCloudStorage",
            "GoogleCloudSource"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Acr"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/AcrArtifactConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "AmazonMachineImage"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/AMIArtifactConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "AmazonS3"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/AmazonS3ArtifactConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "ArtifactoryRegistry"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/ArtifactoryRegistryArtifactConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "AzureArtifacts"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/AzureArtifactsConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Bamboo"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/BambooArtifactConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "CustomArtifact"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/CustomArtifactConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "DockerRegistry"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/DockerHubArtifactConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Ecr"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/EcrArtifactConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Gcr"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/GcrArtifactConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "GithubPackageRegistry"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/GithubPackagesArtifactConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "GoogleArtifactRegistry"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/GoogleArtifactRegistryConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "GoogleCloudSource"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/GoogleCloudSourceArtifactConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "GoogleCloudStorage"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/GoogleCloudStorageArtifactConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Jenkins"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/JenkinsArtifactConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Nexus2Registry"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/Nexus2RegistryArtifactConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Nexus3Registry"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/NexusRegistryArtifactConfig"
              }
            }
          }
        }
      ]
    },
    "ProceedWithDefaultValuesFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "ProceedWithDefaultValues"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ReleaseRepoManifest": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/ManifestAttributes"
        },
        {
          "type": "object",
          "properties": {
            "metadata": {
              "type": "string"
            },
            "store": {
              "$ref": "#/definitions/cd/StoreConfigWrapper"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "RemoteCloudformationTagsFileSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/CloudformationTagsFileSpec"
        },
        {
          "type": "object",
          "required": [
            "store"
          ],
          "properties": {
            "store": {
              "$ref": "#/definitions/cd/StoreConfigWrapper"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "RemoteCloudformationTemplateFileSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/CloudformationTemplateFileSpec"
        },
        {
          "type": "object",
          "required": [
            "store"
          ],
          "properties": {
            "store": {
              "$ref": "#/definitions/cd/StoreConfigWrapper"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "RemoteTerraformBackendConfigSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/TerraformBackendConfigSpec"
        },
        {
          "type": "object",
          "required": [
            "store"
          ],
          "properties": {
            "store": {
              "$ref": "#/definitions/cd/StoreConfigWrapper"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "RemoteTerraformVarFileSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/TerraformVarFileSpec"
        },
        {
          "type": "object",
          "required": [
            "store"
          ],
          "properties": {
            "store": {
              "$ref": "#/definitions/cd/StoreConfigWrapper"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "RemoteTerragruntBackendConfigSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/TerragruntBackendConfigSpec"
        },
        {
          "type": "object",
          "required": [
            "store"
          ],
          "properties": {
            "store": {
              "$ref": "#/definitions/cd/StoreConfigWrapper"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "RemoteTerragruntVarFileSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/TerragruntVarFileSpec"
        },
        {
          "type": "object",
          "required": [
            "store"
          ],
          "properties": {
            "store": {
              "$ref": "#/definitions/cd/StoreConfigWrapper"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "RetryFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": [
            "spec",
            "type"
          ],
          "properties": {
            "spec": {
              "readOnly": true,
              "$ref": "#/definitions/cd/RetryFailureSpecConfig"
            },
            "type": {
              "type": "string",
              "enum": [
                "Retry"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "RetryFailureSpecConfig": {
      "type": "object",
      "required": [
        "onRetryFailure",
        "retryCount",
        "retryIntervals"
      ],
      "properties": {
        "onRetryFailure": {
          "$ref": "#/definitions/cd/OnRetryFailureConfig"
        },
        "retryCount": {
          "type": "integer",
          "format": "int32"
        },
        "retryIntervals": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "maxItems": 2147483647,
          "minItems": 1
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "S3StoreConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/StoreConfig"
        },
        {
          "type": "object",
          "properties": {
            "bucketName": {
              "type": "string"
            },
            "connectorRef": {
              "type": "string"
            },
            "folderPath": {
              "type": "string"
            },
            "metadata": {
              "type": "string"
            },
            "paths": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "region": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "S3UrlCloudformationTemplateFileSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/CloudformationTemplateFileSpec"
        },
        {
          "type": "object",
          "required": [
            "templateUrl"
          ],
          "properties": {
            "templateUrl": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "S3UrlStoreConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/StoreConfig"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "region",
            "urls"
          ],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "metadata": {
              "type": "string"
            },
            "region": {
              "type": "string"
            },
            "urls": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ScriptCommandUnitSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/CommandUnitBaseSpec"
        },
        {
          "type": "object",
          "required": [
            "shell",
            "source"
          ],
          "properties": {
            "shell": {
              "type": "string",
              "enum": [
                "Bash",
                "PowerShell"
              ]
            },
            "source": {
              "$ref": "#/definitions/cd/ShellScriptSourceWrapper"
            },
            "tailFiles": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/TailFilePattern"
              }
            },
            "workingDirectory": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SecretNGVariable": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/NGVariable"
        },
        {
          "type": "object",
          "required": [
            "value"
          ],
          "properties": {
            "default": {
              "type": "string"
            },
            "name": {
              "type": "string",
              "pattern": "^[a-zA-Z_][0-9a-zA-Z_\\.$]{0,127}$"
            },
            "type": {
              "type": "string",
              "enum": [
                "Secret"
              ]
            },
            "value": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ServerlessAwsLambdaDeployStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/StepSpecType"
        },
        {
          "type": "object",
          "properties": {
            "commandOptions": {
              "type": "string"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "properties": {
        "commandOptions": {
          "type": "string"
        },
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      }
    },
    "ServerlessAwsLambdaInfrastructure": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/Infrastructure"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "region",
            "stage"
          ],
          "properties": {
            "connectorRef": {
              "type": "string",
              "minLength": 1
            },
            "metadata": {
              "type": "string"
            },
            "region": {
              "type": "string",
              "minLength": 1
            },
            "stage": {
              "type": "string",
              "minLength": 1
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ServerlessAwsLambdaManifest": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/ManifestAttributes"
        },
        {
          "type": "object",
          "properties": {
            "configOverridePath": {
              "type": "string"
            },
            "metadata": {
              "type": "string"
            },
            "store": {
              "$ref": "#/definitions/cd/StoreConfigWrapper"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ServerlessAwsLambdaRollbackStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/StepSpecType"
        },
        {
          "type": "object",
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "properties": {
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      }
    },
    "ServerlessAwsLambdaServiceSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/ServiceSpec"
        },
        {
          "type": "object",
          "properties": {}
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ServiceConfig": {
      "type": "object",
      "properties": {
        "service": {
          "$ref": "#/definitions/cd/ServiceYaml"
        },
        "serviceDefinition": {
          "$ref": "#/definitions/cd/ServiceDefinition"
        },
        "serviceRef": {
          "type": "string"
        },
        "stageOverrides": {
          "$ref": "#/definitions/cd/StageOverridesConfig"
        },
        "useFromStage": {
          "$ref": "#/definitions/cd/ServiceUseFromStage"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "oneOf": [
            {
              "required": [
                "useFromStage"
              ]
            },
            {
              "required": [
                "service"
              ]
            },
            {
              "required": [
                "serviceRef"
              ]
            }
          ]
        },
        {
          "oneOf": [
            {
              "required": [
                "useFromStage"
              ]
            },
            {
              "required": [
                "serviceDefinition"
              ]
            }
          ]
        }
      ]
    },
    "ServiceDefinition": {
      "type": "object",
      "required": [
        "spec",
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "Kubernetes",
            "NativeHelm",
            "Ssh",
            "WinRm",
            "ServerlessAwsLambda",
            "AzureWebApp",
            "CustomDeployment",
            "ECS",
            "Elastigroup",
            "TAS",
            "Asg",
            "GoogleCloudFunctions",
            "AwsLambda",
            "AWS_SAM"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "AWS_SAM"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/AwsSamServiceSpec"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Asg"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/AsgServiceSpec"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "AwsLambda"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/AwsLambdaServiceSpec"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "AzureWebApp"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/AzureWebAppServiceSpec"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "CustomDeployment"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/CustomDeploymentServiceSpec"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "ECS"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/EcsServiceSpec"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Elastigroup"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/ElastigroupServiceSpec"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "GoogleCloudFunctions"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/GoogleCloudFunctionsServiceSpec"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Kubernetes"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/KubernetesServiceSpec"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "NativeHelm"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/NativeHelmServiceSpec"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "ServerlessAwsLambda"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/ServerlessAwsLambdaServiceSpec"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Ssh"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/SshServiceSpec"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "TAS"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/TanzuApplicationServiceSpec"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "WinRm"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/WinRmServiceSpec"
              }
            }
          }
        }
      ]
    },
    "ServiceOverrideInputsYaml": {
      "type": "object",
      "required": [
        "serviceRef"
      ],
      "properties": {
        "serviceOverrideInputs": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/JsonNode"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "serviceRef": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ServiceOverrides": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ServiceSpec": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "artifacts": {
          "$ref": "#/definitions/cd/ArtifactListConfig"
        },
        "configFiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cd/ConfigFileWrapper"
          }
        },
        "manifests": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cd/ManifestConfigWrapper"
          }
        },
        "variables": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cd/NGVariable"
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ServiceUseFromStage": {
      "type": "object",
      "required": [
        "stage"
      ],
      "properties": {
        "metadata": {
          "type": "string"
        },
        "overrides": {
          "$ref": "#/definitions/cd/ServiceOverrides"
        },
        "stage": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ServiceUseFromStageV2": {
      "type": "object",
      "required": [
        "stage"
      ],
      "properties": {
        "metadata": {
          "type": "string"
        },
        "stage": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ServiceYaml": {
      "type": "object",
      "required": [
        "identifier",
        "name"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "identifier": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ServiceYamlV2": {
      "type": "object",
      "properties": {
        "serviceInputs": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/JsonNode"
            },
            {
              "type": "string",
              "pattern": "(^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$|^$)"
            }
          ]
        },
        "serviceRef": {
          "type": "string"
        },
        "useFromStage": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/ServiceUseFromStageV2"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ServicesMetadata": {
      "type": "object",
      "properties": {
        "parallel": {
          "type": "boolean"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ServicesYaml": {
      "type": "object",
      "properties": {
        "metadata": {
          "readOnly": true,
          "$ref": "#/definitions/cd/ServicesMetadata"
        },
        "values": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/ServiceYamlV2"
              }
            },
            {
              "type": "string",
              "pattern": "(<\\+.+>.*)",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ShellScriptBaseSource": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ShellScriptInlineSource": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/ShellScriptBaseSource"
        },
        {
          "type": "object",
          "properties": {
            "script": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ShellScriptProvisionStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "source"
          ],
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "environmentVariables": {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/cd/NumberNGVariable"
                  },
                  {
                    "$ref": "#/definitions/cd/SecretNGVariable"
                  },
                  {
                    "$ref": "#/definitions/cd/StringNGVariable"
                  }
                ]
              }
            },
            "source": {
              "$ref": "#/definitions/cd/ShellScriptSourceWrapper"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "source"
      ],
      "properties": {
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "environmentVariables": {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/cd/NumberNGVariable"
              },
              {
                "$ref": "#/definitions/cd/SecretNGVariable"
              },
              {
                "$ref": "#/definitions/cd/StringNGVariable"
              }
            ]
          }
        },
        "source": {
          "$ref": "#/definitions/cd/ShellScriptSourceWrapper"
        }
      }
    },
    "ShellScriptSourceWrapper": {
      "type": "object",
      "required": [
        "spec",
        "type"
      ],
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Harness"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/HarnessFileStoreSource"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Inline"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/ShellScriptInlineSource"
              }
            }
          }
        }
      ]
    },
    "SidecarArtifact": {
      "type": "object",
      "required": [
        "identifier"
      ],
      "properties": {
        "identifier": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "template": {
          "$ref": "#/definitions/cd/TemplateLinkConfig"
        },
        "type": {
          "type": "string",
          "enum": [
            "DockerRegistry",
            "Gcr",
            "Ecr",
            "Nexus3Registry",
            "Nexus2Registry",
            "ArtifactoryRegistry",
            "CustomArtifact",
            "Acr",
            "Jenkins",
            "AmazonS3",
            "GoogleArtifactRegistry",
            "GithubPackageRegistry",
            "AzureArtifacts",
            "AmazonMachineImage",
            "Bamboo",
            "GoogleCloudStorage",
            "GoogleCloudSource"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Acr"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/AcrArtifactConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "AmazonMachineImage"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/AMIArtifactConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "AmazonS3"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/AmazonS3ArtifactConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "ArtifactoryRegistry"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/ArtifactoryRegistryArtifactConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "AzureArtifacts"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/AzureArtifactsConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Bamboo"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/BambooArtifactConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "CustomArtifact"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/CustomArtifactConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "DockerRegistry"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/DockerHubArtifactConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Ecr"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/EcrArtifactConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Gcr"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/GcrArtifactConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "GithubPackageRegistry"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/GithubPackagesArtifactConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "GoogleArtifactRegistry"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/GoogleArtifactRegistryConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "GoogleCloudSource"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/GoogleCloudSourceArtifactConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "GoogleCloudStorage"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/GoogleCloudStorageArtifactConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Jenkins"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/JenkinsArtifactConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Nexus2Registry"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/Nexus2RegistryArtifactConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Nexus3Registry"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/NexusRegistryArtifactConfig"
              }
            }
          }
        },
        {
          "oneOf": [
            {
              "required": [
                "template"
              ]
            },
            {
              "required": [
                "spec"
              ]
            }
          ]
        }
      ]
    },
    "SidecarArtifactWrapper": {
      "type": "object",
      "properties": {
        "sidecar": {
          "$ref": "#/definitions/cd/SidecarArtifact"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SshServiceSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/ServiceSpec"
        },
        {
          "type": "object",
          "properties": {}
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SshWinRmAwsInfrastructure": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/Infrastructure"
        },
        {
          "type": "object",
          "required": [
            "awsInstanceFilter",
            "connectorRef",
            "credentialsRef",
            "hostConnectionType",
            "region"
          ],
          "properties": {
            "awsInstanceFilter": {
              "$ref": "#/definitions/cd/AwsInstanceFilter"
            },
            "connectorRef": {
              "type": "string",
              "minLength": 1
            },
            "credentialsRef": {
              "type": "string",
              "minLength": 1
            },
            "hostConnectionType": {
              "type": "string",
              "enum": [
                "PublicIP",
                "PrivateIP"
              ],
              "minLength": 1
            },
            "region": {
              "type": "string",
              "minLength": 1
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SshWinRmAzureInfrastructure": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/Infrastructure"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "credentialsRef",
            "hostConnectionType",
            "resourceGroup",
            "subscriptionId"
          ],
          "properties": {
            "connectorRef": {
              "type": "string",
              "minLength": 1
            },
            "credentialsRef": {
              "type": "string",
              "minLength": 1
            },
            "hostConnectionType": {
              "type": "string",
              "enum": [
                "Hostname",
                "PrivateIP",
                "PublicIP"
              ],
              "minLength": 1
            },
            "resourceGroup": {
              "type": "string",
              "minLength": 1
            },
            "subscriptionId": {
              "type": "string",
              "minLength": 1
            },
            "tags": {
              "oneOf": [
                {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "StageOverridesConfig": {
      "type": "object",
      "properties": {
        "artifacts": {
          "$ref": "#/definitions/cd/ArtifactListConfig"
        },
        "configFiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cd/ConfigFileWrapper"
          }
        },
        "manifests": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cd/ManifestConfigWrapper"
          }
        },
        "variables": {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/cd/NumberNGVariable"
              },
              {
                "$ref": "#/definitions/cd/SecretNGVariable"
              },
              {
                "$ref": "#/definitions/cd/StringNGVariable"
              }
            ]
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "StageRollbackFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "StageRollback"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "StageWhenCondition": {
      "type": "object",
      "required": [
        "pipelineStatus"
      ],
      "properties": {
        "condition": {
          "type": "string",
          "pattern": "^(?!<\\+input>.*\\.executionInput\\(\\)(.*)$)"
        },
        "pipelineStatus": {
          "type": "string",
          "enum": [
            "Success",
            "Failure",
            "All"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "StartupCommandConfiguration": {
      "type": "object",
      "required": [
        "store"
      ],
      "properties": {
        "metadata": {
          "type": "string"
        },
        "store": {
          "$ref": "#/definitions/cd/StoreConfigWrapper"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "StartupScriptConfiguration": {
      "type": "object",
      "required": [
        "store"
      ],
      "properties": {
        "metadata": {
          "type": "string"
        },
        "store": {
          "$ref": "#/definitions/cd/StoreConfigWrapper"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "StepElementConfig": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cd/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cd/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(<\\+input>.*)|(.*<\\+.*>.*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": []
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": []
    },
    "StepGroupElementConfig": {
      "type": "object",
      "required": [
        "identifier",
        "name"
      ],
      "properties": {
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "steps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cd/ExecutionWrapperConfig"
          },
          "maxItems": 2147483647,
          "minItems": 1
        },
        "strategy": {
          "$ref": "#/definitions/cd/StrategyConfig"
        },
        "template": {
          "$ref": "#/definitions/cd/TemplateLinkConfig"
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "oneOf": [
            {
              "required": [
                "template"
              ]
            },
            {
              "required": [
                "steps"
              ]
            }
          ]
        }
      ]
    },
    "StepGroupFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "StepGroupRollback"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "StepSpecType": {
      "type": "object",
      "discriminator": "type",
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "StepTemplateRef": {
      "type": "object",
      "required": [
        "templateRef"
      ],
      "properties": {
        "templateRef": {
          "type": "string"
        },
        "versionLabel": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "StepWhenCondition": {
      "type": "object",
      "required": [
        "stageStatus"
      ],
      "properties": {
        "condition": {
          "type": "string",
          "pattern": "^(?!<\\+input>.*\\.executionInput\\(\\)(.*)$)"
        },
        "stageStatus": {
          "type": "string",
          "enum": [
            "Success",
            "Failure",
            "All"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "StoreConfig": {
      "type": "object",
      "discriminator": "type",
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "StoreConfigWrapper": {
      "type": "object",
      "required": [
        "spec",
        "type"
      ],
      "properties": {
        "metadata": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "CustomRemote",
            "Git",
            "Github",
            "Bitbucket",
            "GitLab",
            "Http",
            "S3",
            "Gcs",
            "Inline",
            "Artifactory",
            "S3Url",
            "InheritFromManifest",
            "Harness",
            "OciHelmChart",
            "AzureRepo"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Artifactory"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/ArtifactoryStoreConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "AzureRepo"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/AzureRepoStore"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Bitbucket"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/BitbucketStore"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "CustomRemote"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/CustomRemoteStoreConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Gcs"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/GcsStoreConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Git"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/GitStore"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "GitLab"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/GitLabStore"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Github"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/GithubStore"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Harness"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/HarnessStore"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Http"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/HttpStoreConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "InheritFromManifest"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/InheritFromManifestStoreConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Inline"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/InlineStoreConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "OciHelmChart"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/OciHelmChartConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "S3"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/S3StoreConfig"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "S3Url"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/S3UrlStoreConfig"
              }
            }
          }
        }
      ]
    },
    "StoreConfigWrapperParameters": {
      "type": "object",
      "properties": {
        "spec": {
          "$ref": "#/definitions/cd/StoreConfig"
        },
        "type": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "StrategyConfig": {
      "type": "object",
      "properties": {
        "matrix": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/ParameterFieldMatrixConfigInterface"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "parallelism": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            },
            {
              "type": "string",
              "pattern": "(<\\+.+>.*)",
              "minLength": 1
            }
          ]
        },
        "repeat": {
          "$ref": "#/definitions/cd/HarnessForConfig"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "oneOf": [
            {
              "required": [
                "repeat"
              ]
            },
            {
              "required": [
                "parallelism"
              ]
            },
            {
              "required": [
                "matrix"
              ]
            }
          ]
        }
      ]
    },
    "StringNGVariable": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/NGVariable"
        },
        {
          "type": "object",
          "required": [
            "value"
          ],
          "properties": {
            "default": {
              "type": "string"
            },
            "name": {
              "type": "string",
              "pattern": "^[a-zA-Z_][0-9a-zA-Z_\\.$]{0,127}$"
            },
            "type": {
              "type": "string",
              "enum": [
                "String"
              ]
            },
            "value": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SyncOptions": {
      "type": "object",
      "properties": {
        "applyOutOfSyncOnly": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ]
        },
        "autoCreateNamespace": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ]
        },
        "prunePropagationPolicy": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "pruneResourcesAtLast": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ]
        },
        "replaceResources": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ]
        },
        "skipSchemaValidation": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SyncRetryStrategy": {
      "type": "object",
      "properties": {
        "limit": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "maxRetryBackoffDuration": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "retryBackoffBaseDuration": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "waitAfterRetryFactor": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SyncStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/StepSpecType"
        },
        {
          "type": "object",
          "properties": {
            "applicationsList": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/AgentApplicationTargets"
              }
            },
            "applyOnly": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "dryRun": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            },
            "forceApply": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            },
            "prune": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            },
            "retryStrategy": {
              "$ref": "#/definitions/cd/SyncRetryStrategy"
            },
            "syncOptions": {
              "$ref": "#/definitions/cd/SyncOptions"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "properties": {
        "applicationsList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cd/AgentApplicationTargets"
          }
        },
        "applyOnly": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ]
        },
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "dryRun": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ]
        },
        "forceApply": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ]
        },
        "prune": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ]
        },
        "retryStrategy": {
          "$ref": "#/definitions/cd/SyncRetryStrategy"
        },
        "syncOptions": {
          "$ref": "#/definitions/cd/SyncOptions"
        }
      }
    },
    "TagsFilter": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/FilterSpec"
        },
        {
          "type": "object",
          "required": [
            "matchType",
            "tags"
          ],
          "properties": {
            "matchType": {
              "type": "string",
              "enum": [
                "all",
                "any"
              ]
            },
            "tags": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "TailFilePattern": {
      "type": "object",
      "properties": {
        "tailFile": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/ParameterFieldString"
            },
            {
              "type": "string"
            }
          ]
        },
        "tailPattern": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/ParameterFieldString"
            },
            {
              "type": "string"
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "TanzuApplicationServiceInfrastructure": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/Infrastructure"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "organization",
            "space"
          ],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "metadata": {
              "type": "string"
            },
            "organization": {
              "type": "string"
            },
            "space": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "TanzuApplicationServiceSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/ServiceSpec"
        },
        {
          "type": "object",
          "properties": {}
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "TasAppResizeStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "newAppInstances"
          ],
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "newAppInstances": {
              "$ref": "#/definitions/cd/TasInstanceSelectionWrapper"
            },
            "oldAppInstances": {
              "$ref": "#/definitions/cd/TasInstanceSelectionWrapper"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "newAppInstances"
      ],
      "properties": {
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "newAppInstances": {
          "$ref": "#/definitions/cd/TasInstanceSelectionWrapper"
        },
        "oldAppInstances": {
          "$ref": "#/definitions/cd/TasInstanceSelectionWrapper"
        }
      }
    },
    "TasBGAppSetupStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "existingVersionToKeep",
            "tasInstanceCountType"
          ],
          "properties": {
            "additionalRoutes": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "(<\\+.+>.*)",
                  "minLength": 1
                }
              ]
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "existingVersionToKeep": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32",
                  "minimum": 1
                },
                {
                  "type": "string",
                  "pattern": "(<\\+.+>.*)",
                  "minLength": 1
                }
              ]
            },
            "tasInstanceCountType": {
              "type": "string",
              "enum": [
                "FromManifest",
                "MatchRunningInstances"
              ]
            },
            "tempRoutes": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "(<\\+.+>.*)",
                  "minLength": 1
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "existingVersionToKeep",
        "tasInstanceCountType"
      ],
      "properties": {
        "additionalRoutes": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "(<\\+.+>.*)",
              "minLength": 1
            }
          ]
        },
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "existingVersionToKeep": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32",
              "minimum": 1
            },
            {
              "type": "string",
              "pattern": "(<\\+.+>.*)",
              "minLength": 1
            }
          ]
        },
        "tasInstanceCountType": {
          "type": "string",
          "enum": [
            "FromManifest",
            "MatchRunningInstances"
          ]
        },
        "tempRoutes": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "(<\\+.+>.*)",
              "minLength": 1
            }
          ]
        }
      }
    },
    "TasBasicAppSetupStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "existingVersionToKeep",
            "tasInstanceCountType"
          ],
          "properties": {
            "additionalRoutes": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "(<\\+.+>.*)",
                  "minLength": 1
                }
              ]
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "existingVersionToKeep": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32",
                  "minimum": 1
                },
                {
                  "type": "string",
                  "pattern": "(<\\+.+>.*)",
                  "minLength": 1
                }
              ]
            },
            "tasInstanceCountType": {
              "type": "string",
              "enum": [
                "FromManifest",
                "MatchRunningInstances"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "existingVersionToKeep",
        "tasInstanceCountType"
      ],
      "properties": {
        "additionalRoutes": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "(<\\+.+>.*)",
              "minLength": 1
            }
          ]
        },
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "existingVersionToKeep": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32",
              "minimum": 1
            },
            {
              "type": "string",
              "pattern": "(<\\+.+>.*)",
              "minLength": 1
            }
          ]
        },
        "tasInstanceCountType": {
          "type": "string",
          "enum": [
            "FromManifest",
            "MatchRunningInstances"
          ]
        }
      }
    },
    "TasCanaryAppSetupStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "existingVersionToKeep",
            "resizeStrategy",
            "tasInstanceCountType"
          ],
          "properties": {
            "additionalRoutes": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "(<\\+.+>.*)",
                  "minLength": 1
                }
              ]
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "existingVersionToKeep": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32",
                  "minimum": 1
                },
                {
                  "type": "string",
                  "pattern": "(<\\+.+>.*)",
                  "minLength": 1
                }
              ]
            },
            "resizeStrategy": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "UpScaleNewFirst",
                    "DownScaleOldFirst"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "tasInstanceCountType": {
              "type": "string",
              "enum": [
                "FromManifest",
                "MatchRunningInstances"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "existingVersionToKeep",
        "resizeStrategy",
        "tasInstanceCountType"
      ],
      "properties": {
        "additionalRoutes": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "(<\\+.+>.*)",
              "minLength": 1
            }
          ]
        },
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "existingVersionToKeep": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32",
              "minimum": 1
            },
            {
              "type": "string",
              "pattern": "(<\\+.+>.*)",
              "minLength": 1
            }
          ]
        },
        "resizeStrategy": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "UpScaleNewFirst",
                "DownScaleOldFirst"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "tasInstanceCountType": {
          "type": "string",
          "enum": [
            "FromManifest",
            "MatchRunningInstances"
          ]
        }
      }
    },
    "TasCommandScript": {
      "type": "object",
      "required": [
        "store"
      ],
      "properties": {
        "store": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/StoreConfigWrapper"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "TasCommandStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "script"
          ],
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "script": {
              "oneOf": [
                {
                  "$ref": "#/definitions/cd/TasCommandScript"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "script"
      ],
      "properties": {
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "script": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/TasCommandScript"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      }
    },
    "TasCountInstanceSelection": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/TasInstanceSelectionBase"
        },
        {
          "type": "object",
          "required": [
            "value"
          ],
          "properties": {
            "value": {
              "oneOf": [
                {
                  "$ref": "#/definitions/cd/ParameterFieldString"
                },
                {
                  "type": "string"
                },
                {
                  "type": "number"
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "TasInstanceSelectionBase": {
      "type": "object",
      "discriminator": "type",
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "TasInstanceSelectionWrapper": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "Percentage",
            "Count"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Count"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/TasCountInstanceSelection"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Percentage"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/TasPercentageInstanceSelection"
              }
            }
          }
        }
      ]
    },
    "TasManifest": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/ManifestAttributes"
        },
        {
          "type": "object",
          "properties": {
            "autoScalerPath": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "cfCliVersion": {
              "type": "string",
              "enum": [
                "V7"
              ]
            },
            "metadata": {
              "type": "string"
            },
            "store": {
              "$ref": "#/definitions/cd/StoreConfigWrapper"
            },
            "varsPaths": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "TasPercentageInstanceSelection": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/TasInstanceSelectionBase"
        },
        {
          "type": "object",
          "required": [
            "value"
          ],
          "properties": {
            "value": {
              "oneOf": [
                {
                  "$ref": "#/definitions/cd/ParameterFieldString"
                },
                {
                  "type": "string"
                },
                {
                  "type": "number"
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "TasRollbackStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/StepSpecType"
        },
        {
          "type": "object",
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "properties": {
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      }
    },
    "TasRollingDeployStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/StepSpecType"
        },
        {
          "type": "object",
          "properties": {
            "additionalRoutes": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "(<\\+.+>.*)",
                  "minLength": 1
                }
              ]
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "properties": {
        "additionalRoutes": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "(<\\+.+>.*)",
              "minLength": 1
            }
          ]
        },
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      }
    },
    "TasRollingRollbackStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/StepSpecType"
        },
        {
          "type": "object",
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "properties": {
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      }
    },
    "TasSwapRollbackStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "upsizeInActiveApp"
          ],
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "upsizeInActiveApp": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "upsizeInActiveApp"
      ],
      "properties": {
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "upsizeInActiveApp": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ]
        }
      }
    },
    "TasSwapRoutesStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "downSizeOldApplication"
          ],
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "downSizeOldApplication": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "downSizeOldApplication"
      ],
      "properties": {
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "downSizeOldApplication": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      }
    },
    "TemplateLinkConfig": {
      "type": "object",
      "required": [
        "templateRef"
      ],
      "properties": {
        "templateInputs": {
          "$ref": "#/definitions/cd/JsonNode"
        },
        "templateRef": {
          "type": "string"
        },
        "templateVariables": {
          "$ref": "#/definitions/cd/JsonNode"
        },
        "versionLabel": {
          "type": "string",
          "pattern": "^[0-9a-zA-Z][^\\s]{0,63}$"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "TerraformApplyStepInfo": {
      "allOf": [
        {
          "oneOf": [
            {
              "required": [
                "configuration"
              ]
            },
            {
              "required": [
                "cloudCliConfiguration"
              ]
            }
          ],
          "$ref": "#/definitions/cd/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "provisionerIdentifier"
          ],
          "properties": {
            "cloudCliConfiguration": {
              "$ref": "#/definitions/cd/TerraformCloudCliStepConfiguration"
            },
            "configuration": {
              "$ref": "#/definitions/cd/TerraformStepConfiguration"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "metadata": {
              "type": "string"
            },
            "provisionerIdentifier": {
              "type": "string"
            }
          }
        },
        {
          "oneOf": [
            {
              "required": [
                "configuration"
              ]
            },
            {
              "required": [
                "cloudCliConfiguration"
              ]
            }
          ]
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "provisionerIdentifier"
      ],
      "properties": {
        "cloudCliConfiguration": {
          "$ref": "#/definitions/cd/TerraformCloudCliStepConfiguration"
        },
        "configuration": {
          "$ref": "#/definitions/cd/TerraformStepConfiguration"
        },
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "metadata": {
          "type": "string"
        },
        "provisionerIdentifier": {
          "type": "string"
        }
      }
    },
    "TerraformBackendConfig": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Inline"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/InlineTerraformBackendConfigSpec"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Remote"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/RemoteTerraformBackendConfigSpec"
              }
            }
          }
        }
      ]
    },
    "TerraformBackendConfigSpec": {
      "type": "object",
      "discriminator": "type",
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "TerraformCloudApplySpec": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/TerraformCloudRunExecutionSpec"
        },
        {
          "type": "object",
          "required": [
            "provisionerIdentifier"
          ],
          "properties": {
            "provisionerIdentifier": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "TerraformCloudCliExecutionData": {
      "type": "object",
      "required": [
        "configFiles"
      ],
      "properties": {
        "backendConfig": {
          "$ref": "#/definitions/cd/TerraformBackendConfig"
        },
        "configFiles": {
          "$ref": "#/definitions/cd/TerraformConfigFilesWrapper"
        },
        "environmentVariables": {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/cd/NumberNGVariable"
              },
              {
                "$ref": "#/definitions/cd/SecretNGVariable"
              },
              {
                "$ref": "#/definitions/cd/StringNGVariable"
              }
            ]
          }
        },
        "targets": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ]
        },
        "varFiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cd/TerraformVarFileWrapper"
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "TerraformCloudCliPlanExecutionData": {
      "type": "object",
      "required": [
        "command",
        "configFiles"
      ],
      "properties": {
        "backendConfig": {
          "$ref": "#/definitions/cd/TerraformBackendConfig"
        },
        "command": {
          "type": "string",
          "enum": [
            "Apply",
            "Destroy"
          ]
        },
        "configFiles": {
          "$ref": "#/definitions/cd/TerraformConfigFilesWrapper"
        },
        "environmentVariables": {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/cd/NumberNGVariable"
              },
              {
                "$ref": "#/definitions/cd/SecretNGVariable"
              },
              {
                "$ref": "#/definitions/cd/StringNGVariable"
              }
            ]
          }
        },
        "targets": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ]
        },
        "varFiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cd/TerraformVarFileWrapper"
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "TerraformCloudCliStepConfiguration": {
      "type": "object",
      "properties": {
        "spec": {
          "$ref": "#/definitions/cd/TerraformCloudCliExecutionData"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "TerraformCloudPlanAndApplySpec": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/TerraformCloudRunExecutionSpec"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "organization",
            "provisionerIdentifier",
            "workspace"
          ],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "discardPendingRuns": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            },
            "organization": {
              "type": "string"
            },
            "overridePolicies": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            },
            "provisionerIdentifier": {
              "type": "string"
            },
            "targets": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "variables": {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/cd/NumberNGVariable"
                  },
                  {
                    "$ref": "#/definitions/cd/SecretNGVariable"
                  },
                  {
                    "$ref": "#/definitions/cd/StringNGVariable"
                  }
                ]
              }
            },
            "workspace": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "TerraformCloudPlanAndDestroySpec": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/TerraformCloudRunExecutionSpec"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "organization",
            "provisionerIdentifier",
            "workspace"
          ],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "discardPendingRuns": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            },
            "organization": {
              "type": "string"
            },
            "overridePolicies": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            },
            "provisionerIdentifier": {
              "type": "string"
            },
            "targets": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "variables": {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/cd/NumberNGVariable"
                  },
                  {
                    "$ref": "#/definitions/cd/SecretNGVariable"
                  },
                  {
                    "$ref": "#/definitions/cd/StringNGVariable"
                  }
                ]
              }
            },
            "workspace": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "TerraformCloudPlanOnlySpec": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/TerraformCloudRunExecutionSpec"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "discardPendingRuns",
            "organization",
            "provisionerIdentifier",
            "workspace"
          ],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "discardPendingRuns": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            },
            "exportTerraformPlanJson": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            },
            "organization": {
              "type": "string"
            },
            "planType": {
              "type": "string",
              "enum": [
                "Apply",
                "Destroy"
              ]
            },
            "provisionerIdentifier": {
              "type": "string"
            },
            "targets": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "terraformVersion": {
              "type": "string"
            },
            "variables": {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/cd/NumberNGVariable"
                  },
                  {
                    "$ref": "#/definitions/cd/SecretNGVariable"
                  },
                  {
                    "$ref": "#/definitions/cd/StringNGVariable"
                  }
                ]
              }
            },
            "workspace": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "TerraformCloudPlanSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/TerraformCloudRunExecutionSpec"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "discardPendingRuns",
            "organization",
            "provisionerIdentifier",
            "workspace"
          ],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "discardPendingRuns": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            },
            "exportTerraformPlanJson": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            },
            "organization": {
              "type": "string"
            },
            "planType": {
              "type": "string",
              "enum": [
                "Apply",
                "Destroy"
              ]
            },
            "provisionerIdentifier": {
              "type": "string"
            },
            "targets": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "variables": {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/cd/NumberNGVariable"
                  },
                  {
                    "$ref": "#/definitions/cd/SecretNGVariable"
                  },
                  {
                    "$ref": "#/definitions/cd/StringNGVariable"
                  }
                ]
              }
            },
            "workspace": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "TerraformCloudRefreshSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/TerraformCloudRunExecutionSpec"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "organization",
            "workspace"
          ],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "discardPendingRuns": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            },
            "organization": {
              "type": "string"
            },
            "variables": {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/cd/NumberNGVariable"
                  },
                  {
                    "$ref": "#/definitions/cd/SecretNGVariable"
                  },
                  {
                    "$ref": "#/definitions/cd/StringNGVariable"
                  }
                ]
              }
            },
            "workspace": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "TerraformCloudRollbackStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "provisionerIdentifier"
          ],
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "discardPendingRuns": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            },
            "overridePolicies": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            },
            "provisionerIdentifier": {
              "type": "string"
            },
            "runMessage": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "provisionerIdentifier"
      ],
      "properties": {
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "discardPendingRuns": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ]
        },
        "overridePolicies": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ]
        },
        "provisionerIdentifier": {
          "type": "string"
        },
        "runMessage": {
          "type": "string"
        }
      }
    },
    "TerraformCloudRunExecutionSpec": {
      "type": "object",
      "discriminator": "runType",
      "properties": {
        "specParams": {
          "$ref": "#/definitions/cd/TerraformCloudRunSpecParameters"
        },
        "type": {
          "type": "string",
          "enum": [
            "RefreshState",
            "PlanOnly",
            "PlanAndApply",
            "PlanAndDestroy",
            "Plan",
            "Apply"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "TerraformCloudRunSpecParameters": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "RefreshState",
            "PlanOnly",
            "PlanAndApply",
            "PlanAndDestroy",
            "Plan",
            "Apply"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "TerraformCloudRunStepInfo": {
      "allOf": [
        {
          "if": {
            "properties": {
              "runType": {
                "const": "Apply"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/TerraformCloudApplySpec"
              }
            }
          },
          "$ref": "#/definitions/cd/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "runType",
            "spec"
          ],
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "runMessage": {
              "type": "string"
            },
            "runType": {
              "type": "string",
              "enum": [
                "RefreshState",
                "PlanOnly",
                "PlanAndApply",
                "PlanAndDestroy",
                "Plan",
                "Apply"
              ]
            }
          },
          "if": {
            "properties": {
              "runType": {
                "const": "Plan"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/TerraformCloudPlanSpec"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "runType": {
                "const": "PlanAndApply"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/TerraformCloudPlanAndApplySpec"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "runType": {
                "const": "PlanAndDestroy"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/TerraformCloudPlanAndDestroySpec"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "runType": {
                "const": "PlanOnly"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/TerraformCloudPlanOnlySpec"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "runType": {
                "const": "RefreshState"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/TerraformCloudRefreshSpec"
              }
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "runType",
        "spec"
      ],
      "properties": {
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "runMessage": {
          "type": "string"
        },
        "runType": {
          "type": "string",
          "enum": [
            "RefreshState",
            "PlanOnly",
            "PlanAndApply",
            "PlanAndDestroy",
            "Plan",
            "Apply"
          ]
        }
      }
    },
    "TerraformConfigFilesWrapper": {
      "type": "object",
      "required": [
        "store"
      ],
      "properties": {
        "moduleSource": {
          "$ref": "#/definitions/cd/ModuleSource"
        },
        "store": {
          "$ref": "#/definitions/cd/StoreConfigWrapper"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "TerraformDestroyStepInfo": {
      "allOf": [
        {
          "oneOf": [
            {
              "required": [
                "configuration"
              ]
            },
            {
              "required": [
                "cloudCliConfiguration"
              ]
            }
          ],
          "$ref": "#/definitions/cd/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "provisionerIdentifier"
          ],
          "properties": {
            "cloudCliConfiguration": {
              "$ref": "#/definitions/cd/TerraformCloudCliStepConfiguration"
            },
            "configuration": {
              "$ref": "#/definitions/cd/TerraformStepConfiguration"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "metadata": {
              "type": "string"
            },
            "provisionerIdentifier": {
              "type": "string"
            }
          }
        },
        {
          "oneOf": [
            {
              "required": [
                "configuration"
              ]
            },
            {
              "required": [
                "cloudCliConfiguration"
              ]
            }
          ]
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "provisionerIdentifier"
      ],
      "properties": {
        "cloudCliConfiguration": {
          "$ref": "#/definitions/cd/TerraformCloudCliStepConfiguration"
        },
        "configuration": {
          "$ref": "#/definitions/cd/TerraformStepConfiguration"
        },
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "metadata": {
          "type": "string"
        },
        "provisionerIdentifier": {
          "type": "string"
        }
      }
    },
    "TerraformExecutionData": {
      "type": "object",
      "required": [
        "configFiles"
      ],
      "properties": {
        "backendConfig": {
          "$ref": "#/definitions/cd/TerraformBackendConfig"
        },
        "configFiles": {
          "$ref": "#/definitions/cd/TerraformConfigFilesWrapper"
        },
        "environmentVariables": {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/cd/NumberNGVariable"
              },
              {
                "$ref": "#/definitions/cd/SecretNGVariable"
              },
              {
                "$ref": "#/definitions/cd/StringNGVariable"
              }
            ]
          }
        },
        "targets": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ]
        },
        "varFiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cd/TerraformVarFileWrapper"
          }
        },
        "workspace": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "TerraformPlanExecutionData": {
      "type": "object",
      "required": [
        "command",
        "configFiles",
        "secretManagerRef"
      ],
      "properties": {
        "backendConfig": {
          "$ref": "#/definitions/cd/TerraformBackendConfig"
        },
        "command": {
          "type": "string",
          "enum": [
            "Apply",
            "Destroy"
          ]
        },
        "configFiles": {
          "$ref": "#/definitions/cd/TerraformConfigFilesWrapper"
        },
        "environmentVariables": {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/cd/NumberNGVariable"
              },
              {
                "$ref": "#/definitions/cd/SecretNGVariable"
              },
              {
                "$ref": "#/definitions/cd/StringNGVariable"
              }
            ]
          }
        },
        "exportTerraformHumanReadablePlan": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ]
        },
        "exportTerraformPlanJson": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ]
        },
        "secretManagerRef": {
          "type": "string"
        },
        "targets": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ]
        },
        "varFiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cd/TerraformVarFileWrapper"
          }
        },
        "workspace": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "TerraformPlanStepInfo": {
      "allOf": [
        {
          "oneOf": [
            {
              "required": [
                "configuration"
              ]
            },
            {
              "required": [
                "cloudCliConfiguration"
              ]
            }
          ],
          "$ref": "#/definitions/cd/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "provisionerIdentifier"
          ],
          "properties": {
            "cloudCliConfiguration": {
              "$ref": "#/definitions/cd/TerraformCloudCliPlanExecutionData"
            },
            "configuration": {
              "$ref": "#/definitions/cd/TerraformPlanExecutionData"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "provisionerIdentifier": {
              "type": "string"
            }
          }
        },
        {
          "oneOf": [
            {
              "required": [
                "configuration"
              ]
            },
            {
              "required": [
                "cloudCliConfiguration"
              ]
            }
          ]
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "provisionerIdentifier"
      ],
      "properties": {
        "cloudCliConfiguration": {
          "$ref": "#/definitions/cd/TerraformCloudCliPlanExecutionData"
        },
        "configuration": {
          "$ref": "#/definitions/cd/TerraformPlanExecutionData"
        },
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "provisionerIdentifier": {
          "type": "string"
        }
      }
    },
    "TerraformRollbackStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "provisionerIdentifier"
          ],
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "provisionerIdentifier": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "provisionerIdentifier"
      ],
      "properties": {
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "provisionerIdentifier": {
          "type": "string"
        }
      }
    },
    "TerraformStepConfiguration": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "spec": {
          "$ref": "#/definitions/cd/TerraformExecutionData"
        },
        "type": {
          "type": "string",
          "enum": [
            "Inline",
            "InheritFromPlan",
            "InheritFromApply"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "TerraformVarFile": {
      "type": "object",
      "required": [
        "identifier",
        "spec",
        "type"
      ],
      "properties": {
        "identifier": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Inline"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/InlineTerraformVarFileSpec"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Remote"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/RemoteTerraformVarFileSpec"
              }
            }
          }
        }
      ]
    },
    "TerraformVarFileSpec": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "TerraformVarFileWrapper": {
      "type": "object",
      "required": [
        "varFile"
      ],
      "properties": {
        "varFile": {
          "$ref": "#/definitions/cd/TerraformVarFile"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "TerragruntApplyStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "configuration",
            "provisionerIdentifier"
          ],
          "properties": {
            "configuration": {
              "$ref": "#/definitions/cd/TerragruntStepConfiguration"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "metadata": {
              "type": "string"
            },
            "provisionerIdentifier": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "configuration",
        "provisionerIdentifier"
      ],
      "properties": {
        "configuration": {
          "$ref": "#/definitions/cd/TerragruntStepConfiguration"
        },
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "metadata": {
          "type": "string"
        },
        "provisionerIdentifier": {
          "type": "string"
        }
      }
    },
    "TerragruntBackendConfig": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Inline"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/InlineTerragruntBackendConfigSpec"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Remote"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/RemoteTerragruntBackendConfigSpec"
              }
            }
          }
        }
      ]
    },
    "TerragruntBackendConfigSpec": {
      "type": "object",
      "discriminator": "type",
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "TerragruntConfigFilesWrapper": {
      "type": "object",
      "required": [
        "store"
      ],
      "properties": {
        "moduleSource": {
          "$ref": "#/definitions/cd/ModuleSource"
        },
        "store": {
          "$ref": "#/definitions/cd/StoreConfigWrapper"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "TerragruntDestroyStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "configuration",
            "provisionerIdentifier"
          ],
          "properties": {
            "configuration": {
              "$ref": "#/definitions/cd/TerragruntStepConfiguration"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "metadata": {
              "type": "string"
            },
            "provisionerIdentifier": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "configuration",
        "provisionerIdentifier"
      ],
      "properties": {
        "configuration": {
          "$ref": "#/definitions/cd/TerragruntStepConfiguration"
        },
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "metadata": {
          "type": "string"
        },
        "provisionerIdentifier": {
          "type": "string"
        }
      }
    },
    "TerragruntExecutionData": {
      "type": "object",
      "required": [
        "configFiles",
        "moduleConfig"
      ],
      "properties": {
        "backendConfig": {
          "$ref": "#/definitions/cd/TerragruntBackendConfig"
        },
        "configFiles": {
          "$ref": "#/definitions/cd/TerragruntConfigFilesWrapper"
        },
        "environmentVariables": {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/cd/NumberNGVariable"
              },
              {
                "$ref": "#/definitions/cd/SecretNGVariable"
              },
              {
                "$ref": "#/definitions/cd/StringNGVariable"
              }
            ]
          }
        },
        "moduleConfig": {
          "$ref": "#/definitions/cd/TerragruntModuleConfig"
        },
        "targets": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ]
        },
        "varFiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cd/TerragruntVarFileWrapper"
          }
        },
        "workspace": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "TerragruntModuleConfig": {
      "type": "object",
      "required": [
        "path",
        "terragruntRunType"
      ],
      "properties": {
        "path": {
          "type": "string"
        },
        "terragruntRunType": {
          "type": "string",
          "enum": [
            "RunAll",
            "RunModule"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "TerragruntPlanExecutionData": {
      "type": "object",
      "required": [
        "command",
        "configFiles",
        "moduleConfig",
        "secretManagerRef"
      ],
      "properties": {
        "backendConfig": {
          "$ref": "#/definitions/cd/TerragruntBackendConfig"
        },
        "command": {
          "type": "string",
          "enum": [
            "Apply",
            "Destroy"
          ]
        },
        "configFiles": {
          "$ref": "#/definitions/cd/TerragruntConfigFilesWrapper"
        },
        "environmentVariables": {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/cd/NumberNGVariable"
              },
              {
                "$ref": "#/definitions/cd/SecretNGVariable"
              },
              {
                "$ref": "#/definitions/cd/StringNGVariable"
              }
            ]
          }
        },
        "exportTerragruntPlanJson": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ]
        },
        "moduleConfig": {
          "$ref": "#/definitions/cd/TerragruntModuleConfig"
        },
        "secretManagerRef": {
          "type": "string"
        },
        "targets": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ]
        },
        "varFiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cd/TerragruntVarFileWrapper"
          }
        },
        "workspace": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "TerragruntPlanStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "configuration",
            "provisionerIdentifier"
          ],
          "properties": {
            "configuration": {
              "$ref": "#/definitions/cd/TerragruntPlanExecutionData"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "provisionerIdentifier": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "configuration",
        "provisionerIdentifier"
      ],
      "properties": {
        "configuration": {
          "$ref": "#/definitions/cd/TerragruntPlanExecutionData"
        },
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "provisionerIdentifier": {
          "type": "string"
        }
      }
    },
    "TerragruntRollbackStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "provisionerIdentifier"
          ],
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "provisionerIdentifier": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "provisionerIdentifier"
      ],
      "properties": {
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "provisionerIdentifier": {
          "type": "string"
        }
      }
    },
    "TerragruntStepConfiguration": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "spec": {
          "$ref": "#/definitions/cd/TerragruntExecutionData"
        },
        "type": {
          "type": "string",
          "enum": [
            "Inline",
            "InheritFromPlan",
            "InheritFromApply"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "TerragruntVarFile": {
      "type": "object",
      "required": [
        "identifier",
        "spec",
        "type"
      ],
      "properties": {
        "identifier": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Inline"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/InlineTerragruntVarFileSpec"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Remote"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/RemoteTerragruntVarFileSpec"
              }
            }
          }
        }
      ]
    },
    "TerragruntVarFileSpec": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "TerragruntVarFileWrapper": {
      "type": "object",
      "required": [
        "varFile"
      ],
      "properties": {
        "varFile": {
          "$ref": "#/definitions/cd/TerragruntVarFile"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "UpdateReleaseRepoStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/StepSpecType"
        },
        {
          "type": "object",
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "prTitle": {
              "type": "string"
            },
            "stringMap": {
              "$ref": "#/definitions/cd/ParameterFieldMapStringString"
            },
            "variables": {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/cd/NumberNGVariable"
                  },
                  {
                    "$ref": "#/definitions/cd/SecretNGVariable"
                  },
                  {
                    "$ref": "#/definitions/cd/StringNGVariable"
                  }
                ]
              }
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "properties": {
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "prTitle": {
          "type": "string"
        },
        "stringMap": {
          "$ref": "#/definitions/cd/ParameterFieldMapStringString"
        },
        "variables": {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/cd/NumberNGVariable"
              },
              {
                "$ref": "#/definitions/cd/SecretNGVariable"
              },
              {
                "$ref": "#/definitions/cd/StringNGVariable"
              }
            ]
          }
        }
      }
    },
    "ValuesManifest": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/ManifestAttributes"
        },
        {
          "type": "object",
          "properties": {
            "metadata": {
              "type": "string"
            },
            "store": {
              "$ref": "#/definitions/cd/StoreConfigWrapper"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "VarsManifest": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/ManifestAttributes"
        },
        {
          "type": "object",
          "properties": {
            "metadata": {
              "type": "string"
            },
            "store": {
              "$ref": "#/definitions/cd/StoreConfigWrapper"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "WinRmServiceSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/ServiceSpec"
        },
        {
          "type": "object",
          "properties": {
            "artifactOverrideSets": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/ArtifactOverrideSetWrapper"
              }
            },
            "configFileOverrideSets": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/ConfigFileOverrideSetWrapper"
              }
            },
            "manifestOverrideSets": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/ManifestOverrideSetWrapper"
              }
            },
            "variableOverrideSets": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/NGVariableOverrideSetWrapper"
              }
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CustomDeploymentConfig": {
      "type": "object",
      "required": [
        "execution",
        "infrastructure"
      ],
      "properties": {
        "execution": {
          "$ref": "#/definitions/cd/CustomDeploymentExecutionConfig"
        },
        "infrastructure": {
          "$ref": "#/definitions/cd/CustomDeploymentInfraConfig"
        },
        "metadata": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CustomDeploymentExecutionConfig": {
      "type": "object",
      "properties": {
        "stepTemplateRefs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CustomDeploymentFetchInstancesScriptConfig": {
      "type": "object",
      "required": [
        "store"
      ],
      "properties": {
        "metadata": {
          "type": "string"
        },
        "store": {
          "minLength": 1,
          "$ref": "#/definitions/cd/StoreConfigWrapper"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CustomDeploymentInfraConfig": {
      "type": "object",
      "required": [
        "fetchInstancesScript",
        "instanceAttributes",
        "instancesListPath"
      ],
      "properties": {
        "fetchInstancesScript": {
          "minLength": 1,
          "$ref": "#/definitions/cd/CustomDeploymentFetchInstancesScriptConfig"
        },
        "instanceAttributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cd/CustomDeploymentInstanceAttributes"
          },
          "minLength": 1
        },
        "instancesListPath": {
          "type": "string",
          "minLength": 1
        },
        "variables": {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/cd/CustomDeploymentConnectorNGVariable"
              },
              {
                "$ref": "#/definitions/cd/CustomDeploymentNumberNGVariable"
              },
              {
                "$ref": "#/definitions/cd/CustomDeploymentSecretNGVariable"
              },
              {
                "$ref": "#/definitions/cd/CustomDeploymentStringNGVariable"
              }
            ]
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CustomDeploymentInstanceAttributes": {
      "type": "object",
      "required": [
        "jsonPath",
        "name"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "jsonPath": {
          "type": "string",
          "minLength": 1
        },
        "name": {
          "type": "string",
          "minLength": 1
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CreatePRStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cd/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cd/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "CreatePR"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "CreatePR"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/CreatePRStepInfo"
              }
            }
          }
        }
      ]
    },
    "MergePRStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cd/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cd/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "MergePR"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "MergePR"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/MergePRStepInfo"
              }
            }
          }
        }
      ]
    },
    "UpdateReleaseRepoStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cd/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cd/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "GitOpsUpdateReleaseRepo"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "GitOpsUpdateReleaseRepo"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/UpdateReleaseRepoStepInfo"
              }
            }
          }
        }
      ]
    },
    "SyncStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cd/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cd/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "GitOpsSync"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "GitOpsSync"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/SyncStepInfo"
              }
            }
          }
        }
      ]
    },
    "FetchLinkedAppsStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cd/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cd/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "GitOpsFetchLinkedApps"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "GitOpsFetchLinkedApps"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/FetchLinkedAppsStepInfo"
              }
            }
          }
        }
      ]
    },
    "K8sCanaryStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cd/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cd/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "K8sCanaryDeploy"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "K8sCanaryDeploy"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/K8sCanaryStepInfo"
              }
            }
          }
        }
      ]
    },
    "K8sApplyStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cd/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cd/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "K8sApply"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "K8sApply"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/K8sApplyStepInfo"
              }
            }
          }
        }
      ]
    },
    "K8sBlueGreenStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cd/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cd/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "K8sBlueGreenDeploy"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "K8sBlueGreenDeploy"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/K8sBlueGreenStepInfo"
              }
            }
          }
        }
      ]
    },
    "K8sRollingStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cd/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cd/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "K8sRollingDeploy"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "K8sRollingDeploy"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/K8sRollingStepInfo"
              }
            }
          }
        }
      ]
    },
    "K8sRollingRollbackStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cd/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cd/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "K8sRollingRollback"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "K8sRollingRollback"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/K8sRollingRollbackStepInfo"
              }
            }
          }
        }
      ]
    },
    "K8sScaleStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cd/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cd/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "K8sScale"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "K8sScale"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/K8sScaleStepInfo"
              }
            }
          }
        }
      ]
    },
    "K8sDeleteStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cd/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cd/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "K8sDelete"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "K8sDelete"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/K8sDeleteStepInfo"
              }
            }
          }
        }
      ]
    },
    "K8sBGSwapServicesStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cd/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cd/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "K8sBGSwapServices"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "K8sBGSwapServices"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/K8sBGSwapServicesStepInfo"
              }
            }
          }
        }
      ]
    },
    "K8sCanaryDeleteStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cd/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cd/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "K8sCanaryDelete"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "K8sCanaryDelete"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/K8sCanaryDeleteStepInfo"
              }
            }
          }
        }
      ]
    },
    "TerraformApplyStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cd/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cd/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "TerraformApply"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "TerraformApply"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/TerraformApplyStepInfo"
              }
            }
          }
        }
      ]
    },
    "TerraformPlanStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cd/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cd/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "TerraformPlan"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "TerraformPlan"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/TerraformPlanStepInfo"
              }
            }
          }
        }
      ]
    },
    "TerraformDestroyStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cd/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cd/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "TerraformDestroy"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "TerraformDestroy"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/TerraformDestroyStepInfo"
              }
            }
          }
        }
      ]
    },
    "TerraformRollbackStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cd/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cd/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "TerraformRollback"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "TerraformRollback"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/TerraformRollbackStepInfo"
              }
            }
          }
        }
      ]
    },
    "HelmDeployStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cd/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cd/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "HelmDeploy"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "HelmDeploy"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/HelmDeployStepInfo"
              }
            }
          }
        }
      ]
    },
    "HelmRollbackStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cd/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cd/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "HelmRollback"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "HelmRollback"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/HelmRollbackStepInfo"
              }
            }
          }
        }
      ]
    },
    "CloudformationCreateStackStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cd/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cd/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "CreateStack"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "CreateStack"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/CloudformationCreateStackStepInfo"
              }
            }
          }
        }
      ]
    },
    "CloudformationDeleteStackStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cd/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cd/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "DeleteStack"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "DeleteStack"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/CloudformationDeleteStackStepInfo"
              }
            }
          }
        }
      ]
    },
    "ServerlessAwsLambdaDeployStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cd/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cd/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "ServerlessAwsLambdaDeploy"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "ServerlessAwsLambdaDeploy"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/ServerlessAwsLambdaDeployStepInfo"
              }
            }
          }
        }
      ]
    },
    "ServerlessAwsLambdaRollbackStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cd/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cd/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "ServerlessAwsLambdaRollback"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "ServerlessAwsLambdaRollback"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/ServerlessAwsLambdaRollbackStepInfo"
              }
            }
          }
        }
      ]
    },
    "CloudformationRollbackStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cd/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cd/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "RollbackStack"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "RollbackStack"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/CloudformationRollbackStepInfo"
              }
            }
          }
        }
      ]
    },
    "AzureCreateARMResourceStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cd/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cd/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "AzureCreateARMResource"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "AzureCreateARMResource"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/AzureCreateARMResourceStepInfo"
              }
            }
          }
        }
      ]
    },
    "AzureCreateBPStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cd/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cd/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "AzureCreateBPResource"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "AzureCreateBPResource"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/AzureCreateBPStepInfo"
              }
            }
          }
        }
      ]
    },
    "AzureARMRollbackStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cd/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cd/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "AzureARMRollback"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "AzureARMRollback"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/AzureARMRollbackStepInfo"
              }
            }
          }
        }
      ]
    },
    "CommandStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cd/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cd/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "Command"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Command"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/CommandStepInfo"
              }
            }
          }
        }
      ]
    },
    "AzureWebAppSlotDeploymentStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cd/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cd/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "AzureSlotDeployment"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "AzureSlotDeployment"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/AzureWebAppSlotDeploymentStepInfo"
              }
            }
          }
        }
      ]
    },
    "AzureWebAppTrafficShiftStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cd/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cd/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "AzureTrafficShift"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "AzureTrafficShift"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/AzureWebAppTrafficShiftStepInfo"
              }
            }
          }
        }
      ]
    },
    "FetchInstanceScriptStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cd/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cd/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "FetchInstanceScript"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "FetchInstanceScript"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/FetchInstanceScriptStepInfo"
              }
            }
          }
        }
      ]
    },
    "AzureWebAppSwapSlotStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cd/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cd/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "AzureSwapSlot"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "AzureSwapSlot"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/AzureWebAppSwapSlotStepInfo"
              }
            }
          }
        }
      ]
    },
    "AzureWebAppRollbackStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cd/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cd/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "AzureWebAppRollback"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "AzureWebAppRollback"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/AzureWebAppRollbackStepInfo"
              }
            }
          }
        }
      ]
    },
    "JenkinsBuildStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cd/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cd/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "JenkinsBuild"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "JenkinsBuild"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/JenkinsBuildStepInfo"
              }
            }
          }
        }
      ]
    },
    "ElastigroupSetupStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cd/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cd/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "ElastigroupSetup"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "ElastigroupSetup"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/ElastigroupSetupStepInfo"
              }
            }
          }
        }
      ]
    },
    "EcsRollingDeployStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cd/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cd/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "EcsRollingDeploy"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "EcsRollingDeploy"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/EcsRollingDeployStepInfo"
              }
            }
          }
        }
      ]
    },
    "EcsRollingRollbackStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cd/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cd/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "EcsRollingRollback"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "EcsRollingRollback"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/EcsRollingRollbackStepInfo"
              }
            }
          }
        }
      ]
    },
    "EcsCanaryDeployStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cd/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cd/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "EcsCanaryDeploy"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "EcsCanaryDeploy"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/EcsCanaryDeployStepInfo"
              }
            }
          }
        }
      ]
    },
    "EcsCanaryDeleteStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cd/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cd/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "EcsCanaryDelete"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "EcsCanaryDelete"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/EcsCanaryDeleteStepInfo"
              }
            }
          }
        }
      ]
    },
    "EcsRunTaskStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cd/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cd/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "EcsRunTask"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "EcsRunTask"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/EcsRunTaskStepInfo"
              }
            }
          }
        }
      ]
    },
    "EcsBlueGreenCreateServiceStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cd/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cd/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "EcsBlueGreenCreateService"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "EcsBlueGreenCreateService"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/EcsBlueGreenCreateServiceStepInfo"
              }
            }
          }
        }
      ]
    },
    "EcsBlueGreenSwapTargetGroupsStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cd/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cd/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "EcsBlueGreenSwapTargetGroups"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "EcsBlueGreenSwapTargetGroups"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/EcsBlueGreenSwapTargetGroupsStepInfo"
              }
            }
          }
        }
      ]
    },
    "EcsBlueGreenRollbackStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cd/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cd/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "EcsBlueGreenRollback"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "EcsBlueGreenRollback"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/EcsBlueGreenRollbackStepInfo"
              }
            }
          }
        }
      ]
    },
    "ShellScriptProvisionStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cd/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cd/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "ShellScriptProvision"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "ShellScriptProvision"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/ShellScriptProvisionStepInfo"
              }
            }
          }
        }
      ]
    },
    "ChaosStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cd/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cd/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "Chaos"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Chaos"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/ChaosStepInfo"
              }
            }
          }
        }
      ]
    },
    "ElastigroupDeployStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cd/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cd/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "ElastigroupDeploy"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "ElastigroupDeploy"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/ElastigroupDeployStepInfo"
              }
            }
          }
        }
      ]
    },
    "ElastigroupRollbackStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cd/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cd/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "ElastigroupRollback"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "ElastigroupRollback"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/ElastigroupRollbackStepInfo"
              }
            }
          }
        }
      ]
    },
    "K8sDryRunManifestStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cd/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cd/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "K8sDryRun"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "K8sDryRun"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/K8sDryRunManifestStepInfo"
              }
            }
          }
        }
      ]
    },
    "TerragruntPlanStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cd/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cd/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "TerragruntPlan"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "TerragruntPlan"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/TerragruntPlanStepInfo"
              }
            }
          }
        }
      ]
    },
    "TerragruntApplyStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cd/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cd/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "TerragruntApply"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "TerragruntApply"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/TerragruntApplyStepInfo"
              }
            }
          }
        }
      ]
    },
    "TerragruntDestroyStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cd/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cd/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "TerragruntDestroy"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "TerragruntDestroy"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/TerragruntDestroyStepInfo"
              }
            }
          }
        }
      ]
    },
    "TerragruntRollbackStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cd/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cd/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "TerragruntRollback"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "TerragruntRollback"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/TerragruntRollbackStepInfo"
              }
            }
          }
        }
      ]
    },
    "AsgCanaryDeployStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cd/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cd/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "AsgCanaryDeploy"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "AsgCanaryDeploy"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/AsgCanaryDeployStepInfo"
              }
            }
          }
        }
      ]
    },
    "AsgCanaryDeleteStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cd/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cd/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "AsgCanaryDelete"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "AsgCanaryDelete"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/AsgCanaryDeleteStepInfo"
              }
            }
          }
        }
      ]
    },
    "TasCanaryAppSetupStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cd/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cd/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "CanaryAppSetup"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "CanaryAppSetup"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/TasCanaryAppSetupStepInfo"
              }
            }
          }
        }
      ]
    },
    "TasBGAppSetupStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cd/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cd/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "BGAppSetup"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "BGAppSetup"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/TasBGAppSetupStepInfo"
              }
            }
          }
        }
      ]
    },
    "TasBasicAppSetupStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cd/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cd/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "BasicAppSetup"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "BasicAppSetup"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/TasBasicAppSetupStepInfo"
              }
            }
          }
        }
      ]
    },
    "TasAppResizeStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cd/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cd/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "AppResize"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "AppResize"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/TasAppResizeStepInfo"
              }
            }
          }
        }
      ]
    },
    "TasSwapRoutesStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cd/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cd/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "SwapRoutes"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "SwapRoutes"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/TasSwapRoutesStepInfo"
              }
            }
          }
        }
      ]
    },
    "TasRollbackStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cd/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cd/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "AppRollback"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "AppRollback"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/TasRollbackStepInfo"
              }
            }
          }
        }
      ]
    },
    "TasSwapRollbackStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cd/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cd/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "SwapRollback"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "SwapRollback"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/TasSwapRollbackStepInfo"
              }
            }
          }
        }
      ]
    },
    "TasCommandStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cd/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cd/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "TanzuCommand"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "TanzuCommand"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/TasCommandStepInfo"
              }
            }
          }
        }
      ]
    },
    "ElastigroupBGStageSetupStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cd/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cd/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "ElastigroupBGStageSetup"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "ElastigroupBGStageSetup"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/ElastigroupBGStageSetupStepInfo"
              }
            }
          }
        }
      ]
    },
    "ElastigroupSwapRouteStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cd/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cd/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "ElastigroupSwapRoute"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "ElastigroupSwapRoute"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/ElastigroupSwapRouteStepInfo"
              }
            }
          }
        }
      ]
    },
    "AsgRollingDeployStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cd/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cd/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "AsgRollingDeploy"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "AsgRollingDeploy"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/AsgRollingDeployStepInfo"
              }
            }
          }
        }
      ]
    },
    "AsgRollingRollbackStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cd/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cd/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "AsgRollingRollback"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "AsgRollingRollback"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/AsgRollingRollbackStepInfo"
              }
            }
          }
        }
      ]
    },
    "GoogleFunctionsDeployStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cd/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cd/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "DeployCloudFunction"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "DeployCloudFunction"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/GoogleFunctionsDeployStepInfo"
              }
            }
          }
        }
      ]
    },
    "GoogleFunctionsDeployWithoutTrafficStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cd/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cd/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "DeployCloudFunctionWithNoTraffic"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "DeployCloudFunctionWithNoTraffic"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/GoogleFunctionsDeployWithoutTrafficStepInfo"
              }
            }
          }
        }
      ]
    },
    "GoogleFunctionsTrafficShiftStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cd/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cd/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "CloudFunctionTrafficShift"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "CloudFunctionTrafficShift"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/GoogleFunctionsTrafficShiftStepInfo"
              }
            }
          }
        }
      ]
    },
    "GoogleFunctionsRollbackStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cd/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cd/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "CloudFunctionRollback"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "CloudFunctionRollback"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/GoogleFunctionsRollbackStepInfo"
              }
            }
          }
        }
      ]
    },
    "AsgBlueGreenDeployStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cd/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cd/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "AsgBlueGreenDeploy"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "AsgBlueGreenDeploy"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/AsgBlueGreenDeployStepInfo"
              }
            }
          }
        }
      ]
    },
    "AsgBlueGreenRollbackStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cd/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cd/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "AsgBlueGreenRollback"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "AsgBlueGreenRollback"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/AsgBlueGreenRollbackStepInfo"
              }
            }
          }
        }
      ]
    },
    "TasRollingDeployStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cd/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cd/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "TasRollingDeploy"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "TasRollingDeploy"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/TasRollingDeployStepInfo"
              }
            }
          }
        }
      ]
    },
    "TasRollingRollbackStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cd/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cd/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "TasRollingRollback"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "TasRollingRollback"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/TasRollingRollbackStepInfo"
              }
            }
          }
        }
      ]
    },
    "AsgBlueGreenSwapServiceStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cd/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cd/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "AsgBlueGreenSwapService"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "AsgBlueGreenSwapService"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/AsgBlueGreenSwapServiceStepInfo"
              }
            }
          }
        }
      ]
    },
    "TerraformCloudRunStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cd/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cd/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "TerraformCloudRun"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "TerraformCloudRun"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/TerraformCloudRunStepInfo"
              }
            }
          }
        }
      ]
    },
    "AwsLambdaDeployStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cd/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cd/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "AwsLambdaDeploy"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "AwsLambdaDeploy"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/AwsLambdaDeployStepInfo"
              }
            }
          }
        }
      ]
    },
    "AwsSamDeployStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cd/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cd/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "AwsSamDeploy"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "AwsSamDeploy"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/AwsSamDeployStepInfo"
              }
            }
          }
        }
      ]
    },
    "AwsSamRollbackStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cd/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cd/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "AwsSamRollback"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "AwsSamRollback"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/AwsSamRollbackStepInfo"
              }
            }
          }
        }
      ]
    },
    "TerraformCloudRollbackStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cd/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cd/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "TerraformCloudRollback"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "TerraformCloudRollback"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/TerraformCloudRollbackStepInfo"
              }
            }
          }
        }
      ]
    },
    "AwsLambdaRollbackStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cd/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cd/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "AwsLambdaRollback"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "AwsLambdaRollback"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/AwsLambdaRollbackStepInfo"
              }
            }
          }
        }
      ]
    },
    "BambooBuildStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cd/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cd/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "BambooBuild"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "BambooBuild"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/BambooBuildStepInfo"
              }
            }
          }
        }
      ]
    },
    "AddRuleYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/PatchInstruction"
        },
        {
          "type": "object",
          "required": [
            "identifier",
            "spec",
            "type"
          ],
          "properties": {
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/cd/AddRuleYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "AddRule"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AddRuleYamlSpec": {
      "type": "object",
      "properties": {
        "clauses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cd/Clause"
          }
        },
        "distribution": {
          "$ref": "#/definitions/cd/DistributionYamlSpec"
        },
        "priority": {
          "type": "integer",
          "format": "int32"
        },
        "serve": {
          "$ref": "#/definitions/cd/Serve"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AddSegmentToVariationTargetMapYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/PatchInstruction"
        },
        {
          "type": "object",
          "required": [
            "identifier",
            "spec",
            "type"
          ],
          "properties": {
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/cd/AddSegmentToVariationTargetMapYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "AddSegmentToVariationTargetMap"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AddSegmentToVariationTargetMapYamlSpec": {
      "type": "object",
      "required": [
        "segments",
        "variation"
      ],
      "properties": {
        "segments": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "variation": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AddTargetsToVariationTargetMapYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/PatchInstruction"
        },
        {
          "type": "object",
          "required": [
            "identifier",
            "spec",
            "type"
          ],
          "properties": {
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/cd/AddTargetsToVariationTargetMapYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "AddTargetsToVariationTargetMap"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AddTargetsToVariationTargetMapYamlSpec": {
      "type": "object",
      "required": [
        "targets",
        "variation"
      ],
      "properties": {
        "targets": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "variation": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ApproverInputInfo": {
      "type": "object",
      "properties": {
        "defaultValue": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "minLength": 1
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "Approvers": {
      "type": "object",
      "required": [
        "disallowPipelineExecutor",
        "minimumCount",
        "userGroups"
      ],
      "properties": {
        "disallowPipelineExecutor": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ]
        },
        "minimumCount": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "userGroups": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              },
              "maxItems": 2147483647,
              "minItems": 1
            },
            {
              "type": "string",
              "pattern": "(<\\+.+>.*)",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "BarrierStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "barrierRef"
          ],
          "properties": {
            "barrierRef": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "Capabilities": {
      "type": "object",
      "properties": {
        "add": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "drop": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "Clause": {
      "type": "object",
      "required": [
        "attribute",
        "id",
        "negate",
        "op",
        "values"
      ],
      "properties": {
        "attribute": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "negate": {
          "type": "boolean"
        },
        "op": {
          "type": "string"
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ClauseYamlSpec": {
      "type": "object",
      "required": [
        "op",
        "values"
      ],
      "properties": {
        "attribute": {
          "type": "string"
        },
        "op": {
          "type": "string"
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "Condition": {
      "type": "object",
      "required": [
        "key",
        "operator",
        "value"
      ],
      "properties": {
        "key": {
          "type": "string"
        },
        "operator": {
          "type": "string",
          "enum": [
            "equals",
            "not equals",
            "in",
            "not in"
          ]
        },
        "value": {
          "type": "string",
          "minLength": 1
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ContainerInfraYamlSpec": {
      "type": "object",
      "required": [
        "connectorRef",
        "namespace",
        "resources"
      ],
      "properties": {
        "annotations": {
          "oneOf": [
            {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ]
        },
        "automountServiceAccountToken": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "connectorRef": {
          "type": "string"
        },
        "containerSecurityContext": {
          "oneOf": [
            {
              "$ref": "#/definitions/cd/SecurityContext"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "initTimeout": {
          "type": "string"
        },
        "labels": {
          "oneOf": [
            {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ]
        },
        "namespace": {
          "type": "string",
          "minLength": 1,
          "maxLength": 2147483647
        },
        "nodeSelector": {
          "oneOf": [
            {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "os": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Linux",
                "MacOS",
                "Windows"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "priorityClassName": {
          "type": "string"
        },
        "resources": {
          "$ref": "#/definitions/cd/ContainerResource"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "serviceAccountName": {
          "type": "string"
        },
        "tolerations": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/Toleration"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "volumes": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/ContainerVolume"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ContainerK8sInfra": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/ContainerStepInfra"
        },
        {
          "type": "object",
          "required": [
            "spec",
            "type"
          ],
          "properties": {
            "spec": {
              "$ref": "#/definitions/cd/ContainerInfraYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "KubernetesDirect"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ContainerResource": {
      "type": "object",
      "required": [
        "limits"
      ],
      "properties": {
        "limits": {
          "$ref": "#/definitions/cd/Limits"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ContainerStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "command",
            "infrastructure"
          ],
          "properties": {
            "command": {
              "type": "string"
            },
            "connectorRef": {
              "type": "string"
            },
            "entrypoint": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "envVariables": {
              "oneOf": [
                {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "image": {
              "type": "string"
            },
            "imagePullPolicy": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Always",
                    "Never",
                    "IfNotPresent"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "infrastructure": {
              "oneOf": [
                {
                  "$ref": "#/definitions/cd/ContainerK8sInfra"
                }
              ]
            },
            "metadata": {
              "type": "string"
            },
            "outputVariables": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/cd/OutputNGVariable"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "privileged": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "settings": {
              "oneOf": [
                {
                  "$ref": "#/definitions/cd/ParameterFieldMapStringJsonNode"
                },
                {
                  "type": "string"
                }
              ]
            },
            "shell": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Sh",
                    "Bash",
                    "Powershell",
                    "Pwsh",
                    "Python"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ContainerStepInfra": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "KubernetesDirect"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ContainerVolume": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "EmptyDir",
            "PersistentVolumeClaim",
            "HostPath"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CriteriaSpec": {
      "type": "object",
      "discriminator": "type",
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CriteriaSpecWrapper": {
      "type": "object",
      "required": [
        "spec",
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "Jexl",
            "KeyValues"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Jexl"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/JexlCriteriaSpec"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "KeyValues"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/KeyValuesCriteriaSpec"
              }
            }
          }
        }
      ]
    },
    "CustomApprovalStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "approvalCriteria",
            "retryInterval",
            "scriptTimeout",
            "shell",
            "source"
          ],
          "properties": {
            "approvalCriteria": {
              "$ref": "#/definitions/cd/CriteriaSpecWrapper"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "environmentVariables": {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/cd/NumberNGVariable"
                  },
                  {
                    "$ref": "#/definitions/cd/SecretNGVariable"
                  },
                  {
                    "$ref": "#/definitions/cd/StringNGVariable"
                  }
                ]
              }
            },
            "outputVariables": {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/cd/NumberNGVariable"
                  },
                  {
                    "$ref": "#/definitions/cd/SecretNGVariable"
                  },
                  {
                    "$ref": "#/definitions/cd/StringNGVariable"
                  }
                ]
              }
            },
            "rejectionCriteria": {
              "$ref": "#/definitions/cd/CriteriaSpecWrapper"
            },
            "retryInterval": {
              "type": "string",
              "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(<\\+input>.*)|(.*<\\+.*>.*)|(^$))$"
            },
            "scriptTimeout": {
              "type": "string",
              "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(<\\+input>.*)|(.*<\\+.*>.*)|(^$))$"
            },
            "shell": {
              "type": "string",
              "enum": [
                "Bash",
                "PowerShell"
              ]
            },
            "source": {
              "$ref": "#/definitions/cd/ShellScriptSourceWrapper"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CustomPolicyStepSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/PolicySpec"
        },
        {
          "type": "object",
          "required": [
            "payload"
          ],
          "properties": {
            "payload": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "Distribution": {
      "type": "object",
      "required": [
        "bucketBy",
        "variations"
      ],
      "properties": {
        "bucketBy": {
          "type": "string"
        },
        "variations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cd/WeightedVariation"
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "DistributionYamlSpec": {
      "type": "object",
      "required": [
        "bucketBy"
      ],
      "properties": {
        "bucketBy": {
          "type": "string"
        },
        "clauses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cd/ClauseYamlSpec"
          }
        },
        "variations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cd/VariationYamlSpec"
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "EmailStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "subject",
            "to"
          ],
          "properties": {
            "body": {
              "type": "string"
            },
            "cc": {
              "type": "string"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "subject": {
              "type": "string"
            },
            "to": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "EmptyDirYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/ContainerVolume"
        },
        {
          "type": "object",
          "required": [
            "mountPath",
            "spec",
            "type"
          ],
          "properties": {
            "mountPath": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/cd/EmptyDirYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "EmptyDir",
                "PersistentVolumeClaim",
                "HostPath"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "EmptyDirYamlSpec": {
      "type": "object",
      "properties": {
        "medium": {
          "type": "string"
        },
        "size": {
          "type": "string",
          "pattern": "^(([0-9]*[.])?[0-9]+)([GM]i?)|<\\+input>$"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ExecutionTarget": {
      "type": "object",
      "properties": {
        "connectorRef": {
          "type": "string"
        },
        "host": {
          "type": "string"
        },
        "workingDirectory": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "FlagConfigurationStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "environment",
            "feature",
            "instructions"
          ],
          "properties": {
            "environment": {
              "type": "string"
            },
            "feature": {
              "type": "string"
            },
            "instructions": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/cd/PatchInstruction"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "HarnessApprovalStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "approvers",
            "includePipelineExecutionHistory"
          ],
          "properties": {
            "approvalMessage": {
              "type": "string",
              "minLength": 1
            },
            "approverInputs": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/ApproverInputInfo"
              }
            },
            "approvers": {
              "$ref": "#/definitions/cd/Approvers"
            },
            "includePipelineExecutionHistory": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "HostPathYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/ContainerVolume"
        },
        {
          "type": "object",
          "required": [
            "mountPath",
            "spec",
            "type"
          ],
          "properties": {
            "mountPath": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/cd/HostPathYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "EmptyDir",
                "PersistentVolumeClaim",
                "HostPath"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "HostPathYamlSpec": {
      "type": "object",
      "required": [
        "path"
      ],
      "properties": {
        "path": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "HttpHeaderConfig": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "HttpStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "method",
            "url"
          ],
          "properties": {
            "assertion": {
              "type": "string"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "headers": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/HttpHeaderConfig"
              }
            },
            "method": {
              "type": "string"
            },
            "outputVariables": {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/cd/NumberNGVariable"
                  },
                  {
                    "$ref": "#/definitions/cd/SecretNGVariable"
                  },
                  {
                    "$ref": "#/definitions/cd/StringNGVariable"
                  }
                ]
              }
            },
            "requestBody": {
              "type": "string"
            },
            "url": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ImportDataSpec": {
      "type": "object",
      "discriminator": "type",
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ImportDataSpecWrapper": {
      "type": "object",
      "required": [
        "spec",
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "Json",
            "KeyValues"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Json"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/JsonImportDataSpec"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "KeyValues"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cd/KeyValuesImportDataSpec"
              }
            }
          }
        }
      ]
    },
    "JexlCriteriaSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/CriteriaSpec"
        },
        {
          "type": "object",
          "required": [
            "expression"
          ],
          "properties": {
            "expression": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "JiraApprovalStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "approvalCriteria",
            "connectorRef",
            "issueKey"
          ],
          "properties": {
            "approvalCriteria": {
              "$ref": "#/definitions/cd/CriteriaSpecWrapper"
            },
            "connectorRef": {
              "type": "string"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "issueKey": {
              "type": "string"
            },
            "issueType": {
              "type": "string"
            },
            "projectKey": {
              "type": "string"
            },
            "rejectionCriteria": {
              "$ref": "#/definitions/cd/CriteriaSpecWrapper"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "JiraCreateStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "issueType",
            "projectKey"
          ],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "fields": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/JiraField"
              }
            },
            "issueType": {
              "type": "string"
            },
            "projectKey": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "JiraField": {
      "type": "object",
      "required": [
        "value"
      ],
      "properties": {
        "name": {
          "type": "string",
          "minLength": 1
        },
        "value": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "JiraUpdateStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "issueKey"
          ],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "fields": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/JiraField"
              }
            },
            "issueKey": {
              "type": "string"
            },
            "transitionTo": {
              "$ref": "#/definitions/cd/TransitionTo"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "JsonImportDataSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/ImportDataSpec"
        },
        {
          "type": "object",
          "required": [
            "jsonBody"
          ],
          "properties": {
            "jsonBody": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "KeyValuesCriteriaSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/CriteriaSpec"
        },
        {
          "type": "object",
          "required": [
            "conditions"
          ],
          "properties": {
            "conditions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/Condition"
              }
            },
            "matchAnyCondition": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "KeyValuesImportDataSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/ImportDataSpec"
        },
        {
          "type": "object",
          "required": [
            "fields"
          ],
          "properties": {
            "fields": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/ServiceNowField"
              }
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "Limits": {
      "type": "object",
      "properties": {
        "cpu": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "number"
            }
          ]
        },
        "memory": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "OutputNGVariable": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PMSStepInfo": {
      "type": "object",
      "discriminator": "type",
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ParameterFieldMapStringJsonNode": {
      "type": "object",
      "properties": {
        "defaultValue": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/cd/JsonNode"
          }
        },
        "executionInput": {
          "type": "boolean"
        },
        "expression": {
          "type": "boolean"
        },
        "expressionValue": {
          "type": "string"
        },
        "inputSetValidator": {
          "$ref": "#/definitions/cd/InputSetValidator"
        },
        "jsonResponseField": {
          "type": "boolean"
        },
        "responseField": {
          "type": "string"
        },
        "typeString": {
          "type": "boolean"
        },
        "value": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/cd/JsonNode"
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PatchInstruction": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "SetFeatureFlagState",
            "SetOnVariation",
            "SetOffVariation",
            "SetDefaultVariations",
            "AddRule",
            "UpdateRule",
            "AddTargetsToVariationTargetMap",
            "RemoveTargetsToVariationTargetMap",
            "AddSegmentToVariationTargetMap",
            "RemoveSegmentsToVariationTargetMap"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PersistentVolumeClaimYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/ContainerVolume"
        },
        {
          "type": "object",
          "required": [
            "mountPath",
            "spec",
            "type"
          ],
          "properties": {
            "mountPath": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/cd/PersistentVolumeClaimYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "EmptyDir",
                "PersistentVolumeClaim",
                "HostPath"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PersistentVolumeClaimYamlSpec": {
      "type": "object",
      "required": [
        "claimName"
      ],
      "properties": {
        "claimName": {
          "type": "string"
        },
        "readOnly": {
          "type": "boolean"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PolicySpec": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PolicyStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "policySets"
          ],
          "properties": {
            "metadata": {
              "type": "string"
            },
            "policySets": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "type": {
              "type": "string"
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Custom"
              }
            }
          },
          "then": {
            "properties": {
              "policySpec": {
                "$ref": "#/definitions/cd/CustomPolicyStepSpec"
              }
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "QueueStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "key",
            "scope"
          ],
          "properties": {
            "key": {
              "type": "string"
            },
            "scope": {
              "type": "string",
              "enum": [
                "Pipeline",
                "Stage"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "RemoveSegmentToVariationTargetMapYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/PatchInstruction"
        },
        {
          "type": "object",
          "required": [
            "identifier",
            "spec",
            "type"
          ],
          "properties": {
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/cd/RemoveSegmentToVariationTargetMapYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "RemoveSegmentToVariationTargetMap"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "RemoveSegmentToVariationTargetMapYamlSpec": {
      "type": "object",
      "required": [
        "segments",
        "variation"
      ],
      "properties": {
        "segments": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "variation": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "RemoveTargetsToVariationTargetMapYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/PatchInstruction"
        },
        {
          "type": "object",
          "required": [
            "identifier",
            "spec",
            "type"
          ],
          "properties": {
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/cd/RemoveTargetsToVariationTargetMapYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "RemoveTargetsToVariationTargetMap"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "RemoveTargetsToVariationTargetMapYamlSpec": {
      "type": "object",
      "required": [
        "targets",
        "variation"
      ],
      "properties": {
        "targets": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "variation": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SecurityContext": {
      "type": "object",
      "properties": {
        "allowPrivilegeEscalation": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "capabilities": {
          "$ref": "#/definitions/cd/Capabilities"
        },
        "privileged": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "procMount": {
          "type": "string"
        },
        "readOnlyRootFilesystem": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "runAsGroup": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "runAsNonRoot": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "Serve": {
      "type": "object",
      "properties": {
        "distribution": {
          "$ref": "#/definitions/cd/Distribution"
        },
        "variation": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ServiceNowApprovalStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "approvalCriteria",
            "connectorRef",
            "ticketNumber",
            "ticketType"
          ],
          "properties": {
            "approvalCriteria": {
              "$ref": "#/definitions/cd/CriteriaSpecWrapper"
            },
            "changeWindow": {
              "$ref": "#/definitions/cd/ServiceNowChangeWindowSpec"
            },
            "connectorRef": {
              "type": "string"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "rejectionCriteria": {
              "$ref": "#/definitions/cd/CriteriaSpecWrapper"
            },
            "ticketNumber": {
              "type": "string"
            },
            "ticketType": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ServiceNowChangeWindowSpec": {
      "type": "object",
      "required": [
        "endField",
        "startField"
      ],
      "properties": {
        "endField": {
          "type": "string"
        },
        "startField": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ServiceNowCreateStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "ticketType",
            "useServiceNowTemplate"
          ],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "fields": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/ServiceNowField"
              }
            },
            "templateName": {
              "type": "string"
            },
            "ticketType": {
              "type": "string"
            },
            "useServiceNowTemplate": {
              "type": "boolean"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ServiceNowField": {
      "type": "object",
      "required": [
        "name",
        "value"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ServiceNowImportSetStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "importData",
            "stagingTableName"
          ],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "importData": {
              "$ref": "#/definitions/cd/ImportDataSpecWrapper"
            },
            "stagingTableName": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ServiceNowUpdateStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "ticketNumber",
            "ticketType",
            "useServiceNowTemplate"
          ],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "fields": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cd/ServiceNowField"
              }
            },
            "templateName": {
              "type": "string"
            },
            "ticketNumber": {
              "type": "string"
            },
            "ticketType": {
              "type": "string"
            },
            "useServiceNowTemplate": {
              "type": "boolean"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SetDefaultVariationsYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/PatchInstruction"
        },
        {
          "type": "object",
          "required": [
            "identifier",
            "spec",
            "type"
          ],
          "properties": {
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/cd/SetDefaultVariationsYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "SetDefaultVariations"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SetDefaultVariationsYamlSpec": {
      "type": "object",
      "required": [
        "off",
        "on"
      ],
      "properties": {
        "off": {
          "type": "string"
        },
        "on": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SetFeatureFlagStateYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/PatchInstruction"
        },
        {
          "type": "object",
          "required": [
            "identifier",
            "spec",
            "type"
          ],
          "properties": {
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/cd/SetFeatureFlagStateYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "SetFeatureFlagState"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SetFeatureFlagStateYamlSpec": {
      "type": "object",
      "required": [
        "state"
      ],
      "properties": {
        "state": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SetOffVariationYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/PatchInstruction"
        },
        {
          "type": "object",
          "required": [
            "identifier",
            "spec",
            "type"
          ],
          "properties": {
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/cd/SetOffVariationYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "SetOffVariation"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SetOffVariationYamlSpec": {
      "type": "object",
      "required": [
        "variation"
      ],
      "properties": {
        "variation": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SetOnVariationYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/PatchInstruction"
        },
        {
          "type": "object",
          "required": [
            "identifier",
            "spec",
            "type"
          ],
          "properties": {
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/cd/SetOnVariationYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "SetOnVariation"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SetOnVariationYamlSpec": {
      "type": "object",
      "required": [
        "variation"
      ],
      "properties": {
        "variation": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ShellScriptStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "onDelegate",
            "shell",
            "source"
          ],
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "environmentVariables": {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/cd/NumberNGVariable"
                  },
                  {
                    "$ref": "#/definitions/cd/SecretNGVariable"
                  },
                  {
                    "$ref": "#/definitions/cd/StringNGVariable"
                  }
                ]
              }
            },
            "executionTarget": {
              "$ref": "#/definitions/cd/ExecutionTarget"
            },
            "metadata": {
              "type": "string"
            },
            "onDelegate": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            },
            "outputVariables": {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/cd/NumberNGVariable"
                  },
                  {
                    "$ref": "#/definitions/cd/SecretNGVariable"
                  },
                  {
                    "$ref": "#/definitions/cd/StringNGVariable"
                  }
                ]
              }
            },
            "shell": {
              "type": "string",
              "enum": [
                "Bash",
                "PowerShell"
              ]
            },
            "source": {
              "$ref": "#/definitions/cd/ShellScriptSourceWrapper"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "Toleration": {
      "type": "object",
      "properties": {
        "effect": {
          "type": "string"
        },
        "key": {
          "type": "string"
        },
        "operator": {
          "type": "string"
        },
        "tolerationSeconds": {
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "TransitionTo": {
      "type": "object",
      "required": [
        "status"
      ],
      "properties": {
        "status": {
          "type": "string"
        },
        "transitionName": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "UpdateRuleYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/PatchInstruction"
        },
        {
          "type": "object",
          "required": [
            "identifier",
            "spec",
            "type"
          ],
          "properties": {
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/cd/UpdateRuleYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "UpdateRule"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "UpdateRuleYamlSpec": {
      "type": "object",
      "required": [
        "bucketBy",
        "ruleID"
      ],
      "properties": {
        "bucketBy": {
          "type": "string"
        },
        "ruleID": {
          "type": "string"
        },
        "serve": {
          "$ref": "#/definitions/cd/Serve"
        },
        "variations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cd/VariationYamlSpec"
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "VariationYamlSpec": {
      "type": "object",
      "required": [
        "variation",
        "weight"
      ],
      "properties": {
        "variation": {
          "type": "string"
        },
        "weight": {
          "type": "integer",
          "format": "int32"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "WaitStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cd/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "duration"
          ],
          "properties": {
            "duration": {
              "type": "string",
              "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(<\\+input>.*)|(.*<\\+.*>.*)|(^$))$"
            },
            "metadata": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "WeightedVariation": {
      "type": "object",
      "required": [
        "variation",
        "weight"
      ],
      "properties": {
        "variation": {
          "type": "string"
        },
        "weight": {
          "type": "integer",
          "format": "int32"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  "cvng": {
    "AbortFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/cvng/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "Abort"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AutoVerificationJobSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/cvng/VerificationJobSpec"
        },
        {
          "type": "object",
          "properties": {
            "trafficSplitPercentage": {
              "type": "string",
              "description": "Example: 50, You can put max upto 50."
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "BlueGreenVerificationJobSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/cvng/VerificationJobSpec"
        },
        {
          "type": "object",
          "properties": {
            "trafficSplitPercentage": {
              "type": "string",
              "description": "Example: 50, You can put max upto 50."
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CVNGStepInfo": {
      "type": "object",
      "required": [
        "spec",
        "type"
      ],
      "properties": {
        "monitoredService": {
          "$ref": "#/definitions/cvng/MonitoredServiceNode"
        },
        "type": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Auto"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cvng/AutoVerificationJobSpec"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Bluegreen"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cvng/BlueGreenVerificationJobSpec"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Canary"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cvng/CanaryVerificationJobSpec"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "LoadTest"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cvng/TestVerificationJobSpec"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Rolling"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cvng/ImprovisedCanaryVerificationJobSpec"
              }
            }
          }
        }
      ]
    },
    "CVVerifyStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cvng/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cvng/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cvng/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "Verify"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cvng/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Verify"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cvng/CVNGStepInfo"
              }
            }
          }
        }
      ]
    },
    "CanaryVerificationJobSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/cvng/VerificationJobSpec"
        },
        {
          "type": "object",
          "properties": {
            "trafficSplitPercentage": {
              "type": "string",
              "description": "Example: 50, You can put max upto 50."
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "DefaultMonitoredServiceSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/cvng/MonitoredServiceSpec"
        },
        {
          "type": "object",
          "properties": {}
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "FailureStrategyActionConfig": {
      "type": "object",
      "required": [
        "type"
      ],
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "Ignore",
            "Retry",
            "MarkAsSuccess",
            "Abort",
            "StageRollback",
            "StepGroupRollback",
            "PipelineRollback",
            "ManualIntervention",
            "ProceedWithDefaultValues",
            "MarkAsFailure"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "FailureStrategyConfig": {
      "type": "object",
      "required": [
        "onFailure"
      ],
      "properties": {
        "onFailure": {
          "$ref": "#/definitions/cvng/OnFailureConfig"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "HarnessForConfig": {
      "type": "object",
      "properties": {
        "end": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            },
            {
              "type": "string",
              "pattern": "(<\\+.+>.*)",
              "minLength": 1
            }
          ]
        },
        "items": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "(<\\+.+>.*)",
              "minLength": 1
            }
          ]
        },
        "maxConcurrency": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            },
            {
              "type": "string",
              "pattern": "(<\\+.+>.*)",
              "minLength": 1
            }
          ]
        },
        "partitionSize": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            },
            {
              "type": "string",
              "pattern": "(<\\+.+>.*)",
              "minLength": 1
            }
          ]
        },
        "start": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            },
            {
              "type": "string",
              "pattern": "(<\\+.+>.*)",
              "minLength": 1
            }
          ]
        },
        "times": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            },
            {
              "type": "string",
              "pattern": "(<\\+.+>.*)",
              "minLength": 1
            }
          ]
        },
        "unit": {
          "type": "string",
          "enum": [
            "Percentage",
            "Count"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "oneOf": [
            {
              "required": [
                "times"
              ]
            },
            {
              "required": [
                "items"
              ]
            }
          ]
        }
      ]
    },
    "IgnoreFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/cvng/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "Ignore"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ImprovisedCanaryVerificationJobSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/cvng/VerificationJobSpec"
        },
        {
          "type": "object",
          "properties": {
            "trafficSplitPercentage": {
              "type": "string",
              "description": "Example: 50, You can put max upto 50."
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "InputSetValidator": {
      "type": "object",
      "properties": {
        "parameters": {
          "type": "string"
        },
        "validatorType": {
          "type": "string",
          "enum": [
            "ALLOWED_VALUES",
            "REGEX"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "JsonNode": {
      "type": "object",
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ManualFailureSpecConfig": {
      "type": "object",
      "required": [
        "onTimeout",
        "timeout"
      ],
      "properties": {
        "onTimeout": {
          "$ref": "#/definitions/cvng/OnTimeoutConfig"
        },
        "timeout": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ManualInterventionFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/cvng/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": [
            "spec",
            "type"
          ],
          "properties": {
            "spec": {
              "readOnly": true,
              "$ref": "#/definitions/cvng/ManualFailureSpecConfig"
            },
            "type": {
              "type": "string",
              "enum": [
                "ManualIntervention"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "MarkAsFailFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/cvng/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "MarkAsFailure"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "MarkAsSuccessFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/cvng/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "MarkAsSuccess"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "MatrixConfigInterface": {
      "type": "object",
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "MonitoredServiceNode": {
      "type": "object",
      "required": [
        "spec",
        "type"
      ],
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Default"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cvng/DefaultMonitoredServiceSpec"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Template"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cvng/TemplateMonitoredServiceSpec"
              }
            }
          }
        }
      ]
    },
    "MonitoredServiceSpec": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "OnFailureConfig": {
      "type": "object",
      "required": [
        "action",
        "errors"
      ],
      "properties": {
        "action": {
          "$ref": "#/definitions/cvng/FailureStrategyActionConfig"
        },
        "errors": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Unknown",
              "AllErrors",
              "Authentication",
              "Connectivity",
              "Timeout",
              "Authorization",
              "Verification",
              "DelegateProvisioning",
              "PolicyEvaluationFailure",
              "InputTimeoutError",
              "ApprovalRejection",
              "DelegateRestart"
            ]
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "OnRetryFailureConfig": {
      "type": "object",
      "properties": {
        "action": {
          "$ref": "#/definitions/cvng/FailureStrategyActionConfig"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "OnTimeoutConfig": {
      "type": "object",
      "properties": {
        "action": {
          "$ref": "#/definitions/cvng/FailureStrategyActionConfig"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ParameterField": {
      "type": "object",
      "properties": {
        "defaultValue": {
          "type": "object"
        },
        "executionInput": {
          "type": "boolean"
        },
        "expression": {
          "type": "boolean"
        },
        "expressionValue": {
          "type": "string"
        },
        "inputSetValidator": {
          "$ref": "#/definitions/cvng/InputSetValidator"
        },
        "jsonResponseField": {
          "type": "boolean"
        },
        "responseField": {
          "type": "string"
        },
        "typeString": {
          "type": "boolean"
        },
        "value": {
          "type": "object"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ParameterFieldMatrixConfigInterface": {
      "type": "object",
      "properties": {
        "defaultValue": {
          "$ref": "#/definitions/cvng/MatrixConfigInterface"
        },
        "executionInput": {
          "type": "boolean"
        },
        "expression": {
          "type": "boolean"
        },
        "expressionValue": {
          "type": "string"
        },
        "inputSetValidator": {
          "$ref": "#/definitions/cvng/InputSetValidator"
        },
        "jsonResponseField": {
          "type": "boolean"
        },
        "responseField": {
          "type": "string"
        },
        "typeString": {
          "type": "boolean"
        },
        "value": {
          "$ref": "#/definitions/cvng/MatrixConfigInterface"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PipelineRollbackFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/cvng/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "PipelineRollback"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PolicyConfig": {
      "type": "object",
      "required": [
        "policySets"
      ],
      "properties": {
        "policySets": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ProceedWithDefaultValuesFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/cvng/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "ProceedWithDefaultValues"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "RetryFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/cvng/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": [
            "spec",
            "type"
          ],
          "properties": {
            "spec": {
              "readOnly": true,
              "$ref": "#/definitions/cvng/RetryFailureSpecConfig"
            },
            "type": {
              "type": "string",
              "enum": [
                "Retry"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "RetryFailureSpecConfig": {
      "type": "object",
      "required": [
        "onRetryFailure",
        "retryCount",
        "retryIntervals"
      ],
      "properties": {
        "onRetryFailure": {
          "$ref": "#/definitions/cvng/OnRetryFailureConfig"
        },
        "retryCount": {
          "type": "integer",
          "format": "int32"
        },
        "retryIntervals": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "maxItems": 2147483647,
          "minItems": 1
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "StageRollbackFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/cvng/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "StageRollback"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "StepGroupFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/cvng/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "StepGroupRollback"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "StepWhenCondition": {
      "type": "object",
      "required": [
        "stageStatus"
      ],
      "properties": {
        "condition": {
          "type": "string",
          "pattern": "^(?!<\\+input>.*\\.executionInput\\(\\)(.*)$)"
        },
        "stageStatus": {
          "type": "string",
          "enum": [
            "Success",
            "Failure",
            "All"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "StrategyConfig": {
      "type": "object",
      "properties": {
        "matrix": {
          "oneOf": [
            {
              "$ref": "#/definitions/cvng/ParameterFieldMatrixConfigInterface"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "parallelism": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            },
            {
              "type": "string",
              "pattern": "(<\\+.+>.*)",
              "minLength": 1
            }
          ]
        },
        "repeat": {
          "$ref": "#/definitions/cvng/HarnessForConfig"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "oneOf": [
            {
              "required": [
                "repeat"
              ]
            },
            {
              "required": [
                "parallelism"
              ]
            },
            {
              "required": [
                "matrix"
              ]
            }
          ]
        }
      ]
    },
    "TemplateMonitoredServiceSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/cvng/MonitoredServiceSpec"
        },
        {
          "type": "object",
          "required": [
            "monitoredServiceTemplateRef",
            "templateInputs",
            "versionLabel"
          ],
          "properties": {
            "monitoredServiceTemplateRef": {
              "type": "string"
            },
            "templateInputs": {
              "$ref": "#/definitions/cvng/JsonNode"
            },
            "versionLabel": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "TestVerificationJobSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/cvng/VerificationJobSpec"
        },
        {
          "type": "object",
          "properties": {}
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "VerificationJobSpec": {
      "type": "object",
      "required": [
        "deploymentTag",
        "duration",
        "sensitivity"
      ],
      "discriminator": "type",
      "properties": {
        "deploymentTag": {
          "type": "string",
          "description": "You can put expression <+serviceConfig.artifacts.primary.tag> to resolve primary tag"
        },
        "duration": {
          "type": "string",
          "description": "Format example: 5m, 30m, please put multiple of 5"
        },
        "sensitivity": {
          "type": "string",
          "description": "Possible values: [Low, Medium, High]"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CVNGStageInfo": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cvng/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cvng/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cvng/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "Verify"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cvng/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Verify"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cvng/CVNGStepInfo"
              }
            }
          }
        }
      ]
    },
    "AddRuleYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/cvng/PatchInstruction"
        },
        {
          "type": "object",
          "required": [
            "identifier",
            "spec",
            "type"
          ],
          "properties": {
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/cvng/AddRuleYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "AddRule"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AddRuleYamlSpec": {
      "type": "object",
      "properties": {
        "clauses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cvng/Clause"
          }
        },
        "distribution": {
          "$ref": "#/definitions/cvng/DistributionYamlSpec"
        },
        "priority": {
          "type": "integer",
          "format": "int32"
        },
        "serve": {
          "$ref": "#/definitions/cvng/Serve"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AddSegmentToVariationTargetMapYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/cvng/PatchInstruction"
        },
        {
          "type": "object",
          "required": [
            "identifier",
            "spec",
            "type"
          ],
          "properties": {
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/cvng/AddSegmentToVariationTargetMapYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "AddSegmentToVariationTargetMap"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AddSegmentToVariationTargetMapYamlSpec": {
      "type": "object",
      "required": [
        "segments",
        "variation"
      ],
      "properties": {
        "segments": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "variation": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AddTargetsToVariationTargetMapYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/cvng/PatchInstruction"
        },
        {
          "type": "object",
          "required": [
            "identifier",
            "spec",
            "type"
          ],
          "properties": {
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/cvng/AddTargetsToVariationTargetMapYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "AddTargetsToVariationTargetMap"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AddTargetsToVariationTargetMapYamlSpec": {
      "type": "object",
      "required": [
        "targets",
        "variation"
      ],
      "properties": {
        "targets": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "variation": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ApproverInputInfo": {
      "type": "object",
      "properties": {
        "defaultValue": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "minLength": 1
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "Approvers": {
      "type": "object",
      "required": [
        "disallowPipelineExecutor",
        "minimumCount",
        "userGroups"
      ],
      "properties": {
        "disallowPipelineExecutor": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ]
        },
        "minimumCount": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "userGroups": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              },
              "maxItems": 2147483647,
              "minItems": 1
            },
            {
              "type": "string",
              "pattern": "(<\\+.+>.*)",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "BarrierStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cvng/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "barrierRef"
          ],
          "properties": {
            "barrierRef": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "Capabilities": {
      "type": "object",
      "properties": {
        "add": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "drop": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "Clause": {
      "type": "object",
      "required": [
        "attribute",
        "id",
        "negate",
        "op",
        "values"
      ],
      "properties": {
        "attribute": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "negate": {
          "type": "boolean"
        },
        "op": {
          "type": "string"
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ClauseYamlSpec": {
      "type": "object",
      "required": [
        "op",
        "values"
      ],
      "properties": {
        "attribute": {
          "type": "string"
        },
        "op": {
          "type": "string"
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "Condition": {
      "type": "object",
      "required": [
        "key",
        "operator",
        "value"
      ],
      "properties": {
        "key": {
          "type": "string"
        },
        "operator": {
          "type": "string",
          "enum": [
            "equals",
            "not equals",
            "in",
            "not in"
          ]
        },
        "value": {
          "type": "string",
          "minLength": 1
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ContainerInfraYamlSpec": {
      "type": "object",
      "required": [
        "connectorRef",
        "namespace",
        "resources"
      ],
      "properties": {
        "annotations": {
          "oneOf": [
            {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ]
        },
        "automountServiceAccountToken": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "connectorRef": {
          "type": "string"
        },
        "containerSecurityContext": {
          "oneOf": [
            {
              "$ref": "#/definitions/cvng/SecurityContext"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "initTimeout": {
          "type": "string"
        },
        "labels": {
          "oneOf": [
            {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ]
        },
        "namespace": {
          "type": "string",
          "minLength": 1,
          "maxLength": 2147483647
        },
        "nodeSelector": {
          "oneOf": [
            {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "os": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Linux",
                "MacOS",
                "Windows"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "priorityClassName": {
          "type": "string"
        },
        "resources": {
          "$ref": "#/definitions/cvng/ContainerResource"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "serviceAccountName": {
          "type": "string"
        },
        "tolerations": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cvng/Toleration"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "volumes": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cvng/ContainerVolume"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ContainerK8sInfra": {
      "allOf": [
        {
          "$ref": "#/definitions/cvng/ContainerStepInfra"
        },
        {
          "type": "object",
          "required": [
            "spec",
            "type"
          ],
          "properties": {
            "spec": {
              "$ref": "#/definitions/cvng/ContainerInfraYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "KubernetesDirect"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ContainerResource": {
      "type": "object",
      "required": [
        "limits"
      ],
      "properties": {
        "limits": {
          "$ref": "#/definitions/cvng/Limits"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ContainerStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cvng/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "command",
            "infrastructure"
          ],
          "properties": {
            "command": {
              "type": "string"
            },
            "connectorRef": {
              "type": "string"
            },
            "entrypoint": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "envVariables": {
              "oneOf": [
                {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "image": {
              "type": "string"
            },
            "imagePullPolicy": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Always",
                    "Never",
                    "IfNotPresent"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "infrastructure": {
              "oneOf": [
                {
                  "$ref": "#/definitions/cvng/ContainerK8sInfra"
                }
              ]
            },
            "metadata": {
              "type": "string"
            },
            "outputVariables": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/cvng/OutputNGVariable"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "privileged": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "settings": {
              "oneOf": [
                {
                  "$ref": "#/definitions/cvng/ParameterFieldMapStringJsonNode"
                },
                {
                  "type": "string"
                }
              ]
            },
            "shell": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Sh",
                    "Bash",
                    "Powershell",
                    "Pwsh",
                    "Python"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ContainerStepInfra": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "KubernetesDirect"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ContainerVolume": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "EmptyDir",
            "PersistentVolumeClaim",
            "HostPath"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CriteriaSpec": {
      "type": "object",
      "discriminator": "type",
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CriteriaSpecWrapper": {
      "type": "object",
      "required": [
        "spec",
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "Jexl",
            "KeyValues"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Jexl"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cvng/JexlCriteriaSpec"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "KeyValues"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cvng/KeyValuesCriteriaSpec"
              }
            }
          }
        }
      ]
    },
    "CustomApprovalStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cvng/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "approvalCriteria",
            "retryInterval",
            "scriptTimeout",
            "shell",
            "source"
          ],
          "properties": {
            "approvalCriteria": {
              "$ref": "#/definitions/cvng/CriteriaSpecWrapper"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "environmentVariables": {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/cvng/NumberNGVariable"
                  },
                  {
                    "$ref": "#/definitions/cvng/SecretNGVariable"
                  },
                  {
                    "$ref": "#/definitions/cvng/StringNGVariable"
                  }
                ]
              }
            },
            "outputVariables": {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/cvng/NumberNGVariable"
                  },
                  {
                    "$ref": "#/definitions/cvng/SecretNGVariable"
                  },
                  {
                    "$ref": "#/definitions/cvng/StringNGVariable"
                  }
                ]
              }
            },
            "rejectionCriteria": {
              "$ref": "#/definitions/cvng/CriteriaSpecWrapper"
            },
            "retryInterval": {
              "type": "string",
              "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(<\\+input>.*)|(.*<\\+.*>.*)|(^$))$"
            },
            "scriptTimeout": {
              "type": "string",
              "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(<\\+input>.*)|(.*<\\+.*>.*)|(^$))$"
            },
            "shell": {
              "type": "string",
              "enum": [
                "Bash",
                "PowerShell"
              ]
            },
            "source": {
              "$ref": "#/definitions/cvng/ShellScriptSourceWrapper"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CustomPolicyStepSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/cvng/PolicySpec"
        },
        {
          "type": "object",
          "required": [
            "payload"
          ],
          "properties": {
            "payload": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "Distribution": {
      "type": "object",
      "required": [
        "bucketBy",
        "variations"
      ],
      "properties": {
        "bucketBy": {
          "type": "string"
        },
        "variations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cvng/WeightedVariation"
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "DistributionYamlSpec": {
      "type": "object",
      "required": [
        "bucketBy"
      ],
      "properties": {
        "bucketBy": {
          "type": "string"
        },
        "clauses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cvng/ClauseYamlSpec"
          }
        },
        "variations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cvng/VariationYamlSpec"
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "EmailStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cvng/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "subject",
            "to"
          ],
          "properties": {
            "body": {
              "type": "string"
            },
            "cc": {
              "type": "string"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "subject": {
              "type": "string"
            },
            "to": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "EmptyDirYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/cvng/ContainerVolume"
        },
        {
          "type": "object",
          "required": [
            "mountPath",
            "spec",
            "type"
          ],
          "properties": {
            "mountPath": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/cvng/EmptyDirYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "EmptyDir",
                "PersistentVolumeClaim",
                "HostPath"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "EmptyDirYamlSpec": {
      "type": "object",
      "properties": {
        "medium": {
          "type": "string"
        },
        "size": {
          "type": "string",
          "pattern": "^(([0-9]*[.])?[0-9]+)([GM]i?)|<\\+input>$"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ExecutionTarget": {
      "type": "object",
      "properties": {
        "connectorRef": {
          "type": "string"
        },
        "host": {
          "type": "string"
        },
        "workingDirectory": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "FlagConfigurationStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cvng/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "environment",
            "feature",
            "instructions"
          ],
          "properties": {
            "environment": {
              "type": "string"
            },
            "feature": {
              "type": "string"
            },
            "instructions": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/cvng/PatchInstruction"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "HarnessApprovalStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cvng/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "approvers",
            "includePipelineExecutionHistory"
          ],
          "properties": {
            "approvalMessage": {
              "type": "string",
              "minLength": 1
            },
            "approverInputs": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cvng/ApproverInputInfo"
              }
            },
            "approvers": {
              "$ref": "#/definitions/cvng/Approvers"
            },
            "includePipelineExecutionHistory": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "HarnessFileStoreSource": {
      "allOf": [
        {
          "$ref": "#/definitions/cvng/ShellScriptBaseSource"
        },
        {
          "type": "object",
          "properties": {
            "file": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "HostPathYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/cvng/ContainerVolume"
        },
        {
          "type": "object",
          "required": [
            "mountPath",
            "spec",
            "type"
          ],
          "properties": {
            "mountPath": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/cvng/HostPathYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "EmptyDir",
                "PersistentVolumeClaim",
                "HostPath"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "HostPathYamlSpec": {
      "type": "object",
      "required": [
        "path"
      ],
      "properties": {
        "path": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "HttpHeaderConfig": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "HttpStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cvng/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "method",
            "url"
          ],
          "properties": {
            "assertion": {
              "type": "string"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "headers": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cvng/HttpHeaderConfig"
              }
            },
            "method": {
              "type": "string"
            },
            "outputVariables": {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/cvng/NumberNGVariable"
                  },
                  {
                    "$ref": "#/definitions/cvng/SecretNGVariable"
                  },
                  {
                    "$ref": "#/definitions/cvng/StringNGVariable"
                  }
                ]
              }
            },
            "requestBody": {
              "type": "string"
            },
            "url": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ImportDataSpec": {
      "type": "object",
      "discriminator": "type",
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ImportDataSpecWrapper": {
      "type": "object",
      "required": [
        "spec",
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "Json",
            "KeyValues"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Json"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cvng/JsonImportDataSpec"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "KeyValues"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cvng/KeyValuesImportDataSpec"
              }
            }
          }
        }
      ]
    },
    "JexlCriteriaSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/cvng/CriteriaSpec"
        },
        {
          "type": "object",
          "required": [
            "expression"
          ],
          "properties": {
            "expression": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "JiraApprovalStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cvng/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "approvalCriteria",
            "connectorRef",
            "issueKey"
          ],
          "properties": {
            "approvalCriteria": {
              "$ref": "#/definitions/cvng/CriteriaSpecWrapper"
            },
            "connectorRef": {
              "type": "string"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "issueKey": {
              "type": "string"
            },
            "issueType": {
              "type": "string"
            },
            "projectKey": {
              "type": "string"
            },
            "rejectionCriteria": {
              "$ref": "#/definitions/cvng/CriteriaSpecWrapper"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "JiraCreateStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cvng/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "issueType",
            "projectKey"
          ],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "fields": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cvng/JiraField"
              }
            },
            "issueType": {
              "type": "string"
            },
            "projectKey": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "JiraField": {
      "type": "object",
      "required": [
        "value"
      ],
      "properties": {
        "name": {
          "type": "string",
          "minLength": 1
        },
        "value": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "JiraUpdateStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cvng/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "issueKey"
          ],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "fields": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cvng/JiraField"
              }
            },
            "issueKey": {
              "type": "string"
            },
            "transitionTo": {
              "$ref": "#/definitions/cvng/TransitionTo"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "JsonImportDataSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/cvng/ImportDataSpec"
        },
        {
          "type": "object",
          "required": [
            "jsonBody"
          ],
          "properties": {
            "jsonBody": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "KeyValuesCriteriaSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/cvng/CriteriaSpec"
        },
        {
          "type": "object",
          "required": [
            "conditions"
          ],
          "properties": {
            "conditions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cvng/Condition"
              }
            },
            "matchAnyCondition": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "KeyValuesImportDataSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/cvng/ImportDataSpec"
        },
        {
          "type": "object",
          "required": [
            "fields"
          ],
          "properties": {
            "fields": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cvng/ServiceNowField"
              }
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "Limits": {
      "type": "object",
      "properties": {
        "cpu": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "number"
            }
          ]
        },
        "memory": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "NGVariable": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "description": {
          "type": "string"
        },
        "metadata": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "required": {
          "type": "boolean"
        },
        "type": {
          "type": "string",
          "enum": [
            "String",
            "Number",
            "Secret"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "NumberNGVariable": {
      "allOf": [
        {
          "$ref": "#/definitions/cvng/NGVariable"
        },
        {
          "type": "object",
          "required": [
            "value"
          ],
          "properties": {
            "default": {
              "type": "number",
              "format": "double"
            },
            "name": {
              "type": "string",
              "pattern": "^[a-zA-Z_][0-9a-zA-Z_\\.$]{0,127}$"
            },
            "type": {
              "type": "string",
              "enum": [
                "Number"
              ]
            },
            "value": {
              "oneOf": [
                {
                  "type": "number",
                  "format": "double"
                },
                {
                  "type": "string",
                  "pattern": "((^[+-]?[0-9]*\\.?[0-9]+$)|(<\\+.+>.*))"
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "OutputNGVariable": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PMSStepInfo": {
      "type": "object",
      "discriminator": "type",
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ParameterFieldMapStringJsonNode": {
      "type": "object",
      "properties": {
        "defaultValue": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/cvng/JsonNode"
          }
        },
        "executionInput": {
          "type": "boolean"
        },
        "expression": {
          "type": "boolean"
        },
        "expressionValue": {
          "type": "string"
        },
        "inputSetValidator": {
          "$ref": "#/definitions/cvng/InputSetValidator"
        },
        "jsonResponseField": {
          "type": "boolean"
        },
        "responseField": {
          "type": "string"
        },
        "typeString": {
          "type": "boolean"
        },
        "value": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/cvng/JsonNode"
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PatchInstruction": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "SetFeatureFlagState",
            "SetOnVariation",
            "SetOffVariation",
            "SetDefaultVariations",
            "AddRule",
            "UpdateRule",
            "AddTargetsToVariationTargetMap",
            "RemoveTargetsToVariationTargetMap",
            "AddSegmentToVariationTargetMap",
            "RemoveSegmentsToVariationTargetMap"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PersistentVolumeClaimYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/cvng/ContainerVolume"
        },
        {
          "type": "object",
          "required": [
            "mountPath",
            "spec",
            "type"
          ],
          "properties": {
            "mountPath": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/cvng/PersistentVolumeClaimYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "EmptyDir",
                "PersistentVolumeClaim",
                "HostPath"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PersistentVolumeClaimYamlSpec": {
      "type": "object",
      "required": [
        "claimName"
      ],
      "properties": {
        "claimName": {
          "type": "string"
        },
        "readOnly": {
          "type": "boolean"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PolicySpec": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PolicyStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cvng/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "policySets"
          ],
          "properties": {
            "metadata": {
              "type": "string"
            },
            "policySets": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "type": {
              "type": "string"
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Custom"
              }
            }
          },
          "then": {
            "properties": {
              "policySpec": {
                "$ref": "#/definitions/cvng/CustomPolicyStepSpec"
              }
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "QueueStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cvng/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "key",
            "scope"
          ],
          "properties": {
            "key": {
              "type": "string"
            },
            "scope": {
              "type": "string",
              "enum": [
                "Pipeline",
                "Stage"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "RemoveSegmentToVariationTargetMapYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/cvng/PatchInstruction"
        },
        {
          "type": "object",
          "required": [
            "identifier",
            "spec",
            "type"
          ],
          "properties": {
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/cvng/RemoveSegmentToVariationTargetMapYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "RemoveSegmentToVariationTargetMap"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "RemoveSegmentToVariationTargetMapYamlSpec": {
      "type": "object",
      "required": [
        "segments",
        "variation"
      ],
      "properties": {
        "segments": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "variation": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "RemoveTargetsToVariationTargetMapYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/cvng/PatchInstruction"
        },
        {
          "type": "object",
          "required": [
            "identifier",
            "spec",
            "type"
          ],
          "properties": {
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/cvng/RemoveTargetsToVariationTargetMapYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "RemoveTargetsToVariationTargetMap"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "RemoveTargetsToVariationTargetMapYamlSpec": {
      "type": "object",
      "required": [
        "targets",
        "variation"
      ],
      "properties": {
        "targets": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "variation": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SecretNGVariable": {
      "allOf": [
        {
          "$ref": "#/definitions/cvng/NGVariable"
        },
        {
          "type": "object",
          "required": [
            "value"
          ],
          "properties": {
            "default": {
              "type": "string"
            },
            "name": {
              "type": "string",
              "pattern": "^[a-zA-Z_][0-9a-zA-Z_\\.$]{0,127}$"
            },
            "type": {
              "type": "string",
              "enum": [
                "Secret"
              ]
            },
            "value": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SecurityContext": {
      "type": "object",
      "properties": {
        "allowPrivilegeEscalation": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "capabilities": {
          "$ref": "#/definitions/cvng/Capabilities"
        },
        "privileged": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "procMount": {
          "type": "string"
        },
        "readOnlyRootFilesystem": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "runAsGroup": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "runAsNonRoot": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "Serve": {
      "type": "object",
      "properties": {
        "distribution": {
          "$ref": "#/definitions/cvng/Distribution"
        },
        "variation": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ServiceNowApprovalStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cvng/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "approvalCriteria",
            "connectorRef",
            "ticketNumber",
            "ticketType"
          ],
          "properties": {
            "approvalCriteria": {
              "$ref": "#/definitions/cvng/CriteriaSpecWrapper"
            },
            "changeWindow": {
              "$ref": "#/definitions/cvng/ServiceNowChangeWindowSpec"
            },
            "connectorRef": {
              "type": "string"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "rejectionCriteria": {
              "$ref": "#/definitions/cvng/CriteriaSpecWrapper"
            },
            "ticketNumber": {
              "type": "string"
            },
            "ticketType": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ServiceNowChangeWindowSpec": {
      "type": "object",
      "required": [
        "endField",
        "startField"
      ],
      "properties": {
        "endField": {
          "type": "string"
        },
        "startField": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ServiceNowCreateStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cvng/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "ticketType",
            "useServiceNowTemplate"
          ],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "fields": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cvng/ServiceNowField"
              }
            },
            "templateName": {
              "type": "string"
            },
            "ticketType": {
              "type": "string"
            },
            "useServiceNowTemplate": {
              "type": "boolean"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ServiceNowField": {
      "type": "object",
      "required": [
        "name",
        "value"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ServiceNowImportSetStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cvng/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "importData",
            "stagingTableName"
          ],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "importData": {
              "$ref": "#/definitions/cvng/ImportDataSpecWrapper"
            },
            "stagingTableName": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ServiceNowUpdateStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cvng/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "ticketNumber",
            "ticketType",
            "useServiceNowTemplate"
          ],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "fields": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cvng/ServiceNowField"
              }
            },
            "templateName": {
              "type": "string"
            },
            "ticketNumber": {
              "type": "string"
            },
            "ticketType": {
              "type": "string"
            },
            "useServiceNowTemplate": {
              "type": "boolean"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SetDefaultVariationsYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/cvng/PatchInstruction"
        },
        {
          "type": "object",
          "required": [
            "identifier",
            "spec",
            "type"
          ],
          "properties": {
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/cvng/SetDefaultVariationsYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "SetDefaultVariations"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SetDefaultVariationsYamlSpec": {
      "type": "object",
      "required": [
        "off",
        "on"
      ],
      "properties": {
        "off": {
          "type": "string"
        },
        "on": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SetFeatureFlagStateYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/cvng/PatchInstruction"
        },
        {
          "type": "object",
          "required": [
            "identifier",
            "spec",
            "type"
          ],
          "properties": {
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/cvng/SetFeatureFlagStateYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "SetFeatureFlagState"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SetFeatureFlagStateYamlSpec": {
      "type": "object",
      "required": [
        "state"
      ],
      "properties": {
        "state": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SetOffVariationYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/cvng/PatchInstruction"
        },
        {
          "type": "object",
          "required": [
            "identifier",
            "spec",
            "type"
          ],
          "properties": {
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/cvng/SetOffVariationYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "SetOffVariation"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SetOffVariationYamlSpec": {
      "type": "object",
      "required": [
        "variation"
      ],
      "properties": {
        "variation": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SetOnVariationYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/cvng/PatchInstruction"
        },
        {
          "type": "object",
          "required": [
            "identifier",
            "spec",
            "type"
          ],
          "properties": {
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/cvng/SetOnVariationYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "SetOnVariation"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SetOnVariationYamlSpec": {
      "type": "object",
      "required": [
        "variation"
      ],
      "properties": {
        "variation": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ShellScriptBaseSource": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ShellScriptInlineSource": {
      "allOf": [
        {
          "$ref": "#/definitions/cvng/ShellScriptBaseSource"
        },
        {
          "type": "object",
          "properties": {
            "script": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ShellScriptSourceWrapper": {
      "type": "object",
      "required": [
        "spec",
        "type"
      ],
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Harness"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cvng/HarnessFileStoreSource"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Inline"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cvng/ShellScriptInlineSource"
              }
            }
          }
        }
      ]
    },
    "ShellScriptStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cvng/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "onDelegate",
            "shell",
            "source"
          ],
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "environmentVariables": {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/cvng/NumberNGVariable"
                  },
                  {
                    "$ref": "#/definitions/cvng/SecretNGVariable"
                  },
                  {
                    "$ref": "#/definitions/cvng/StringNGVariable"
                  }
                ]
              }
            },
            "executionTarget": {
              "$ref": "#/definitions/cvng/ExecutionTarget"
            },
            "metadata": {
              "type": "string"
            },
            "onDelegate": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            },
            "outputVariables": {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/cvng/NumberNGVariable"
                  },
                  {
                    "$ref": "#/definitions/cvng/SecretNGVariable"
                  },
                  {
                    "$ref": "#/definitions/cvng/StringNGVariable"
                  }
                ]
              }
            },
            "shell": {
              "type": "string",
              "enum": [
                "Bash",
                "PowerShell"
              ]
            },
            "source": {
              "$ref": "#/definitions/cvng/ShellScriptSourceWrapper"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "StringNGVariable": {
      "allOf": [
        {
          "$ref": "#/definitions/cvng/NGVariable"
        },
        {
          "type": "object",
          "required": [
            "value"
          ],
          "properties": {
            "default": {
              "type": "string"
            },
            "name": {
              "type": "string",
              "pattern": "^[a-zA-Z_][0-9a-zA-Z_\\.$]{0,127}$"
            },
            "type": {
              "type": "string",
              "enum": [
                "String"
              ]
            },
            "value": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "Toleration": {
      "type": "object",
      "properties": {
        "effect": {
          "type": "string"
        },
        "key": {
          "type": "string"
        },
        "operator": {
          "type": "string"
        },
        "tolerationSeconds": {
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "TransitionTo": {
      "type": "object",
      "required": [
        "status"
      ],
      "properties": {
        "status": {
          "type": "string"
        },
        "transitionName": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "UpdateRuleYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/cvng/PatchInstruction"
        },
        {
          "type": "object",
          "required": [
            "identifier",
            "spec",
            "type"
          ],
          "properties": {
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/cvng/UpdateRuleYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "UpdateRule"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "UpdateRuleYamlSpec": {
      "type": "object",
      "required": [
        "bucketBy",
        "ruleID"
      ],
      "properties": {
        "bucketBy": {
          "type": "string"
        },
        "ruleID": {
          "type": "string"
        },
        "serve": {
          "$ref": "#/definitions/cvng/Serve"
        },
        "variations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cvng/VariationYamlSpec"
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "VariationYamlSpec": {
      "type": "object",
      "required": [
        "variation",
        "weight"
      ],
      "properties": {
        "variation": {
          "type": "string"
        },
        "weight": {
          "type": "integer",
          "format": "int32"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "WaitStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cvng/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "duration"
          ],
          "properties": {
            "duration": {
              "type": "string",
              "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(<\\+input>.*)|(.*<\\+.*>.*)|(^$))$"
            },
            "metadata": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "WeightedVariation": {
      "type": "object",
      "required": [
        "variation",
        "weight"
      ],
      "properties": {
        "variation": {
          "type": "string"
        },
        "weight": {
          "type": "integer",
          "format": "int32"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  "security": {
    "ACRStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/security/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "repository",
            "tags"
          ],
          "properties": {
            "baseImageConnectorRefs": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "buildArgs": {
              "oneOf": [
                {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "connectorRef": {
              "type": "string"
            },
            "context": {
              "type": "string"
            },
            "dockerfile": {
              "type": "string"
            },
            "labels": {
              "oneOf": [
                {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "optimize": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            },
            "remoteCacheImage": {
              "type": "string"
            },
            "repository": {
              "type": "string"
            },
            "resources": {
              "$ref": "#/definitions/security/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "subscriptionId": {
              "type": "string"
            },
            "tags": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "target": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AbortFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/security/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "Abort"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ActionStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/security/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "uses"
          ],
          "properties": {
            "env": {
              "oneOf": [
                {
                  "$ref": "#/definitions/security/ParameterFieldMapStringString"
                },
                {
                  "type": "string"
                }
              ]
            },
            "uses": {
              "type": "string"
            },
            "with": {
              "oneOf": [
                {
                  "$ref": "#/definitions/security/ParameterFieldMapStringString"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ActionStepInfoV1": {
      "allOf": [
        {
          "$ref": "#/definitions/security/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "uses"
          ],
          "properties": {
            "envs": {
              "oneOf": [
                {
                  "$ref": "#/definitions/security/ParameterFieldMapStringString"
                },
                {
                  "type": "string"
                }
              ]
            },
            "outputs": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "resources": {
              "$ref": "#/definitions/security/ContainerResource"
            },
            "uses": {
              "type": "string"
            },
            "with": {
              "oneOf": [
                {
                  "$ref": "#/definitions/security/ParameterFieldMapStringString"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AquaTrivyStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/security/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "config",
            "mode",
            "target"
          ],
          "properties": {
            "advanced": {
              "$ref": "#/definitions/security/STOYamlAdvancedSettings"
            },
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/security/ParameterFieldListString"
            },
            "config": {
              "type": "string",
              "enum": [
                "default"
              ]
            },
            "image": {
              "$ref": "#/definitions/security/STOYamlImage"
            },
            "imagePullPolicy": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Always",
                    "Never",
                    "IfNotPresent"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "ingestion": {
              "$ref": "#/definitions/security/STOYamlIngestion"
            },
            "mode": {
              "type": "string",
              "enum": [
                "ingestion",
                "orchestration",
                "extraction"
              ]
            },
            "outputVariables": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/security/OutputNGVariable"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "privileged": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "resources": {
              "$ref": "#/definitions/security/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "settings": {
              "oneOf": [
                {
                  "$ref": "#/definitions/security/ParameterFieldMapStringJsonNode"
                },
                {
                  "type": "string"
                }
              ]
            },
            "target": {
              "$ref": "#/definitions/security/STOYamlTarget"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "config",
        "mode",
        "target"
      ],
      "properties": {
        "advanced": {
          "$ref": "#/definitions/security/STOYamlAdvancedSettings"
        },
        "baseImageConnectorRefs": {
          "$ref": "#/definitions/security/ParameterFieldListString"
        },
        "config": {
          "type": "string",
          "enum": [
            "default"
          ]
        },
        "image": {
          "$ref": "#/definitions/security/STOYamlImage"
        },
        "imagePullPolicy": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Always",
                "Never",
                "IfNotPresent"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "ingestion": {
          "$ref": "#/definitions/security/STOYamlIngestion"
        },
        "mode": {
          "type": "string",
          "enum": [
            "ingestion",
            "orchestration",
            "extraction"
          ]
        },
        "outputVariables": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/security/OutputNGVariable"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "privileged": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "resources": {
          "$ref": "#/definitions/security/ContainerResource"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "settings": {
          "oneOf": [
            {
              "$ref": "#/definitions/security/ParameterFieldMapStringJsonNode"
            },
            {
              "type": "string"
            }
          ]
        },
        "target": {
          "$ref": "#/definitions/security/STOYamlTarget"
        }
      }
    },
    "Attestation": {
      "type": "object",
      "properties": {
        "privateKey": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AwsEcrStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/security/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "config",
            "mode",
            "target"
          ],
          "properties": {
            "advanced": {
              "$ref": "#/definitions/security/STOYamlAdvancedSettings"
            },
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/security/ParameterFieldListString"
            },
            "config": {
              "type": "string",
              "enum": [
                "default"
              ]
            },
            "imagePullPolicy": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Always",
                    "Never",
                    "IfNotPresent"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "ingestion": {
              "$ref": "#/definitions/security/STOYamlIngestion"
            },
            "mode": {
              "type": "string",
              "enum": [
                "ingestion",
                "orchestration",
                "extraction"
              ]
            },
            "outputVariables": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/security/OutputNGVariable"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "privileged": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "resources": {
              "$ref": "#/definitions/security/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "settings": {
              "oneOf": [
                {
                  "$ref": "#/definitions/security/ParameterFieldMapStringJsonNode"
                },
                {
                  "type": "string"
                }
              ]
            },
            "target": {
              "$ref": "#/definitions/security/STOYamlTarget"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "config",
        "mode",
        "target"
      ],
      "properties": {
        "advanced": {
          "$ref": "#/definitions/security/STOYamlAdvancedSettings"
        },
        "baseImageConnectorRefs": {
          "$ref": "#/definitions/security/ParameterFieldListString"
        },
        "config": {
          "type": "string",
          "enum": [
            "default"
          ]
        },
        "imagePullPolicy": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Always",
                "Never",
                "IfNotPresent"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "ingestion": {
          "$ref": "#/definitions/security/STOYamlIngestion"
        },
        "mode": {
          "type": "string",
          "enum": [
            "ingestion",
            "orchestration",
            "extraction"
          ]
        },
        "outputVariables": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/security/OutputNGVariable"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "privileged": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "resources": {
          "$ref": "#/definitions/security/ContainerResource"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "settings": {
          "oneOf": [
            {
              "$ref": "#/definitions/security/ParameterFieldMapStringJsonNode"
            },
            {
              "type": "string"
            }
          ]
        },
        "target": {
          "$ref": "#/definitions/security/STOYamlTarget"
        }
      }
    },
    "BackgroundStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/security/StepSpecType"
        },
        {
          "type": "object",
          "properties": {
            "command": {
              "type": "string"
            },
            "connectorRef": {
              "type": "string"
            },
            "entrypoint": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "envVariables": {
              "oneOf": [
                {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "image": {
              "type": "string"
            },
            "imagePullPolicy": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Always",
                    "Never",
                    "IfNotPresent"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "portBindings": {
              "oneOf": [
                {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "privileged": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "reports": {
              "oneOf": [
                {
                  "$ref": "#/definitions/security/UnitTestReport"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "resources": {
              "$ref": "#/definitions/security/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "shell": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Sh",
                    "Bash",
                    "Powershell",
                    "Pwsh",
                    "Python"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "properties": {
        "command": {
          "type": "string"
        },
        "connectorRef": {
          "type": "string"
        },
        "entrypoint": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ]
        },
        "envVariables": {
          "oneOf": [
            {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ]
        },
        "image": {
          "type": "string"
        },
        "imagePullPolicy": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Always",
                "Never",
                "IfNotPresent"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "portBindings": {
          "oneOf": [
            {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ]
        },
        "privileged": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "reports": {
          "oneOf": [
            {
              "$ref": "#/definitions/security/UnitTestReport"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "resources": {
          "$ref": "#/definitions/security/ContainerResource"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "shell": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Sh",
                "Bash",
                "Powershell",
                "Pwsh",
                "Python"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      }
    },
    "BackgroundStepInfoV1": {
      "allOf": [
        {
          "$ref": "#/definitions/security/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "run"
          ],
          "properties": {
            "args": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "entrypoint": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "string"
                }
              ]
            },
            "entrypointList": {
              "$ref": "#/definitions/security/ParameterFieldListString"
            },
            "envs": {
              "oneOf": [
                {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "image": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "network": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "string"
                }
              ]
            },
            "ports": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "privileged": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "pull": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "always",
                    "never",
                    "if-not-exists"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "resources": {
              "$ref": "#/definitions/security/ContainerResource"
            },
            "run": {
              "type": "string"
            },
            "shell": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "sh",
                    "bash",
                    "powershell",
                    "pwsh",
                    "python"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "user": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "BanditStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/security/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "config",
            "mode",
            "target"
          ],
          "properties": {
            "advanced": {
              "$ref": "#/definitions/security/STOYamlAdvancedSettings"
            },
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/security/ParameterFieldListString"
            },
            "config": {
              "type": "string",
              "enum": [
                "default"
              ]
            },
            "imagePullPolicy": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Always",
                    "Never",
                    "IfNotPresent"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "ingestion": {
              "$ref": "#/definitions/security/STOYamlIngestion"
            },
            "mode": {
              "type": "string",
              "enum": [
                "ingestion",
                "orchestration",
                "extraction"
              ]
            },
            "outputVariables": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/security/OutputNGVariable"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "privileged": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "resources": {
              "$ref": "#/definitions/security/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "settings": {
              "oneOf": [
                {
                  "$ref": "#/definitions/security/ParameterFieldMapStringJsonNode"
                },
                {
                  "type": "string"
                }
              ]
            },
            "target": {
              "$ref": "#/definitions/security/STOYamlTarget"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "config",
        "mode",
        "target"
      ],
      "properties": {
        "advanced": {
          "$ref": "#/definitions/security/STOYamlAdvancedSettings"
        },
        "baseImageConnectorRefs": {
          "$ref": "#/definitions/security/ParameterFieldListString"
        },
        "config": {
          "type": "string",
          "enum": [
            "default"
          ]
        },
        "imagePullPolicy": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Always",
                "Never",
                "IfNotPresent"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "ingestion": {
          "$ref": "#/definitions/security/STOYamlIngestion"
        },
        "mode": {
          "type": "string",
          "enum": [
            "ingestion",
            "orchestration",
            "extraction"
          ]
        },
        "outputVariables": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/security/OutputNGVariable"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "privileged": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "resources": {
          "$ref": "#/definitions/security/ContainerResource"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "settings": {
          "oneOf": [
            {
              "$ref": "#/definitions/security/ParameterFieldMapStringJsonNode"
            },
            {
              "type": "string"
            }
          ]
        },
        "target": {
          "$ref": "#/definitions/security/STOYamlTarget"
        }
      }
    },
    "BitriseStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/security/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "uses"
          ],
          "properties": {
            "env": {
              "oneOf": [
                {
                  "$ref": "#/definitions/security/ParameterFieldMapStringString"
                },
                {
                  "type": "string"
                }
              ]
            },
            "uses": {
              "type": "string"
            },
            "with": {
              "oneOf": [
                {
                  "$ref": "#/definitions/security/ParameterFieldMapStringString"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "BitriseStepInfoV1": {
      "allOf": [
        {
          "$ref": "#/definitions/security/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "uses"
          ],
          "properties": {
            "envs": {
              "oneOf": [
                {
                  "$ref": "#/definitions/security/ParameterFieldMapStringString"
                },
                {
                  "type": "string"
                }
              ]
            },
            "outputs": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "resources": {
              "$ref": "#/definitions/security/ContainerResource"
            },
            "uses": {
              "type": "string"
            },
            "with": {
              "oneOf": [
                {
                  "$ref": "#/definitions/security/ParameterFieldMapStringString"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "BlackDuckStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/security/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "config",
            "mode",
            "target"
          ],
          "properties": {
            "advanced": {
              "$ref": "#/definitions/security/STOYamlAdvancedSettings"
            },
            "auth": {
              "$ref": "#/definitions/security/STOYamlAuth"
            },
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/security/ParameterFieldListString"
            },
            "config": {
              "type": "string",
              "enum": [
                "default"
              ]
            },
            "image": {
              "$ref": "#/definitions/security/STOYamlImage"
            },
            "imagePullPolicy": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Always",
                    "Never",
                    "IfNotPresent"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "ingestion": {
              "$ref": "#/definitions/security/STOYamlIngestion"
            },
            "mode": {
              "type": "string",
              "enum": [
                "ingestion",
                "orchestration",
                "extraction"
              ]
            },
            "outputVariables": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/security/OutputNGVariable"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "privileged": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "resources": {
              "$ref": "#/definitions/security/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "settings": {
              "oneOf": [
                {
                  "$ref": "#/definitions/security/ParameterFieldMapStringJsonNode"
                },
                {
                  "type": "string"
                }
              ]
            },
            "target": {
              "$ref": "#/definitions/security/STOYamlTarget"
            },
            "tool": {
              "$ref": "#/definitions/security/STOYamlBlackduckToolData"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "config",
        "mode",
        "target"
      ],
      "properties": {
        "advanced": {
          "$ref": "#/definitions/security/STOYamlAdvancedSettings"
        },
        "auth": {
          "$ref": "#/definitions/security/STOYamlAuth"
        },
        "baseImageConnectorRefs": {
          "$ref": "#/definitions/security/ParameterFieldListString"
        },
        "config": {
          "type": "string",
          "enum": [
            "default"
          ]
        },
        "image": {
          "$ref": "#/definitions/security/STOYamlImage"
        },
        "imagePullPolicy": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Always",
                "Never",
                "IfNotPresent"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "ingestion": {
          "$ref": "#/definitions/security/STOYamlIngestion"
        },
        "mode": {
          "type": "string",
          "enum": [
            "ingestion",
            "orchestration",
            "extraction"
          ]
        },
        "outputVariables": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/security/OutputNGVariable"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "privileged": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "resources": {
          "$ref": "#/definitions/security/ContainerResource"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "settings": {
          "oneOf": [
            {
              "$ref": "#/definitions/security/ParameterFieldMapStringJsonNode"
            },
            {
              "type": "string"
            }
          ]
        },
        "target": {
          "$ref": "#/definitions/security/STOYamlTarget"
        },
        "tool": {
          "$ref": "#/definitions/security/STOYamlBlackduckToolData"
        }
      }
    },
    "BrakemanStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/security/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "config",
            "mode",
            "target"
          ],
          "properties": {
            "advanced": {
              "$ref": "#/definitions/security/STOYamlAdvancedSettings"
            },
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/security/ParameterFieldListString"
            },
            "config": {
              "type": "string",
              "enum": [
                "default"
              ]
            },
            "imagePullPolicy": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Always",
                    "Never",
                    "IfNotPresent"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "ingestion": {
              "$ref": "#/definitions/security/STOYamlIngestion"
            },
            "mode": {
              "type": "string",
              "enum": [
                "ingestion",
                "orchestration",
                "extraction"
              ]
            },
            "outputVariables": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/security/OutputNGVariable"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "privileged": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "resources": {
              "$ref": "#/definitions/security/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "settings": {
              "oneOf": [
                {
                  "$ref": "#/definitions/security/ParameterFieldMapStringJsonNode"
                },
                {
                  "type": "string"
                }
              ]
            },
            "target": {
              "$ref": "#/definitions/security/STOYamlTarget"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "config",
        "mode",
        "target"
      ],
      "properties": {
        "advanced": {
          "$ref": "#/definitions/security/STOYamlAdvancedSettings"
        },
        "baseImageConnectorRefs": {
          "$ref": "#/definitions/security/ParameterFieldListString"
        },
        "config": {
          "type": "string",
          "enum": [
            "default"
          ]
        },
        "imagePullPolicy": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Always",
                "Never",
                "IfNotPresent"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "ingestion": {
          "$ref": "#/definitions/security/STOYamlIngestion"
        },
        "mode": {
          "type": "string",
          "enum": [
            "ingestion",
            "orchestration",
            "extraction"
          ]
        },
        "outputVariables": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/security/OutputNGVariable"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "privileged": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "resources": {
          "$ref": "#/definitions/security/ContainerResource"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "settings": {
          "oneOf": [
            {
              "$ref": "#/definitions/security/ParameterFieldMapStringJsonNode"
            },
            {
              "type": "string"
            }
          ]
        },
        "target": {
          "$ref": "#/definitions/security/STOYamlTarget"
        }
      }
    },
    "BranchBuildSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/security/BuildSpec"
        },
        {
          "type": "object",
          "required": [
            "branch"
          ],
          "properties": {
            "branch": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "BranchWebhookEvent": {
      "allOf": [
        {
          "$ref": "#/definitions/security/WebhookEvent"
        },
        {
          "type": "object",
          "properties": {
            "baseAttributes": {
              "$ref": "#/definitions/security/WebhookBaseAttributes"
            },
            "branchName": {
              "type": "string"
            },
            "commitDetailsList": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/security/CommitDetails"
              }
            },
            "link": {
              "type": "string"
            },
            "repository": {
              "$ref": "#/definitions/security/Repository"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "Build": {
      "type": "object",
      "required": [
        "spec",
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "branch",
            "tag",
            "PR"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "PR"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/security/PRBuildSpec"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "branch"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/security/BranchBuildSpec"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "tag"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/security/TagBuildSpec"
              }
            }
          }
        }
      ]
    },
    "BuildJobEnvInfo": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "K8",
            "VM",
            "DOCKER"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "BuildSpec": {
      "type": "object",
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "BurpStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/security/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "config",
            "mode",
            "target"
          ],
          "properties": {
            "advanced": {
              "$ref": "#/definitions/security/STOYamlAdvancedSettings"
            },
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/security/ParameterFieldListString"
            },
            "config": {
              "type": "string",
              "enum": [
                "default"
              ]
            },
            "imagePullPolicy": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Always",
                    "Never",
                    "IfNotPresent"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "ingestion": {
              "$ref": "#/definitions/security/STOYamlIngestion"
            },
            "instance": {
              "$ref": "#/definitions/security/STOYamlInstance"
            },
            "mode": {
              "type": "string",
              "enum": [
                "ingestion",
                "orchestration",
                "extraction"
              ]
            },
            "outputVariables": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/security/OutputNGVariable"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "privileged": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "resources": {
              "$ref": "#/definitions/security/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "settings": {
              "oneOf": [
                {
                  "$ref": "#/definitions/security/ParameterFieldMapStringJsonNode"
                },
                {
                  "type": "string"
                }
              ]
            },
            "target": {
              "$ref": "#/definitions/security/STOYamlTarget"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "config",
        "mode",
        "target"
      ],
      "properties": {
        "advanced": {
          "$ref": "#/definitions/security/STOYamlAdvancedSettings"
        },
        "baseImageConnectorRefs": {
          "$ref": "#/definitions/security/ParameterFieldListString"
        },
        "config": {
          "type": "string",
          "enum": [
            "default"
          ]
        },
        "imagePullPolicy": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Always",
                "Never",
                "IfNotPresent"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "ingestion": {
          "$ref": "#/definitions/security/STOYamlIngestion"
        },
        "instance": {
          "$ref": "#/definitions/security/STOYamlInstance"
        },
        "mode": {
          "type": "string",
          "enum": [
            "ingestion",
            "orchestration",
            "extraction"
          ]
        },
        "outputVariables": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/security/OutputNGVariable"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "privileged": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "resources": {
          "$ref": "#/definitions/security/ContainerResource"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "settings": {
          "oneOf": [
            {
              "$ref": "#/definitions/security/ParameterFieldMapStringJsonNode"
            },
            {
              "type": "string"
            }
          ]
        },
        "target": {
          "$ref": "#/definitions/security/STOYamlTarget"
        }
      }
    },
    "CIExecutionArgs": {
      "type": "object",
      "properties": {
        "executionSource": {
          "$ref": "#/definitions/security/ExecutionSource"
        },
        "runSequence": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CIServiceInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/security/DependencySpecType"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "image"
          ],
          "properties": {
            "args": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "connectorRef": {
              "type": "string"
            },
            "entrypoint": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "envVariables": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "image": {
              "type": "string"
            },
            "imagePullPolicy": {
              "type": "string",
              "enum": [
                "Always",
                "Never",
                "IfNotPresent"
              ]
            },
            "portBindings": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "privileged": {
              "type": "boolean"
            },
            "resources": {
              "$ref": "#/definitions/security/ContainerResource"
            },
            "runAsUser": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CIVolume": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "EmptyDir",
            "PersistentVolumeClaim",
            "HostPath"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "Caching": {
      "type": "object",
      "properties": {
        "enabled": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "key": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "paths": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "Capabilities": {
      "type": "object",
      "properties": {
        "add": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "drop": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CheckmarxStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/security/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "config",
            "mode",
            "target"
          ],
          "properties": {
            "advanced": {
              "$ref": "#/definitions/security/STOYamlAdvancedSettings"
            },
            "auth": {
              "$ref": "#/definitions/security/STOYamlAuth"
            },
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/security/ParameterFieldListString"
            },
            "config": {
              "type": "string",
              "enum": [
                "default"
              ]
            },
            "image": {
              "$ref": "#/definitions/security/STOYamlImage"
            },
            "imagePullPolicy": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Always",
                    "Never",
                    "IfNotPresent"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "ingestion": {
              "$ref": "#/definitions/security/STOYamlIngestion"
            },
            "mode": {
              "type": "string",
              "enum": [
                "ingestion",
                "orchestration",
                "extraction"
              ]
            },
            "outputVariables": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/security/OutputNGVariable"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "privileged": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "resources": {
              "$ref": "#/definitions/security/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "settings": {
              "oneOf": [
                {
                  "$ref": "#/definitions/security/ParameterFieldMapStringJsonNode"
                },
                {
                  "type": "string"
                }
              ]
            },
            "target": {
              "$ref": "#/definitions/security/STOYamlTarget"
            },
            "tool": {
              "$ref": "#/definitions/security/STOYamlCheckmarxToolData"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "config",
        "mode",
        "target"
      ],
      "properties": {
        "advanced": {
          "$ref": "#/definitions/security/STOYamlAdvancedSettings"
        },
        "auth": {
          "$ref": "#/definitions/security/STOYamlAuth"
        },
        "baseImageConnectorRefs": {
          "$ref": "#/definitions/security/ParameterFieldListString"
        },
        "config": {
          "type": "string",
          "enum": [
            "default"
          ]
        },
        "image": {
          "$ref": "#/definitions/security/STOYamlImage"
        },
        "imagePullPolicy": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Always",
                "Never",
                "IfNotPresent"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "ingestion": {
          "$ref": "#/definitions/security/STOYamlIngestion"
        },
        "mode": {
          "type": "string",
          "enum": [
            "ingestion",
            "orchestration",
            "extraction"
          ]
        },
        "outputVariables": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/security/OutputNGVariable"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "privileged": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "resources": {
          "$ref": "#/definitions/security/ContainerResource"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "settings": {
          "oneOf": [
            {
              "$ref": "#/definitions/security/ParameterFieldMapStringJsonNode"
            },
            {
              "type": "string"
            }
          ]
        },
        "target": {
          "$ref": "#/definitions/security/STOYamlTarget"
        },
        "tool": {
          "$ref": "#/definitions/security/STOYamlCheckmarxToolData"
        }
      }
    },
    "ClairStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/security/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "config",
            "mode",
            "target"
          ],
          "properties": {
            "advanced": {
              "$ref": "#/definitions/security/STOYamlAdvancedSettings"
            },
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/security/ParameterFieldListString"
            },
            "config": {
              "type": "string",
              "enum": [
                "default"
              ]
            },
            "imagePullPolicy": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Always",
                    "Never",
                    "IfNotPresent"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "ingestion": {
              "$ref": "#/definitions/security/STOYamlIngestion"
            },
            "mode": {
              "type": "string",
              "enum": [
                "ingestion",
                "orchestration",
                "extraction"
              ]
            },
            "outputVariables": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/security/OutputNGVariable"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "privileged": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "resources": {
              "$ref": "#/definitions/security/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "settings": {
              "oneOf": [
                {
                  "$ref": "#/definitions/security/ParameterFieldMapStringJsonNode"
                },
                {
                  "type": "string"
                }
              ]
            },
            "target": {
              "$ref": "#/definitions/security/STOYamlTarget"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "config",
        "mode",
        "target"
      ],
      "properties": {
        "advanced": {
          "$ref": "#/definitions/security/STOYamlAdvancedSettings"
        },
        "baseImageConnectorRefs": {
          "$ref": "#/definitions/security/ParameterFieldListString"
        },
        "config": {
          "type": "string",
          "enum": [
            "default"
          ]
        },
        "imagePullPolicy": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Always",
                "Never",
                "IfNotPresent"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "ingestion": {
          "$ref": "#/definitions/security/STOYamlIngestion"
        },
        "mode": {
          "type": "string",
          "enum": [
            "ingestion",
            "orchestration",
            "extraction"
          ]
        },
        "outputVariables": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/security/OutputNGVariable"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "privileged": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "resources": {
          "$ref": "#/definitions/security/ContainerResource"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "settings": {
          "oneOf": [
            {
              "$ref": "#/definitions/security/ParameterFieldMapStringJsonNode"
            },
            {
              "type": "string"
            }
          ]
        },
        "target": {
          "$ref": "#/definitions/security/STOYamlTarget"
        }
      }
    },
    "CleanupStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/security/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "infrastructure",
            "podName"
          ],
          "properties": {
            "infrastructure": {
              "$ref": "#/definitions/security/Infrastructure"
            },
            "podName": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CloudRuntime": {
      "allOf": [
        {
          "$ref": "#/definitions/security/Runtime"
        },
        {
          "type": "object",
          "required": [
            "spec",
            "type"
          ],
          "properties": {
            "spec": {
              "$ref": "#/definitions/security/CloudRuntimeSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "Cloud"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CloudRuntimeSpec": {
      "type": "object",
      "properties": {
        "size": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CodeBase": {
      "type": "object",
      "required": [
        "build",
        "connectorRef"
      ],
      "properties": {
        "build": {
          "$ref": "#/definitions/security/Build"
        },
        "connectorRef": {
          "type": "string"
        },
        "depth": {
          "type": "integer",
          "format": "int32"
        },
        "prCloneStrategy": {
          "type": "string",
          "enum": [
            "MergeCommit",
            "SourceBranch"
          ]
        },
        "repoName": {
          "type": "string"
        },
        "resources": {
          "$ref": "#/definitions/security/ContainerResource"
        },
        "sslVerify": {
          "type": "boolean"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CommitDetails": {
      "type": "object",
      "properties": {
        "commitId": {
          "type": "string"
        },
        "link": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "ownerEmail": {
          "type": "string"
        },
        "ownerId": {
          "type": "string"
        },
        "ownerName": {
          "type": "string"
        },
        "timeStamp": {
          "type": "integer",
          "format": "int64"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ConnectorConversionInfo": {
      "type": "object",
      "properties": {
        "connectorRef": {
          "type": "string"
        },
        "envToSecretsMap": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ContainerDefinitionInfo": {
      "type": "object",
      "properties": {
        "args": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "commands": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "containerImageDetails": {
          "$ref": "#/definitions/security/ContainerImageDetails"
        },
        "containerResourceParams": {
          "$ref": "#/definitions/security/ContainerResourceParams"
        },
        "containerType": {
          "type": "string",
          "enum": [
            "STEP_EXECUTOR",
            "ADD_ON",
            "RUN",
            "PLUGIN",
            "SERVICE",
            "LITE_ENGINE",
            "TEST_INTELLIGENCE",
            "BACKGROUND"
          ]
        },
        "envVars": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "envVarsWithSecretRef": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "harnessManagedImage": {
          "type": "boolean"
        },
        "imagePullPolicy": {
          "type": "string"
        },
        "mainLiteEngine": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "ports": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "privileged": {
          "type": "boolean"
        },
        "runAsUser": {
          "type": "integer",
          "format": "int32"
        },
        "secretVariables": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/security/SecretNGVariable"
          }
        },
        "stepIdentifier": {
          "type": "string"
        },
        "stepName": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ContainerImageDetails": {
      "type": "object",
      "properties": {
        "connectorIdentifier": {
          "type": "string"
        },
        "imageDetails": {
          "$ref": "#/definitions/security/ImageDetails"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ContainerResource": {
      "type": "object",
      "required": [
        "limits"
      ],
      "properties": {
        "limits": {
          "$ref": "#/definitions/security/Limits"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ContainerResourceParams": {
      "type": "object",
      "properties": {
        "resourceLimitMemoryMiB": {
          "type": "integer",
          "format": "int32"
        },
        "resourceLimitMilliCpu": {
          "type": "integer",
          "format": "int32"
        },
        "resourceRequestMemoryMiB": {
          "type": "integer",
          "format": "int32"
        },
        "resourceRequestMilliCpu": {
          "type": "integer",
          "format": "int32"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CustomExecutionSource": {
      "allOf": [
        {
          "$ref": "#/definitions/security/ExecutionSource"
        },
        {
          "type": "object",
          "properties": {
            "branch": {
              "type": "string"
            },
            "tag": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "DataTheoremStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/security/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "config",
            "mode",
            "target"
          ],
          "properties": {
            "advanced": {
              "$ref": "#/definitions/security/STOYamlAdvancedSettings"
            },
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/security/ParameterFieldListString"
            },
            "config": {
              "type": "string",
              "enum": [
                "default"
              ]
            },
            "imagePullPolicy": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Always",
                    "Never",
                    "IfNotPresent"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "ingestion": {
              "$ref": "#/definitions/security/STOYamlIngestion"
            },
            "mode": {
              "type": "string",
              "enum": [
                "ingestion",
                "orchestration",
                "extraction"
              ]
            },
            "outputVariables": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/security/OutputNGVariable"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "privileged": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "resources": {
              "$ref": "#/definitions/security/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "settings": {
              "oneOf": [
                {
                  "$ref": "#/definitions/security/ParameterFieldMapStringJsonNode"
                },
                {
                  "type": "string"
                }
              ]
            },
            "target": {
              "$ref": "#/definitions/security/STOYamlTarget"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "config",
        "mode",
        "target"
      ],
      "properties": {
        "advanced": {
          "$ref": "#/definitions/security/STOYamlAdvancedSettings"
        },
        "baseImageConnectorRefs": {
          "$ref": "#/definitions/security/ParameterFieldListString"
        },
        "config": {
          "type": "string",
          "enum": [
            "default"
          ]
        },
        "imagePullPolicy": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Always",
                "Never",
                "IfNotPresent"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "ingestion": {
          "$ref": "#/definitions/security/STOYamlIngestion"
        },
        "mode": {
          "type": "string",
          "enum": [
            "ingestion",
            "orchestration",
            "extraction"
          ]
        },
        "outputVariables": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/security/OutputNGVariable"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "privileged": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "resources": {
          "$ref": "#/definitions/security/ContainerResource"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "settings": {
          "oneOf": [
            {
              "$ref": "#/definitions/security/ParameterFieldMapStringJsonNode"
            },
            {
              "type": "string"
            }
          ]
        },
        "target": {
          "$ref": "#/definitions/security/STOYamlTarget"
        }
      }
    },
    "DependencyElement": {
      "type": "object",
      "required": [
        "identifier",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "identifier": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "spec": {
          "$ref": "#/definitions/security/DependencySpecType"
        },
        "type": {
          "type": "string",
          "enum": [
            "Service"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "DependencySpecType": {
      "type": "object",
      "discriminator": "type",
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "DockerContentTrustStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/security/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "config",
            "mode",
            "target"
          ],
          "properties": {
            "advanced": {
              "$ref": "#/definitions/security/STOYamlAdvancedSettings"
            },
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/security/ParameterFieldListString"
            },
            "config": {
              "type": "string",
              "enum": [
                "default"
              ]
            },
            "imagePullPolicy": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Always",
                    "Never",
                    "IfNotPresent"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "ingestion": {
              "$ref": "#/definitions/security/STOYamlIngestion"
            },
            "mode": {
              "type": "string",
              "enum": [
                "ingestion",
                "orchestration",
                "extraction"
              ]
            },
            "outputVariables": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/security/OutputNGVariable"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "privileged": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "resources": {
              "$ref": "#/definitions/security/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "settings": {
              "oneOf": [
                {
                  "$ref": "#/definitions/security/ParameterFieldMapStringJsonNode"
                },
                {
                  "type": "string"
                }
              ]
            },
            "target": {
              "$ref": "#/definitions/security/STOYamlTarget"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "config",
        "mode",
        "target"
      ],
      "properties": {
        "advanced": {
          "$ref": "#/definitions/security/STOYamlAdvancedSettings"
        },
        "baseImageConnectorRefs": {
          "$ref": "#/definitions/security/ParameterFieldListString"
        },
        "config": {
          "type": "string",
          "enum": [
            "default"
          ]
        },
        "imagePullPolicy": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Always",
                "Never",
                "IfNotPresent"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "ingestion": {
          "$ref": "#/definitions/security/STOYamlIngestion"
        },
        "mode": {
          "type": "string",
          "enum": [
            "ingestion",
            "orchestration",
            "extraction"
          ]
        },
        "outputVariables": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/security/OutputNGVariable"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "privileged": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "resources": {
          "$ref": "#/definitions/security/ContainerResource"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "settings": {
          "oneOf": [
            {
              "$ref": "#/definitions/security/ParameterFieldMapStringJsonNode"
            },
            {
              "type": "string"
            }
          ]
        },
        "target": {
          "$ref": "#/definitions/security/STOYamlTarget"
        }
      }
    },
    "DockerInfraSpec": {
      "type": "object",
      "required": [
        "platform"
      ],
      "properties": {
        "platform": {
          "$ref": "#/definitions/security/ParameterFieldPlatform"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "DockerInfraYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/security/Infrastructure"
        },
        {
          "type": "object",
          "required": [
            "spec",
            "type"
          ],
          "properties": {
            "spec": {
              "$ref": "#/definitions/security/DockerInfraSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "KubernetesDirect",
                "UseFromStage",
                "VM",
                "KubernetesHosted"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "DockerRuntime": {
      "allOf": [
        {
          "$ref": "#/definitions/security/Runtime"
        },
        {
          "type": "object",
          "required": [
            "spec",
            "type"
          ],
          "properties": {
            "spec": {
              "$ref": "#/definitions/security/DockerRuntimeSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "Docker"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "DockerRuntimeSpec": {
      "type": "object",
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "DockerStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/security/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "repo",
            "tags"
          ],
          "properties": {
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/security/ParameterFieldListString"
            },
            "buildArgs": {
              "oneOf": [
                {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "connectorRef": {
              "type": "string"
            },
            "context": {
              "type": "string"
            },
            "dockerfile": {
              "type": "string"
            },
            "labels": {
              "oneOf": [
                {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "optimize": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            },
            "remoteCacheRepo": {
              "type": "string"
            },
            "repo": {
              "type": "string"
            },
            "resources": {
              "$ref": "#/definitions/security/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "tags": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "target": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ECRStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/security/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "account",
            "connectorRef",
            "imageName",
            "region",
            "tags"
          ],
          "properties": {
            "account": {
              "type": "string"
            },
            "baseImageConnectorRefs": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "buildArgs": {
              "oneOf": [
                {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "connectorRef": {
              "type": "string"
            },
            "context": {
              "type": "string"
            },
            "dockerfile": {
              "type": "string"
            },
            "imageName": {
              "type": "string"
            },
            "labels": {
              "oneOf": [
                {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "optimize": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            },
            "region": {
              "type": "string"
            },
            "remoteCacheImage": {
              "type": "string"
            },
            "resources": {
              "$ref": "#/definitions/security/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "tags": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "target": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "EmptyDirVolume": {
      "allOf": [
        {
          "$ref": "#/definitions/security/PodVolume"
        },
        {
          "type": "object",
          "required": [
            "mountPath",
            "name"
          ],
          "properties": {
            "medium": {
              "type": "string"
            },
            "mountPath": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "sizeMib": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "EmptyDirYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/security/ContainerVolume"
        },
        {
          "type": "object",
          "required": [
            "mountPath",
            "spec",
            "type"
          ],
          "properties": {
            "mountPath": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/security/EmptyDirYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "EmptyDir",
                "PersistentVolumeClaim",
                "HostPath"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "EmptyDirYamlSpec": {
      "type": "object",
      "properties": {
        "medium": {
          "type": "string"
        },
        "size": {
          "type": "string",
          "pattern": "^(([0-9]*[.])?[0-9]+)([GM]i?)|<\\+input>$"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ExecutionElementConfig": {
      "type": "object",
      "required": [
        "steps"
      ],
      "properties": {
        "steps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/security/ExecutionWrapperConfig"
          },
          "maxItems": 2147483647,
          "minItems": 1
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ExecutionSource": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "WEBHOOK",
            "MANUAL",
            "CUSTOM"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ExecutionWrapperConfig": {
      "type": "object",
      "properties": {
        "parallel": {
          "$ref": "#/definitions/security/ParallelStepElementConfig"
        },
        "step": {
          "oneOf": [
            {
              "$ref": "#/definitions/security/StepElementConfig"
            },
            {
              "$ref": "#/definitions/security/SysdigScanNode"
            },
            {
              "$ref": "#/definitions/security/ExternalScanNode"
            },
            {
              "$ref": "#/definitions/security/BackgroundStepNode"
            },
            {
              "$ref": "#/definitions/security/PrismaCloudScanNode"
            },
            {
              "$ref": "#/definitions/security/BlackDuckScanNode"
            },
            {
              "$ref": "#/definitions/security/BrakemanScanNode"
            },
            {
              "$ref": "#/definitions/security/TenableScanNode"
            },
            {
              "$ref": "#/definitions/security/SecurityNode"
            },
            {
              "$ref": "#/definitions/security/MendScanNode"
            },
            {
              "$ref": "#/definitions/security/NmapScanNode"
            },
            {
              "$ref": "#/definitions/security/AquaTrivyScanNode"
            },
            {
              "$ref": "#/definitions/security/CheckmarxScanNode"
            },
            {
              "$ref": "#/definitions/security/AwsEcrScanNode"
            },
            {
              "$ref": "#/definitions/security/ReapsawScanNode"
            },
            {
              "$ref": "#/definitions/security/JfrogXrayScanNode"
            },
            {
              "$ref": "#/definitions/security/SniperScanNode"
            },
            {
              "$ref": "#/definitions/security/OwaspScanNode"
            },
            {
              "$ref": "#/definitions/security/NexusIQScanNode"
            },
            {
              "$ref": "#/definitions/security/BurpScanNode"
            },
            {
              "$ref": "#/definitions/security/GrypeScanNode"
            },
            {
              "$ref": "#/definitions/security/RunStepNode"
            },
            {
              "$ref": "#/definitions/security/ClairScanNode"
            },
            {
              "$ref": "#/definitions/security/NiktoScanNode"
            },
            {
              "$ref": "#/definitions/security/OpenvasScanNode"
            },
            {
              "$ref": "#/definitions/security/VeracodeScanNode"
            },
            {
              "$ref": "#/definitions/security/BanditScanNode"
            },
            {
              "$ref": "#/definitions/security/ShiftLeftScanNode"
            },
            {
              "$ref": "#/definitions/security/ProwlerScanNode"
            },
            {
              "$ref": "#/definitions/security/FortifyOnDemandScanNode"
            },
            {
              "$ref": "#/definitions/security/QualysScanNode"
            },
            {
              "$ref": "#/definitions/security/SnykScanNode"
            },
            {
              "$ref": "#/definitions/security/ZapScanNode"
            },
            {
              "$ref": "#/definitions/security/DockerContentTrustScanNode"
            },
            {
              "$ref": "#/definitions/security/NessusScanNode"
            },
            {
              "$ref": "#/definitions/security/MetasploitScanNode"
            },
            {
              "$ref": "#/definitions/security/SonarqubeScanNode"
            },
            {
              "$ref": "#/definitions/security/DataTheoremScanNode"
            },
            {
              "$ref": "#/definitions/TemplateStepNode"
            },
            {
              "$ref": "#/definitions/PolicyStepNode"
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ExternalStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/security/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "config",
            "mode",
            "target"
          ],
          "properties": {
            "advanced": {
              "$ref": "#/definitions/security/STOYamlAdvancedSettings"
            },
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/security/ParameterFieldListString"
            },
            "config": {
              "type": "string",
              "enum": [
                "default"
              ]
            },
            "imagePullPolicy": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Always",
                    "Never",
                    "IfNotPresent"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "ingestion": {
              "$ref": "#/definitions/security/STOYamlIngestion"
            },
            "mode": {
              "type": "string",
              "enum": [
                "ingestion",
                "orchestration",
                "extraction"
              ]
            },
            "outputVariables": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/security/OutputNGVariable"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "privileged": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "resources": {
              "$ref": "#/definitions/security/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "settings": {
              "oneOf": [
                {
                  "$ref": "#/definitions/security/ParameterFieldMapStringJsonNode"
                },
                {
                  "type": "string"
                }
              ]
            },
            "target": {
              "$ref": "#/definitions/security/STOYamlTarget"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "config",
        "mode",
        "target"
      ],
      "properties": {
        "advanced": {
          "$ref": "#/definitions/security/STOYamlAdvancedSettings"
        },
        "baseImageConnectorRefs": {
          "$ref": "#/definitions/security/ParameterFieldListString"
        },
        "config": {
          "type": "string",
          "enum": [
            "default"
          ]
        },
        "imagePullPolicy": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Always",
                "Never",
                "IfNotPresent"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "ingestion": {
          "$ref": "#/definitions/security/STOYamlIngestion"
        },
        "mode": {
          "type": "string",
          "enum": [
            "ingestion",
            "orchestration",
            "extraction"
          ]
        },
        "outputVariables": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/security/OutputNGVariable"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "privileged": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "resources": {
          "$ref": "#/definitions/security/ContainerResource"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "settings": {
          "oneOf": [
            {
              "$ref": "#/definitions/security/ParameterFieldMapStringJsonNode"
            },
            {
              "type": "string"
            }
          ]
        },
        "target": {
          "$ref": "#/definitions/security/STOYamlTarget"
        }
      }
    },
    "FailureStrategyActionConfig": {
      "type": "object",
      "required": [
        "type"
      ],
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "Ignore",
            "Retry",
            "MarkAsSuccess",
            "Abort",
            "StageRollback",
            "StepGroupRollback",
            "PipelineRollback",
            "ManualIntervention",
            "ProceedWithDefaultValues",
            "MarkAsFailure"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "FailureStrategyConfig": {
      "type": "object",
      "required": [
        "onFailure"
      ],
      "properties": {
        "onFailure": {
          "$ref": "#/definitions/security/OnFailureConfig"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "FortifyOnDemandStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/security/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "config",
            "mode",
            "target"
          ],
          "properties": {
            "advanced": {
              "$ref": "#/definitions/security/STOYamlAdvancedSettings"
            },
            "auth": {
              "$ref": "#/definitions/security/STOYamlAuth"
            },
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/security/ParameterFieldListString"
            },
            "config": {
              "type": "string",
              "enum": [
                "default"
              ]
            },
            "image": {
              "$ref": "#/definitions/security/STOYamlImage"
            },
            "imagePullPolicy": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Always",
                    "Never",
                    "IfNotPresent"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "ingestion": {
              "$ref": "#/definitions/security/STOYamlIngestion"
            },
            "mode": {
              "type": "string",
              "enum": [
                "ingestion",
                "orchestration",
                "extraction"
              ]
            },
            "outputVariables": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/security/OutputNGVariable"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "privileged": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "resources": {
              "$ref": "#/definitions/security/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "settings": {
              "oneOf": [
                {
                  "$ref": "#/definitions/security/ParameterFieldMapStringJsonNode"
                },
                {
                  "type": "string"
                }
              ]
            },
            "target": {
              "$ref": "#/definitions/security/STOYamlTarget"
            },
            "tool": {
              "$ref": "#/definitions/security/STOYamlFODToolData"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "config",
        "mode",
        "target"
      ],
      "properties": {
        "advanced": {
          "$ref": "#/definitions/security/STOYamlAdvancedSettings"
        },
        "auth": {
          "$ref": "#/definitions/security/STOYamlAuth"
        },
        "baseImageConnectorRefs": {
          "$ref": "#/definitions/security/ParameterFieldListString"
        },
        "config": {
          "type": "string",
          "enum": [
            "default"
          ]
        },
        "image": {
          "$ref": "#/definitions/security/STOYamlImage"
        },
        "imagePullPolicy": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Always",
                "Never",
                "IfNotPresent"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "ingestion": {
          "$ref": "#/definitions/security/STOYamlIngestion"
        },
        "mode": {
          "type": "string",
          "enum": [
            "ingestion",
            "orchestration",
            "extraction"
          ]
        },
        "outputVariables": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/security/OutputNGVariable"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "privileged": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "resources": {
          "$ref": "#/definitions/security/ContainerResource"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "settings": {
          "oneOf": [
            {
              "$ref": "#/definitions/security/ParameterFieldMapStringJsonNode"
            },
            {
              "type": "string"
            }
          ]
        },
        "target": {
          "$ref": "#/definitions/security/STOYamlTarget"
        },
        "tool": {
          "$ref": "#/definitions/security/STOYamlFODToolData"
        }
      }
    },
    "GCRStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/security/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "host",
            "imageName",
            "projectID",
            "tags"
          ],
          "properties": {
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/security/ParameterFieldListString"
            },
            "buildArgs": {
              "oneOf": [
                {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "connectorRef": {
              "type": "string"
            },
            "context": {
              "type": "string"
            },
            "dockerfile": {
              "type": "string"
            },
            "host": {
              "type": "string"
            },
            "imageName": {
              "type": "string"
            },
            "labels": {
              "oneOf": [
                {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "optimize": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            },
            "projectID": {
              "type": "string"
            },
            "remoteCacheImage": {
              "type": "string"
            },
            "resources": {
              "$ref": "#/definitions/security/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "tags": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "target": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "GitCloneStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/security/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "build",
            "connectorRef"
          ],
          "properties": {
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/security/ParameterFieldListString"
            },
            "build": {
              "oneOf": [
                {
                  "$ref": "#/definitions/security/Build"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "cloneDirectory": {
              "type": "string"
            },
            "connectorRef": {
              "type": "string"
            },
            "depth": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "projectName": {
              "type": "string"
            },
            "repoName": {
              "type": "string"
            },
            "resources": {
              "$ref": "#/definitions/security/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "sslVerify": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "GrypeStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/security/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "config",
            "mode",
            "target"
          ],
          "properties": {
            "advanced": {
              "$ref": "#/definitions/security/STOYamlAdvancedSettings"
            },
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/security/ParameterFieldListString"
            },
            "config": {
              "type": "string",
              "enum": [
                "default"
              ]
            },
            "image": {
              "$ref": "#/definitions/security/STOYamlImage"
            },
            "imagePullPolicy": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Always",
                    "Never",
                    "IfNotPresent"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "ingestion": {
              "$ref": "#/definitions/security/STOYamlIngestion"
            },
            "mode": {
              "type": "string",
              "enum": [
                "ingestion",
                "orchestration",
                "extraction"
              ]
            },
            "outputVariables": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/security/OutputNGVariable"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "privileged": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "resources": {
              "$ref": "#/definitions/security/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "settings": {
              "oneOf": [
                {
                  "$ref": "#/definitions/security/ParameterFieldMapStringJsonNode"
                },
                {
                  "type": "string"
                }
              ]
            },
            "target": {
              "$ref": "#/definitions/security/STOYamlTarget"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "config",
        "mode",
        "target"
      ],
      "properties": {
        "advanced": {
          "$ref": "#/definitions/security/STOYamlAdvancedSettings"
        },
        "baseImageConnectorRefs": {
          "$ref": "#/definitions/security/ParameterFieldListString"
        },
        "config": {
          "type": "string",
          "enum": [
            "default"
          ]
        },
        "image": {
          "$ref": "#/definitions/security/STOYamlImage"
        },
        "imagePullPolicy": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Always",
                "Never",
                "IfNotPresent"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "ingestion": {
          "$ref": "#/definitions/security/STOYamlIngestion"
        },
        "mode": {
          "type": "string",
          "enum": [
            "ingestion",
            "orchestration",
            "extraction"
          ]
        },
        "outputVariables": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/security/OutputNGVariable"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "privileged": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "resources": {
          "$ref": "#/definitions/security/ContainerResource"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "settings": {
          "oneOf": [
            {
              "$ref": "#/definitions/security/ParameterFieldMapStringJsonNode"
            },
            {
              "type": "string"
            }
          ]
        },
        "target": {
          "$ref": "#/definitions/security/STOYamlTarget"
        }
      }
    },
    "HarnessForConfig": {
      "type": "object",
      "properties": {
        "end": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            },
            {
              "type": "string",
              "pattern": "(<\\+.+>.*)",
              "minLength": 1
            }
          ]
        },
        "items": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "(<\\+.+>.*)",
              "minLength": 1
            }
          ]
        },
        "maxConcurrency": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            },
            {
              "type": "string",
              "pattern": "(<\\+.+>.*)",
              "minLength": 1
            }
          ]
        },
        "partitionSize": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            },
            {
              "type": "string",
              "pattern": "(<\\+.+>.*)",
              "minLength": 1
            }
          ]
        },
        "start": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            },
            {
              "type": "string",
              "pattern": "(<\\+.+>.*)",
              "minLength": 1
            }
          ]
        },
        "times": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            },
            {
              "type": "string",
              "pattern": "(<\\+.+>.*)",
              "minLength": 1
            }
          ]
        },
        "unit": {
          "type": "string",
          "enum": [
            "Percentage",
            "Count"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "oneOf": [
            {
              "required": [
                "times"
              ]
            },
            {
              "required": [
                "items"
              ]
            }
          ]
        }
      ]
    },
    "HostPathVolume": {
      "allOf": [
        {
          "$ref": "#/definitions/security/PodVolume"
        },
        {
          "type": "object",
          "required": [
            "mountPath",
            "name",
            "path"
          ],
          "properties": {
            "hostPathType": {
              "type": "string"
            },
            "mountPath": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "path": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "HostPathYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/security/ContainerVolume"
        },
        {
          "type": "object",
          "required": [
            "mountPath",
            "spec",
            "type"
          ],
          "properties": {
            "mountPath": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/security/HostPathYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "EmptyDir",
                "PersistentVolumeClaim",
                "HostPath"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "HostPathYamlSpec": {
      "type": "object",
      "required": [
        "path"
      ],
      "properties": {
        "path": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "HostedVmInfraSpec": {
      "type": "object",
      "required": [
        "platform"
      ],
      "properties": {
        "platform": {
          "$ref": "#/definitions/security/ParameterFieldPlatform"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "HostedVmInfraYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/security/Infrastructure"
        },
        {
          "type": "object",
          "required": [
            "spec",
            "type"
          ],
          "properties": {
            "spec": {
              "$ref": "#/definitions/security/HostedVmInfraSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "KubernetesDirect",
                "UseFromStage",
                "VM",
                "KubernetesHosted"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "IACMStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/security/StepSpecType"
        },
        {
          "type": "object"
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "IACMTemplateInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/security/StepSpecType"
        },
        {
          "type": "object"
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "IACMTerraformPlanInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/security/StepSpecType"
        },
        {
          "type": "object",
          "properties": {
            "env": {
              "oneOf": [
                {
                  "$ref": "#/definitions/security/ParameterFieldMapStringString"
                },
                {
                  "type": "string"
                }
              ]
            },
            "tfVars": {
              "oneOf": [
                {
                  "$ref": "#/definitions/security/ParameterFieldMapStringString"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "IgnoreFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/security/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "Ignore"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ImageDetails": {
      "type": "object",
      "properties": {
        "domainName": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "registryUrl": {
          "type": "string"
        },
        "sourceName": {
          "type": "string"
        },
        "tag": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "usernameRef": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ImageSbomSource": {
      "allOf": [
        {
          "$ref": "#/definitions/security/SbomSourceSpec"
        },
        {
          "type": "object",
          "properties": {
            "connector": {
              "oneOf": [
                {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "image": {
              "oneOf": [
                {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "Infrastructure": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "KubernetesDirect",
            "UseFromStage",
            "VM",
            "KubernetesHosted"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "InitializeStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/security/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "accountId",
            "executionElementConfig",
            "infrastructure",
            "skipGitClone"
          ],
          "properties": {
            "accountId": {
              "type": "string"
            },
            "buildJobEnvInfo": {
              "$ref": "#/definitions/security/BuildJobEnvInfo"
            },
            "ciCodebase": {
              "$ref": "#/definitions/security/CodeBase"
            },
            "executionElementConfig": {
              "$ref": "#/definitions/security/ExecutionElementConfig"
            },
            "executionSource": {
              "$ref": "#/definitions/security/ExecutionSource"
            },
            "infrastructure": {
              "$ref": "#/definitions/security/Infrastructure"
            },
            "pipelineVariables": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/security/NGVariable"
              }
            },
            "skipGitClone": {
              "type": "boolean"
            },
            "stageElementConfig": {
              "$ref": "#/definitions/security/IntegrationStageConfig"
            },
            "stageIdentifier": {
              "type": "string"
            },
            "strategyExpansionMap": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/security/StrategyExpansionData"
              }
            },
            "variables": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/security/NGVariable"
              }
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "InputSetValidator": {
      "type": "object",
      "properties": {
        "parameters": {
          "type": "string"
        },
        "validatorType": {
          "type": "string",
          "enum": [
            "ALLOWED_VALUES",
            "REGEX"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "IntegrationStageConfig": {
      "type": "object",
      "properties": {
        "caching": {
          "$ref": "#/definitions/security/Caching"
        },
        "cloneCodebase": {
          "$ref": "#/definitions/security/ParameterFieldBoolean"
        },
        "execution": {
          "$ref": "#/definitions/security/ExecutionElementConfig"
        },
        "infrastructure": {
          "$ref": "#/definitions/security/Infrastructure"
        },
        "platform": {
          "$ref": "#/definitions/security/ParameterFieldPlatform"
        },
        "runtime": {
          "$ref": "#/definitions/security/Runtime"
        },
        "serviceDependencies": {
          "$ref": "#/definitions/security/ParameterFieldListDependencyElement"
        },
        "sharedPaths": {
          "$ref": "#/definitions/security/ParameterFieldListString"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "JUnitTestReport": {
      "allOf": [
        {
          "$ref": "#/definitions/security/UnitTestReportSpec"
        },
        {
          "type": "object",
          "properties": {
            "paths": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "JfrogXrayStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/security/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "config",
            "mode",
            "target"
          ],
          "properties": {
            "advanced": {
              "$ref": "#/definitions/security/STOYamlAdvancedSettings"
            },
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/security/ParameterFieldListString"
            },
            "config": {
              "type": "string",
              "enum": [
                "default"
              ]
            },
            "imagePullPolicy": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Always",
                    "Never",
                    "IfNotPresent"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "ingestion": {
              "$ref": "#/definitions/security/STOYamlIngestion"
            },
            "mode": {
              "type": "string",
              "enum": [
                "ingestion",
                "orchestration",
                "extraction"
              ]
            },
            "outputVariables": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/security/OutputNGVariable"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "privileged": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "resources": {
              "$ref": "#/definitions/security/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "settings": {
              "oneOf": [
                {
                  "$ref": "#/definitions/security/ParameterFieldMapStringJsonNode"
                },
                {
                  "type": "string"
                }
              ]
            },
            "target": {
              "$ref": "#/definitions/security/STOYamlTarget"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "config",
        "mode",
        "target"
      ],
      "properties": {
        "advanced": {
          "$ref": "#/definitions/security/STOYamlAdvancedSettings"
        },
        "baseImageConnectorRefs": {
          "$ref": "#/definitions/security/ParameterFieldListString"
        },
        "config": {
          "type": "string",
          "enum": [
            "default"
          ]
        },
        "imagePullPolicy": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Always",
                "Never",
                "IfNotPresent"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "ingestion": {
          "$ref": "#/definitions/security/STOYamlIngestion"
        },
        "mode": {
          "type": "string",
          "enum": [
            "ingestion",
            "orchestration",
            "extraction"
          ]
        },
        "outputVariables": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/security/OutputNGVariable"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "privileged": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "resources": {
          "$ref": "#/definitions/security/ContainerResource"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "settings": {
          "oneOf": [
            {
              "$ref": "#/definitions/security/ParameterFieldMapStringJsonNode"
            },
            {
              "type": "string"
            }
          ]
        },
        "target": {
          "$ref": "#/definitions/security/STOYamlTarget"
        }
      }
    },
    "JsonNode": {
      "type": "object",
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "K8BuildJobEnvInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/security/BuildJobEnvInfo"
        },
        {
          "type": "object",
          "properties": {
            "podsSetupInfo": {
              "$ref": "#/definitions/security/PodsSetupInfo"
            },
            "stepConnectorRefs": {
              "type": "object",
              "additionalProperties": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/security/ConnectorConversionInfo"
                }
              }
            },
            "workDir": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "K8sDirectInfraYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/security/Infrastructure"
        },
        {
          "type": "object",
          "required": [
            "spec",
            "type"
          ],
          "properties": {
            "spec": {
              "$ref": "#/definitions/security/K8sDirectInfraYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "KubernetesDirect",
                "UseFromStage",
                "VM",
                "KubernetesHosted"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "K8sDirectInfraYamlSpec": {
      "type": "object",
      "required": [
        "connectorRef",
        "namespace"
      ],
      "properties": {
        "annotations": {
          "oneOf": [
            {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ]
        },
        "automountServiceAccountToken": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "connectorRef": {
          "type": "string"
        },
        "containerSecurityContext": {
          "oneOf": [
            {
              "$ref": "#/definitions/security/SecurityContext"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "harnessImageConnectorRef": {
          "type": "string"
        },
        "hostNames": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "initTimeout": {
          "type": "string"
        },
        "labels": {
          "oneOf": [
            {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ]
        },
        "namespace": {
          "type": "string",
          "minLength": 1,
          "maxLength": 2147483647
        },
        "nodeSelector": {
          "oneOf": [
            {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "os": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Linux",
                "MacOS",
                "Windows"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "priorityClassName": {
          "type": "string"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "serviceAccountName": {
          "type": "string"
        },
        "tolerations": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/security/Toleration"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "volumes": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/security/CIVolume"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "K8sHostedInfraYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/security/Infrastructure"
        },
        {
          "type": "object",
          "required": [
            "spec",
            "type"
          ],
          "properties": {
            "spec": {
              "$ref": "#/definitions/security/K8sHostedInfraYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "KubernetesDirect",
                "UseFromStage",
                "VM",
                "KubernetesHosted"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "K8sHostedInfraYamlSpec": {
      "type": "object",
      "required": [
        "identifier"
      ],
      "properties": {
        "identifier": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "Limits": {
      "type": "object",
      "properties": {
        "cpu": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "number"
            }
          ]
        },
        "memory": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ManualExecutionSource": {
      "allOf": [
        {
          "$ref": "#/definitions/security/ExecutionSource"
        },
        {
          "type": "object",
          "properties": {
            "branch": {
              "type": "string"
            },
            "commitSha": {
              "type": "string"
            },
            "prNumber": {
              "type": "string"
            },
            "tag": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ManualFailureSpecConfig": {
      "type": "object",
      "required": [
        "onTimeout",
        "timeout"
      ],
      "properties": {
        "onTimeout": {
          "$ref": "#/definitions/security/OnTimeoutConfig"
        },
        "timeout": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ManualInterventionFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/security/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": [
            "spec",
            "type"
          ],
          "properties": {
            "spec": {
              "readOnly": true,
              "$ref": "#/definitions/security/ManualFailureSpecConfig"
            },
            "type": {
              "type": "string",
              "enum": [
                "ManualIntervention"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "MarkAsFailFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/security/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "MarkAsFailure"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "MarkAsSuccessFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/security/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "MarkAsSuccess"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "MatrixConfigInterface": {
      "type": "object",
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "MendStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/security/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "config",
            "mode",
            "target"
          ],
          "properties": {
            "advanced": {
              "$ref": "#/definitions/security/STOYamlAdvancedSettings"
            },
            "auth": {
              "$ref": "#/definitions/security/STOYamlAuth"
            },
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/security/ParameterFieldListString"
            },
            "config": {
              "type": "string",
              "enum": [
                "default"
              ]
            },
            "image": {
              "$ref": "#/definitions/security/STOYamlImage"
            },
            "imagePullPolicy": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Always",
                    "Never",
                    "IfNotPresent"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "ingestion": {
              "$ref": "#/definitions/security/STOYamlIngestion"
            },
            "mode": {
              "type": "string",
              "enum": [
                "ingestion",
                "orchestration",
                "extraction"
              ]
            },
            "outputVariables": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/security/OutputNGVariable"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "privileged": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "resources": {
              "$ref": "#/definitions/security/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "settings": {
              "oneOf": [
                {
                  "$ref": "#/definitions/security/ParameterFieldMapStringJsonNode"
                },
                {
                  "type": "string"
                }
              ]
            },
            "target": {
              "$ref": "#/definitions/security/STOYamlTarget"
            },
            "tool": {
              "$ref": "#/definitions/security/STOYamlMendToolData"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "config",
        "mode",
        "target"
      ],
      "properties": {
        "advanced": {
          "$ref": "#/definitions/security/STOYamlAdvancedSettings"
        },
        "auth": {
          "$ref": "#/definitions/security/STOYamlAuth"
        },
        "baseImageConnectorRefs": {
          "$ref": "#/definitions/security/ParameterFieldListString"
        },
        "config": {
          "type": "string",
          "enum": [
            "default"
          ]
        },
        "image": {
          "$ref": "#/definitions/security/STOYamlImage"
        },
        "imagePullPolicy": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Always",
                "Never",
                "IfNotPresent"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "ingestion": {
          "$ref": "#/definitions/security/STOYamlIngestion"
        },
        "mode": {
          "type": "string",
          "enum": [
            "ingestion",
            "orchestration",
            "extraction"
          ]
        },
        "outputVariables": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/security/OutputNGVariable"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "privileged": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "resources": {
          "$ref": "#/definitions/security/ContainerResource"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "settings": {
          "oneOf": [
            {
              "$ref": "#/definitions/security/ParameterFieldMapStringJsonNode"
            },
            {
              "type": "string"
            }
          ]
        },
        "target": {
          "$ref": "#/definitions/security/STOYamlTarget"
        },
        "tool": {
          "$ref": "#/definitions/security/STOYamlMendToolData"
        }
      }
    },
    "MetasploitStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/security/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "config",
            "mode",
            "target"
          ],
          "properties": {
            "advanced": {
              "$ref": "#/definitions/security/STOYamlAdvancedSettings"
            },
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/security/ParameterFieldListString"
            },
            "config": {
              "type": "string",
              "enum": [
                "default"
              ]
            },
            "imagePullPolicy": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Always",
                    "Never",
                    "IfNotPresent"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "ingestion": {
              "$ref": "#/definitions/security/STOYamlIngestion"
            },
            "mode": {
              "type": "string",
              "enum": [
                "ingestion",
                "orchestration",
                "extraction"
              ]
            },
            "outputVariables": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/security/OutputNGVariable"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "privileged": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "resources": {
              "$ref": "#/definitions/security/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "settings": {
              "oneOf": [
                {
                  "$ref": "#/definitions/security/ParameterFieldMapStringJsonNode"
                },
                {
                  "type": "string"
                }
              ]
            },
            "target": {
              "$ref": "#/definitions/security/STOYamlTarget"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "config",
        "mode",
        "target"
      ],
      "properties": {
        "advanced": {
          "$ref": "#/definitions/security/STOYamlAdvancedSettings"
        },
        "baseImageConnectorRefs": {
          "$ref": "#/definitions/security/ParameterFieldListString"
        },
        "config": {
          "type": "string",
          "enum": [
            "default"
          ]
        },
        "imagePullPolicy": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Always",
                "Never",
                "IfNotPresent"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "ingestion": {
          "$ref": "#/definitions/security/STOYamlIngestion"
        },
        "mode": {
          "type": "string",
          "enum": [
            "ingestion",
            "orchestration",
            "extraction"
          ]
        },
        "outputVariables": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/security/OutputNGVariable"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "privileged": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "resources": {
          "$ref": "#/definitions/security/ContainerResource"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "settings": {
          "oneOf": [
            {
              "$ref": "#/definitions/security/ParameterFieldMapStringJsonNode"
            },
            {
              "type": "string"
            }
          ]
        },
        "target": {
          "$ref": "#/definitions/security/STOYamlTarget"
        }
      }
    },
    "NGVariable": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "description": {
          "type": "string"
        },
        "metadata": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "required": {
          "type": "boolean"
        },
        "type": {
          "type": "string",
          "enum": [
            "String",
            "Number",
            "Secret"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "NessusStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/security/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "config",
            "mode",
            "target"
          ],
          "properties": {
            "advanced": {
              "$ref": "#/definitions/security/STOYamlAdvancedSettings"
            },
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/security/ParameterFieldListString"
            },
            "config": {
              "type": "string",
              "enum": [
                "default"
              ]
            },
            "imagePullPolicy": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Always",
                    "Never",
                    "IfNotPresent"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "ingestion": {
              "$ref": "#/definitions/security/STOYamlIngestion"
            },
            "mode": {
              "type": "string",
              "enum": [
                "ingestion",
                "orchestration",
                "extraction"
              ]
            },
            "outputVariables": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/security/OutputNGVariable"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "privileged": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "resources": {
              "$ref": "#/definitions/security/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "settings": {
              "oneOf": [
                {
                  "$ref": "#/definitions/security/ParameterFieldMapStringJsonNode"
                },
                {
                  "type": "string"
                }
              ]
            },
            "target": {
              "$ref": "#/definitions/security/STOYamlTarget"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "config",
        "mode",
        "target"
      ],
      "properties": {
        "advanced": {
          "$ref": "#/definitions/security/STOYamlAdvancedSettings"
        },
        "baseImageConnectorRefs": {
          "$ref": "#/definitions/security/ParameterFieldListString"
        },
        "config": {
          "type": "string",
          "enum": [
            "default"
          ]
        },
        "imagePullPolicy": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Always",
                "Never",
                "IfNotPresent"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "ingestion": {
          "$ref": "#/definitions/security/STOYamlIngestion"
        },
        "mode": {
          "type": "string",
          "enum": [
            "ingestion",
            "orchestration",
            "extraction"
          ]
        },
        "outputVariables": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/security/OutputNGVariable"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "privileged": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "resources": {
          "$ref": "#/definitions/security/ContainerResource"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "settings": {
          "oneOf": [
            {
              "$ref": "#/definitions/security/ParameterFieldMapStringJsonNode"
            },
            {
              "type": "string"
            }
          ]
        },
        "target": {
          "$ref": "#/definitions/security/STOYamlTarget"
        }
      }
    },
    "NexusIQStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/security/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "config",
            "mode",
            "target"
          ],
          "properties": {
            "advanced": {
              "$ref": "#/definitions/security/STOYamlAdvancedSettings"
            },
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/security/ParameterFieldListString"
            },
            "config": {
              "type": "string",
              "enum": [
                "default"
              ]
            },
            "imagePullPolicy": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Always",
                    "Never",
                    "IfNotPresent"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "ingestion": {
              "$ref": "#/definitions/security/STOYamlIngestion"
            },
            "mode": {
              "type": "string",
              "enum": [
                "ingestion",
                "orchestration",
                "extraction"
              ]
            },
            "outputVariables": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/security/OutputNGVariable"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "privileged": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "resources": {
              "$ref": "#/definitions/security/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "settings": {
              "oneOf": [
                {
                  "$ref": "#/definitions/security/ParameterFieldMapStringJsonNode"
                },
                {
                  "type": "string"
                }
              ]
            },
            "target": {
              "$ref": "#/definitions/security/STOYamlTarget"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "config",
        "mode",
        "target"
      ],
      "properties": {
        "advanced": {
          "$ref": "#/definitions/security/STOYamlAdvancedSettings"
        },
        "baseImageConnectorRefs": {
          "$ref": "#/definitions/security/ParameterFieldListString"
        },
        "config": {
          "type": "string",
          "enum": [
            "default"
          ]
        },
        "imagePullPolicy": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Always",
                "Never",
                "IfNotPresent"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "ingestion": {
          "$ref": "#/definitions/security/STOYamlIngestion"
        },
        "mode": {
          "type": "string",
          "enum": [
            "ingestion",
            "orchestration",
            "extraction"
          ]
        },
        "outputVariables": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/security/OutputNGVariable"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "privileged": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "resources": {
          "$ref": "#/definitions/security/ContainerResource"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "settings": {
          "oneOf": [
            {
              "$ref": "#/definitions/security/ParameterFieldMapStringJsonNode"
            },
            {
              "type": "string"
            }
          ]
        },
        "target": {
          "$ref": "#/definitions/security/STOYamlTarget"
        }
      }
    },
    "NiktoStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/security/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "config",
            "mode",
            "target"
          ],
          "properties": {
            "advanced": {
              "$ref": "#/definitions/security/STOYamlAdvancedSettings"
            },
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/security/ParameterFieldListString"
            },
            "config": {
              "type": "string",
              "enum": [
                "default"
              ]
            },
            "imagePullPolicy": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Always",
                    "Never",
                    "IfNotPresent"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "ingestion": {
              "$ref": "#/definitions/security/STOYamlIngestion"
            },
            "mode": {
              "type": "string",
              "enum": [
                "ingestion",
                "orchestration",
                "extraction"
              ]
            },
            "outputVariables": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/security/OutputNGVariable"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "privileged": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "resources": {
              "$ref": "#/definitions/security/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "settings": {
              "oneOf": [
                {
                  "$ref": "#/definitions/security/ParameterFieldMapStringJsonNode"
                },
                {
                  "type": "string"
                }
              ]
            },
            "target": {
              "$ref": "#/definitions/security/STOYamlTarget"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "config",
        "mode",
        "target"
      ],
      "properties": {
        "advanced": {
          "$ref": "#/definitions/security/STOYamlAdvancedSettings"
        },
        "baseImageConnectorRefs": {
          "$ref": "#/definitions/security/ParameterFieldListString"
        },
        "config": {
          "type": "string",
          "enum": [
            "default"
          ]
        },
        "imagePullPolicy": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Always",
                "Never",
                "IfNotPresent"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "ingestion": {
          "$ref": "#/definitions/security/STOYamlIngestion"
        },
        "mode": {
          "type": "string",
          "enum": [
            "ingestion",
            "orchestration",
            "extraction"
          ]
        },
        "outputVariables": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/security/OutputNGVariable"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "privileged": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "resources": {
          "$ref": "#/definitions/security/ContainerResource"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "settings": {
          "oneOf": [
            {
              "$ref": "#/definitions/security/ParameterFieldMapStringJsonNode"
            },
            {
              "type": "string"
            }
          ]
        },
        "target": {
          "$ref": "#/definitions/security/STOYamlTarget"
        }
      }
    },
    "NmapStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/security/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "config",
            "mode",
            "target"
          ],
          "properties": {
            "advanced": {
              "$ref": "#/definitions/security/STOYamlAdvancedSettings"
            },
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/security/ParameterFieldListString"
            },
            "config": {
              "type": "string",
              "enum": [
                "default"
              ]
            },
            "imagePullPolicy": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Always",
                    "Never",
                    "IfNotPresent"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "ingestion": {
              "$ref": "#/definitions/security/STOYamlIngestion"
            },
            "mode": {
              "type": "string",
              "enum": [
                "ingestion",
                "orchestration",
                "extraction"
              ]
            },
            "outputVariables": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/security/OutputNGVariable"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "privileged": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "resources": {
              "$ref": "#/definitions/security/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "settings": {
              "oneOf": [
                {
                  "$ref": "#/definitions/security/ParameterFieldMapStringJsonNode"
                },
                {
                  "type": "string"
                }
              ]
            },
            "target": {
              "$ref": "#/definitions/security/STOYamlTarget"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "config",
        "mode",
        "target"
      ],
      "properties": {
        "advanced": {
          "$ref": "#/definitions/security/STOYamlAdvancedSettings"
        },
        "baseImageConnectorRefs": {
          "$ref": "#/definitions/security/ParameterFieldListString"
        },
        "config": {
          "type": "string",
          "enum": [
            "default"
          ]
        },
        "imagePullPolicy": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Always",
                "Never",
                "IfNotPresent"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "ingestion": {
          "$ref": "#/definitions/security/STOYamlIngestion"
        },
        "mode": {
          "type": "string",
          "enum": [
            "ingestion",
            "orchestration",
            "extraction"
          ]
        },
        "outputVariables": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/security/OutputNGVariable"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "privileged": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "resources": {
          "$ref": "#/definitions/security/ContainerResource"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "settings": {
          "oneOf": [
            {
              "$ref": "#/definitions/security/ParameterFieldMapStringJsonNode"
            },
            {
              "type": "string"
            }
          ]
        },
        "target": {
          "$ref": "#/definitions/security/STOYamlTarget"
        }
      }
    },
    "NumberNGVariable": {
      "allOf": [
        {
          "$ref": "#/definitions/security/NGVariable"
        },
        {
          "type": "object",
          "required": [
            "value"
          ],
          "properties": {
            "default": {
              "type": "number",
              "format": "double"
            },
            "name": {
              "type": "string",
              "pattern": "^[a-zA-Z_][0-9a-zA-Z_\\.$]{0,127}$"
            },
            "type": {
              "type": "string",
              "enum": [
                "Number"
              ]
            },
            "value": {
              "oneOf": [
                {
                  "type": "number",
                  "format": "double"
                },
                {
                  "type": "string",
                  "pattern": "((^[+-]?[0-9]*\\.?[0-9]+$)|(<\\+.+>.*))"
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "OnFailureConfig": {
      "type": "object",
      "required": [
        "action",
        "errors"
      ],
      "properties": {
        "action": {
          "$ref": "#/definitions/security/FailureStrategyActionConfig"
        },
        "errors": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Unknown",
              "AllErrors",
              "Authentication",
              "Connectivity",
              "Timeout",
              "Authorization",
              "Verification",
              "DelegateProvisioning",
              "PolicyEvaluationFailure",
              "InputTimeoutError",
              "ApprovalRejection",
              "DelegateRestart"
            ]
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "OnRetryFailureConfig": {
      "type": "object",
      "properties": {
        "action": {
          "$ref": "#/definitions/security/FailureStrategyActionConfig"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "OnTimeoutConfig": {
      "type": "object",
      "properties": {
        "action": {
          "$ref": "#/definitions/security/FailureStrategyActionConfig"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "OpenvasStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/security/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "config",
            "mode",
            "target"
          ],
          "properties": {
            "advanced": {
              "$ref": "#/definitions/security/STOYamlAdvancedSettings"
            },
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/security/ParameterFieldListString"
            },
            "config": {
              "type": "string",
              "enum": [
                "default"
              ]
            },
            "imagePullPolicy": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Always",
                    "Never",
                    "IfNotPresent"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "ingestion": {
              "$ref": "#/definitions/security/STOYamlIngestion"
            },
            "mode": {
              "type": "string",
              "enum": [
                "ingestion",
                "orchestration",
                "extraction"
              ]
            },
            "outputVariables": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/security/OutputNGVariable"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "privileged": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "resources": {
              "$ref": "#/definitions/security/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "settings": {
              "oneOf": [
                {
                  "$ref": "#/definitions/security/ParameterFieldMapStringJsonNode"
                },
                {
                  "type": "string"
                }
              ]
            },
            "target": {
              "$ref": "#/definitions/security/STOYamlTarget"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "config",
        "mode",
        "target"
      ],
      "properties": {
        "advanced": {
          "$ref": "#/definitions/security/STOYamlAdvancedSettings"
        },
        "baseImageConnectorRefs": {
          "$ref": "#/definitions/security/ParameterFieldListString"
        },
        "config": {
          "type": "string",
          "enum": [
            "default"
          ]
        },
        "imagePullPolicy": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Always",
                "Never",
                "IfNotPresent"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "ingestion": {
          "$ref": "#/definitions/security/STOYamlIngestion"
        },
        "mode": {
          "type": "string",
          "enum": [
            "ingestion",
            "orchestration",
            "extraction"
          ]
        },
        "outputVariables": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/security/OutputNGVariable"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "privileged": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "resources": {
          "$ref": "#/definitions/security/ContainerResource"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "settings": {
          "oneOf": [
            {
              "$ref": "#/definitions/security/ParameterFieldMapStringJsonNode"
            },
            {
              "type": "string"
            }
          ]
        },
        "target": {
          "$ref": "#/definitions/security/STOYamlTarget"
        }
      }
    },
    "OutputNGVariable": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "OwaspStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/security/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "config",
            "mode",
            "target"
          ],
          "properties": {
            "advanced": {
              "$ref": "#/definitions/security/STOYamlAdvancedSettings"
            },
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/security/ParameterFieldListString"
            },
            "config": {
              "type": "string",
              "enum": [
                "default"
              ]
            },
            "imagePullPolicy": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Always",
                    "Never",
                    "IfNotPresent"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "ingestion": {
              "$ref": "#/definitions/security/STOYamlIngestion"
            },
            "mode": {
              "type": "string",
              "enum": [
                "ingestion",
                "orchestration",
                "extraction"
              ]
            },
            "outputVariables": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/security/OutputNGVariable"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "privileged": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "resources": {
              "$ref": "#/definitions/security/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "settings": {
              "oneOf": [
                {
                  "$ref": "#/definitions/security/ParameterFieldMapStringJsonNode"
                },
                {
                  "type": "string"
                }
              ]
            },
            "target": {
              "$ref": "#/definitions/security/STOYamlTarget"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "config",
        "mode",
        "target"
      ],
      "properties": {
        "advanced": {
          "$ref": "#/definitions/security/STOYamlAdvancedSettings"
        },
        "baseImageConnectorRefs": {
          "$ref": "#/definitions/security/ParameterFieldListString"
        },
        "config": {
          "type": "string",
          "enum": [
            "default"
          ]
        },
        "imagePullPolicy": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Always",
                "Never",
                "IfNotPresent"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "ingestion": {
          "$ref": "#/definitions/security/STOYamlIngestion"
        },
        "mode": {
          "type": "string",
          "enum": [
            "ingestion",
            "orchestration",
            "extraction"
          ]
        },
        "outputVariables": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/security/OutputNGVariable"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "privileged": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "resources": {
          "$ref": "#/definitions/security/ContainerResource"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "settings": {
          "oneOf": [
            {
              "$ref": "#/definitions/security/ParameterFieldMapStringJsonNode"
            },
            {
              "type": "string"
            }
          ]
        },
        "target": {
          "$ref": "#/definitions/security/STOYamlTarget"
        }
      }
    },
    "PRBuildSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/security/BuildSpec"
        },
        {
          "type": "object",
          "required": [
            "number"
          ],
          "properties": {
            "number": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PRWebhookEvent": {
      "allOf": [
        {
          "$ref": "#/definitions/security/WebhookEvent"
        },
        {
          "type": "object",
          "properties": {
            "baseAttributes": {
              "$ref": "#/definitions/security/WebhookBaseAttributes"
            },
            "closed": {
              "type": "boolean"
            },
            "commitDetailsList": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/security/CommitDetails"
              }
            },
            "merged": {
              "type": "boolean"
            },
            "pullRequestBody": {
              "type": "string"
            },
            "pullRequestId": {
              "type": "integer",
              "format": "int64"
            },
            "pullRequestLink": {
              "type": "string"
            },
            "repository": {
              "$ref": "#/definitions/security/Repository"
            },
            "sourceBranch": {
              "type": "string"
            },
            "targetBranch": {
              "type": "string"
            },
            "title": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PVCParams": {
      "type": "object",
      "properties": {
        "claimName": {
          "type": "string"
        },
        "present": {
          "type": "boolean"
        },
        "sizeMib": {
          "type": "integer",
          "format": "int32"
        },
        "storageClass": {
          "type": "string"
        },
        "volumeName": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PVCVolume": {
      "allOf": [
        {
          "$ref": "#/definitions/security/PodVolume"
        },
        {
          "type": "object",
          "required": [
            "claimName",
            "mountPath",
            "name"
          ],
          "properties": {
            "claimName": {
              "type": "string"
            },
            "mountPath": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "readOnly": {
              "type": "boolean"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ParallelStepElementConfig": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/security/ExecutionWrapperConfig"
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ParameterField": {
      "type": "object",
      "properties": {
        "defaultValue": {
          "type": "object"
        },
        "executionInput": {
          "type": "boolean"
        },
        "expression": {
          "type": "boolean"
        },
        "expressionValue": {
          "type": "string"
        },
        "inputSetValidator": {
          "$ref": "#/definitions/security/InputSetValidator"
        },
        "jsonResponseField": {
          "type": "boolean"
        },
        "responseField": {
          "type": "string"
        },
        "typeString": {
          "type": "boolean"
        },
        "value": {
          "type": "object"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ParameterFieldBoolean": {
      "type": "object",
      "properties": {
        "defaultValue": {
          "type": "boolean"
        },
        "executionInput": {
          "type": "boolean"
        },
        "expression": {
          "type": "boolean"
        },
        "expressionValue": {
          "type": "string"
        },
        "inputSetValidator": {
          "$ref": "#/definitions/security/InputSetValidator"
        },
        "jsonResponseField": {
          "type": "boolean"
        },
        "responseField": {
          "type": "string"
        },
        "typeString": {
          "type": "boolean"
        },
        "value": {
          "type": "boolean"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ParameterFieldListDependencyElement": {
      "type": "object",
      "properties": {
        "defaultValue": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/security/DependencyElement"
          }
        },
        "executionInput": {
          "type": "boolean"
        },
        "expression": {
          "type": "boolean"
        },
        "expressionValue": {
          "type": "string"
        },
        "inputSetValidator": {
          "$ref": "#/definitions/security/InputSetValidator"
        },
        "jsonResponseField": {
          "type": "boolean"
        },
        "responseField": {
          "type": "string"
        },
        "typeString": {
          "type": "boolean"
        },
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/security/DependencyElement"
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ParameterFieldListString": {
      "type": "object",
      "properties": {
        "defaultValue": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "executionInput": {
          "type": "boolean"
        },
        "expression": {
          "type": "boolean"
        },
        "expressionValue": {
          "type": "string"
        },
        "inputSetValidator": {
          "$ref": "#/definitions/security/InputSetValidator"
        },
        "jsonResponseField": {
          "type": "boolean"
        },
        "responseField": {
          "type": "string"
        },
        "typeString": {
          "type": "boolean"
        },
        "value": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ParameterFieldMapStringJsonNode": {
      "type": "object",
      "properties": {
        "defaultValue": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/security/JsonNode"
          }
        },
        "executionInput": {
          "type": "boolean"
        },
        "expression": {
          "type": "boolean"
        },
        "expressionValue": {
          "type": "string"
        },
        "inputSetValidator": {
          "$ref": "#/definitions/security/InputSetValidator"
        },
        "jsonResponseField": {
          "type": "boolean"
        },
        "responseField": {
          "type": "string"
        },
        "typeString": {
          "type": "boolean"
        },
        "value": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/security/JsonNode"
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ParameterFieldMapStringString": {
      "type": "object",
      "properties": {
        "defaultValue": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "executionInput": {
          "type": "boolean"
        },
        "expression": {
          "type": "boolean"
        },
        "expressionValue": {
          "type": "string"
        },
        "inputSetValidator": {
          "$ref": "#/definitions/security/InputSetValidator"
        },
        "jsonResponseField": {
          "type": "boolean"
        },
        "responseField": {
          "type": "string"
        },
        "typeString": {
          "type": "boolean"
        },
        "value": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ParameterFieldMatrixConfigInterface": {
      "type": "object",
      "properties": {
        "defaultValue": {
          "$ref": "#/definitions/security/MatrixConfigInterface"
        },
        "executionInput": {
          "type": "boolean"
        },
        "expression": {
          "type": "boolean"
        },
        "expressionValue": {
          "type": "string"
        },
        "inputSetValidator": {
          "$ref": "#/definitions/security/InputSetValidator"
        },
        "jsonResponseField": {
          "type": "boolean"
        },
        "responseField": {
          "type": "string"
        },
        "typeString": {
          "type": "boolean"
        },
        "value": {
          "$ref": "#/definitions/security/MatrixConfigInterface"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ParameterFieldPlatform": {
      "type": "object",
      "properties": {
        "defaultValue": {
          "$ref": "#/definitions/security/Platform"
        },
        "executionInput": {
          "type": "boolean"
        },
        "expression": {
          "type": "boolean"
        },
        "expressionValue": {
          "type": "string"
        },
        "inputSetValidator": {
          "$ref": "#/definitions/security/InputSetValidator"
        },
        "jsonResponseField": {
          "type": "boolean"
        },
        "responseField": {
          "type": "string"
        },
        "typeString": {
          "type": "boolean"
        },
        "value": {
          "$ref": "#/definitions/security/Platform"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ParameterFieldTILanguage": {
      "type": "object",
      "properties": {
        "defaultValue": {
          "type": "string",
          "enum": [
            "Java",
            "Kotlin",
            "Scala",
            "Csharp"
          ]
        },
        "executionInput": {
          "type": "boolean"
        },
        "expression": {
          "type": "boolean"
        },
        "expressionValue": {
          "type": "string"
        },
        "inputSetValidator": {
          "$ref": "#/definitions/security/InputSetValidator"
        },
        "jsonResponseField": {
          "type": "boolean"
        },
        "responseField": {
          "type": "string"
        },
        "typeString": {
          "type": "boolean"
        },
        "value": {
          "type": "string",
          "enum": [
            "Java",
            "Kotlin",
            "Scala",
            "Csharp"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PersistentVolumeClaimYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/security/ContainerVolume"
        },
        {
          "type": "object",
          "required": [
            "mountPath",
            "spec",
            "type"
          ],
          "properties": {
            "mountPath": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/security/PersistentVolumeClaimYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "EmptyDir",
                "PersistentVolumeClaim",
                "HostPath"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PersistentVolumeClaimYamlSpec": {
      "type": "object",
      "required": [
        "claimName"
      ],
      "properties": {
        "claimName": {
          "type": "string"
        },
        "readOnly": {
          "type": "boolean"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PipelineRollbackFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/security/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "PipelineRollback"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "Platform": {
      "type": "object",
      "properties": {
        "arch": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Amd64",
                "Arm64"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "os": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Linux",
                "MacOS",
                "Windows"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PluginStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/security/StepSpecType"
        },
        {
          "type": "object",
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "entrypoint": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "image": {
              "type": "string"
            },
            "imagePullPolicy": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Always",
                    "Never",
                    "IfNotPresent"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "privileged": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "reports": {
              "oneOf": [
                {
                  "$ref": "#/definitions/security/UnitTestReport"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "resources": {
              "$ref": "#/definitions/security/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "settings": {
              "oneOf": [
                {
                  "$ref": "#/definitions/security/ParameterFieldMapStringJsonNode"
                },
                {
                  "type": "string"
                }
              ]
            },
            "uses": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PluginStepInfoV1": {
      "allOf": [
        {
          "$ref": "#/definitions/security/StepSpecType"
        },
        {
          "type": "object",
          "properties": {
            "envs": {
              "oneOf": [
                {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "image": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "privileged": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "pull": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "always",
                    "never",
                    "if-not-exists"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "resources": {
              "$ref": "#/definitions/security/ContainerResource"
            },
            "user": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "uses": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "with": {
              "oneOf": [
                {
                  "$ref": "#/definitions/security/ParameterFieldMapStringJsonNode"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PodSetupInfo": {
      "type": "object",
      "required": [
        "stageCpuRequest",
        "stageMemoryRequest",
        "volumeToMountPath"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "podSetupParams": {
          "$ref": "#/definitions/security/PodSetupParams"
        },
        "pvcParamsList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/security/PVCParams"
          }
        },
        "serviceGrpcPortList": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "serviceIdList": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "stageCpuRequest": {
          "type": "integer",
          "format": "int32"
        },
        "stageMemoryRequest": {
          "type": "integer",
          "format": "int32"
        },
        "volumeToMountPath": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "volumes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/security/PodVolume"
          }
        },
        "workDirPath": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PodSetupParams": {
      "type": "object",
      "properties": {
        "containerDefinitionInfos": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/security/ContainerDefinitionInfo"
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PodVolume": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "EmptyDir",
            "PersistentVolumeClaim",
            "HostPath"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PodsSetupInfo": {
      "type": "object",
      "properties": {
        "podSetupInfoList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/security/PodSetupInfo"
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PolicyConfig": {
      "type": "object",
      "required": [
        "policySets"
      ],
      "properties": {
        "policySets": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PrismaCloudStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/security/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "config",
            "mode",
            "target"
          ],
          "properties": {
            "advanced": {
              "$ref": "#/definitions/security/STOYamlAdvancedSettings"
            },
            "auth": {
              "$ref": "#/definitions/security/STOYamlAuth"
            },
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/security/ParameterFieldListString"
            },
            "config": {
              "type": "string",
              "enum": [
                "default"
              ]
            },
            "image": {
              "$ref": "#/definitions/security/STOYamlImage"
            },
            "imagePullPolicy": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Always",
                    "Never",
                    "IfNotPresent"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "ingestion": {
              "$ref": "#/definitions/security/STOYamlIngestion"
            },
            "mode": {
              "type": "string",
              "enum": [
                "ingestion",
                "orchestration",
                "extraction"
              ]
            },
            "outputVariables": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/security/OutputNGVariable"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "privileged": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "resources": {
              "$ref": "#/definitions/security/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "settings": {
              "oneOf": [
                {
                  "$ref": "#/definitions/security/ParameterFieldMapStringJsonNode"
                },
                {
                  "type": "string"
                }
              ]
            },
            "target": {
              "$ref": "#/definitions/security/STOYamlTarget"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "config",
        "mode",
        "target"
      ],
      "properties": {
        "advanced": {
          "$ref": "#/definitions/security/STOYamlAdvancedSettings"
        },
        "auth": {
          "$ref": "#/definitions/security/STOYamlAuth"
        },
        "baseImageConnectorRefs": {
          "$ref": "#/definitions/security/ParameterFieldListString"
        },
        "config": {
          "type": "string",
          "enum": [
            "default"
          ]
        },
        "image": {
          "$ref": "#/definitions/security/STOYamlImage"
        },
        "imagePullPolicy": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Always",
                "Never",
                "IfNotPresent"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "ingestion": {
          "$ref": "#/definitions/security/STOYamlIngestion"
        },
        "mode": {
          "type": "string",
          "enum": [
            "ingestion",
            "orchestration",
            "extraction"
          ]
        },
        "outputVariables": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/security/OutputNGVariable"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "privileged": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "resources": {
          "$ref": "#/definitions/security/ContainerResource"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "settings": {
          "oneOf": [
            {
              "$ref": "#/definitions/security/ParameterFieldMapStringJsonNode"
            },
            {
              "type": "string"
            }
          ]
        },
        "target": {
          "$ref": "#/definitions/security/STOYamlTarget"
        }
      }
    },
    "ProceedWithDefaultValuesFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/security/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "ProceedWithDefaultValues"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ProwlerStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/security/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "config",
            "mode",
            "target"
          ],
          "properties": {
            "advanced": {
              "$ref": "#/definitions/security/STOYamlAdvancedSettings"
            },
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/security/ParameterFieldListString"
            },
            "config": {
              "type": "string",
              "enum": [
                "default"
              ]
            },
            "imagePullPolicy": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Always",
                    "Never",
                    "IfNotPresent"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "ingestion": {
              "$ref": "#/definitions/security/STOYamlIngestion"
            },
            "mode": {
              "type": "string",
              "enum": [
                "ingestion",
                "orchestration",
                "extraction"
              ]
            },
            "outputVariables": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/security/OutputNGVariable"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "privileged": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "resources": {
              "$ref": "#/definitions/security/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "settings": {
              "oneOf": [
                {
                  "$ref": "#/definitions/security/ParameterFieldMapStringJsonNode"
                },
                {
                  "type": "string"
                }
              ]
            },
            "target": {
              "$ref": "#/definitions/security/STOYamlTarget"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "config",
        "mode",
        "target"
      ],
      "properties": {
        "advanced": {
          "$ref": "#/definitions/security/STOYamlAdvancedSettings"
        },
        "baseImageConnectorRefs": {
          "$ref": "#/definitions/security/ParameterFieldListString"
        },
        "config": {
          "type": "string",
          "enum": [
            "default"
          ]
        },
        "imagePullPolicy": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Always",
                "Never",
                "IfNotPresent"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "ingestion": {
          "$ref": "#/definitions/security/STOYamlIngestion"
        },
        "mode": {
          "type": "string",
          "enum": [
            "ingestion",
            "orchestration",
            "extraction"
          ]
        },
        "outputVariables": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/security/OutputNGVariable"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "privileged": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "resources": {
          "$ref": "#/definitions/security/ContainerResource"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "settings": {
          "oneOf": [
            {
              "$ref": "#/definitions/security/ParameterFieldMapStringJsonNode"
            },
            {
              "type": "string"
            }
          ]
        },
        "target": {
          "$ref": "#/definitions/security/STOYamlTarget"
        }
      }
    },
    "QualysStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/security/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "config",
            "mode",
            "target"
          ],
          "properties": {
            "advanced": {
              "$ref": "#/definitions/security/STOYamlAdvancedSettings"
            },
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/security/ParameterFieldListString"
            },
            "config": {
              "type": "string",
              "enum": [
                "default"
              ]
            },
            "imagePullPolicy": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Always",
                    "Never",
                    "IfNotPresent"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "ingestion": {
              "$ref": "#/definitions/security/STOYamlIngestion"
            },
            "mode": {
              "type": "string",
              "enum": [
                "ingestion",
                "orchestration",
                "extraction"
              ]
            },
            "outputVariables": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/security/OutputNGVariable"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "privileged": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "resources": {
              "$ref": "#/definitions/security/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "settings": {
              "oneOf": [
                {
                  "$ref": "#/definitions/security/ParameterFieldMapStringJsonNode"
                },
                {
                  "type": "string"
                }
              ]
            },
            "target": {
              "$ref": "#/definitions/security/STOYamlTarget"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "config",
        "mode",
        "target"
      ],
      "properties": {
        "advanced": {
          "$ref": "#/definitions/security/STOYamlAdvancedSettings"
        },
        "baseImageConnectorRefs": {
          "$ref": "#/definitions/security/ParameterFieldListString"
        },
        "config": {
          "type": "string",
          "enum": [
            "default"
          ]
        },
        "imagePullPolicy": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Always",
                "Never",
                "IfNotPresent"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "ingestion": {
          "$ref": "#/definitions/security/STOYamlIngestion"
        },
        "mode": {
          "type": "string",
          "enum": [
            "ingestion",
            "orchestration",
            "extraction"
          ]
        },
        "outputVariables": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/security/OutputNGVariable"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "privileged": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "resources": {
          "$ref": "#/definitions/security/ContainerResource"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "settings": {
          "oneOf": [
            {
              "$ref": "#/definitions/security/ParameterFieldMapStringJsonNode"
            },
            {
              "type": "string"
            }
          ]
        },
        "target": {
          "$ref": "#/definitions/security/STOYamlTarget"
        }
      }
    },
    "ReapsawStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/security/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "config",
            "mode",
            "target"
          ],
          "properties": {
            "advanced": {
              "$ref": "#/definitions/security/STOYamlAdvancedSettings"
            },
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/security/ParameterFieldListString"
            },
            "config": {
              "type": "string",
              "enum": [
                "default"
              ]
            },
            "imagePullPolicy": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Always",
                    "Never",
                    "IfNotPresent"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "ingestion": {
              "$ref": "#/definitions/security/STOYamlIngestion"
            },
            "mode": {
              "type": "string",
              "enum": [
                "ingestion",
                "orchestration",
                "extraction"
              ]
            },
            "outputVariables": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/security/OutputNGVariable"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "privileged": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "resources": {
              "$ref": "#/definitions/security/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "settings": {
              "oneOf": [
                {
                  "$ref": "#/definitions/security/ParameterFieldMapStringJsonNode"
                },
                {
                  "type": "string"
                }
              ]
            },
            "target": {
              "$ref": "#/definitions/security/STOYamlTarget"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "config",
        "mode",
        "target"
      ],
      "properties": {
        "advanced": {
          "$ref": "#/definitions/security/STOYamlAdvancedSettings"
        },
        "baseImageConnectorRefs": {
          "$ref": "#/definitions/security/ParameterFieldListString"
        },
        "config": {
          "type": "string",
          "enum": [
            "default"
          ]
        },
        "imagePullPolicy": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Always",
                "Never",
                "IfNotPresent"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "ingestion": {
          "$ref": "#/definitions/security/STOYamlIngestion"
        },
        "mode": {
          "type": "string",
          "enum": [
            "ingestion",
            "orchestration",
            "extraction"
          ]
        },
        "outputVariables": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/security/OutputNGVariable"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "privileged": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "resources": {
          "$ref": "#/definitions/security/ContainerResource"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "settings": {
          "oneOf": [
            {
              "$ref": "#/definitions/security/ParameterFieldMapStringJsonNode"
            },
            {
              "type": "string"
            }
          ]
        },
        "target": {
          "$ref": "#/definitions/security/STOYamlTarget"
        }
      }
    },
    "Repository": {
      "type": "object",
      "properties": {
        "branch": {
          "type": "string"
        },
        "httpURL": {
          "type": "string"
        },
        "link": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "private": {
          "type": "boolean"
        },
        "slug": {
          "type": "string"
        },
        "sshURL": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "RestoreCacheGCSStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/security/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "bucket",
            "connectorRef",
            "key"
          ],
          "properties": {
            "archiveFormat": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Tar",
                    "Gzip"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/security/ParameterFieldListString"
            },
            "bucket": {
              "type": "string"
            },
            "connectorRef": {
              "type": "string"
            },
            "failIfKeyNotFound": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            },
            "key": {
              "type": "string"
            },
            "resources": {
              "$ref": "#/definitions/security/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "RestoreCacheS3StepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/security/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "bucket",
            "connectorRef",
            "key"
          ],
          "properties": {
            "archiveFormat": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Tar",
                    "Gzip"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/security/ParameterFieldListString"
            },
            "bucket": {
              "type": "string"
            },
            "connectorRef": {
              "type": "string"
            },
            "endpoint": {
              "type": "string"
            },
            "failIfKeyNotFound": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            },
            "key": {
              "type": "string"
            },
            "pathStyle": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            },
            "region": {
              "type": "string"
            },
            "resources": {
              "$ref": "#/definitions/security/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "RetryFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/security/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": [
            "spec",
            "type"
          ],
          "properties": {
            "spec": {
              "readOnly": true,
              "$ref": "#/definitions/security/RetryFailureSpecConfig"
            },
            "type": {
              "type": "string",
              "enum": [
                "Retry"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "RetryFailureSpecConfig": {
      "type": "object",
      "required": [
        "onRetryFailure",
        "retryCount",
        "retryIntervals"
      ],
      "properties": {
        "onRetryFailure": {
          "$ref": "#/definitions/security/OnRetryFailureConfig"
        },
        "retryCount": {
          "type": "integer",
          "format": "int32"
        },
        "retryIntervals": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "maxItems": 2147483647,
          "minItems": 1
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "RunStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/security/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "command"
          ],
          "properties": {
            "command": {
              "type": "string"
            },
            "connectorRef": {
              "type": "string"
            },
            "envVariables": {
              "oneOf": [
                {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "image": {
              "type": "string"
            },
            "imagePullPolicy": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Always",
                    "Never",
                    "IfNotPresent"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "outputVariables": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/security/OutputNGVariable"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "privileged": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "reports": {
              "oneOf": [
                {
                  "$ref": "#/definitions/security/UnitTestReport"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "resources": {
              "$ref": "#/definitions/security/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "shell": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Sh",
                    "Bash",
                    "Powershell",
                    "Pwsh",
                    "Python"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "command"
      ],
      "properties": {
        "command": {
          "type": "string"
        },
        "connectorRef": {
          "type": "string"
        },
        "envVariables": {
          "oneOf": [
            {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ]
        },
        "image": {
          "type": "string"
        },
        "imagePullPolicy": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Always",
                "Never",
                "IfNotPresent"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "outputVariables": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/security/OutputNGVariable"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "privileged": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "reports": {
          "oneOf": [
            {
              "$ref": "#/definitions/security/UnitTestReport"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "resources": {
          "$ref": "#/definitions/security/ContainerResource"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "shell": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Sh",
                "Bash",
                "Powershell",
                "Pwsh",
                "Python"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      }
    },
    "RunTestsStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/security/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "args",
            "buildTool",
            "language"
          ],
          "properties": {
            "args": {
              "type": "string"
            },
            "buildEnvironment": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Core",
                    "Framework"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "buildTool": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Maven",
                    "Bazel",
                    "Gradle",
                    "Dotnet",
                    "Nunitconsole",
                    "SBT"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "connectorRef": {
              "type": "string"
            },
            "enableTestSplitting": {
              "type": "boolean"
            },
            "envVariables": {
              "oneOf": [
                {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "frameworkVersion": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "5.0",
                    "6.0"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "image": {
              "type": "string"
            },
            "imagePullPolicy": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Always",
                    "Never",
                    "IfNotPresent"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "language": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Java",
                    "Kotlin",
                    "Scala",
                    "Csharp"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "namespaces": {
              "type": "string"
            },
            "outputVariables": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/security/OutputNGVariable"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "packages": {
              "type": "string"
            },
            "postCommand": {
              "type": "string"
            },
            "preCommand": {
              "type": "string"
            },
            "privileged": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "reports": {
              "oneOf": [
                {
                  "$ref": "#/definitions/security/UnitTestReport"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "resources": {
              "$ref": "#/definitions/security/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "runOnlySelectedTests": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            },
            "shell": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Sh",
                    "Bash",
                    "Powershell",
                    "Pwsh",
                    "Python"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "testAnnotations": {
              "type": "string"
            },
            "testGlobs": {
              "type": "string"
            },
            "testSplitStrategy": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "ClassTiming",
                    "TestCount"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "Runtime": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "Docker",
            "Cloud"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "STOYamlAdvancedSettings": {
      "type": "object",
      "properties": {
        "args": {
          "oneOf": [
            {
              "$ref": "#/definitions/security/STOYamlArgs"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "fail_on_severity": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "critical",
                "high",
                "medium",
                "low",
                "none"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "include_raw": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "log": {
          "oneOf": [
            {
              "$ref": "#/definitions/security/STOYamlLog"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "STOYamlArgs": {
      "type": "object",
      "properties": {
        "cli": {
          "type": "string"
        },
        "passthrough": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "STOYamlAuth": {
      "type": "object",
      "required": [
        "access_token"
      ],
      "properties": {
        "access_id": {
          "type": "string"
        },
        "access_token": {
          "type": "string"
        },
        "domain": {
          "type": "string"
        },
        "ssl": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "type": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "apiKey",
                "usernamePassword"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "version": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "STOYamlBlackduckToolData": {
      "type": "object",
      "properties": {
        "project_name": {
          "type": "string"
        },
        "project_version": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "STOYamlCheckmarxToolData": {
      "type": "object",
      "properties": {
        "project_name": {
          "type": "string"
        },
        "team_name": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "STOYamlFODToolData": {
      "type": "object",
      "properties": {
        "app_name": {
          "type": "string"
        },
        "audit_type": {
          "type": "string"
        },
        "data_center": {
          "type": "string"
        },
        "entitlement": {
          "type": "string"
        },
        "lookup_type": {
          "type": "string"
        },
        "owner_id": {
          "type": "string"
        },
        "release_name": {
          "type": "string"
        },
        "scan_settings": {
          "type": "string"
        },
        "scan_type": {
          "type": "string"
        },
        "target_language": {
          "type": "string"
        },
        "target_language_version": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "STOYamlImage": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "access_id": {
          "type": "string"
        },
        "access_token": {
          "type": "string"
        },
        "domain": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "tag": {
          "type": "string"
        },
        "type": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "aws_ecr",
                "docker_v2",
                "jfrog_artifactory",
                "local_image"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "STOYamlIngestion": {
      "type": "object",
      "properties": {
        "file": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "STOYamlInstance": {
      "type": "object",
      "properties": {
        "access_id": {
          "type": "string"
        },
        "access_token": {
          "type": "string"
        },
        "domain": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "port": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "protocol": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "STOYamlJavaParameters": {
      "type": "object",
      "properties": {
        "binaries": {
          "type": "string"
        },
        "libraries": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "STOYamlLog": {
      "type": "object",
      "properties": {
        "level": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "info",
                "debug",
                "warning",
                "error"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "serializer": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "simple",
                "basic",
                "bunyan",
                "simple_onprem",
                "onprem"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "STOYamlMendToolData": {
      "type": "object",
      "properties": {
        "exclude": {
          "type": "string"
        },
        "include": {
          "type": "string"
        },
        "product_name": {
          "type": "string"
        },
        "product_token": {
          "type": "string"
        },
        "project_name": {
          "type": "string"
        },
        "project_token": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "STOYamlSonarqubeToolData": {
      "type": "object",
      "properties": {
        "exclude": {
          "type": "string"
        },
        "include": {
          "type": "string"
        },
        "java": {
          "oneOf": [
            {
              "$ref": "#/definitions/security/STOYamlJavaParameters"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "STOYamlTarget": {
      "type": "object",
      "required": [
        "name",
        "type",
        "variant"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "type": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "repository",
                "container",
                "instance",
                "configuration"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "variant": {
          "type": "string"
        },
        "workspace": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "STOYamlVeracodeToolData": {
      "type": "object",
      "properties": {
        "app_id": {
          "type": "string"
        },
        "project_name": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "STOYamlZapToolData": {
      "type": "object",
      "properties": {
        "context": {
          "type": "string"
        },
        "port": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SaveCacheGCSStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/security/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "bucket",
            "connectorRef",
            "key",
            "sourcePaths"
          ],
          "properties": {
            "archiveFormat": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Tar",
                    "Gzip"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/security/ParameterFieldListString"
            },
            "bucket": {
              "type": "string"
            },
            "connectorRef": {
              "type": "string"
            },
            "key": {
              "type": "string"
            },
            "override": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            },
            "resources": {
              "$ref": "#/definitions/security/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "sourcePaths": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SaveCacheS3StepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/security/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "bucket",
            "connectorRef",
            "key",
            "sourcePaths"
          ],
          "properties": {
            "archiveFormat": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Tar",
                    "Gzip"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/security/ParameterFieldListString"
            },
            "bucket": {
              "type": "string"
            },
            "connectorRef": {
              "type": "string"
            },
            "endpoint": {
              "type": "string"
            },
            "key": {
              "type": "string"
            },
            "override": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            },
            "pathStyle": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            },
            "region": {
              "type": "string"
            },
            "resources": {
              "$ref": "#/definitions/security/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "sourcePaths": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SbomSource": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "image"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "image"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/security/ImageSbomSource"
              }
            }
          }
        }
      ]
    },
    "SbomSourceSpec": {
      "type": "object",
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ScriptStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/security/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "run"
          ],
          "properties": {
            "envs": {
              "oneOf": [
                {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "image": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "outputs": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "privileged": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "pull": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "always",
                    "never",
                    "if-not-exists"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "resources": {
              "$ref": "#/definitions/security/ContainerResource"
            },
            "run": {
              "type": "string"
            },
            "shell": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "sh",
                    "bash",
                    "powershell",
                    "pwsh",
                    "python"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "user": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SecretNGVariable": {
      "allOf": [
        {
          "$ref": "#/definitions/security/NGVariable"
        },
        {
          "type": "object",
          "required": [
            "value"
          ],
          "properties": {
            "default": {
              "type": "string"
            },
            "name": {
              "type": "string",
              "pattern": "^[a-zA-Z_][0-9a-zA-Z_\\.$]{0,127}$"
            },
            "type": {
              "type": "string",
              "enum": [
                "Secret"
              ]
            },
            "value": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SecurityContext": {
      "type": "object",
      "properties": {
        "allowPrivilegeEscalation": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "capabilities": {
          "$ref": "#/definitions/security/Capabilities"
        },
        "privileged": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "procMount": {
          "type": "string"
        },
        "readOnlyRootFilesystem": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "runAsGroup": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "runAsNonRoot": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SecurityStageConfigImpl": {
      "type": "object",
      "properties": {
        "cloneCodebase": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "execution": {
          "$ref": "#/definitions/security/ExecutionElementConfig"
        },
        "infrastructure": {
          "oneOf": [
            {
              "$ref": "#/definitions/security/DockerInfraYaml"
            },
            {
              "$ref": "#/definitions/security/HostedVmInfraYaml"
            },
            {
              "$ref": "#/definitions/security/K8sDirectInfraYaml"
            },
            {
              "$ref": "#/definitions/security/K8sHostedInfraYaml"
            },
            {
              "$ref": "#/definitions/security/UseFromStageInfraYaml"
            },
            {
              "$ref": "#/definitions/security/VmInfraYaml"
            }
          ]
        },
        "platform": {
          "oneOf": [
            {
              "$ref": "#/definitions/security/Platform"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "runtime": {
          "oneOf": [
            {
              "$ref": "#/definitions/security/CloudRuntime"
            },
            {
              "$ref": "#/definitions/security/DockerRuntime"
            }
          ]
        },
        "serviceDependencies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/security/DependencyElement"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "sharedPaths": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SecurityStageNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "type"
      ],
      "properties": {
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "description": {
          "type": "string"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/security/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/security/StrategyConfig"
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "type": {
          "type": "string",
          "enum": [
            "SecurityTests"
          ]
        },
        "variables": {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/security/NumberNGVariable"
              },
              {
                "$ref": "#/definitions/security/SecretNGVariable"
              },
              {
                "$ref": "#/definitions/security/StringNGVariable"
              }
            ]
          }
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/security/StageWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "SecurityTests"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/security/SecurityStageConfigImpl"
              }
            }
          }
        }
      ]
    },
    "SecurityStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/security/StepSpecType"
        },
        {
          "type": "object",
          "properties": {
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/security/ParameterFieldListString"
            },
            "imagePullPolicy": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Always",
                    "Never",
                    "IfNotPresent"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "outputVariables": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/security/OutputNGVariable"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "privileged": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "resources": {
              "$ref": "#/definitions/security/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "settings": {
              "oneOf": [
                {
                  "$ref": "#/definitions/security/ParameterFieldMapStringJsonNode"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "properties": {
        "baseImageConnectorRefs": {
          "$ref": "#/definitions/security/ParameterFieldListString"
        },
        "imagePullPolicy": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Always",
                "Never",
                "IfNotPresent"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "outputVariables": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/security/OutputNGVariable"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "privileged": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "resources": {
          "$ref": "#/definitions/security/ContainerResource"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "settings": {
          "oneOf": [
            {
              "$ref": "#/definitions/security/ParameterFieldMapStringJsonNode"
            },
            {
              "type": "string"
            }
          ]
        }
      }
    },
    "ShiftLeftStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/security/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "config",
            "mode",
            "target"
          ],
          "properties": {
            "advanced": {
              "$ref": "#/definitions/security/STOYamlAdvancedSettings"
            },
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/security/ParameterFieldListString"
            },
            "config": {
              "type": "string",
              "enum": [
                "default"
              ]
            },
            "imagePullPolicy": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Always",
                    "Never",
                    "IfNotPresent"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "ingestion": {
              "$ref": "#/definitions/security/STOYamlIngestion"
            },
            "mode": {
              "type": "string",
              "enum": [
                "ingestion",
                "orchestration",
                "extraction"
              ]
            },
            "outputVariables": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/security/OutputNGVariable"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "privileged": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "resources": {
              "$ref": "#/definitions/security/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "settings": {
              "oneOf": [
                {
                  "$ref": "#/definitions/security/ParameterFieldMapStringJsonNode"
                },
                {
                  "type": "string"
                }
              ]
            },
            "target": {
              "$ref": "#/definitions/security/STOYamlTarget"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "config",
        "mode",
        "target"
      ],
      "properties": {
        "advanced": {
          "$ref": "#/definitions/security/STOYamlAdvancedSettings"
        },
        "baseImageConnectorRefs": {
          "$ref": "#/definitions/security/ParameterFieldListString"
        },
        "config": {
          "type": "string",
          "enum": [
            "default"
          ]
        },
        "imagePullPolicy": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Always",
                "Never",
                "IfNotPresent"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "ingestion": {
          "$ref": "#/definitions/security/STOYamlIngestion"
        },
        "mode": {
          "type": "string",
          "enum": [
            "ingestion",
            "orchestration",
            "extraction"
          ]
        },
        "outputVariables": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/security/OutputNGVariable"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "privileged": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "resources": {
          "$ref": "#/definitions/security/ContainerResource"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "settings": {
          "oneOf": [
            {
              "$ref": "#/definitions/security/ParameterFieldMapStringJsonNode"
            },
            {
              "type": "string"
            }
          ]
        },
        "target": {
          "$ref": "#/definitions/security/STOYamlTarget"
        }
      }
    },
    "SniperStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/security/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "config",
            "mode",
            "target"
          ],
          "properties": {
            "advanced": {
              "$ref": "#/definitions/security/STOYamlAdvancedSettings"
            },
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/security/ParameterFieldListString"
            },
            "config": {
              "type": "string",
              "enum": [
                "default"
              ]
            },
            "imagePullPolicy": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Always",
                    "Never",
                    "IfNotPresent"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "ingestion": {
              "$ref": "#/definitions/security/STOYamlIngestion"
            },
            "mode": {
              "type": "string",
              "enum": [
                "ingestion",
                "orchestration",
                "extraction"
              ]
            },
            "outputVariables": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/security/OutputNGVariable"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "privileged": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "resources": {
              "$ref": "#/definitions/security/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "settings": {
              "oneOf": [
                {
                  "$ref": "#/definitions/security/ParameterFieldMapStringJsonNode"
                },
                {
                  "type": "string"
                }
              ]
            },
            "target": {
              "$ref": "#/definitions/security/STOYamlTarget"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "config",
        "mode",
        "target"
      ],
      "properties": {
        "advanced": {
          "$ref": "#/definitions/security/STOYamlAdvancedSettings"
        },
        "baseImageConnectorRefs": {
          "$ref": "#/definitions/security/ParameterFieldListString"
        },
        "config": {
          "type": "string",
          "enum": [
            "default"
          ]
        },
        "imagePullPolicy": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Always",
                "Never",
                "IfNotPresent"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "ingestion": {
          "$ref": "#/definitions/security/STOYamlIngestion"
        },
        "mode": {
          "type": "string",
          "enum": [
            "ingestion",
            "orchestration",
            "extraction"
          ]
        },
        "outputVariables": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/security/OutputNGVariable"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "privileged": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "resources": {
          "$ref": "#/definitions/security/ContainerResource"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "settings": {
          "oneOf": [
            {
              "$ref": "#/definitions/security/ParameterFieldMapStringJsonNode"
            },
            {
              "type": "string"
            }
          ]
        },
        "target": {
          "$ref": "#/definitions/security/STOYamlTarget"
        }
      }
    },
    "SnykStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/security/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "config",
            "mode",
            "target"
          ],
          "properties": {
            "advanced": {
              "$ref": "#/definitions/security/STOYamlAdvancedSettings"
            },
            "auth": {
              "$ref": "#/definitions/security/STOYamlAuth"
            },
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/security/ParameterFieldListString"
            },
            "config": {
              "type": "string",
              "enum": [
                "default"
              ]
            },
            "image": {
              "$ref": "#/definitions/security/STOYamlImage"
            },
            "imagePullPolicy": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Always",
                    "Never",
                    "IfNotPresent"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "ingestion": {
              "$ref": "#/definitions/security/STOYamlIngestion"
            },
            "mode": {
              "type": "string",
              "enum": [
                "ingestion",
                "orchestration",
                "extraction"
              ]
            },
            "outputVariables": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/security/OutputNGVariable"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "privileged": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "resources": {
              "$ref": "#/definitions/security/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "settings": {
              "oneOf": [
                {
                  "$ref": "#/definitions/security/ParameterFieldMapStringJsonNode"
                },
                {
                  "type": "string"
                }
              ]
            },
            "target": {
              "$ref": "#/definitions/security/STOYamlTarget"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "config",
        "mode",
        "target"
      ],
      "properties": {
        "advanced": {
          "$ref": "#/definitions/security/STOYamlAdvancedSettings"
        },
        "auth": {
          "$ref": "#/definitions/security/STOYamlAuth"
        },
        "baseImageConnectorRefs": {
          "$ref": "#/definitions/security/ParameterFieldListString"
        },
        "config": {
          "type": "string",
          "enum": [
            "default"
          ]
        },
        "image": {
          "$ref": "#/definitions/security/STOYamlImage"
        },
        "imagePullPolicy": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Always",
                "Never",
                "IfNotPresent"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "ingestion": {
          "$ref": "#/definitions/security/STOYamlIngestion"
        },
        "mode": {
          "type": "string",
          "enum": [
            "ingestion",
            "orchestration",
            "extraction"
          ]
        },
        "outputVariables": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/security/OutputNGVariable"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "privileged": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "resources": {
          "$ref": "#/definitions/security/ContainerResource"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "settings": {
          "oneOf": [
            {
              "$ref": "#/definitions/security/ParameterFieldMapStringJsonNode"
            },
            {
              "type": "string"
            }
          ]
        },
        "target": {
          "$ref": "#/definitions/security/STOYamlTarget"
        }
      }
    },
    "SonarqubeStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/security/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "config",
            "mode",
            "target"
          ],
          "properties": {
            "advanced": {
              "$ref": "#/definitions/security/STOYamlAdvancedSettings"
            },
            "auth": {
              "$ref": "#/definitions/security/STOYamlAuth"
            },
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/security/ParameterFieldListString"
            },
            "config": {
              "type": "string",
              "enum": [
                "default"
              ]
            },
            "imagePullPolicy": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Always",
                    "Never",
                    "IfNotPresent"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "ingestion": {
              "$ref": "#/definitions/security/STOYamlIngestion"
            },
            "mode": {
              "type": "string",
              "enum": [
                "ingestion",
                "orchestration",
                "extraction"
              ]
            },
            "outputVariables": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/security/OutputNGVariable"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "privileged": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "resources": {
              "$ref": "#/definitions/security/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "settings": {
              "oneOf": [
                {
                  "$ref": "#/definitions/security/ParameterFieldMapStringJsonNode"
                },
                {
                  "type": "string"
                }
              ]
            },
            "target": {
              "$ref": "#/definitions/security/STOYamlTarget"
            },
            "tool": {
              "$ref": "#/definitions/security/STOYamlSonarqubeToolData"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "config",
        "mode",
        "target"
      ],
      "properties": {
        "advanced": {
          "$ref": "#/definitions/security/STOYamlAdvancedSettings"
        },
        "auth": {
          "$ref": "#/definitions/security/STOYamlAuth"
        },
        "baseImageConnectorRefs": {
          "$ref": "#/definitions/security/ParameterFieldListString"
        },
        "config": {
          "type": "string",
          "enum": [
            "default"
          ]
        },
        "imagePullPolicy": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Always",
                "Never",
                "IfNotPresent"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "ingestion": {
          "$ref": "#/definitions/security/STOYamlIngestion"
        },
        "mode": {
          "type": "string",
          "enum": [
            "ingestion",
            "orchestration",
            "extraction"
          ]
        },
        "outputVariables": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/security/OutputNGVariable"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "privileged": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "resources": {
          "$ref": "#/definitions/security/ContainerResource"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "settings": {
          "oneOf": [
            {
              "$ref": "#/definitions/security/ParameterFieldMapStringJsonNode"
            },
            {
              "type": "string"
            }
          ]
        },
        "target": {
          "$ref": "#/definitions/security/STOYamlTarget"
        },
        "tool": {
          "$ref": "#/definitions/security/STOYamlSonarqubeToolData"
        }
      }
    },
    "Splitting": {
      "type": "object",
      "properties": {
        "concurrency": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "enabled": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "strategy": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "class_timing",
            "test_count"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SscaOrchestrationStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/security/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "format",
            "source",
            "tool"
          ],
          "properties": {
            "attestation": {
              "$ref": "#/definitions/security/Attestation"
            },
            "format": {
              "oneOf": [
                {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "source": {
              "$ref": "#/definitions/security/SbomSource"
            },
            "tool": {
              "oneOf": [
                {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "StageRollbackFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/security/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "StageRollback"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "StageWhenCondition": {
      "type": "object",
      "required": [
        "pipelineStatus"
      ],
      "properties": {
        "condition": {
          "type": "string",
          "pattern": "^(?!<\\+input>.*\\.executionInput\\(\\)(.*)$)"
        },
        "pipelineStatus": {
          "type": "string",
          "enum": [
            "Success",
            "Failure",
            "All"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "StepElementConfig": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/security/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/security/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/security/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(<\\+input>.*)|(.*<\\+.*>.*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": []
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/security/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": []
    },
    "StepGroupElementConfig": {
      "type": "object",
      "required": [
        "identifier",
        "name"
      ],
      "properties": {
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/security/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "steps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/security/ExecutionWrapperConfig"
          },
          "maxItems": 2147483647,
          "minItems": 1
        },
        "strategy": {
          "$ref": "#/definitions/security/StrategyConfig"
        },
        "template": {
          "$ref": "#/definitions/security/TemplateLinkConfig"
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/security/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "oneOf": [
            {
              "required": [
                "template"
              ]
            },
            {
              "required": [
                "steps"
              ]
            }
          ]
        }
      ]
    },
    "StepGroupFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/security/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "StepGroupRollback"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "StepSpecType": {
      "type": "object",
      "discriminator": "type",
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "StepWhenCondition": {
      "type": "object",
      "required": [
        "stageStatus"
      ],
      "properties": {
        "condition": {
          "type": "string",
          "pattern": "^(?!<\\+input>.*\\.executionInput\\(\\)(.*)$)"
        },
        "stageStatus": {
          "type": "string",
          "enum": [
            "Success",
            "Failure",
            "All"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "StrategyConfig": {
      "type": "object",
      "properties": {
        "matrix": {
          "oneOf": [
            {
              "$ref": "#/definitions/security/ParameterFieldMatrixConfigInterface"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "parallelism": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            },
            {
              "type": "string",
              "pattern": "(<\\+.+>.*)",
              "minLength": 1
            }
          ]
        },
        "repeat": {
          "$ref": "#/definitions/security/HarnessForConfig"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "oneOf": [
            {
              "required": [
                "repeat"
              ]
            },
            {
              "required": [
                "parallelism"
              ]
            },
            {
              "required": [
                "matrix"
              ]
            }
          ]
        }
      ]
    },
    "StrategyExpansionData": {
      "type": "object",
      "properties": {
        "maxConcurrency": {
          "type": "integer",
          "format": "int32"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "StringNGVariable": {
      "allOf": [
        {
          "$ref": "#/definitions/security/NGVariable"
        },
        {
          "type": "object",
          "required": [
            "value"
          ],
          "properties": {
            "default": {
              "type": "string"
            },
            "name": {
              "type": "string",
              "pattern": "^[a-zA-Z_][0-9a-zA-Z_\\.$]{0,127}$"
            },
            "type": {
              "type": "string",
              "enum": [
                "String"
              ]
            },
            "value": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SysdigStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/security/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "config",
            "mode",
            "target"
          ],
          "properties": {
            "advanced": {
              "$ref": "#/definitions/security/STOYamlAdvancedSettings"
            },
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/security/ParameterFieldListString"
            },
            "config": {
              "type": "string",
              "enum": [
                "default"
              ]
            },
            "imagePullPolicy": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Always",
                    "Never",
                    "IfNotPresent"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "ingestion": {
              "$ref": "#/definitions/security/STOYamlIngestion"
            },
            "mode": {
              "type": "string",
              "enum": [
                "ingestion",
                "orchestration",
                "extraction"
              ]
            },
            "outputVariables": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/security/OutputNGVariable"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "privileged": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "resources": {
              "$ref": "#/definitions/security/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "settings": {
              "oneOf": [
                {
                  "$ref": "#/definitions/security/ParameterFieldMapStringJsonNode"
                },
                {
                  "type": "string"
                }
              ]
            },
            "target": {
              "$ref": "#/definitions/security/STOYamlTarget"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "config",
        "mode",
        "target"
      ],
      "properties": {
        "advanced": {
          "$ref": "#/definitions/security/STOYamlAdvancedSettings"
        },
        "baseImageConnectorRefs": {
          "$ref": "#/definitions/security/ParameterFieldListString"
        },
        "config": {
          "type": "string",
          "enum": [
            "default"
          ]
        },
        "imagePullPolicy": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Always",
                "Never",
                "IfNotPresent"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "ingestion": {
          "$ref": "#/definitions/security/STOYamlIngestion"
        },
        "mode": {
          "type": "string",
          "enum": [
            "ingestion",
            "orchestration",
            "extraction"
          ]
        },
        "outputVariables": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/security/OutputNGVariable"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "privileged": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "resources": {
          "$ref": "#/definitions/security/ContainerResource"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "settings": {
          "oneOf": [
            {
              "$ref": "#/definitions/security/ParameterFieldMapStringJsonNode"
            },
            {
              "type": "string"
            }
          ]
        },
        "target": {
          "$ref": "#/definitions/security/STOYamlTarget"
        }
      }
    },
    "TagBuildSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/security/BuildSpec"
        },
        {
          "type": "object",
          "required": [
            "tag"
          ],
          "properties": {
            "tag": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "TemplateLinkConfig": {
      "type": "object",
      "required": [
        "templateRef"
      ],
      "properties": {
        "templateInputs": {
          "$ref": "#/definitions/security/JsonNode"
        },
        "templateRef": {
          "type": "string"
        },
        "templateVariables": {
          "$ref": "#/definitions/security/JsonNode"
        },
        "versionLabel": {
          "type": "string",
          "pattern": "^[0-9a-zA-Z][^\\s]{0,63}$"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "TenableStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/security/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "config",
            "mode",
            "target"
          ],
          "properties": {
            "advanced": {
              "$ref": "#/definitions/security/STOYamlAdvancedSettings"
            },
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/security/ParameterFieldListString"
            },
            "config": {
              "type": "string",
              "enum": [
                "default"
              ]
            },
            "imagePullPolicy": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Always",
                    "Never",
                    "IfNotPresent"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "ingestion": {
              "$ref": "#/definitions/security/STOYamlIngestion"
            },
            "mode": {
              "type": "string",
              "enum": [
                "ingestion",
                "orchestration",
                "extraction"
              ]
            },
            "outputVariables": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/security/OutputNGVariable"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "privileged": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "resources": {
              "$ref": "#/definitions/security/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "settings": {
              "oneOf": [
                {
                  "$ref": "#/definitions/security/ParameterFieldMapStringJsonNode"
                },
                {
                  "type": "string"
                }
              ]
            },
            "target": {
              "$ref": "#/definitions/security/STOYamlTarget"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "config",
        "mode",
        "target"
      ],
      "properties": {
        "advanced": {
          "$ref": "#/definitions/security/STOYamlAdvancedSettings"
        },
        "baseImageConnectorRefs": {
          "$ref": "#/definitions/security/ParameterFieldListString"
        },
        "config": {
          "type": "string",
          "enum": [
            "default"
          ]
        },
        "imagePullPolicy": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Always",
                "Never",
                "IfNotPresent"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "ingestion": {
          "$ref": "#/definitions/security/STOYamlIngestion"
        },
        "mode": {
          "type": "string",
          "enum": [
            "ingestion",
            "orchestration",
            "extraction"
          ]
        },
        "outputVariables": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/security/OutputNGVariable"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "privileged": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "resources": {
          "$ref": "#/definitions/security/ContainerResource"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "settings": {
          "oneOf": [
            {
              "$ref": "#/definitions/security/ParameterFieldMapStringJsonNode"
            },
            {
              "type": "string"
            }
          ]
        },
        "target": {
          "$ref": "#/definitions/security/STOYamlTarget"
        }
      }
    },
    "TestStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/security/StepSpecType"
        },
        {
          "type": "object",
          "properties": {
            "envs": {
              "oneOf": [
                {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "image": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "language": {
              "$ref": "#/definitions/security/ParameterFieldTILanguage"
            },
            "outputs": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "privileged": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "pull": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "always",
                    "never",
                    "if-not-exists"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "resources": {
              "$ref": "#/definitions/security/ContainerResource"
            },
            "shell": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "sh",
                    "bash",
                    "powershell",
                    "pwsh",
                    "python"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "splitting": {
              "$ref": "#/definitions/security/Splitting"
            },
            "user": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "uses": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "maven",
                    "bazel",
                    "gradle",
                    "dotnet",
                    "nunit_console",
                    "sbt"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "with": {
              "oneOf": [
                {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/definitions/security/JsonNode"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "Toleration": {
      "type": "object",
      "properties": {
        "effect": {
          "type": "string"
        },
        "key": {
          "type": "string"
        },
        "operator": {
          "type": "string"
        },
        "tolerationSeconds": {
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "UnitTestReport": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "JUnit"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "JUnit"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/security/JUnitTestReport"
              }
            }
          }
        }
      ]
    },
    "UnitTestReportSpec": {
      "type": "object",
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "UploadToArtifactoryStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/security/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "sourcePath",
            "target"
          ],
          "properties": {
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/security/ParameterFieldListString"
            },
            "connectorRef": {
              "type": "string"
            },
            "resources": {
              "$ref": "#/definitions/security/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "sourcePath": {
              "type": "string"
            },
            "target": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "UploadToGCSStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/security/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "bucket",
            "connectorRef",
            "sourcePath"
          ],
          "properties": {
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/security/ParameterFieldListString"
            },
            "bucket": {
              "type": "string"
            },
            "connectorRef": {
              "type": "string"
            },
            "resources": {
              "$ref": "#/definitions/security/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "sourcePath": {
              "type": "string"
            },
            "target": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "UploadToS3StepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/security/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "bucket",
            "connectorRef",
            "region",
            "sourcePath"
          ],
          "properties": {
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/security/ParameterFieldListString"
            },
            "bucket": {
              "type": "string"
            },
            "connectorRef": {
              "type": "string"
            },
            "endpoint": {
              "type": "string"
            },
            "region": {
              "type": "string"
            },
            "resources": {
              "$ref": "#/definitions/security/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "sourcePath": {
              "type": "string"
            },
            "stripPrefix": {
              "type": "string"
            },
            "target": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "UseFromStageInfraYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/security/Infrastructure"
        },
        {
          "type": "object",
          "required": [
            "useFromStage"
          ],
          "properties": {
            "useFromStage": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "VeracodeStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/security/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "config",
            "mode",
            "target"
          ],
          "properties": {
            "advanced": {
              "$ref": "#/definitions/security/STOYamlAdvancedSettings"
            },
            "auth": {
              "$ref": "#/definitions/security/STOYamlAuth"
            },
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/security/ParameterFieldListString"
            },
            "config": {
              "type": "string",
              "enum": [
                "default"
              ]
            },
            "imagePullPolicy": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Always",
                    "Never",
                    "IfNotPresent"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "ingestion": {
              "$ref": "#/definitions/security/STOYamlIngestion"
            },
            "mode": {
              "type": "string",
              "enum": [
                "ingestion",
                "orchestration",
                "extraction"
              ]
            },
            "outputVariables": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/security/OutputNGVariable"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "privileged": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "resources": {
              "$ref": "#/definitions/security/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "settings": {
              "oneOf": [
                {
                  "$ref": "#/definitions/security/ParameterFieldMapStringJsonNode"
                },
                {
                  "type": "string"
                }
              ]
            },
            "target": {
              "$ref": "#/definitions/security/STOYamlTarget"
            },
            "tool": {
              "$ref": "#/definitions/security/STOYamlVeracodeToolData"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "config",
        "mode",
        "target"
      ],
      "properties": {
        "advanced": {
          "$ref": "#/definitions/security/STOYamlAdvancedSettings"
        },
        "auth": {
          "$ref": "#/definitions/security/STOYamlAuth"
        },
        "baseImageConnectorRefs": {
          "$ref": "#/definitions/security/ParameterFieldListString"
        },
        "config": {
          "type": "string",
          "enum": [
            "default"
          ]
        },
        "imagePullPolicy": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Always",
                "Never",
                "IfNotPresent"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "ingestion": {
          "$ref": "#/definitions/security/STOYamlIngestion"
        },
        "mode": {
          "type": "string",
          "enum": [
            "ingestion",
            "orchestration",
            "extraction"
          ]
        },
        "outputVariables": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/security/OutputNGVariable"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "privileged": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "resources": {
          "$ref": "#/definitions/security/ContainerResource"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "settings": {
          "oneOf": [
            {
              "$ref": "#/definitions/security/ParameterFieldMapStringJsonNode"
            },
            {
              "type": "string"
            }
          ]
        },
        "target": {
          "$ref": "#/definitions/security/STOYamlTarget"
        },
        "tool": {
          "$ref": "#/definitions/security/STOYamlVeracodeToolData"
        }
      }
    },
    "VmBuildJobInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/security/BuildJobEnvInfo"
        },
        {
          "type": "object",
          "properties": {
            "ciExecutionArgs": {
              "$ref": "#/definitions/security/CIExecutionArgs"
            },
            "connectorRefs": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "serviceDependencies": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/security/DependencyElement"
              }
            },
            "stageVars": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/security/NGVariable"
              }
            },
            "volToMountPath": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "workDir": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "VmInfraSpec": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "Pool"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "VmInfraYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/security/Infrastructure"
        },
        {
          "type": "object",
          "required": [
            "spec",
            "type"
          ],
          "properties": {
            "spec": {
              "oneOf": [
                {
                  "$ref": "#/definitions/security/VmPoolYaml"
                }
              ]
            },
            "type": {
              "type": "string",
              "enum": [
                "KubernetesDirect",
                "UseFromStage",
                "VM",
                "KubernetesHosted"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "VmPoolYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/security/VmInfraSpec"
        },
        {
          "type": "object",
          "required": [
            "spec",
            "type"
          ],
          "properties": {
            "spec": {
              "$ref": "#/definitions/security/VmPoolYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "Pool"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "VmPoolYamlSpec": {
      "type": "object",
      "properties": {
        "harnessImageConnectorRef": {
          "type": "string"
        },
        "identifier": {
          "type": "string"
        },
        "initTimeout": {
          "type": "string"
        },
        "os": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Linux",
                "MacOS",
                "Windows"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "poolName": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "WebhookBaseAttributes": {
      "type": "object",
      "properties": {
        "action": {
          "type": "string"
        },
        "after": {
          "type": "string"
        },
        "authorAvatar": {
          "type": "string"
        },
        "authorEmail": {
          "type": "string"
        },
        "authorLogin": {
          "type": "string"
        },
        "authorName": {
          "type": "string"
        },
        "before": {
          "type": "string"
        },
        "link": {
          "type": "string"
        },
        "mergeSha": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "ref": {
          "type": "string"
        },
        "sender": {
          "type": "string"
        },
        "source": {
          "type": "string"
        },
        "target": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "WebhookEvent": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "PR",
            "BRANCH"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "WebhookExecutionSource": {
      "allOf": [
        {
          "$ref": "#/definitions/security/ExecutionSource"
        },
        {
          "type": "object",
          "properties": {
            "triggerName": {
              "type": "string"
            },
            "user": {
              "$ref": "#/definitions/security/WebhookGitUser"
            },
            "webhookEvent": {
              "$ref": "#/definitions/security/WebhookEvent"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "WebhookGitUser": {
      "type": "object",
      "properties": {
        "avatar": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "gitId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ZapStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/security/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "config",
            "mode",
            "target"
          ],
          "properties": {
            "advanced": {
              "$ref": "#/definitions/security/STOYamlAdvancedSettings"
            },
            "baseImageConnectorRefs": {
              "$ref": "#/definitions/security/ParameterFieldListString"
            },
            "config": {
              "type": "string",
              "enum": [
                "default",
                "quick",
                "attack",
                "standard"
              ]
            },
            "imagePullPolicy": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Always",
                    "Never",
                    "IfNotPresent"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "ingestion": {
              "$ref": "#/definitions/security/STOYamlIngestion"
            },
            "instance": {
              "$ref": "#/definitions/security/STOYamlInstance"
            },
            "mode": {
              "type": "string",
              "enum": [
                "ingestion",
                "orchestration",
                "extraction"
              ]
            },
            "outputVariables": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/security/OutputNGVariable"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "privileged": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "resources": {
              "$ref": "#/definitions/security/ContainerResource"
            },
            "runAsUser": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32"
                },
                {
                  "type": "string"
                }
              ]
            },
            "settings": {
              "oneOf": [
                {
                  "$ref": "#/definitions/security/ParameterFieldMapStringJsonNode"
                },
                {
                  "type": "string"
                }
              ]
            },
            "target": {
              "$ref": "#/definitions/security/STOYamlTarget"
            },
            "tool": {
              "$ref": "#/definitions/security/STOYamlZapToolData"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "config",
        "mode",
        "target"
      ],
      "properties": {
        "advanced": {
          "$ref": "#/definitions/security/STOYamlAdvancedSettings"
        },
        "baseImageConnectorRefs": {
          "$ref": "#/definitions/security/ParameterFieldListString"
        },
        "config": {
          "type": "string",
          "enum": [
            "default",
            "quick",
            "attack",
            "standard"
          ]
        },
        "imagePullPolicy": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Always",
                "Never",
                "IfNotPresent"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "ingestion": {
          "$ref": "#/definitions/security/STOYamlIngestion"
        },
        "instance": {
          "$ref": "#/definitions/security/STOYamlInstance"
        },
        "mode": {
          "type": "string",
          "enum": [
            "ingestion",
            "orchestration",
            "extraction"
          ]
        },
        "outputVariables": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/security/OutputNGVariable"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "privileged": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "resources": {
          "$ref": "#/definitions/security/ContainerResource"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "settings": {
          "oneOf": [
            {
              "$ref": "#/definitions/security/ParameterFieldMapStringJsonNode"
            },
            {
              "type": "string"
            }
          ]
        },
        "target": {
          "$ref": "#/definitions/security/STOYamlTarget"
        },
        "tool": {
          "$ref": "#/definitions/security/STOYamlZapToolData"
        }
      }
    },
    "STOStepInfo": {
      "type": "object",
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SecurityNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/security/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/security/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/security/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "Security"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/security/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "AWSECR"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/security/AwsEcrStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "AquaTrivy"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/security/AquaTrivyStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Bandit"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/security/BanditStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "BlackDuck"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/security/BlackDuckStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Brakeman"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/security/BrakemanStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Burp"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/security/BurpStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Checkmarx"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/security/CheckmarxStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Clair"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/security/ClairStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "DataTheorem"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/security/DataTheoremStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "DockerContentTrust"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/security/DockerContentTrustStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "External"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/security/ExternalStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "FortifyOnDemand"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/security/FortifyOnDemandStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Grype"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/security/GrypeStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "JfrogXray"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/security/JfrogXrayStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Mend"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/security/MendStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Metasploit"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/security/MetasploitStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Nessus"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/security/NessusStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "NexusIQ"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/security/NexusIQStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Nikto"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/security/NiktoStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Nmap"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/security/NmapStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Openvas"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/security/OpenvasStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Owasp"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/security/OwaspStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "PrismaCloud"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/security/PrismaCloudStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Prowler"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/security/ProwlerStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Qualys"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/security/QualysStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Reapsaw"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/security/ReapsawStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Security"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/security/SecurityStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "ShiftLeft"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/security/ShiftLeftStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Sniper"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/security/SniperStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Snyk"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/security/SnykStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Sonarqube"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/security/SonarqubeStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Sysdig"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/security/SysdigStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Tenable"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/security/TenableStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Veracode"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/security/VeracodeStepInfo"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Zap"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/security/ZapStepInfo"
              }
            }
          }
        }
      ]
    },
    "RunStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/security/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/security/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/security/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "Run"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/security/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Run"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/security/RunStepInfo"
              }
            }
          }
        }
      ]
    },
    "BackgroundStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/security/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/security/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/security/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "Background"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/security/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Background"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/security/BackgroundStepInfo"
              }
            }
          }
        }
      ]
    },
    "AquaTrivyScanNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/security/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/security/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/security/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "AquaTrivy"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/security/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "AquaTrivy"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/security/AquaTrivyStepInfo"
              }
            }
          }
        }
      ]
    },
    "AwsEcrScanNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/security/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/security/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/security/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "AWSECR"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/security/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "AWSECR"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/security/AwsEcrStepInfo"
              }
            }
          }
        }
      ]
    },
    "BanditScanNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/security/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/security/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/security/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "Bandit"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/security/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Bandit"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/security/BanditStepInfo"
              }
            }
          }
        }
      ]
    },
    "BlackDuckScanNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/security/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/security/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/security/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "BlackDuck"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/security/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "BlackDuck"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/security/BlackDuckStepInfo"
              }
            }
          }
        }
      ]
    },
    "BrakemanScanNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/security/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/security/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/security/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "Brakeman"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/security/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Brakeman"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/security/BrakemanStepInfo"
              }
            }
          }
        }
      ]
    },
    "BurpScanNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/security/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/security/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/security/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "Burp"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/security/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Burp"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/security/BurpStepInfo"
              }
            }
          }
        }
      ]
    },
    "CheckmarxScanNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/security/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/security/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/security/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "Checkmarx"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/security/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Checkmarx"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/security/CheckmarxStepInfo"
              }
            }
          }
        }
      ]
    },
    "ClairScanNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/security/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/security/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/security/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "Clair"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/security/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Clair"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/security/ClairStepInfo"
              }
            }
          }
        }
      ]
    },
    "DataTheoremScanNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/security/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/security/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/security/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "DataTheorem"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/security/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "DataTheorem"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/security/DataTheoremStepInfo"
              }
            }
          }
        }
      ]
    },
    "DockerContentTrustScanNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/security/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/security/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/security/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "DockerContentTrust"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/security/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "DockerContentTrust"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/security/DockerContentTrustStepInfo"
              }
            }
          }
        }
      ]
    },
    "ExternalScanNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/security/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/security/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/security/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "External"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/security/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "External"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/security/ExternalStepInfo"
              }
            }
          }
        }
      ]
    },
    "FortifyOnDemandScanNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/security/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/security/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/security/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "FortifyOnDemand"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/security/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "FortifyOnDemand"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/security/FortifyOnDemandStepInfo"
              }
            }
          }
        }
      ]
    },
    "GrypeScanNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/security/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/security/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/security/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "Grype"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/security/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Grype"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/security/GrypeStepInfo"
              }
            }
          }
        }
      ]
    },
    "JfrogXrayScanNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/security/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/security/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/security/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "JfrogXray"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/security/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "JfrogXray"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/security/JfrogXrayStepInfo"
              }
            }
          }
        }
      ]
    },
    "MendScanNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/security/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/security/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/security/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "Mend"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/security/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Mend"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/security/MendStepInfo"
              }
            }
          }
        }
      ]
    },
    "MetasploitScanNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/security/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/security/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/security/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "Metasploit"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/security/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Metasploit"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/security/MetasploitStepInfo"
              }
            }
          }
        }
      ]
    },
    "NessusScanNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/security/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/security/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/security/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "Nessus"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/security/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Nessus"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/security/NessusStepInfo"
              }
            }
          }
        }
      ]
    },
    "NexusIQScanNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/security/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/security/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/security/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "NexusIQ"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/security/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "NexusIQ"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/security/NexusIQStepInfo"
              }
            }
          }
        }
      ]
    },
    "NiktoScanNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/security/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/security/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/security/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "Nikto"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/security/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Nikto"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/security/NiktoStepInfo"
              }
            }
          }
        }
      ]
    },
    "NmapScanNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/security/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/security/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/security/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "Nmap"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/security/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Nmap"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/security/NmapStepInfo"
              }
            }
          }
        }
      ]
    },
    "OpenvasScanNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/security/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/security/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/security/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "Openvas"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/security/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Openvas"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/security/OpenvasStepInfo"
              }
            }
          }
        }
      ]
    },
    "OwaspScanNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/security/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/security/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/security/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "Owasp"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/security/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Owasp"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/security/OwaspStepInfo"
              }
            }
          }
        }
      ]
    },
    "PrismaCloudScanNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/security/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/security/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/security/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "PrismaCloud"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/security/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "PrismaCloud"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/security/PrismaCloudStepInfo"
              }
            }
          }
        }
      ]
    },
    "ProwlerScanNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/security/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/security/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/security/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "Prowler"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/security/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Prowler"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/security/ProwlerStepInfo"
              }
            }
          }
        }
      ]
    },
    "QualysScanNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/security/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/security/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/security/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "Qualys"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/security/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Qualys"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/security/QualysStepInfo"
              }
            }
          }
        }
      ]
    },
    "ReapsawScanNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/security/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/security/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/security/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "Reapsaw"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/security/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Reapsaw"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/security/ReapsawStepInfo"
              }
            }
          }
        }
      ]
    },
    "ShiftLeftScanNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/security/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/security/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/security/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "ShiftLeft"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/security/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "ShiftLeft"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/security/ShiftLeftStepInfo"
              }
            }
          }
        }
      ]
    },
    "SniperScanNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/security/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/security/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/security/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "Sniper"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/security/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Sniper"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/security/SniperStepInfo"
              }
            }
          }
        }
      ]
    },
    "SnykScanNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/security/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/security/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/security/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "Snyk"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/security/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Snyk"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/security/SnykStepInfo"
              }
            }
          }
        }
      ]
    },
    "SonarqubeScanNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/security/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/security/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/security/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "Sonarqube"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/security/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Sonarqube"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/security/SonarqubeStepInfo"
              }
            }
          }
        }
      ]
    },
    "SysdigScanNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/security/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/security/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/security/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "Sysdig"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/security/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Sysdig"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/security/SysdigStepInfo"
              }
            }
          }
        }
      ]
    },
    "TenableScanNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/security/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/security/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/security/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "Tenable"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/security/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Tenable"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/security/TenableStepInfo"
              }
            }
          }
        }
      ]
    },
    "VeracodeScanNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/security/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/security/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/security/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "Veracode"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/security/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Veracode"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/security/VeracodeStepInfo"
              }
            }
          }
        }
      ]
    },
    "ZapScanNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/security/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/security/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/security/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "Zap"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/security/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Zap"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/security/ZapStepInfo"
              }
            }
          }
        }
      ]
    },
    "AddRuleYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/security/PatchInstruction"
        },
        {
          "type": "object",
          "required": [
            "identifier",
            "spec",
            "type"
          ],
          "properties": {
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/security/AddRuleYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "AddRule"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AddRuleYamlSpec": {
      "type": "object",
      "properties": {
        "clauses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/security/Clause"
          }
        },
        "distribution": {
          "$ref": "#/definitions/security/DistributionYamlSpec"
        },
        "priority": {
          "type": "integer",
          "format": "int32"
        },
        "serve": {
          "$ref": "#/definitions/security/Serve"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AddSegmentToVariationTargetMapYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/security/PatchInstruction"
        },
        {
          "type": "object",
          "required": [
            "identifier",
            "spec",
            "type"
          ],
          "properties": {
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/security/AddSegmentToVariationTargetMapYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "AddSegmentToVariationTargetMap"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AddSegmentToVariationTargetMapYamlSpec": {
      "type": "object",
      "required": [
        "segments",
        "variation"
      ],
      "properties": {
        "segments": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "variation": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AddTargetsToVariationTargetMapYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/security/PatchInstruction"
        },
        {
          "type": "object",
          "required": [
            "identifier",
            "spec",
            "type"
          ],
          "properties": {
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/security/AddTargetsToVariationTargetMapYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "AddTargetsToVariationTargetMap"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AddTargetsToVariationTargetMapYamlSpec": {
      "type": "object",
      "required": [
        "targets",
        "variation"
      ],
      "properties": {
        "targets": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "variation": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ApproverInputInfo": {
      "type": "object",
      "properties": {
        "defaultValue": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "minLength": 1
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "Approvers": {
      "type": "object",
      "required": [
        "disallowPipelineExecutor",
        "minimumCount",
        "userGroups"
      ],
      "properties": {
        "disallowPipelineExecutor": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ]
        },
        "minimumCount": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "userGroups": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              },
              "maxItems": 2147483647,
              "minItems": 1
            },
            {
              "type": "string",
              "pattern": "(<\\+.+>.*)",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "BarrierStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/security/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "barrierRef"
          ],
          "properties": {
            "barrierRef": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "Clause": {
      "type": "object",
      "required": [
        "attribute",
        "id",
        "negate",
        "op",
        "values"
      ],
      "properties": {
        "attribute": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "negate": {
          "type": "boolean"
        },
        "op": {
          "type": "string"
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ClauseYamlSpec": {
      "type": "object",
      "required": [
        "op",
        "values"
      ],
      "properties": {
        "attribute": {
          "type": "string"
        },
        "op": {
          "type": "string"
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "Condition": {
      "type": "object",
      "required": [
        "key",
        "operator",
        "value"
      ],
      "properties": {
        "key": {
          "type": "string"
        },
        "operator": {
          "type": "string",
          "enum": [
            "equals",
            "not equals",
            "in",
            "not in"
          ]
        },
        "value": {
          "type": "string",
          "minLength": 1
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ContainerInfraYamlSpec": {
      "type": "object",
      "required": [
        "connectorRef",
        "namespace",
        "resources"
      ],
      "properties": {
        "annotations": {
          "oneOf": [
            {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ]
        },
        "automountServiceAccountToken": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "connectorRef": {
          "type": "string"
        },
        "containerSecurityContext": {
          "oneOf": [
            {
              "$ref": "#/definitions/security/SecurityContext"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "initTimeout": {
          "type": "string"
        },
        "labels": {
          "oneOf": [
            {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ]
        },
        "namespace": {
          "type": "string",
          "minLength": 1,
          "maxLength": 2147483647
        },
        "nodeSelector": {
          "oneOf": [
            {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "os": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Linux",
                "MacOS",
                "Windows"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "priorityClassName": {
          "type": "string"
        },
        "resources": {
          "$ref": "#/definitions/security/ContainerResource"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "serviceAccountName": {
          "type": "string"
        },
        "tolerations": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/security/Toleration"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "volumes": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/security/ContainerVolume"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ContainerK8sInfra": {
      "allOf": [
        {
          "$ref": "#/definitions/security/ContainerStepInfra"
        },
        {
          "type": "object",
          "required": [
            "spec",
            "type"
          ],
          "properties": {
            "spec": {
              "$ref": "#/definitions/security/ContainerInfraYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "KubernetesDirect"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ContainerStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/security/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "command",
            "infrastructure"
          ],
          "properties": {
            "command": {
              "type": "string"
            },
            "connectorRef": {
              "type": "string"
            },
            "entrypoint": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "envVariables": {
              "oneOf": [
                {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "image": {
              "type": "string"
            },
            "imagePullPolicy": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Always",
                    "Never",
                    "IfNotPresent"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "infrastructure": {
              "oneOf": [
                {
                  "$ref": "#/definitions/security/ContainerK8sInfra"
                }
              ]
            },
            "metadata": {
              "type": "string"
            },
            "outputVariables": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/security/OutputNGVariable"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "privileged": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "settings": {
              "oneOf": [
                {
                  "$ref": "#/definitions/security/ParameterFieldMapStringJsonNode"
                },
                {
                  "type": "string"
                }
              ]
            },
            "shell": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Sh",
                    "Bash",
                    "Powershell",
                    "Pwsh",
                    "Python"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ContainerStepInfra": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "KubernetesDirect"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ContainerVolume": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "EmptyDir",
            "PersistentVolumeClaim",
            "HostPath"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CriteriaSpec": {
      "type": "object",
      "discriminator": "type",
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CriteriaSpecWrapper": {
      "type": "object",
      "required": [
        "spec",
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "Jexl",
            "KeyValues"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Jexl"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/security/JexlCriteriaSpec"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "KeyValues"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/security/KeyValuesCriteriaSpec"
              }
            }
          }
        }
      ]
    },
    "CustomApprovalStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/security/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "approvalCriteria",
            "retryInterval",
            "scriptTimeout",
            "shell",
            "source"
          ],
          "properties": {
            "approvalCriteria": {
              "$ref": "#/definitions/security/CriteriaSpecWrapper"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "environmentVariables": {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/security/NumberNGVariable"
                  },
                  {
                    "$ref": "#/definitions/security/SecretNGVariable"
                  },
                  {
                    "$ref": "#/definitions/security/StringNGVariable"
                  }
                ]
              }
            },
            "outputVariables": {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/security/NumberNGVariable"
                  },
                  {
                    "$ref": "#/definitions/security/SecretNGVariable"
                  },
                  {
                    "$ref": "#/definitions/security/StringNGVariable"
                  }
                ]
              }
            },
            "rejectionCriteria": {
              "$ref": "#/definitions/security/CriteriaSpecWrapper"
            },
            "retryInterval": {
              "type": "string",
              "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(<\\+input>.*)|(.*<\\+.*>.*)|(^$))$"
            },
            "scriptTimeout": {
              "type": "string",
              "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(<\\+input>.*)|(.*<\\+.*>.*)|(^$))$"
            },
            "shell": {
              "type": "string",
              "enum": [
                "Bash",
                "PowerShell"
              ]
            },
            "source": {
              "$ref": "#/definitions/security/ShellScriptSourceWrapper"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CustomPolicyStepSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/security/PolicySpec"
        },
        {
          "type": "object",
          "required": [
            "payload"
          ],
          "properties": {
            "payload": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "Distribution": {
      "type": "object",
      "required": [
        "bucketBy",
        "variations"
      ],
      "properties": {
        "bucketBy": {
          "type": "string"
        },
        "variations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/security/WeightedVariation"
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "DistributionYamlSpec": {
      "type": "object",
      "required": [
        "bucketBy"
      ],
      "properties": {
        "bucketBy": {
          "type": "string"
        },
        "clauses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/security/ClauseYamlSpec"
          }
        },
        "variations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/security/VariationYamlSpec"
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "EmailStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/security/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "subject",
            "to"
          ],
          "properties": {
            "body": {
              "type": "string"
            },
            "cc": {
              "type": "string"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "subject": {
              "type": "string"
            },
            "to": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ExecutionTarget": {
      "type": "object",
      "properties": {
        "connectorRef": {
          "type": "string"
        },
        "host": {
          "type": "string"
        },
        "workingDirectory": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "FlagConfigurationStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/security/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "environment",
            "feature",
            "instructions"
          ],
          "properties": {
            "environment": {
              "type": "string"
            },
            "feature": {
              "type": "string"
            },
            "instructions": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/security/PatchInstruction"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "HarnessApprovalStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/security/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "approvers",
            "includePipelineExecutionHistory"
          ],
          "properties": {
            "approvalMessage": {
              "type": "string",
              "minLength": 1
            },
            "approverInputs": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/security/ApproverInputInfo"
              }
            },
            "approvers": {
              "$ref": "#/definitions/security/Approvers"
            },
            "includePipelineExecutionHistory": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "HarnessFileStoreSource": {
      "allOf": [
        {
          "$ref": "#/definitions/security/ShellScriptBaseSource"
        },
        {
          "type": "object",
          "properties": {
            "file": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "HttpHeaderConfig": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "HttpStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/security/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "method",
            "url"
          ],
          "properties": {
            "assertion": {
              "type": "string"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "headers": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/security/HttpHeaderConfig"
              }
            },
            "method": {
              "type": "string"
            },
            "outputVariables": {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/security/NumberNGVariable"
                  },
                  {
                    "$ref": "#/definitions/security/SecretNGVariable"
                  },
                  {
                    "$ref": "#/definitions/security/StringNGVariable"
                  }
                ]
              }
            },
            "requestBody": {
              "type": "string"
            },
            "url": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ImportDataSpec": {
      "type": "object",
      "discriminator": "type",
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ImportDataSpecWrapper": {
      "type": "object",
      "required": [
        "spec",
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "Json",
            "KeyValues"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Json"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/security/JsonImportDataSpec"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "KeyValues"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/security/KeyValuesImportDataSpec"
              }
            }
          }
        }
      ]
    },
    "JexlCriteriaSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/security/CriteriaSpec"
        },
        {
          "type": "object",
          "required": [
            "expression"
          ],
          "properties": {
            "expression": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "JiraApprovalStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/security/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "approvalCriteria",
            "connectorRef",
            "issueKey"
          ],
          "properties": {
            "approvalCriteria": {
              "$ref": "#/definitions/security/CriteriaSpecWrapper"
            },
            "connectorRef": {
              "type": "string"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "issueKey": {
              "type": "string"
            },
            "issueType": {
              "type": "string"
            },
            "projectKey": {
              "type": "string"
            },
            "rejectionCriteria": {
              "$ref": "#/definitions/security/CriteriaSpecWrapper"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "JiraCreateStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/security/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "issueType",
            "projectKey"
          ],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "fields": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/security/JiraField"
              }
            },
            "issueType": {
              "type": "string"
            },
            "projectKey": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "JiraField": {
      "type": "object",
      "required": [
        "value"
      ],
      "properties": {
        "name": {
          "type": "string",
          "minLength": 1
        },
        "value": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "JiraUpdateStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/security/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "issueKey"
          ],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "fields": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/security/JiraField"
              }
            },
            "issueKey": {
              "type": "string"
            },
            "transitionTo": {
              "$ref": "#/definitions/security/TransitionTo"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "JsonImportDataSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/security/ImportDataSpec"
        },
        {
          "type": "object",
          "required": [
            "jsonBody"
          ],
          "properties": {
            "jsonBody": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "KeyValuesCriteriaSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/security/CriteriaSpec"
        },
        {
          "type": "object",
          "required": [
            "conditions"
          ],
          "properties": {
            "conditions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/security/Condition"
              }
            },
            "matchAnyCondition": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "KeyValuesImportDataSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/security/ImportDataSpec"
        },
        {
          "type": "object",
          "required": [
            "fields"
          ],
          "properties": {
            "fields": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/security/ServiceNowField"
              }
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PMSStepInfo": {
      "type": "object",
      "discriminator": "type",
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PatchInstruction": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "SetFeatureFlagState",
            "SetOnVariation",
            "SetOffVariation",
            "SetDefaultVariations",
            "AddRule",
            "UpdateRule",
            "AddTargetsToVariationTargetMap",
            "RemoveTargetsToVariationTargetMap",
            "AddSegmentToVariationTargetMap",
            "RemoveSegmentsToVariationTargetMap"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PolicySpec": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PolicyStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/security/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "policySets"
          ],
          "properties": {
            "metadata": {
              "type": "string"
            },
            "policySets": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "type": {
              "type": "string"
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Custom"
              }
            }
          },
          "then": {
            "properties": {
              "policySpec": {
                "$ref": "#/definitions/security/CustomPolicyStepSpec"
              }
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "QueueStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/security/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "key",
            "scope"
          ],
          "properties": {
            "key": {
              "type": "string"
            },
            "scope": {
              "type": "string",
              "enum": [
                "Pipeline",
                "Stage"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "RemoveSegmentToVariationTargetMapYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/security/PatchInstruction"
        },
        {
          "type": "object",
          "required": [
            "identifier",
            "spec",
            "type"
          ],
          "properties": {
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/security/RemoveSegmentToVariationTargetMapYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "RemoveSegmentToVariationTargetMap"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "RemoveSegmentToVariationTargetMapYamlSpec": {
      "type": "object",
      "required": [
        "segments",
        "variation"
      ],
      "properties": {
        "segments": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "variation": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "RemoveTargetsToVariationTargetMapYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/security/PatchInstruction"
        },
        {
          "type": "object",
          "required": [
            "identifier",
            "spec",
            "type"
          ],
          "properties": {
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/security/RemoveTargetsToVariationTargetMapYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "RemoveTargetsToVariationTargetMap"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "RemoveTargetsToVariationTargetMapYamlSpec": {
      "type": "object",
      "required": [
        "targets",
        "variation"
      ],
      "properties": {
        "targets": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "variation": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "Serve": {
      "type": "object",
      "properties": {
        "distribution": {
          "$ref": "#/definitions/security/Distribution"
        },
        "variation": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ServiceNowApprovalStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/security/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "approvalCriteria",
            "connectorRef",
            "ticketNumber",
            "ticketType"
          ],
          "properties": {
            "approvalCriteria": {
              "$ref": "#/definitions/security/CriteriaSpecWrapper"
            },
            "changeWindow": {
              "$ref": "#/definitions/security/ServiceNowChangeWindowSpec"
            },
            "connectorRef": {
              "type": "string"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "rejectionCriteria": {
              "$ref": "#/definitions/security/CriteriaSpecWrapper"
            },
            "ticketNumber": {
              "type": "string"
            },
            "ticketType": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ServiceNowChangeWindowSpec": {
      "type": "object",
      "required": [
        "endField",
        "startField"
      ],
      "properties": {
        "endField": {
          "type": "string"
        },
        "startField": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ServiceNowCreateStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/security/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "ticketType",
            "useServiceNowTemplate"
          ],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "fields": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/security/ServiceNowField"
              }
            },
            "templateName": {
              "type": "string"
            },
            "ticketType": {
              "type": "string"
            },
            "useServiceNowTemplate": {
              "type": "boolean"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ServiceNowField": {
      "type": "object",
      "required": [
        "name",
        "value"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ServiceNowImportSetStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/security/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "importData",
            "stagingTableName"
          ],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "importData": {
              "$ref": "#/definitions/security/ImportDataSpecWrapper"
            },
            "stagingTableName": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ServiceNowUpdateStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/security/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "ticketNumber",
            "ticketType",
            "useServiceNowTemplate"
          ],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "fields": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/security/ServiceNowField"
              }
            },
            "templateName": {
              "type": "string"
            },
            "ticketNumber": {
              "type": "string"
            },
            "ticketType": {
              "type": "string"
            },
            "useServiceNowTemplate": {
              "type": "boolean"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SetDefaultVariationsYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/security/PatchInstruction"
        },
        {
          "type": "object",
          "required": [
            "identifier",
            "spec",
            "type"
          ],
          "properties": {
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/security/SetDefaultVariationsYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "SetDefaultVariations"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SetDefaultVariationsYamlSpec": {
      "type": "object",
      "required": [
        "off",
        "on"
      ],
      "properties": {
        "off": {
          "type": "string"
        },
        "on": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SetFeatureFlagStateYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/security/PatchInstruction"
        },
        {
          "type": "object",
          "required": [
            "identifier",
            "spec",
            "type"
          ],
          "properties": {
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/security/SetFeatureFlagStateYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "SetFeatureFlagState"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SetFeatureFlagStateYamlSpec": {
      "type": "object",
      "required": [
        "state"
      ],
      "properties": {
        "state": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SetOffVariationYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/security/PatchInstruction"
        },
        {
          "type": "object",
          "required": [
            "identifier",
            "spec",
            "type"
          ],
          "properties": {
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/security/SetOffVariationYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "SetOffVariation"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SetOffVariationYamlSpec": {
      "type": "object",
      "required": [
        "variation"
      ],
      "properties": {
        "variation": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SetOnVariationYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/security/PatchInstruction"
        },
        {
          "type": "object",
          "required": [
            "identifier",
            "spec",
            "type"
          ],
          "properties": {
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/security/SetOnVariationYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "SetOnVariation"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SetOnVariationYamlSpec": {
      "type": "object",
      "required": [
        "variation"
      ],
      "properties": {
        "variation": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ShellScriptBaseSource": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ShellScriptInlineSource": {
      "allOf": [
        {
          "$ref": "#/definitions/security/ShellScriptBaseSource"
        },
        {
          "type": "object",
          "properties": {
            "script": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ShellScriptSourceWrapper": {
      "type": "object",
      "required": [
        "spec",
        "type"
      ],
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Harness"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/security/HarnessFileStoreSource"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Inline"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/security/ShellScriptInlineSource"
              }
            }
          }
        }
      ]
    },
    "ShellScriptStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/security/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "onDelegate",
            "shell",
            "source"
          ],
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "environmentVariables": {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/security/NumberNGVariable"
                  },
                  {
                    "$ref": "#/definitions/security/SecretNGVariable"
                  },
                  {
                    "$ref": "#/definitions/security/StringNGVariable"
                  }
                ]
              }
            },
            "executionTarget": {
              "$ref": "#/definitions/security/ExecutionTarget"
            },
            "metadata": {
              "type": "string"
            },
            "onDelegate": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            },
            "outputVariables": {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/security/NumberNGVariable"
                  },
                  {
                    "$ref": "#/definitions/security/SecretNGVariable"
                  },
                  {
                    "$ref": "#/definitions/security/StringNGVariable"
                  }
                ]
              }
            },
            "shell": {
              "type": "string",
              "enum": [
                "Bash",
                "PowerShell"
              ]
            },
            "source": {
              "$ref": "#/definitions/security/ShellScriptSourceWrapper"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "TransitionTo": {
      "type": "object",
      "required": [
        "status"
      ],
      "properties": {
        "status": {
          "type": "string"
        },
        "transitionName": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "UpdateRuleYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/security/PatchInstruction"
        },
        {
          "type": "object",
          "required": [
            "identifier",
            "spec",
            "type"
          ],
          "properties": {
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/security/UpdateRuleYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "UpdateRule"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "UpdateRuleYamlSpec": {
      "type": "object",
      "required": [
        "bucketBy",
        "ruleID"
      ],
      "properties": {
        "bucketBy": {
          "type": "string"
        },
        "ruleID": {
          "type": "string"
        },
        "serve": {
          "$ref": "#/definitions/security/Serve"
        },
        "variations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/security/VariationYamlSpec"
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "VariationYamlSpec": {
      "type": "object",
      "required": [
        "variation",
        "weight"
      ],
      "properties": {
        "variation": {
          "type": "string"
        },
        "weight": {
          "type": "integer",
          "format": "int32"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "WaitStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/security/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "duration"
          ],
          "properties": {
            "duration": {
              "type": "string",
              "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(<\\+input>.*)|(.*<\\+.*>.*)|(^$))$"
            },
            "metadata": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "WeightedVariation": {
      "type": "object",
      "required": [
        "variation",
        "weight"
      ],
      "properties": {
        "variation": {
          "type": "string"
        },
        "weight": {
          "type": "integer",
          "format": "int32"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  "approval": {
    "AbortFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/approval/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "Abort"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AddRuleYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/approval/PatchInstruction"
        },
        {
          "type": "object",
          "required": [
            "identifier",
            "spec",
            "type"
          ],
          "properties": {
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/approval/AddRuleYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "AddRule"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AddRuleYamlSpec": {
      "type": "object",
      "properties": {
        "clauses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/approval/Clause"
          }
        },
        "distribution": {
          "$ref": "#/definitions/approval/DistributionYamlSpec"
        },
        "priority": {
          "type": "integer",
          "format": "int32"
        },
        "serve": {
          "$ref": "#/definitions/approval/Serve"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AddSegmentToVariationTargetMapYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/approval/PatchInstruction"
        },
        {
          "type": "object",
          "required": [
            "identifier",
            "spec",
            "type"
          ],
          "properties": {
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/approval/AddSegmentToVariationTargetMapYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "AddSegmentToVariationTargetMap"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AddSegmentToVariationTargetMapYamlSpec": {
      "type": "object",
      "required": [
        "segments",
        "variation"
      ],
      "properties": {
        "segments": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "variation": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AddTargetsToVariationTargetMapYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/approval/PatchInstruction"
        },
        {
          "type": "object",
          "required": [
            "identifier",
            "spec",
            "type"
          ],
          "properties": {
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/approval/AddTargetsToVariationTargetMapYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "AddTargetsToVariationTargetMap"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AddTargetsToVariationTargetMapYamlSpec": {
      "type": "object",
      "required": [
        "targets",
        "variation"
      ],
      "properties": {
        "targets": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "variation": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ApprovalStageConfig": {
      "type": "object",
      "required": [
        "execution"
      ],
      "properties": {
        "execution": {
          "$ref": "#/definitions/approval/ExecutionElementConfig"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ApprovalStageNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "type"
      ],
      "properties": {
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "description": {
          "type": "string"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/approval/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/approval/StrategyConfig"
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "type": {
          "type": "string",
          "enum": [
            "Approval"
          ]
        },
        "variables": {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/approval/NumberNGVariable"
              },
              {
                "$ref": "#/definitions/approval/SecretNGVariable"
              },
              {
                "$ref": "#/definitions/approval/StringNGVariable"
              }
            ]
          }
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/approval/StageWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Approval"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/approval/ApprovalStageConfig"
              }
            }
          }
        }
      ]
    },
    "ApproverInputInfo": {
      "type": "object",
      "properties": {
        "defaultValue": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "minLength": 1
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "Approvers": {
      "type": "object",
      "required": [
        "disallowPipelineExecutor",
        "minimumCount",
        "userGroups"
      ],
      "properties": {
        "disallowPipelineExecutor": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ]
        },
        "minimumCount": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "userGroups": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              },
              "maxItems": 2147483647,
              "minItems": 1
            },
            {
              "type": "string",
              "pattern": "(<\\+.+>.*)",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "BarrierStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/approval/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "barrierRef"
          ],
          "properties": {
            "barrierRef": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "barrierRef"
      ],
      "properties": {
        "barrierRef": {
          "type": "string"
        }
      }
    },
    "Capabilities": {
      "type": "object",
      "properties": {
        "add": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "drop": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "Clause": {
      "type": "object",
      "required": [
        "attribute",
        "id",
        "negate",
        "op",
        "values"
      ],
      "properties": {
        "attribute": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "negate": {
          "type": "boolean"
        },
        "op": {
          "type": "string"
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ClauseYamlSpec": {
      "type": "object",
      "required": [
        "op",
        "values"
      ],
      "properties": {
        "attribute": {
          "type": "string"
        },
        "op": {
          "type": "string"
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "Condition": {
      "type": "object",
      "required": [
        "key",
        "operator",
        "value"
      ],
      "properties": {
        "key": {
          "type": "string"
        },
        "operator": {
          "type": "string",
          "enum": [
            "equals",
            "not equals",
            "in",
            "not in"
          ]
        },
        "value": {
          "type": "string",
          "minLength": 1
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ContainerInfraYamlSpec": {
      "type": "object",
      "required": [
        "connectorRef",
        "namespace",
        "resources"
      ],
      "properties": {
        "annotations": {
          "oneOf": [
            {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ]
        },
        "automountServiceAccountToken": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "connectorRef": {
          "type": "string"
        },
        "containerSecurityContext": {
          "oneOf": [
            {
              "$ref": "#/definitions/approval/SecurityContext"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "initTimeout": {
          "type": "string"
        },
        "labels": {
          "oneOf": [
            {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ]
        },
        "namespace": {
          "type": "string",
          "minLength": 1,
          "maxLength": 2147483647
        },
        "nodeSelector": {
          "oneOf": [
            {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "os": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Linux",
                "MacOS",
                "Windows"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "priorityClassName": {
          "type": "string"
        },
        "resources": {
          "$ref": "#/definitions/approval/ContainerResource"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "serviceAccountName": {
          "type": "string"
        },
        "tolerations": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/approval/Toleration"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "volumes": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/approval/ContainerVolume"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ContainerK8sInfra": {
      "allOf": [
        {
          "$ref": "#/definitions/approval/ContainerStepInfra"
        },
        {
          "type": "object",
          "required": [
            "spec",
            "type"
          ],
          "properties": {
            "spec": {
              "$ref": "#/definitions/approval/ContainerInfraYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "KubernetesDirect"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ContainerResource": {
      "type": "object",
      "required": [
        "limits"
      ],
      "properties": {
        "limits": {
          "$ref": "#/definitions/approval/Limits"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ContainerStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/approval/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "command",
            "infrastructure"
          ],
          "properties": {
            "command": {
              "type": "string"
            },
            "connectorRef": {
              "type": "string"
            },
            "entrypoint": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "envVariables": {
              "oneOf": [
                {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "image": {
              "type": "string"
            },
            "imagePullPolicy": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Always",
                    "Never",
                    "IfNotPresent"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "infrastructure": {
              "oneOf": [
                {
                  "$ref": "#/definitions/approval/ContainerK8sInfra"
                }
              ]
            },
            "metadata": {
              "type": "string"
            },
            "outputVariables": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/approval/OutputNGVariable"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "privileged": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "settings": {
              "oneOf": [
                {
                  "$ref": "#/definitions/approval/ParameterFieldMapStringJsonNode"
                },
                {
                  "type": "string"
                }
              ]
            },
            "shell": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Sh",
                    "Bash",
                    "Powershell",
                    "Pwsh",
                    "Python"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "command",
        "infrastructure"
      ],
      "properties": {
        "command": {
          "type": "string"
        },
        "connectorRef": {
          "type": "string"
        },
        "entrypoint": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ]
        },
        "envVariables": {
          "oneOf": [
            {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ]
        },
        "image": {
          "type": "string"
        },
        "imagePullPolicy": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Always",
                "Never",
                "IfNotPresent"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "infrastructure": {
          "oneOf": [
            {
              "$ref": "#/definitions/approval/ContainerK8sInfra"
            }
          ]
        },
        "metadata": {
          "type": "string"
        },
        "outputVariables": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/approval/OutputNGVariable"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "privileged": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "settings": {
          "oneOf": [
            {
              "$ref": "#/definitions/approval/ParameterFieldMapStringJsonNode"
            },
            {
              "type": "string"
            }
          ]
        },
        "shell": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Sh",
                "Bash",
                "Powershell",
                "Pwsh",
                "Python"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      }
    },
    "ContainerStepInfra": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "KubernetesDirect"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ContainerVolume": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "EmptyDir",
            "PersistentVolumeClaim",
            "HostPath"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CriteriaSpec": {
      "type": "object",
      "discriminator": "type",
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CriteriaSpecWrapper": {
      "type": "object",
      "required": [
        "spec",
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "Jexl",
            "KeyValues"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Jexl"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/approval/JexlCriteriaSpec"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "KeyValues"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/approval/KeyValuesCriteriaSpec"
              }
            }
          }
        }
      ]
    },
    "CustomApprovalStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/approval/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "approvalCriteria",
            "retryInterval",
            "scriptTimeout",
            "shell",
            "source"
          ],
          "properties": {
            "approvalCriteria": {
              "$ref": "#/definitions/approval/CriteriaSpecWrapper"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "environmentVariables": {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/approval/NumberNGVariable"
                  },
                  {
                    "$ref": "#/definitions/approval/SecretNGVariable"
                  },
                  {
                    "$ref": "#/definitions/approval/StringNGVariable"
                  }
                ]
              }
            },
            "outputVariables": {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/approval/NumberNGVariable"
                  },
                  {
                    "$ref": "#/definitions/approval/SecretNGVariable"
                  },
                  {
                    "$ref": "#/definitions/approval/StringNGVariable"
                  }
                ]
              }
            },
            "rejectionCriteria": {
              "$ref": "#/definitions/approval/CriteriaSpecWrapper"
            },
            "retryInterval": {
              "type": "string",
              "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(<\\+input>.*)|(.*<\\+.*>.*)|(^$))$"
            },
            "scriptTimeout": {
              "type": "string",
              "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(<\\+input>.*)|(.*<\\+.*>.*)|(^$))$"
            },
            "shell": {
              "type": "string",
              "enum": [
                "Bash",
                "PowerShell"
              ]
            },
            "source": {
              "$ref": "#/definitions/approval/ShellScriptSourceWrapper"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "approvalCriteria",
        "retryInterval",
        "scriptTimeout",
        "shell",
        "source"
      ],
      "properties": {
        "approvalCriteria": {
          "$ref": "#/definitions/approval/CriteriaSpecWrapper"
        },
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "environmentVariables": {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/approval/NumberNGVariable"
              },
              {
                "$ref": "#/definitions/approval/SecretNGVariable"
              },
              {
                "$ref": "#/definitions/approval/StringNGVariable"
              }
            ]
          }
        },
        "outputVariables": {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/approval/NumberNGVariable"
              },
              {
                "$ref": "#/definitions/approval/SecretNGVariable"
              },
              {
                "$ref": "#/definitions/approval/StringNGVariable"
              }
            ]
          }
        },
        "rejectionCriteria": {
          "$ref": "#/definitions/approval/CriteriaSpecWrapper"
        },
        "retryInterval": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(<\\+input>.*)|(.*<\\+.*>.*)|(^$))$"
        },
        "scriptTimeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(<\\+input>.*)|(.*<\\+.*>.*)|(^$))$"
        },
        "shell": {
          "type": "string",
          "enum": [
            "Bash",
            "PowerShell"
          ]
        },
        "source": {
          "$ref": "#/definitions/approval/ShellScriptSourceWrapper"
        }
      }
    },
    "CustomPolicyStepSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/approval/PolicySpec"
        },
        {
          "type": "object",
          "required": [
            "payload"
          ],
          "properties": {
            "payload": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "Distribution": {
      "type": "object",
      "required": [
        "bucketBy",
        "variations"
      ],
      "properties": {
        "bucketBy": {
          "type": "string"
        },
        "variations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/approval/WeightedVariation"
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "DistributionYamlSpec": {
      "type": "object",
      "required": [
        "bucketBy"
      ],
      "properties": {
        "bucketBy": {
          "type": "string"
        },
        "clauses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/approval/ClauseYamlSpec"
          }
        },
        "variations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/approval/VariationYamlSpec"
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "EmailStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/approval/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "subject",
            "to"
          ],
          "properties": {
            "body": {
              "type": "string"
            },
            "cc": {
              "type": "string"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "subject": {
              "type": "string"
            },
            "to": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "subject",
        "to"
      ],
      "properties": {
        "body": {
          "type": "string"
        },
        "cc": {
          "type": "string"
        },
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "subject": {
          "type": "string"
        },
        "to": {
          "type": "string"
        }
      }
    },
    "EmptyDirYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/approval/ContainerVolume"
        },
        {
          "type": "object",
          "required": [
            "mountPath",
            "spec",
            "type"
          ],
          "properties": {
            "mountPath": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/approval/EmptyDirYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "EmptyDir",
                "PersistentVolumeClaim",
                "HostPath"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "EmptyDirYamlSpec": {
      "type": "object",
      "properties": {
        "medium": {
          "type": "string"
        },
        "size": {
          "type": "string",
          "pattern": "^(([0-9]*[.])?[0-9]+)([GM]i?)|<\\+input>$"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ExecutionElementConfig": {
      "type": "object",
      "required": [
        "steps"
      ],
      "properties": {
        "steps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/approval/ExecutionWrapperConfig"
          },
          "maxItems": 2147483647,
          "minItems": 1
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ExecutionTarget": {
      "type": "object",
      "properties": {
        "connectorRef": {
          "type": "string"
        },
        "host": {
          "type": "string"
        },
        "workingDirectory": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ExecutionWrapperConfig": {
      "type": "object",
      "properties": {
        "parallel": {
          "$ref": "#/definitions/approval/ParallelStepElementConfig"
        },
        "step": {
          "oneOf": [
            {
              "$ref": "#/definitions/approval/StepElementConfig"
            },
            {
              "$ref": "#/definitions/approval/PolicyStepNode"
            },
            {
              "$ref": "#/definitions/approval/TemplateStepNode"
            },
            {
              "$ref": "#/definitions/approval/ContainerStepNode"
            },
            {
              "$ref": "#/definitions/approval/ServiceNowUpdateStepNode"
            },
            {
              "$ref": "#/definitions/approval/JiraUpdateStepNode"
            },
            {
              "$ref": "#/definitions/approval/CustomApprovalStepNode"
            },
            {
              "$ref": "#/definitions/approval/ServiceNowCreateStepNode"
            },
            {
              "$ref": "#/definitions/approval/EmailStepNode"
            },
            {
              "$ref": "#/definitions/approval/FlagConfigurationStepNode"
            },
            {
              "$ref": "#/definitions/approval/BarrierStepNode"
            },
            {
              "$ref": "#/definitions/approval/ShellScriptStepNode"
            },
            {
              "$ref": "#/definitions/approval/WaitStepNode"
            },
            {
              "$ref": "#/definitions/approval/ServiceNowApprovalStepNode"
            },
            {
              "$ref": "#/definitions/approval/ServiceNowImportSetStepNode"
            },
            {
              "$ref": "#/definitions/approval/JiraCreateStepNode"
            },
            {
              "$ref": "#/definitions/approval/QueueStepNode"
            },
            {
              "$ref": "#/definitions/approval/JiraApprovalStepNode"
            },
            {
              "$ref": "#/definitions/approval/HttpStepNode"
            },
            {
              "$ref": "#/definitions/approval/HarnessApprovalStepNode"
            }
          ]
        },
        "stepGroup": {
          "$ref": "#/definitions/approval/StepGroupElementConfig"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "FailureStrategyActionConfig": {
      "type": "object",
      "required": [
        "type"
      ],
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "Ignore",
            "Retry",
            "MarkAsSuccess",
            "Abort",
            "StageRollback",
            "StepGroupRollback",
            "PipelineRollback",
            "ManualIntervention",
            "ProceedWithDefaultValues",
            "MarkAsFailure"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "FailureStrategyConfig": {
      "type": "object",
      "required": [
        "onFailure"
      ],
      "properties": {
        "onFailure": {
          "$ref": "#/definitions/approval/OnFailureConfig"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "FlagConfigurationStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/approval/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "environment",
            "feature",
            "instructions"
          ],
          "properties": {
            "environment": {
              "type": "string"
            },
            "feature": {
              "type": "string"
            },
            "instructions": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/approval/PatchInstruction"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "environment",
        "feature",
        "instructions"
      ],
      "properties": {
        "environment": {
          "type": "string"
        },
        "feature": {
          "type": "string"
        },
        "instructions": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/approval/PatchInstruction"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      }
    },
    "HarnessApprovalStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/approval/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "approvers",
            "includePipelineExecutionHistory"
          ],
          "properties": {
            "approvalMessage": {
              "type": "string",
              "minLength": 1
            },
            "approverInputs": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/approval/ApproverInputInfo"
              }
            },
            "approvers": {
              "$ref": "#/definitions/approval/Approvers"
            },
            "includePipelineExecutionHistory": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "approvers",
        "includePipelineExecutionHistory"
      ],
      "properties": {
        "approvalMessage": {
          "type": "string",
          "minLength": 1
        },
        "approverInputs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/approval/ApproverInputInfo"
          }
        },
        "approvers": {
          "$ref": "#/definitions/approval/Approvers"
        },
        "includePipelineExecutionHistory": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ]
        }
      }
    },
    "HarnessFileStoreSource": {
      "allOf": [
        {
          "$ref": "#/definitions/approval/ShellScriptBaseSource"
        },
        {
          "type": "object",
          "properties": {
            "file": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "HarnessForConfig": {
      "type": "object",
      "properties": {
        "end": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            },
            {
              "type": "string",
              "pattern": "(<\\+.+>.*)",
              "minLength": 1
            }
          ]
        },
        "items": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "(<\\+.+>.*)",
              "minLength": 1
            }
          ]
        },
        "maxConcurrency": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            },
            {
              "type": "string",
              "pattern": "(<\\+.+>.*)",
              "minLength": 1
            }
          ]
        },
        "partitionSize": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            },
            {
              "type": "string",
              "pattern": "(<\\+.+>.*)",
              "minLength": 1
            }
          ]
        },
        "start": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            },
            {
              "type": "string",
              "pattern": "(<\\+.+>.*)",
              "minLength": 1
            }
          ]
        },
        "times": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            },
            {
              "type": "string",
              "pattern": "(<\\+.+>.*)",
              "minLength": 1
            }
          ]
        },
        "unit": {
          "type": "string",
          "enum": [
            "Percentage",
            "Count"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "oneOf": [
            {
              "required": [
                "times"
              ]
            },
            {
              "required": [
                "items"
              ]
            }
          ]
        }
      ]
    },
    "HostPathYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/approval/ContainerVolume"
        },
        {
          "type": "object",
          "required": [
            "mountPath",
            "spec",
            "type"
          ],
          "properties": {
            "mountPath": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/approval/HostPathYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "EmptyDir",
                "PersistentVolumeClaim",
                "HostPath"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "HostPathYamlSpec": {
      "type": "object",
      "required": [
        "path"
      ],
      "properties": {
        "path": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "HttpHeaderConfig": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "HttpStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/approval/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "method",
            "url"
          ],
          "properties": {
            "assertion": {
              "type": "string"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "headers": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/approval/HttpHeaderConfig"
              }
            },
            "method": {
              "type": "string"
            },
            "outputVariables": {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/approval/NumberNGVariable"
                  },
                  {
                    "$ref": "#/definitions/approval/SecretNGVariable"
                  },
                  {
                    "$ref": "#/definitions/approval/StringNGVariable"
                  }
                ]
              }
            },
            "requestBody": {
              "type": "string"
            },
            "url": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "method",
        "url"
      ],
      "properties": {
        "assertion": {
          "type": "string"
        },
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "headers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/approval/HttpHeaderConfig"
          }
        },
        "method": {
          "type": "string"
        },
        "outputVariables": {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/approval/NumberNGVariable"
              },
              {
                "$ref": "#/definitions/approval/SecretNGVariable"
              },
              {
                "$ref": "#/definitions/approval/StringNGVariable"
              }
            ]
          }
        },
        "requestBody": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "IgnoreFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/approval/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "Ignore"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ImportDataSpec": {
      "type": "object",
      "discriminator": "type",
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ImportDataSpecWrapper": {
      "type": "object",
      "required": [
        "spec",
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "Json",
            "KeyValues"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Json"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/approval/JsonImportDataSpec"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "KeyValues"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/approval/KeyValuesImportDataSpec"
              }
            }
          }
        }
      ]
    },
    "InputSetValidator": {
      "type": "object",
      "properties": {
        "parameters": {
          "type": "string"
        },
        "validatorType": {
          "type": "string",
          "enum": [
            "ALLOWED_VALUES",
            "REGEX"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "JexlCriteriaSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/approval/CriteriaSpec"
        },
        {
          "type": "object",
          "required": [
            "expression"
          ],
          "properties": {
            "expression": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "JiraApprovalStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/approval/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "approvalCriteria",
            "connectorRef",
            "issueKey"
          ],
          "properties": {
            "approvalCriteria": {
              "$ref": "#/definitions/approval/CriteriaSpecWrapper"
            },
            "connectorRef": {
              "type": "string"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "issueKey": {
              "type": "string"
            },
            "issueType": {
              "type": "string"
            },
            "projectKey": {
              "type": "string"
            },
            "rejectionCriteria": {
              "$ref": "#/definitions/approval/CriteriaSpecWrapper"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "approvalCriteria",
        "connectorRef",
        "issueKey"
      ],
      "properties": {
        "approvalCriteria": {
          "$ref": "#/definitions/approval/CriteriaSpecWrapper"
        },
        "connectorRef": {
          "type": "string"
        },
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "issueKey": {
          "type": "string"
        },
        "issueType": {
          "type": "string"
        },
        "projectKey": {
          "type": "string"
        },
        "rejectionCriteria": {
          "$ref": "#/definitions/approval/CriteriaSpecWrapper"
        }
      }
    },
    "JiraCreateStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/approval/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "issueType",
            "projectKey"
          ],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "fields": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/approval/JiraField"
              }
            },
            "issueType": {
              "type": "string"
            },
            "projectKey": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "connectorRef",
        "issueType",
        "projectKey"
      ],
      "properties": {
        "connectorRef": {
          "type": "string"
        },
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "fields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/approval/JiraField"
          }
        },
        "issueType": {
          "type": "string"
        },
        "projectKey": {
          "type": "string"
        }
      }
    },
    "JiraField": {
      "type": "object",
      "required": [
        "value"
      ],
      "properties": {
        "name": {
          "type": "string",
          "minLength": 1
        },
        "value": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "JiraUpdateStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/approval/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "issueKey"
          ],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "fields": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/approval/JiraField"
              }
            },
            "issueKey": {
              "type": "string"
            },
            "transitionTo": {
              "$ref": "#/definitions/approval/TransitionTo"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "connectorRef",
        "issueKey"
      ],
      "properties": {
        "connectorRef": {
          "type": "string"
        },
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "fields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/approval/JiraField"
          }
        },
        "issueKey": {
          "type": "string"
        },
        "transitionTo": {
          "$ref": "#/definitions/approval/TransitionTo"
        }
      }
    },
    "JsonImportDataSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/approval/ImportDataSpec"
        },
        {
          "type": "object",
          "required": [
            "jsonBody"
          ],
          "properties": {
            "jsonBody": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "JsonNode": {
      "type": "object",
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "KeyValuesCriteriaSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/approval/CriteriaSpec"
        },
        {
          "type": "object",
          "required": [
            "conditions"
          ],
          "properties": {
            "conditions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/approval/Condition"
              }
            },
            "matchAnyCondition": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "KeyValuesImportDataSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/approval/ImportDataSpec"
        },
        {
          "type": "object",
          "required": [
            "fields"
          ],
          "properties": {
            "fields": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/approval/ServiceNowField"
              }
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "Limits": {
      "type": "object",
      "properties": {
        "cpu": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "number"
            }
          ]
        },
        "memory": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ManualFailureSpecConfig": {
      "type": "object",
      "required": [
        "onTimeout",
        "timeout"
      ],
      "properties": {
        "onTimeout": {
          "$ref": "#/definitions/approval/OnTimeoutConfig"
        },
        "timeout": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ManualInterventionFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/approval/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": [
            "spec",
            "type"
          ],
          "properties": {
            "spec": {
              "readOnly": true,
              "$ref": "#/definitions/approval/ManualFailureSpecConfig"
            },
            "type": {
              "type": "string",
              "enum": [
                "ManualIntervention"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "MarkAsFailFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/approval/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "MarkAsFailure"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "MarkAsSuccessFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/approval/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "MarkAsSuccess"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "MatrixConfigInterface": {
      "type": "object",
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "NGVariable": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "description": {
          "type": "string"
        },
        "metadata": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "required": {
          "type": "boolean"
        },
        "type": {
          "type": "string",
          "enum": [
            "String",
            "Number",
            "Secret"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "NumberNGVariable": {
      "allOf": [
        {
          "$ref": "#/definitions/approval/NGVariable"
        },
        {
          "type": "object",
          "required": [
            "value"
          ],
          "properties": {
            "default": {
              "type": "number",
              "format": "double"
            },
            "name": {
              "type": "string",
              "pattern": "^[a-zA-Z_][0-9a-zA-Z_\\.$]{0,127}$"
            },
            "type": {
              "type": "string",
              "enum": [
                "Number"
              ]
            },
            "value": {
              "oneOf": [
                {
                  "type": "number",
                  "format": "double"
                },
                {
                  "type": "string",
                  "pattern": "((^[+-]?[0-9]*\\.?[0-9]+$)|(<\\+.+>.*))"
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "OnFailureConfig": {
      "type": "object",
      "required": [
        "action",
        "errors"
      ],
      "properties": {
        "action": {
          "$ref": "#/definitions/approval/FailureStrategyActionConfig"
        },
        "errors": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Unknown",
              "AllErrors",
              "Authentication",
              "Connectivity",
              "Timeout",
              "Authorization",
              "Verification",
              "DelegateProvisioning",
              "PolicyEvaluationFailure",
              "InputTimeoutError",
              "ApprovalRejection",
              "DelegateRestart"
            ]
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "OnRetryFailureConfig": {
      "type": "object",
      "properties": {
        "action": {
          "$ref": "#/definitions/approval/FailureStrategyActionConfig"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "OnTimeoutConfig": {
      "type": "object",
      "properties": {
        "action": {
          "$ref": "#/definitions/approval/FailureStrategyActionConfig"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "OutputNGVariable": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ParallelStepElementConfig": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/approval/ExecutionWrapperConfig"
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ParameterField": {
      "type": "object",
      "properties": {
        "defaultValue": {
          "type": "object"
        },
        "executionInput": {
          "type": "boolean"
        },
        "expression": {
          "type": "boolean"
        },
        "expressionValue": {
          "type": "string"
        },
        "inputSetValidator": {
          "$ref": "#/definitions/approval/InputSetValidator"
        },
        "jsonResponseField": {
          "type": "boolean"
        },
        "responseField": {
          "type": "string"
        },
        "typeString": {
          "type": "boolean"
        },
        "value": {
          "type": "object"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ParameterFieldMapStringJsonNode": {
      "type": "object",
      "properties": {
        "defaultValue": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/approval/JsonNode"
          }
        },
        "executionInput": {
          "type": "boolean"
        },
        "expression": {
          "type": "boolean"
        },
        "expressionValue": {
          "type": "string"
        },
        "inputSetValidator": {
          "$ref": "#/definitions/approval/InputSetValidator"
        },
        "jsonResponseField": {
          "type": "boolean"
        },
        "responseField": {
          "type": "string"
        },
        "typeString": {
          "type": "boolean"
        },
        "value": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/approval/JsonNode"
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ParameterFieldMatrixConfigInterface": {
      "type": "object",
      "properties": {
        "defaultValue": {
          "$ref": "#/definitions/approval/MatrixConfigInterface"
        },
        "executionInput": {
          "type": "boolean"
        },
        "expression": {
          "type": "boolean"
        },
        "expressionValue": {
          "type": "string"
        },
        "inputSetValidator": {
          "$ref": "#/definitions/approval/InputSetValidator"
        },
        "jsonResponseField": {
          "type": "boolean"
        },
        "responseField": {
          "type": "string"
        },
        "typeString": {
          "type": "boolean"
        },
        "value": {
          "$ref": "#/definitions/approval/MatrixConfigInterface"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ParameterFieldString": {
      "type": "object",
      "properties": {
        "defaultValue": {
          "type": "string"
        },
        "executionInput": {
          "type": "boolean"
        },
        "expression": {
          "type": "boolean"
        },
        "expressionValue": {
          "type": "string"
        },
        "inputSetValidator": {
          "$ref": "#/definitions/approval/InputSetValidator"
        },
        "jsonResponseField": {
          "type": "boolean"
        },
        "responseField": {
          "type": "string"
        },
        "typeString": {
          "type": "boolean"
        },
        "value": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PatchInstruction": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "SetFeatureFlagState",
            "SetOnVariation",
            "SetOffVariation",
            "SetDefaultVariations",
            "AddRule",
            "UpdateRule",
            "AddTargetsToVariationTargetMap",
            "RemoveTargetsToVariationTargetMap",
            "AddSegmentToVariationTargetMap",
            "RemoveSegmentsToVariationTargetMap"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PersistentVolumeClaimYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/approval/ContainerVolume"
        },
        {
          "type": "object",
          "required": [
            "mountPath",
            "spec",
            "type"
          ],
          "properties": {
            "mountPath": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/approval/PersistentVolumeClaimYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "EmptyDir",
                "PersistentVolumeClaim",
                "HostPath"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PersistentVolumeClaimYamlSpec": {
      "type": "object",
      "required": [
        "claimName"
      ],
      "properties": {
        "claimName": {
          "type": "string"
        },
        "readOnly": {
          "type": "boolean"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PipelineRollbackFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/approval/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "PipelineRollback"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PolicyConfig": {
      "type": "object",
      "required": [
        "policySets"
      ],
      "properties": {
        "policySets": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PolicySpec": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PolicyStepInfo": {
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Custom"
              }
            }
          },
          "then": {
            "properties": {
              "policySpec": {
                "$ref": "#/definitions/approval/CustomPolicyStepSpec"
              }
            }
          },
          "$ref": "#/definitions/approval/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "policySets"
          ],
          "properties": {
            "metadata": {
              "type": "string"
            },
            "policySets": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "type": {
              "type": "string"
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Custom"
              }
            }
          },
          "then": {
            "properties": {
              "policySpec": {
                "$ref": "#/definitions/approval/CustomPolicyStepSpec"
              }
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "policySets"
      ],
      "properties": {
        "metadata": {
          "type": "string"
        },
        "policySets": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "type": {
          "type": "string"
        }
      }
    },
    "ProceedWithDefaultValuesFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/approval/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "ProceedWithDefaultValues"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "QueueStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/approval/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "key",
            "scope"
          ],
          "properties": {
            "key": {
              "type": "string"
            },
            "scope": {
              "type": "string",
              "enum": [
                "Pipeline",
                "Stage"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "key",
        "scope"
      ],
      "properties": {
        "key": {
          "type": "string"
        },
        "scope": {
          "type": "string",
          "enum": [
            "Pipeline",
            "Stage"
          ]
        }
      }
    },
    "RemoveSegmentToVariationTargetMapYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/approval/PatchInstruction"
        },
        {
          "type": "object",
          "required": [
            "identifier",
            "spec",
            "type"
          ],
          "properties": {
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/approval/RemoveSegmentToVariationTargetMapYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "RemoveSegmentToVariationTargetMap"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "RemoveSegmentToVariationTargetMapYamlSpec": {
      "type": "object",
      "required": [
        "segments",
        "variation"
      ],
      "properties": {
        "segments": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "variation": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "RemoveTargetsToVariationTargetMapYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/approval/PatchInstruction"
        },
        {
          "type": "object",
          "required": [
            "identifier",
            "spec",
            "type"
          ],
          "properties": {
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/approval/RemoveTargetsToVariationTargetMapYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "RemoveTargetsToVariationTargetMap"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "RemoveTargetsToVariationTargetMapYamlSpec": {
      "type": "object",
      "required": [
        "targets",
        "variation"
      ],
      "properties": {
        "targets": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "variation": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ResourceConstraintStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/approval/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "acquireMode",
            "holdingScope",
            "name",
            "permits",
            "resourceUnit"
          ],
          "properties": {
            "acquireMode": {
              "type": "string",
              "enum": [
                "ENSURE",
                "ACCUMULATE"
              ]
            },
            "holdingScope": {
              "type": "string",
              "enum": [
                "PLAN",
                "PIPELINE",
                "STAGE",
                "STEP_GROUP"
              ]
            },
            "name": {
              "type": "string"
            },
            "permits": {
              "type": "integer",
              "format": "int32"
            },
            "resourceUnit": {
              "$ref": "#/definitions/approval/ParameterFieldString"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "RetryFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/approval/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": [
            "spec",
            "type"
          ],
          "properties": {
            "spec": {
              "readOnly": true,
              "$ref": "#/definitions/approval/RetryFailureSpecConfig"
            },
            "type": {
              "type": "string",
              "enum": [
                "Retry"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "RetryFailureSpecConfig": {
      "type": "object",
      "required": [
        "onRetryFailure",
        "retryCount",
        "retryIntervals"
      ],
      "properties": {
        "onRetryFailure": {
          "$ref": "#/definitions/approval/OnRetryFailureConfig"
        },
        "retryCount": {
          "type": "integer",
          "format": "int32"
        },
        "retryIntervals": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "maxItems": 2147483647,
          "minItems": 1
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SecretNGVariable": {
      "allOf": [
        {
          "$ref": "#/definitions/approval/NGVariable"
        },
        {
          "type": "object",
          "required": [
            "value"
          ],
          "properties": {
            "default": {
              "type": "string"
            },
            "name": {
              "type": "string",
              "pattern": "^[a-zA-Z_][0-9a-zA-Z_\\.$]{0,127}$"
            },
            "type": {
              "type": "string",
              "enum": [
                "Secret"
              ]
            },
            "value": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SecurityContext": {
      "type": "object",
      "properties": {
        "allowPrivilegeEscalation": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "capabilities": {
          "$ref": "#/definitions/approval/Capabilities"
        },
        "privileged": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "procMount": {
          "type": "string"
        },
        "readOnlyRootFilesystem": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "runAsGroup": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "runAsNonRoot": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "Serve": {
      "type": "object",
      "properties": {
        "distribution": {
          "$ref": "#/definitions/approval/Distribution"
        },
        "variation": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ServiceNowApprovalStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/approval/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "approvalCriteria",
            "connectorRef",
            "ticketNumber",
            "ticketType"
          ],
          "properties": {
            "approvalCriteria": {
              "$ref": "#/definitions/approval/CriteriaSpecWrapper"
            },
            "changeWindow": {
              "$ref": "#/definitions/approval/ServiceNowChangeWindowSpec"
            },
            "connectorRef": {
              "type": "string"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "rejectionCriteria": {
              "$ref": "#/definitions/approval/CriteriaSpecWrapper"
            },
            "ticketNumber": {
              "type": "string"
            },
            "ticketType": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "approvalCriteria",
        "connectorRef",
        "ticketNumber",
        "ticketType"
      ],
      "properties": {
        "approvalCriteria": {
          "$ref": "#/definitions/approval/CriteriaSpecWrapper"
        },
        "changeWindow": {
          "$ref": "#/definitions/approval/ServiceNowChangeWindowSpec"
        },
        "connectorRef": {
          "type": "string"
        },
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "rejectionCriteria": {
          "$ref": "#/definitions/approval/CriteriaSpecWrapper"
        },
        "ticketNumber": {
          "type": "string"
        },
        "ticketType": {
          "type": "string"
        }
      }
    },
    "ServiceNowChangeWindowSpec": {
      "type": "object",
      "required": [
        "endField",
        "startField"
      ],
      "properties": {
        "endField": {
          "type": "string"
        },
        "startField": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ServiceNowCreateStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/approval/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "ticketType",
            "useServiceNowTemplate"
          ],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "fields": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/approval/ServiceNowField"
              }
            },
            "templateName": {
              "type": "string"
            },
            "ticketType": {
              "type": "string"
            },
            "useServiceNowTemplate": {
              "type": "boolean"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "connectorRef",
        "ticketType",
        "useServiceNowTemplate"
      ],
      "properties": {
        "connectorRef": {
          "type": "string"
        },
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "fields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/approval/ServiceNowField"
          }
        },
        "templateName": {
          "type": "string"
        },
        "ticketType": {
          "type": "string"
        },
        "useServiceNowTemplate": {
          "type": "boolean"
        }
      }
    },
    "ServiceNowField": {
      "type": "object",
      "required": [
        "name",
        "value"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ServiceNowImportSetStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/approval/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "importData",
            "stagingTableName"
          ],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "importData": {
              "$ref": "#/definitions/approval/ImportDataSpecWrapper"
            },
            "stagingTableName": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "connectorRef",
        "importData",
        "stagingTableName"
      ],
      "properties": {
        "connectorRef": {
          "type": "string"
        },
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "importData": {
          "$ref": "#/definitions/approval/ImportDataSpecWrapper"
        },
        "stagingTableName": {
          "type": "string"
        }
      }
    },
    "ServiceNowUpdateStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/approval/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "ticketNumber",
            "ticketType",
            "useServiceNowTemplate"
          ],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "fields": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/approval/ServiceNowField"
              }
            },
            "templateName": {
              "type": "string"
            },
            "ticketNumber": {
              "type": "string"
            },
            "ticketType": {
              "type": "string"
            },
            "useServiceNowTemplate": {
              "type": "boolean"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "connectorRef",
        "ticketNumber",
        "ticketType",
        "useServiceNowTemplate"
      ],
      "properties": {
        "connectorRef": {
          "type": "string"
        },
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "fields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/approval/ServiceNowField"
          }
        },
        "templateName": {
          "type": "string"
        },
        "ticketNumber": {
          "type": "string"
        },
        "ticketType": {
          "type": "string"
        },
        "useServiceNowTemplate": {
          "type": "boolean"
        }
      }
    },
    "SetDefaultVariationsYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/approval/PatchInstruction"
        },
        {
          "type": "object",
          "required": [
            "identifier",
            "spec",
            "type"
          ],
          "properties": {
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/approval/SetDefaultVariationsYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "SetDefaultVariations"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SetDefaultVariationsYamlSpec": {
      "type": "object",
      "required": [
        "off",
        "on"
      ],
      "properties": {
        "off": {
          "type": "string"
        },
        "on": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SetFeatureFlagStateYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/approval/PatchInstruction"
        },
        {
          "type": "object",
          "required": [
            "identifier",
            "spec",
            "type"
          ],
          "properties": {
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/approval/SetFeatureFlagStateYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "SetFeatureFlagState"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SetFeatureFlagStateYamlSpec": {
      "type": "object",
      "required": [
        "state"
      ],
      "properties": {
        "state": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SetOffVariationYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/approval/PatchInstruction"
        },
        {
          "type": "object",
          "required": [
            "identifier",
            "spec",
            "type"
          ],
          "properties": {
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/approval/SetOffVariationYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "SetOffVariation"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SetOffVariationYamlSpec": {
      "type": "object",
      "required": [
        "variation"
      ],
      "properties": {
        "variation": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SetOnVariationYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/approval/PatchInstruction"
        },
        {
          "type": "object",
          "required": [
            "identifier",
            "spec",
            "type"
          ],
          "properties": {
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/approval/SetOnVariationYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "SetOnVariation"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SetOnVariationYamlSpec": {
      "type": "object",
      "required": [
        "variation"
      ],
      "properties": {
        "variation": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ShellScriptBaseSource": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ShellScriptInlineSource": {
      "allOf": [
        {
          "$ref": "#/definitions/approval/ShellScriptBaseSource"
        },
        {
          "type": "object",
          "properties": {
            "script": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ShellScriptSourceWrapper": {
      "type": "object",
      "required": [
        "spec",
        "type"
      ],
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Harness"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/approval/HarnessFileStoreSource"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Inline"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/approval/ShellScriptInlineSource"
              }
            }
          }
        }
      ]
    },
    "ShellScriptStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/approval/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "onDelegate",
            "shell",
            "source"
          ],
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "environmentVariables": {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/approval/NumberNGVariable"
                  },
                  {
                    "$ref": "#/definitions/approval/SecretNGVariable"
                  },
                  {
                    "$ref": "#/definitions/approval/StringNGVariable"
                  }
                ]
              }
            },
            "executionTarget": {
              "$ref": "#/definitions/approval/ExecutionTarget"
            },
            "metadata": {
              "type": "string"
            },
            "onDelegate": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            },
            "outputVariables": {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/approval/NumberNGVariable"
                  },
                  {
                    "$ref": "#/definitions/approval/SecretNGVariable"
                  },
                  {
                    "$ref": "#/definitions/approval/StringNGVariable"
                  }
                ]
              }
            },
            "shell": {
              "type": "string",
              "enum": [
                "Bash",
                "PowerShell"
              ]
            },
            "source": {
              "$ref": "#/definitions/approval/ShellScriptSourceWrapper"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "onDelegate",
        "shell",
        "source"
      ],
      "properties": {
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "environmentVariables": {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/approval/NumberNGVariable"
              },
              {
                "$ref": "#/definitions/approval/SecretNGVariable"
              },
              {
                "$ref": "#/definitions/approval/StringNGVariable"
              }
            ]
          }
        },
        "executionTarget": {
          "$ref": "#/definitions/approval/ExecutionTarget"
        },
        "metadata": {
          "type": "string"
        },
        "onDelegate": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ]
        },
        "outputVariables": {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/approval/NumberNGVariable"
              },
              {
                "$ref": "#/definitions/approval/SecretNGVariable"
              },
              {
                "$ref": "#/definitions/approval/StringNGVariable"
              }
            ]
          }
        },
        "shell": {
          "type": "string",
          "enum": [
            "Bash",
            "PowerShell"
          ]
        },
        "source": {
          "$ref": "#/definitions/approval/ShellScriptSourceWrapper"
        }
      }
    },
    "StageRollbackFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/approval/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "StageRollback"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "StageWhenCondition": {
      "type": "object",
      "required": [
        "pipelineStatus"
      ],
      "properties": {
        "condition": {
          "type": "string",
          "pattern": "^(?!<\\+input>.*\\.executionInput\\(\\)(.*)$)"
        },
        "pipelineStatus": {
          "type": "string",
          "enum": [
            "Success",
            "Failure",
            "All"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "StepElementConfig": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/approval/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/approval/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/approval/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(<\\+input>.*)|(.*<\\+.*>.*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": []
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/approval/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": []
    },
    "StepGroupElementConfig": {
      "type": "object",
      "required": [
        "identifier",
        "name"
      ],
      "properties": {
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/approval/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "steps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/approval/ExecutionWrapperConfig"
          },
          "maxItems": 2147483647,
          "minItems": 1
        },
        "strategy": {
          "$ref": "#/definitions/approval/StrategyConfig"
        },
        "template": {
          "$ref": "#/definitions/approval/TemplateLinkConfig"
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/approval/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "oneOf": [
            {
              "required": [
                "template"
              ]
            },
            {
              "required": [
                "steps"
              ]
            }
          ]
        }
      ]
    },
    "StepGroupFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/approval/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "StepGroupRollback"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "StepSpecType": {
      "type": "object",
      "discriminator": "type",
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "StepWhenCondition": {
      "type": "object",
      "required": [
        "stageStatus"
      ],
      "properties": {
        "condition": {
          "type": "string",
          "pattern": "^(?!<\\+input>.*\\.executionInput\\(\\)(.*)$)"
        },
        "stageStatus": {
          "type": "string",
          "enum": [
            "Success",
            "Failure",
            "All"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "StrategyConfig": {
      "type": "object",
      "properties": {
        "matrix": {
          "oneOf": [
            {
              "$ref": "#/definitions/approval/ParameterFieldMatrixConfigInterface"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "parallelism": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            },
            {
              "type": "string",
              "pattern": "(<\\+.+>.*)",
              "minLength": 1
            }
          ]
        },
        "repeat": {
          "$ref": "#/definitions/approval/HarnessForConfig"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "oneOf": [
            {
              "required": [
                "repeat"
              ]
            },
            {
              "required": [
                "parallelism"
              ]
            },
            {
              "required": [
                "matrix"
              ]
            }
          ]
        }
      ]
    },
    "StringNGVariable": {
      "allOf": [
        {
          "$ref": "#/definitions/approval/NGVariable"
        },
        {
          "type": "object",
          "required": [
            "value"
          ],
          "properties": {
            "default": {
              "type": "string"
            },
            "name": {
              "type": "string",
              "pattern": "^[a-zA-Z_][0-9a-zA-Z_\\.$]{0,127}$"
            },
            "type": {
              "type": "string",
              "enum": [
                "String"
              ]
            },
            "value": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "TemplateLinkConfig": {
      "type": "object",
      "required": [
        "templateRef"
      ],
      "properties": {
        "templateInputs": {
          "$ref": "#/definitions/approval/JsonNode"
        },
        "templateRef": {
          "type": "string"
        },
        "templateVariables": {
          "$ref": "#/definitions/approval/JsonNode"
        },
        "versionLabel": {
          "type": "string",
          "pattern": "^[0-9a-zA-Z][^\\s]{0,63}$"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "Toleration": {
      "type": "object",
      "properties": {
        "effect": {
          "type": "string"
        },
        "key": {
          "type": "string"
        },
        "operator": {
          "type": "string"
        },
        "tolerationSeconds": {
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "TransitionTo": {
      "type": "object",
      "required": [
        "status"
      ],
      "properties": {
        "status": {
          "type": "string"
        },
        "transitionName": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "UpdateRuleYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/approval/PatchInstruction"
        },
        {
          "type": "object",
          "required": [
            "identifier",
            "spec",
            "type"
          ],
          "properties": {
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/approval/UpdateRuleYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "UpdateRule"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "UpdateRuleYamlSpec": {
      "type": "object",
      "required": [
        "bucketBy",
        "ruleID"
      ],
      "properties": {
        "bucketBy": {
          "type": "string"
        },
        "ruleID": {
          "type": "string"
        },
        "serve": {
          "$ref": "#/definitions/approval/Serve"
        },
        "variations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/approval/VariationYamlSpec"
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "VariationYamlSpec": {
      "type": "object",
      "required": [
        "variation",
        "weight"
      ],
      "properties": {
        "variation": {
          "type": "string"
        },
        "weight": {
          "type": "integer",
          "format": "int32"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "WaitStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/approval/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "duration"
          ],
          "properties": {
            "duration": {
              "type": "string",
              "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(<\\+input>.*)|(.*<\\+.*>.*)|(^$))$"
            },
            "metadata": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "duration"
      ],
      "properties": {
        "duration": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(<\\+input>.*)|(.*<\\+.*>.*)|(^$))$"
        },
        "metadata": {
          "type": "string"
        }
      }
    },
    "WeightedVariation": {
      "type": "object",
      "required": [
        "variation",
        "weight"
      ],
      "properties": {
        "variation": {
          "type": "string"
        },
        "weight": {
          "type": "integer",
          "format": "int32"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "HttpStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/approval/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/approval/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/approval/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "Http"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/approval/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Http"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/approval/HttpStepInfo"
              }
            }
          }
        }
      ]
    },
    "EmailStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/approval/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/approval/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/approval/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "Email"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/approval/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Email"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/approval/EmailStepInfo"
              }
            }
          }
        }
      ]
    },
    "QueueStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/approval/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/approval/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/approval/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "Queue"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/approval/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Queue"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/approval/QueueStepInfo"
              }
            }
          }
        }
      ]
    },
    "ShellScriptStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/approval/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/approval/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/approval/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "ShellScript"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/approval/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "ShellScript"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/approval/ShellScriptStepInfo"
              }
            }
          }
        }
      ]
    },
    "TemplateStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "template"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "template": {
          "$ref": "#/definitions/approval/TemplateLinkConfig"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PolicyStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/approval/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/approval/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/approval/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "Policy"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/approval/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Policy"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/approval/PolicyStepInfo"
              }
            }
          }
        }
      ]
    },
    "WaitStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/approval/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/approval/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/approval/StrategyConfig"
        },
        "type": {
          "type": "string",
          "enum": [
            "Wait"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/approval/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Wait"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/approval/WaitStepInfo"
              }
            }
          }
        }
      ]
    },
    "ServiceNowApprovalStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/approval/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/approval/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/approval/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "ServiceNowApproval"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/approval/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "ServiceNowApproval"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/approval/ServiceNowApprovalStepInfo"
              }
            }
          }
        }
      ]
    },
    "BarrierStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/approval/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/approval/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/approval/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "Barrier"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/approval/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Barrier"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/approval/BarrierStepInfo"
              }
            }
          }
        }
      ]
    },
    "ServiceNowCreateStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/approval/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/approval/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/approval/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "ServiceNowCreate"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/approval/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "ServiceNowCreate"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/approval/ServiceNowCreateStepInfo"
              }
            }
          }
        }
      ]
    },
    "ServiceNowUpdateStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/approval/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/approval/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/approval/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "ServiceNowUpdate"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/approval/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "ServiceNowUpdate"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/approval/ServiceNowUpdateStepInfo"
              }
            }
          }
        }
      ]
    },
    "ServiceNowImportSetStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/approval/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/approval/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/approval/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "ServiceNowImportSet"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/approval/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "ServiceNowImportSet"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/approval/ServiceNowImportSetStepInfo"
              }
            }
          }
        }
      ]
    },
    "ContainerStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/approval/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/approval/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/approval/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "Container"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/approval/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Container"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/approval/ContainerStepInfo"
              }
            }
          }
        }
      ]
    },
    "CustomApprovalStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/approval/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/approval/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/approval/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "CustomApproval"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/approval/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "CustomApproval"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/approval/CustomApprovalStepInfo"
              }
            }
          }
        }
      ]
    },
    "JiraCreateStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/approval/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/approval/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/approval/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "JiraCreate"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/approval/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "JiraCreate"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/approval/JiraCreateStepInfo"
              }
            }
          }
        }
      ]
    },
    "JiraUpdateStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/approval/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/approval/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/approval/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "JiraUpdate"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/approval/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "JiraUpdate"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/approval/JiraUpdateStepInfo"
              }
            }
          }
        }
      ]
    },
    "JiraApprovalStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/approval/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/approval/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/approval/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "JiraApproval"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/approval/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "JiraApproval"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/approval/JiraApprovalStepInfo"
              }
            }
          }
        }
      ]
    },
    "HarnessApprovalStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/approval/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/approval/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/approval/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "HarnessApproval"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/approval/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "HarnessApproval"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/approval/HarnessApprovalStepInfo"
              }
            }
          }
        }
      ]
    },
    "FlagConfigurationStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/approval/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/approval/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/approval/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "FlagConfiguration"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/approval/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "FlagConfiguration"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/approval/FlagConfigurationStepInfo"
              }
            }
          }
        }
      ]
    },
    "PMSStepInfo": {
      "type": "object",
      "discriminator": "type",
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  "cf": {
    "AbortFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/cf/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "Abort"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AddRuleYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/cf/PatchInstruction"
        },
        {
          "type": "object",
          "required": [
            "identifier",
            "spec",
            "type"
          ],
          "properties": {
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/cf/AddRuleYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "AddRule"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AddRuleYamlSpec": {
      "type": "object",
      "properties": {
        "clauses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cf/Clause"
          }
        },
        "distribution": {
          "$ref": "#/definitions/cf/DistributionYamlSpec"
        },
        "priority": {
          "type": "integer",
          "format": "int32"
        },
        "serve": {
          "$ref": "#/definitions/cf/Serve"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AddSegmentToVariationTargetMapYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/cf/PatchInstruction"
        },
        {
          "type": "object",
          "required": [
            "identifier",
            "spec",
            "type"
          ],
          "properties": {
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/cf/AddSegmentToVariationTargetMapYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "AddSegmentToVariationTargetMap"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AddSegmentToVariationTargetMapYamlSpec": {
      "type": "object",
      "required": [
        "segments",
        "variation"
      ],
      "properties": {
        "segments": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "variation": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AddTargetsToVariationTargetMapYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/cf/PatchInstruction"
        },
        {
          "type": "object",
          "required": [
            "identifier",
            "spec",
            "type"
          ],
          "properties": {
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/cf/AddTargetsToVariationTargetMapYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "AddTargetsToVariationTargetMap"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AddTargetsToVariationTargetMapYamlSpec": {
      "type": "object",
      "required": [
        "targets",
        "variation"
      ],
      "properties": {
        "targets": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "variation": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ApproverInputInfo": {
      "type": "object",
      "properties": {
        "defaultValue": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "minLength": 1
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "Approvers": {
      "type": "object",
      "required": [
        "disallowPipelineExecutor",
        "minimumCount",
        "userGroups"
      ],
      "properties": {
        "disallowPipelineExecutor": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ]
        },
        "minimumCount": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "userGroups": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              },
              "maxItems": 2147483647,
              "minItems": 1
            },
            {
              "type": "string",
              "pattern": "(<\\+.+>.*)",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "BarrierStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cf/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "barrierRef"
          ],
          "properties": {
            "barrierRef": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "barrierRef"
      ],
      "properties": {
        "barrierRef": {
          "type": "string"
        }
      }
    },
    "Capabilities": {
      "type": "object",
      "properties": {
        "add": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "drop": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "Clause": {
      "type": "object",
      "required": [
        "attribute",
        "id",
        "negate",
        "op",
        "values"
      ],
      "properties": {
        "attribute": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "negate": {
          "type": "boolean"
        },
        "op": {
          "type": "string"
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ClauseYamlSpec": {
      "type": "object",
      "required": [
        "op",
        "values"
      ],
      "properties": {
        "attribute": {
          "type": "string"
        },
        "op": {
          "type": "string"
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "Condition": {
      "type": "object",
      "required": [
        "key",
        "operator",
        "value"
      ],
      "properties": {
        "key": {
          "type": "string"
        },
        "operator": {
          "type": "string",
          "enum": [
            "equals",
            "not equals",
            "in",
            "not in"
          ]
        },
        "value": {
          "type": "string",
          "minLength": 1
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ContainerInfraYamlSpec": {
      "type": "object",
      "required": [
        "connectorRef",
        "namespace",
        "resources"
      ],
      "properties": {
        "annotations": {
          "oneOf": [
            {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ]
        },
        "automountServiceAccountToken": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "connectorRef": {
          "type": "string"
        },
        "containerSecurityContext": {
          "oneOf": [
            {
              "$ref": "#/definitions/cf/SecurityContext"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "initTimeout": {
          "type": "string"
        },
        "labels": {
          "oneOf": [
            {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ]
        },
        "namespace": {
          "type": "string",
          "minLength": 1,
          "maxLength": 2147483647
        },
        "nodeSelector": {
          "oneOf": [
            {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "os": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Linux",
                "MacOS",
                "Windows"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "priorityClassName": {
          "type": "string"
        },
        "resources": {
          "$ref": "#/definitions/cf/ContainerResource"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "serviceAccountName": {
          "type": "string"
        },
        "tolerations": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cf/Toleration"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "volumes": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cf/ContainerVolume"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ContainerK8sInfra": {
      "allOf": [
        {
          "$ref": "#/definitions/cf/ContainerStepInfra"
        },
        {
          "type": "object",
          "required": [
            "spec",
            "type"
          ],
          "properties": {
            "spec": {
              "$ref": "#/definitions/cf/ContainerInfraYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "KubernetesDirect"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ContainerResource": {
      "type": "object",
      "required": [
        "limits"
      ],
      "properties": {
        "limits": {
          "$ref": "#/definitions/cf/Limits"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ContainerStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cf/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "command",
            "infrastructure"
          ],
          "properties": {
            "command": {
              "type": "string"
            },
            "connectorRef": {
              "type": "string"
            },
            "entrypoint": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "envVariables": {
              "oneOf": [
                {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "image": {
              "type": "string"
            },
            "imagePullPolicy": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Always",
                    "Never",
                    "IfNotPresent"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "infrastructure": {
              "oneOf": [
                {
                  "$ref": "#/definitions/cf/ContainerK8sInfra"
                }
              ]
            },
            "metadata": {
              "type": "string"
            },
            "outputVariables": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/cf/OutputNGVariable"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "privileged": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "settings": {
              "oneOf": [
                {
                  "$ref": "#/definitions/cf/ParameterFieldMapStringJsonNode"
                },
                {
                  "type": "string"
                }
              ]
            },
            "shell": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Sh",
                    "Bash",
                    "Powershell",
                    "Pwsh",
                    "Python"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "command",
        "infrastructure"
      ],
      "properties": {
        "command": {
          "type": "string"
        },
        "connectorRef": {
          "type": "string"
        },
        "entrypoint": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ]
        },
        "envVariables": {
          "oneOf": [
            {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ]
        },
        "image": {
          "type": "string"
        },
        "imagePullPolicy": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Always",
                "Never",
                "IfNotPresent"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "infrastructure": {
          "oneOf": [
            {
              "$ref": "#/definitions/cf/ContainerK8sInfra"
            }
          ]
        },
        "metadata": {
          "type": "string"
        },
        "outputVariables": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cf/OutputNGVariable"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "privileged": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "settings": {
          "oneOf": [
            {
              "$ref": "#/definitions/cf/ParameterFieldMapStringJsonNode"
            },
            {
              "type": "string"
            }
          ]
        },
        "shell": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Sh",
                "Bash",
                "Powershell",
                "Pwsh",
                "Python"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      }
    },
    "ContainerStepInfra": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "KubernetesDirect"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ContainerVolume": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "EmptyDir",
            "PersistentVolumeClaim",
            "HostPath"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CriteriaSpec": {
      "type": "object",
      "discriminator": "type",
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CriteriaSpecWrapper": {
      "type": "object",
      "required": [
        "spec",
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "Jexl",
            "KeyValues"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Jexl"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cf/JexlCriteriaSpec"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "KeyValues"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cf/KeyValuesCriteriaSpec"
              }
            }
          }
        }
      ]
    },
    "CustomApprovalStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cf/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "approvalCriteria",
            "retryInterval",
            "scriptTimeout",
            "shell",
            "source"
          ],
          "properties": {
            "approvalCriteria": {
              "$ref": "#/definitions/cf/CriteriaSpecWrapper"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "environmentVariables": {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/cf/NumberNGVariable"
                  },
                  {
                    "$ref": "#/definitions/cf/SecretNGVariable"
                  },
                  {
                    "$ref": "#/definitions/cf/StringNGVariable"
                  }
                ]
              }
            },
            "outputVariables": {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/cf/NumberNGVariable"
                  },
                  {
                    "$ref": "#/definitions/cf/SecretNGVariable"
                  },
                  {
                    "$ref": "#/definitions/cf/StringNGVariable"
                  }
                ]
              }
            },
            "rejectionCriteria": {
              "$ref": "#/definitions/cf/CriteriaSpecWrapper"
            },
            "retryInterval": {
              "type": "string",
              "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(<\\+input>.*)|(.*<\\+.*>.*)|(^$))$"
            },
            "scriptTimeout": {
              "type": "string",
              "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(<\\+input>.*)|(.*<\\+.*>.*)|(^$))$"
            },
            "shell": {
              "type": "string",
              "enum": [
                "Bash",
                "PowerShell"
              ]
            },
            "source": {
              "$ref": "#/definitions/cf/ShellScriptSourceWrapper"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "approvalCriteria",
        "retryInterval",
        "scriptTimeout",
        "shell",
        "source"
      ],
      "properties": {
        "approvalCriteria": {
          "$ref": "#/definitions/cf/CriteriaSpecWrapper"
        },
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "environmentVariables": {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/cf/NumberNGVariable"
              },
              {
                "$ref": "#/definitions/cf/SecretNGVariable"
              },
              {
                "$ref": "#/definitions/cf/StringNGVariable"
              }
            ]
          }
        },
        "outputVariables": {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/cf/NumberNGVariable"
              },
              {
                "$ref": "#/definitions/cf/SecretNGVariable"
              },
              {
                "$ref": "#/definitions/cf/StringNGVariable"
              }
            ]
          }
        },
        "rejectionCriteria": {
          "$ref": "#/definitions/cf/CriteriaSpecWrapper"
        },
        "retryInterval": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(<\\+input>.*)|(.*<\\+.*>.*)|(^$))$"
        },
        "scriptTimeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(<\\+input>.*)|(.*<\\+.*>.*)|(^$))$"
        },
        "shell": {
          "type": "string",
          "enum": [
            "Bash",
            "PowerShell"
          ]
        },
        "source": {
          "$ref": "#/definitions/cf/ShellScriptSourceWrapper"
        }
      }
    },
    "CustomPolicyStepSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/cf/PolicySpec"
        },
        {
          "type": "object",
          "required": [
            "payload"
          ],
          "properties": {
            "payload": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "Distribution": {
      "type": "object",
      "required": [
        "bucketBy",
        "variations"
      ],
      "properties": {
        "bucketBy": {
          "type": "string"
        },
        "variations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cf/WeightedVariation"
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "DistributionYamlSpec": {
      "type": "object",
      "required": [
        "bucketBy"
      ],
      "properties": {
        "bucketBy": {
          "type": "string"
        },
        "clauses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cf/ClauseYamlSpec"
          }
        },
        "variations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cf/VariationYamlSpec"
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "EmailStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cf/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "subject",
            "to"
          ],
          "properties": {
            "body": {
              "type": "string"
            },
            "cc": {
              "type": "string"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "subject": {
              "type": "string"
            },
            "to": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "subject",
        "to"
      ],
      "properties": {
        "body": {
          "type": "string"
        },
        "cc": {
          "type": "string"
        },
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "subject": {
          "type": "string"
        },
        "to": {
          "type": "string"
        }
      }
    },
    "EmptyDirYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/cf/ContainerVolume"
        },
        {
          "type": "object",
          "required": [
            "mountPath",
            "spec",
            "type"
          ],
          "properties": {
            "mountPath": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/cf/EmptyDirYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "EmptyDir",
                "PersistentVolumeClaim",
                "HostPath"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "EmptyDirYamlSpec": {
      "type": "object",
      "properties": {
        "medium": {
          "type": "string"
        },
        "size": {
          "type": "string",
          "pattern": "^(([0-9]*[.])?[0-9]+)([GM]i?)|<\\+input>$"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ExecutionElementConfig": {
      "type": "object",
      "required": [
        "steps"
      ],
      "properties": {
        "steps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cf/ExecutionWrapperConfig"
          },
          "maxItems": 2147483647,
          "minItems": 1
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ExecutionTarget": {
      "type": "object",
      "properties": {
        "connectorRef": {
          "type": "string"
        },
        "host": {
          "type": "string"
        },
        "workingDirectory": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ExecutionWrapperConfig": {
      "type": "object",
      "properties": {
        "parallel": {
          "$ref": "#/definitions/cf/ParallelStepElementConfig"
        },
        "step": {
          "oneOf": [
            {
              "$ref": "#/definitions/cf/StepElementConfig"
            },
            {
              "$ref": "#/definitions/cf/PolicyStepNode"
            },
            {
              "$ref": "#/definitions/cf/TemplateStepNode"
            },
            {
              "$ref": "#/definitions/cf/ContainerStepNode"
            },
            {
              "$ref": "#/definitions/cf/ServiceNowUpdateStepNode"
            },
            {
              "$ref": "#/definitions/cf/JiraUpdateStepNode"
            },
            {
              "$ref": "#/definitions/cf/CustomApprovalStepNode"
            },
            {
              "$ref": "#/definitions/cf/ServiceNowCreateStepNode"
            },
            {
              "$ref": "#/definitions/cf/EmailStepNode"
            },
            {
              "$ref": "#/definitions/cf/FlagConfigurationStepNode"
            },
            {
              "$ref": "#/definitions/cf/BarrierStepNode"
            },
            {
              "$ref": "#/definitions/cf/ShellScriptStepNode"
            },
            {
              "$ref": "#/definitions/cf/WaitStepNode"
            },
            {
              "$ref": "#/definitions/cf/ServiceNowApprovalStepNode"
            },
            {
              "$ref": "#/definitions/cf/ServiceNowImportSetStepNode"
            },
            {
              "$ref": "#/definitions/cf/JiraCreateStepNode"
            },
            {
              "$ref": "#/definitions/cf/QueueStepNode"
            },
            {
              "$ref": "#/definitions/cf/JiraApprovalStepNode"
            },
            {
              "$ref": "#/definitions/cf/HttpStepNode"
            },
            {
              "$ref": "#/definitions/cf/HarnessApprovalStepNode"
            }
          ]
        },
        "stepGroup": {
          "$ref": "#/definitions/cf/StepGroupElementConfig"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "FailureStrategyActionConfig": {
      "type": "object",
      "required": [
        "type"
      ],
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "Ignore",
            "Retry",
            "MarkAsSuccess",
            "Abort",
            "StageRollback",
            "StepGroupRollback",
            "PipelineRollback",
            "ManualIntervention",
            "ProceedWithDefaultValues",
            "MarkAsFailure"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "FailureStrategyConfig": {
      "type": "object",
      "required": [
        "onFailure"
      ],
      "properties": {
        "onFailure": {
          "$ref": "#/definitions/cf/OnFailureConfig"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "FeatureFlagStageConfig": {
      "type": "object",
      "properties": {
        "execution": {
          "$ref": "#/definitions/cf/ExecutionElementConfig"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "FeatureFlagStageNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "type"
      ],
      "properties": {
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "description": {
          "type": "string"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cf/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cf/StrategyConfig"
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "type": {
          "type": "string",
          "enum": [
            "FeatureFlag"
          ]
        },
        "variables": {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/cf/NumberNGVariable"
              },
              {
                "$ref": "#/definitions/cf/SecretNGVariable"
              },
              {
                "$ref": "#/definitions/cf/StringNGVariable"
              }
            ]
          }
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cf/StageWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "FeatureFlag"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cf/FeatureFlagStageConfig"
              }
            }
          }
        }
      ]
    },
    "FlagConfigurationStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cf/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "environment",
            "feature",
            "instructions"
          ],
          "properties": {
            "environment": {
              "type": "string"
            },
            "feature": {
              "type": "string"
            },
            "instructions": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/cf/PatchInstruction"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "environment",
        "feature",
        "instructions"
      ],
      "properties": {
        "environment": {
          "type": "string"
        },
        "feature": {
          "type": "string"
        },
        "instructions": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cf/PatchInstruction"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      }
    },
    "HarnessApprovalStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cf/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "approvers",
            "includePipelineExecutionHistory"
          ],
          "properties": {
            "approvalMessage": {
              "type": "string",
              "minLength": 1
            },
            "approverInputs": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cf/ApproverInputInfo"
              }
            },
            "approvers": {
              "$ref": "#/definitions/cf/Approvers"
            },
            "includePipelineExecutionHistory": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "approvers",
        "includePipelineExecutionHistory"
      ],
      "properties": {
        "approvalMessage": {
          "type": "string",
          "minLength": 1
        },
        "approverInputs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cf/ApproverInputInfo"
          }
        },
        "approvers": {
          "$ref": "#/definitions/cf/Approvers"
        },
        "includePipelineExecutionHistory": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ]
        }
      }
    },
    "HarnessFileStoreSource": {
      "allOf": [
        {
          "$ref": "#/definitions/cf/ShellScriptBaseSource"
        },
        {
          "type": "object",
          "properties": {
            "file": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "HarnessForConfig": {
      "type": "object",
      "properties": {
        "end": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            },
            {
              "type": "string",
              "pattern": "(<\\+.+>.*)",
              "minLength": 1
            }
          ]
        },
        "items": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "(<\\+.+>.*)",
              "minLength": 1
            }
          ]
        },
        "maxConcurrency": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            },
            {
              "type": "string",
              "pattern": "(<\\+.+>.*)",
              "minLength": 1
            }
          ]
        },
        "partitionSize": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            },
            {
              "type": "string",
              "pattern": "(<\\+.+>.*)",
              "minLength": 1
            }
          ]
        },
        "start": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            },
            {
              "type": "string",
              "pattern": "(<\\+.+>.*)",
              "minLength": 1
            }
          ]
        },
        "times": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            },
            {
              "type": "string",
              "pattern": "(<\\+.+>.*)",
              "minLength": 1
            }
          ]
        },
        "unit": {
          "type": "string",
          "enum": [
            "Percentage",
            "Count"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "oneOf": [
            {
              "required": [
                "times"
              ]
            },
            {
              "required": [
                "items"
              ]
            }
          ]
        }
      ]
    },
    "HostPathYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/cf/ContainerVolume"
        },
        {
          "type": "object",
          "required": [
            "mountPath",
            "spec",
            "type"
          ],
          "properties": {
            "mountPath": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/cf/HostPathYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "EmptyDir",
                "PersistentVolumeClaim",
                "HostPath"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "HostPathYamlSpec": {
      "type": "object",
      "required": [
        "path"
      ],
      "properties": {
        "path": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "HttpHeaderConfig": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "HttpStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cf/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "method",
            "url"
          ],
          "properties": {
            "assertion": {
              "type": "string"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "headers": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cf/HttpHeaderConfig"
              }
            },
            "method": {
              "type": "string"
            },
            "outputVariables": {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/cf/NumberNGVariable"
                  },
                  {
                    "$ref": "#/definitions/cf/SecretNGVariable"
                  },
                  {
                    "$ref": "#/definitions/cf/StringNGVariable"
                  }
                ]
              }
            },
            "requestBody": {
              "type": "string"
            },
            "url": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "method",
        "url"
      ],
      "properties": {
        "assertion": {
          "type": "string"
        },
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "headers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cf/HttpHeaderConfig"
          }
        },
        "method": {
          "type": "string"
        },
        "outputVariables": {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/cf/NumberNGVariable"
              },
              {
                "$ref": "#/definitions/cf/SecretNGVariable"
              },
              {
                "$ref": "#/definitions/cf/StringNGVariable"
              }
            ]
          }
        },
        "requestBody": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "IgnoreFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/cf/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "Ignore"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ImportDataSpec": {
      "type": "object",
      "discriminator": "type",
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ImportDataSpecWrapper": {
      "type": "object",
      "required": [
        "spec",
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "Json",
            "KeyValues"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Json"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cf/JsonImportDataSpec"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "KeyValues"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cf/KeyValuesImportDataSpec"
              }
            }
          }
        }
      ]
    },
    "InputSetValidator": {
      "type": "object",
      "properties": {
        "parameters": {
          "type": "string"
        },
        "validatorType": {
          "type": "string",
          "enum": [
            "ALLOWED_VALUES",
            "REGEX"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "JexlCriteriaSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/cf/CriteriaSpec"
        },
        {
          "type": "object",
          "required": [
            "expression"
          ],
          "properties": {
            "expression": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "JiraApprovalStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cf/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "approvalCriteria",
            "connectorRef",
            "issueKey"
          ],
          "properties": {
            "approvalCriteria": {
              "$ref": "#/definitions/cf/CriteriaSpecWrapper"
            },
            "connectorRef": {
              "type": "string"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "issueKey": {
              "type": "string"
            },
            "issueType": {
              "type": "string"
            },
            "projectKey": {
              "type": "string"
            },
            "rejectionCriteria": {
              "$ref": "#/definitions/cf/CriteriaSpecWrapper"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "approvalCriteria",
        "connectorRef",
        "issueKey"
      ],
      "properties": {
        "approvalCriteria": {
          "$ref": "#/definitions/cf/CriteriaSpecWrapper"
        },
        "connectorRef": {
          "type": "string"
        },
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "issueKey": {
          "type": "string"
        },
        "issueType": {
          "type": "string"
        },
        "projectKey": {
          "type": "string"
        },
        "rejectionCriteria": {
          "$ref": "#/definitions/cf/CriteriaSpecWrapper"
        }
      }
    },
    "JiraCreateStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cf/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "issueType",
            "projectKey"
          ],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "fields": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cf/JiraField"
              }
            },
            "issueType": {
              "type": "string"
            },
            "projectKey": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "connectorRef",
        "issueType",
        "projectKey"
      ],
      "properties": {
        "connectorRef": {
          "type": "string"
        },
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "fields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cf/JiraField"
          }
        },
        "issueType": {
          "type": "string"
        },
        "projectKey": {
          "type": "string"
        }
      }
    },
    "JiraField": {
      "type": "object",
      "required": [
        "value"
      ],
      "properties": {
        "name": {
          "type": "string",
          "minLength": 1
        },
        "value": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "JiraUpdateStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cf/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "issueKey"
          ],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "fields": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cf/JiraField"
              }
            },
            "issueKey": {
              "type": "string"
            },
            "transitionTo": {
              "$ref": "#/definitions/cf/TransitionTo"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "connectorRef",
        "issueKey"
      ],
      "properties": {
        "connectorRef": {
          "type": "string"
        },
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "fields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cf/JiraField"
          }
        },
        "issueKey": {
          "type": "string"
        },
        "transitionTo": {
          "$ref": "#/definitions/cf/TransitionTo"
        }
      }
    },
    "JsonImportDataSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/cf/ImportDataSpec"
        },
        {
          "type": "object",
          "required": [
            "jsonBody"
          ],
          "properties": {
            "jsonBody": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "JsonNode": {
      "type": "object",
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "KeyValuesCriteriaSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/cf/CriteriaSpec"
        },
        {
          "type": "object",
          "required": [
            "conditions"
          ],
          "properties": {
            "conditions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cf/Condition"
              }
            },
            "matchAnyCondition": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "KeyValuesImportDataSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/cf/ImportDataSpec"
        },
        {
          "type": "object",
          "required": [
            "fields"
          ],
          "properties": {
            "fields": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cf/ServiceNowField"
              }
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "Limits": {
      "type": "object",
      "properties": {
        "cpu": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "number"
            }
          ]
        },
        "memory": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ManualFailureSpecConfig": {
      "type": "object",
      "required": [
        "onTimeout",
        "timeout"
      ],
      "properties": {
        "onTimeout": {
          "$ref": "#/definitions/cf/OnTimeoutConfig"
        },
        "timeout": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ManualInterventionFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/cf/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": [
            "spec",
            "type"
          ],
          "properties": {
            "spec": {
              "readOnly": true,
              "$ref": "#/definitions/cf/ManualFailureSpecConfig"
            },
            "type": {
              "type": "string",
              "enum": [
                "ManualIntervention"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "MarkAsFailFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/cf/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "MarkAsFailure"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "MarkAsSuccessFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/cf/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "MarkAsSuccess"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "MatrixConfigInterface": {
      "type": "object",
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "NGVariable": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "description": {
          "type": "string"
        },
        "metadata": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "required": {
          "type": "boolean"
        },
        "type": {
          "type": "string",
          "enum": [
            "String",
            "Number",
            "Secret"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "NumberNGVariable": {
      "allOf": [
        {
          "$ref": "#/definitions/cf/NGVariable"
        },
        {
          "type": "object",
          "required": [
            "value"
          ],
          "properties": {
            "default": {
              "type": "number",
              "format": "double"
            },
            "name": {
              "type": "string",
              "pattern": "^[a-zA-Z_][0-9a-zA-Z_\\.$]{0,127}$"
            },
            "type": {
              "type": "string",
              "enum": [
                "Number"
              ]
            },
            "value": {
              "oneOf": [
                {
                  "type": "number",
                  "format": "double"
                },
                {
                  "type": "string",
                  "pattern": "((^[+-]?[0-9]*\\.?[0-9]+$)|(<\\+.+>.*))"
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "OnFailureConfig": {
      "type": "object",
      "required": [
        "action",
        "errors"
      ],
      "properties": {
        "action": {
          "$ref": "#/definitions/cf/FailureStrategyActionConfig"
        },
        "errors": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Unknown",
              "AllErrors",
              "Authentication",
              "Connectivity",
              "Timeout",
              "Authorization",
              "Verification",
              "DelegateProvisioning",
              "PolicyEvaluationFailure",
              "InputTimeoutError",
              "ApprovalRejection",
              "DelegateRestart"
            ]
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "OnRetryFailureConfig": {
      "type": "object",
      "properties": {
        "action": {
          "$ref": "#/definitions/cf/FailureStrategyActionConfig"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "OnTimeoutConfig": {
      "type": "object",
      "properties": {
        "action": {
          "$ref": "#/definitions/cf/FailureStrategyActionConfig"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "OutputNGVariable": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ParallelStepElementConfig": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/cf/ExecutionWrapperConfig"
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ParameterField": {
      "type": "object",
      "properties": {
        "defaultValue": {
          "type": "object"
        },
        "executionInput": {
          "type": "boolean"
        },
        "expression": {
          "type": "boolean"
        },
        "expressionValue": {
          "type": "string"
        },
        "inputSetValidator": {
          "$ref": "#/definitions/cf/InputSetValidator"
        },
        "jsonResponseField": {
          "type": "boolean"
        },
        "responseField": {
          "type": "string"
        },
        "typeString": {
          "type": "boolean"
        },
        "value": {
          "type": "object"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ParameterFieldMapStringJsonNode": {
      "type": "object",
      "properties": {
        "defaultValue": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/cf/JsonNode"
          }
        },
        "executionInput": {
          "type": "boolean"
        },
        "expression": {
          "type": "boolean"
        },
        "expressionValue": {
          "type": "string"
        },
        "inputSetValidator": {
          "$ref": "#/definitions/cf/InputSetValidator"
        },
        "jsonResponseField": {
          "type": "boolean"
        },
        "responseField": {
          "type": "string"
        },
        "typeString": {
          "type": "boolean"
        },
        "value": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/cf/JsonNode"
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ParameterFieldMatrixConfigInterface": {
      "type": "object",
      "properties": {
        "defaultValue": {
          "$ref": "#/definitions/cf/MatrixConfigInterface"
        },
        "executionInput": {
          "type": "boolean"
        },
        "expression": {
          "type": "boolean"
        },
        "expressionValue": {
          "type": "string"
        },
        "inputSetValidator": {
          "$ref": "#/definitions/cf/InputSetValidator"
        },
        "jsonResponseField": {
          "type": "boolean"
        },
        "responseField": {
          "type": "string"
        },
        "typeString": {
          "type": "boolean"
        },
        "value": {
          "$ref": "#/definitions/cf/MatrixConfigInterface"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ParameterFieldString": {
      "type": "object",
      "properties": {
        "defaultValue": {
          "type": "string"
        },
        "executionInput": {
          "type": "boolean"
        },
        "expression": {
          "type": "boolean"
        },
        "expressionValue": {
          "type": "string"
        },
        "inputSetValidator": {
          "$ref": "#/definitions/cf/InputSetValidator"
        },
        "jsonResponseField": {
          "type": "boolean"
        },
        "responseField": {
          "type": "string"
        },
        "typeString": {
          "type": "boolean"
        },
        "value": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PatchInstruction": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "SetFeatureFlagState",
            "SetOnVariation",
            "SetOffVariation",
            "SetDefaultVariations",
            "AddRule",
            "UpdateRule",
            "AddTargetsToVariationTargetMap",
            "RemoveTargetsToVariationTargetMap",
            "AddSegmentToVariationTargetMap",
            "RemoveSegmentsToVariationTargetMap"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PersistentVolumeClaimYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/cf/ContainerVolume"
        },
        {
          "type": "object",
          "required": [
            "mountPath",
            "spec",
            "type"
          ],
          "properties": {
            "mountPath": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/cf/PersistentVolumeClaimYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "EmptyDir",
                "PersistentVolumeClaim",
                "HostPath"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PersistentVolumeClaimYamlSpec": {
      "type": "object",
      "required": [
        "claimName"
      ],
      "properties": {
        "claimName": {
          "type": "string"
        },
        "readOnly": {
          "type": "boolean"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PipelineRollbackFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/cf/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "PipelineRollback"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PolicyConfig": {
      "type": "object",
      "required": [
        "policySets"
      ],
      "properties": {
        "policySets": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PolicySpec": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PolicyStepInfo": {
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Custom"
              }
            }
          },
          "then": {
            "properties": {
              "policySpec": {
                "$ref": "#/definitions/cf/CustomPolicyStepSpec"
              }
            }
          },
          "$ref": "#/definitions/cf/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "policySets"
          ],
          "properties": {
            "metadata": {
              "type": "string"
            },
            "policySets": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "type": {
              "type": "string"
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Custom"
              }
            }
          },
          "then": {
            "properties": {
              "policySpec": {
                "$ref": "#/definitions/cf/CustomPolicyStepSpec"
              }
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "policySets"
      ],
      "properties": {
        "metadata": {
          "type": "string"
        },
        "policySets": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "type": {
          "type": "string"
        }
      }
    },
    "ProceedWithDefaultValuesFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/cf/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "ProceedWithDefaultValues"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "QueueStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cf/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "key",
            "scope"
          ],
          "properties": {
            "key": {
              "type": "string"
            },
            "scope": {
              "type": "string",
              "enum": [
                "Pipeline",
                "Stage"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "key",
        "scope"
      ],
      "properties": {
        "key": {
          "type": "string"
        },
        "scope": {
          "type": "string",
          "enum": [
            "Pipeline",
            "Stage"
          ]
        }
      }
    },
    "RemoveSegmentToVariationTargetMapYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/cf/PatchInstruction"
        },
        {
          "type": "object",
          "required": [
            "identifier",
            "spec",
            "type"
          ],
          "properties": {
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/cf/RemoveSegmentToVariationTargetMapYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "RemoveSegmentToVariationTargetMap"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "RemoveSegmentToVariationTargetMapYamlSpec": {
      "type": "object",
      "required": [
        "segments",
        "variation"
      ],
      "properties": {
        "segments": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "variation": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "RemoveTargetsToVariationTargetMapYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/cf/PatchInstruction"
        },
        {
          "type": "object",
          "required": [
            "identifier",
            "spec",
            "type"
          ],
          "properties": {
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/cf/RemoveTargetsToVariationTargetMapYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "RemoveTargetsToVariationTargetMap"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "RemoveTargetsToVariationTargetMapYamlSpec": {
      "type": "object",
      "required": [
        "targets",
        "variation"
      ],
      "properties": {
        "targets": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "variation": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ResourceConstraintStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cf/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "acquireMode",
            "holdingScope",
            "name",
            "permits",
            "resourceUnit"
          ],
          "properties": {
            "acquireMode": {
              "type": "string",
              "enum": [
                "ENSURE",
                "ACCUMULATE"
              ]
            },
            "holdingScope": {
              "type": "string",
              "enum": [
                "PLAN",
                "PIPELINE",
                "STAGE",
                "STEP_GROUP"
              ]
            },
            "name": {
              "type": "string"
            },
            "permits": {
              "type": "integer",
              "format": "int32"
            },
            "resourceUnit": {
              "$ref": "#/definitions/cf/ParameterFieldString"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "RetryFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/cf/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": [
            "spec",
            "type"
          ],
          "properties": {
            "spec": {
              "readOnly": true,
              "$ref": "#/definitions/cf/RetryFailureSpecConfig"
            },
            "type": {
              "type": "string",
              "enum": [
                "Retry"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "RetryFailureSpecConfig": {
      "type": "object",
      "required": [
        "onRetryFailure",
        "retryCount",
        "retryIntervals"
      ],
      "properties": {
        "onRetryFailure": {
          "$ref": "#/definitions/cf/OnRetryFailureConfig"
        },
        "retryCount": {
          "type": "integer",
          "format": "int32"
        },
        "retryIntervals": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "maxItems": 2147483647,
          "minItems": 1
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SecretNGVariable": {
      "allOf": [
        {
          "$ref": "#/definitions/cf/NGVariable"
        },
        {
          "type": "object",
          "required": [
            "value"
          ],
          "properties": {
            "default": {
              "type": "string"
            },
            "name": {
              "type": "string",
              "pattern": "^[a-zA-Z_][0-9a-zA-Z_\\.$]{0,127}$"
            },
            "type": {
              "type": "string",
              "enum": [
                "Secret"
              ]
            },
            "value": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SecurityContext": {
      "type": "object",
      "properties": {
        "allowPrivilegeEscalation": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "capabilities": {
          "$ref": "#/definitions/cf/Capabilities"
        },
        "privileged": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "procMount": {
          "type": "string"
        },
        "readOnlyRootFilesystem": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "runAsGroup": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "runAsNonRoot": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "Serve": {
      "type": "object",
      "properties": {
        "distribution": {
          "$ref": "#/definitions/cf/Distribution"
        },
        "variation": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ServiceNowApprovalStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cf/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "approvalCriteria",
            "connectorRef",
            "ticketNumber",
            "ticketType"
          ],
          "properties": {
            "approvalCriteria": {
              "$ref": "#/definitions/cf/CriteriaSpecWrapper"
            },
            "changeWindow": {
              "$ref": "#/definitions/cf/ServiceNowChangeWindowSpec"
            },
            "connectorRef": {
              "type": "string"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "rejectionCriteria": {
              "$ref": "#/definitions/cf/CriteriaSpecWrapper"
            },
            "ticketNumber": {
              "type": "string"
            },
            "ticketType": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "approvalCriteria",
        "connectorRef",
        "ticketNumber",
        "ticketType"
      ],
      "properties": {
        "approvalCriteria": {
          "$ref": "#/definitions/cf/CriteriaSpecWrapper"
        },
        "changeWindow": {
          "$ref": "#/definitions/cf/ServiceNowChangeWindowSpec"
        },
        "connectorRef": {
          "type": "string"
        },
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "rejectionCriteria": {
          "$ref": "#/definitions/cf/CriteriaSpecWrapper"
        },
        "ticketNumber": {
          "type": "string"
        },
        "ticketType": {
          "type": "string"
        }
      }
    },
    "ServiceNowChangeWindowSpec": {
      "type": "object",
      "required": [
        "endField",
        "startField"
      ],
      "properties": {
        "endField": {
          "type": "string"
        },
        "startField": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ServiceNowCreateStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cf/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "ticketType",
            "useServiceNowTemplate"
          ],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "fields": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cf/ServiceNowField"
              }
            },
            "templateName": {
              "type": "string"
            },
            "ticketType": {
              "type": "string"
            },
            "useServiceNowTemplate": {
              "type": "boolean"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "connectorRef",
        "ticketType",
        "useServiceNowTemplate"
      ],
      "properties": {
        "connectorRef": {
          "type": "string"
        },
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "fields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cf/ServiceNowField"
          }
        },
        "templateName": {
          "type": "string"
        },
        "ticketType": {
          "type": "string"
        },
        "useServiceNowTemplate": {
          "type": "boolean"
        }
      }
    },
    "ServiceNowField": {
      "type": "object",
      "required": [
        "name",
        "value"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ServiceNowImportSetStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cf/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "importData",
            "stagingTableName"
          ],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "importData": {
              "$ref": "#/definitions/cf/ImportDataSpecWrapper"
            },
            "stagingTableName": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "connectorRef",
        "importData",
        "stagingTableName"
      ],
      "properties": {
        "connectorRef": {
          "type": "string"
        },
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "importData": {
          "$ref": "#/definitions/cf/ImportDataSpecWrapper"
        },
        "stagingTableName": {
          "type": "string"
        }
      }
    },
    "ServiceNowUpdateStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cf/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "ticketNumber",
            "ticketType",
            "useServiceNowTemplate"
          ],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "fields": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cf/ServiceNowField"
              }
            },
            "templateName": {
              "type": "string"
            },
            "ticketNumber": {
              "type": "string"
            },
            "ticketType": {
              "type": "string"
            },
            "useServiceNowTemplate": {
              "type": "boolean"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "connectorRef",
        "ticketNumber",
        "ticketType",
        "useServiceNowTemplate"
      ],
      "properties": {
        "connectorRef": {
          "type": "string"
        },
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "fields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cf/ServiceNowField"
          }
        },
        "templateName": {
          "type": "string"
        },
        "ticketNumber": {
          "type": "string"
        },
        "ticketType": {
          "type": "string"
        },
        "useServiceNowTemplate": {
          "type": "boolean"
        }
      }
    },
    "SetDefaultVariationsYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/cf/PatchInstruction"
        },
        {
          "type": "object",
          "required": [
            "identifier",
            "spec",
            "type"
          ],
          "properties": {
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/cf/SetDefaultVariationsYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "SetDefaultVariations"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SetDefaultVariationsYamlSpec": {
      "type": "object",
      "required": [
        "off",
        "on"
      ],
      "properties": {
        "off": {
          "type": "string"
        },
        "on": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SetFeatureFlagStateYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/cf/PatchInstruction"
        },
        {
          "type": "object",
          "required": [
            "identifier",
            "spec",
            "type"
          ],
          "properties": {
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/cf/SetFeatureFlagStateYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "SetFeatureFlagState"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SetFeatureFlagStateYamlSpec": {
      "type": "object",
      "required": [
        "state"
      ],
      "properties": {
        "state": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SetOffVariationYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/cf/PatchInstruction"
        },
        {
          "type": "object",
          "required": [
            "identifier",
            "spec",
            "type"
          ],
          "properties": {
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/cf/SetOffVariationYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "SetOffVariation"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SetOffVariationYamlSpec": {
      "type": "object",
      "required": [
        "variation"
      ],
      "properties": {
        "variation": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SetOnVariationYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/cf/PatchInstruction"
        },
        {
          "type": "object",
          "required": [
            "identifier",
            "spec",
            "type"
          ],
          "properties": {
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/cf/SetOnVariationYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "SetOnVariation"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SetOnVariationYamlSpec": {
      "type": "object",
      "required": [
        "variation"
      ],
      "properties": {
        "variation": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ShellScriptBaseSource": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ShellScriptInlineSource": {
      "allOf": [
        {
          "$ref": "#/definitions/cf/ShellScriptBaseSource"
        },
        {
          "type": "object",
          "properties": {
            "script": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ShellScriptSourceWrapper": {
      "type": "object",
      "required": [
        "spec",
        "type"
      ],
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Harness"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cf/HarnessFileStoreSource"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Inline"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cf/ShellScriptInlineSource"
              }
            }
          }
        }
      ]
    },
    "ShellScriptStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cf/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "onDelegate",
            "shell",
            "source"
          ],
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "environmentVariables": {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/cf/NumberNGVariable"
                  },
                  {
                    "$ref": "#/definitions/cf/SecretNGVariable"
                  },
                  {
                    "$ref": "#/definitions/cf/StringNGVariable"
                  }
                ]
              }
            },
            "executionTarget": {
              "$ref": "#/definitions/cf/ExecutionTarget"
            },
            "metadata": {
              "type": "string"
            },
            "onDelegate": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            },
            "outputVariables": {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/cf/NumberNGVariable"
                  },
                  {
                    "$ref": "#/definitions/cf/SecretNGVariable"
                  },
                  {
                    "$ref": "#/definitions/cf/StringNGVariable"
                  }
                ]
              }
            },
            "shell": {
              "type": "string",
              "enum": [
                "Bash",
                "PowerShell"
              ]
            },
            "source": {
              "$ref": "#/definitions/cf/ShellScriptSourceWrapper"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "onDelegate",
        "shell",
        "source"
      ],
      "properties": {
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "environmentVariables": {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/cf/NumberNGVariable"
              },
              {
                "$ref": "#/definitions/cf/SecretNGVariable"
              },
              {
                "$ref": "#/definitions/cf/StringNGVariable"
              }
            ]
          }
        },
        "executionTarget": {
          "$ref": "#/definitions/cf/ExecutionTarget"
        },
        "metadata": {
          "type": "string"
        },
        "onDelegate": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ]
        },
        "outputVariables": {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/cf/NumberNGVariable"
              },
              {
                "$ref": "#/definitions/cf/SecretNGVariable"
              },
              {
                "$ref": "#/definitions/cf/StringNGVariable"
              }
            ]
          }
        },
        "shell": {
          "type": "string",
          "enum": [
            "Bash",
            "PowerShell"
          ]
        },
        "source": {
          "$ref": "#/definitions/cf/ShellScriptSourceWrapper"
        }
      }
    },
    "StageRollbackFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/cf/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "StageRollback"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "StageWhenCondition": {
      "type": "object",
      "required": [
        "pipelineStatus"
      ],
      "properties": {
        "condition": {
          "type": "string",
          "pattern": "^(?!<\\+input>.*\\.executionInput\\(\\)(.*)$)"
        },
        "pipelineStatus": {
          "type": "string",
          "enum": [
            "Success",
            "Failure",
            "All"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "StepElementConfig": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cf/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cf/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cf/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(<\\+input>.*)|(.*<\\+.*>.*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": []
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cf/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": []
    },
    "StepGroupElementConfig": {
      "type": "object",
      "required": [
        "identifier",
        "name"
      ],
      "properties": {
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cf/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "steps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cf/ExecutionWrapperConfig"
          },
          "maxItems": 2147483647,
          "minItems": 1
        },
        "strategy": {
          "$ref": "#/definitions/cf/StrategyConfig"
        },
        "template": {
          "$ref": "#/definitions/cf/TemplateLinkConfig"
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cf/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "oneOf": [
            {
              "required": [
                "template"
              ]
            },
            {
              "required": [
                "steps"
              ]
            }
          ]
        }
      ]
    },
    "StepGroupFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/cf/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "StepGroupRollback"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "StepSpecType": {
      "type": "object",
      "discriminator": "type",
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "StepWhenCondition": {
      "type": "object",
      "required": [
        "stageStatus"
      ],
      "properties": {
        "condition": {
          "type": "string",
          "pattern": "^(?!<\\+input>.*\\.executionInput\\(\\)(.*)$)"
        },
        "stageStatus": {
          "type": "string",
          "enum": [
            "Success",
            "Failure",
            "All"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "StrategyConfig": {
      "type": "object",
      "properties": {
        "matrix": {
          "oneOf": [
            {
              "$ref": "#/definitions/cf/ParameterFieldMatrixConfigInterface"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "parallelism": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            },
            {
              "type": "string",
              "pattern": "(<\\+.+>.*)",
              "minLength": 1
            }
          ]
        },
        "repeat": {
          "$ref": "#/definitions/cf/HarnessForConfig"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "oneOf": [
            {
              "required": [
                "repeat"
              ]
            },
            {
              "required": [
                "parallelism"
              ]
            },
            {
              "required": [
                "matrix"
              ]
            }
          ]
        }
      ]
    },
    "StringNGVariable": {
      "allOf": [
        {
          "$ref": "#/definitions/cf/NGVariable"
        },
        {
          "type": "object",
          "required": [
            "value"
          ],
          "properties": {
            "default": {
              "type": "string"
            },
            "name": {
              "type": "string",
              "pattern": "^[a-zA-Z_][0-9a-zA-Z_\\.$]{0,127}$"
            },
            "type": {
              "type": "string",
              "enum": [
                "String"
              ]
            },
            "value": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "TemplateLinkConfig": {
      "type": "object",
      "required": [
        "templateRef"
      ],
      "properties": {
        "templateInputs": {
          "$ref": "#/definitions/cf/JsonNode"
        },
        "templateRef": {
          "type": "string"
        },
        "templateVariables": {
          "$ref": "#/definitions/cf/JsonNode"
        },
        "versionLabel": {
          "type": "string",
          "pattern": "^[0-9a-zA-Z][^\\s]{0,63}$"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "Toleration": {
      "type": "object",
      "properties": {
        "effect": {
          "type": "string"
        },
        "key": {
          "type": "string"
        },
        "operator": {
          "type": "string"
        },
        "tolerationSeconds": {
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "TransitionTo": {
      "type": "object",
      "required": [
        "status"
      ],
      "properties": {
        "status": {
          "type": "string"
        },
        "transitionName": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "UpdateRuleYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/cf/PatchInstruction"
        },
        {
          "type": "object",
          "required": [
            "identifier",
            "spec",
            "type"
          ],
          "properties": {
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/cf/UpdateRuleYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "UpdateRule"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "UpdateRuleYamlSpec": {
      "type": "object",
      "required": [
        "bucketBy",
        "ruleID"
      ],
      "properties": {
        "bucketBy": {
          "type": "string"
        },
        "ruleID": {
          "type": "string"
        },
        "serve": {
          "$ref": "#/definitions/cf/Serve"
        },
        "variations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cf/VariationYamlSpec"
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "VariationYamlSpec": {
      "type": "object",
      "required": [
        "variation",
        "weight"
      ],
      "properties": {
        "variation": {
          "type": "string"
        },
        "weight": {
          "type": "integer",
          "format": "int32"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "WaitStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/cf/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "duration"
          ],
          "properties": {
            "duration": {
              "type": "string",
              "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(<\\+input>.*)|(.*<\\+.*>.*)|(^$))$"
            },
            "metadata": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "duration"
      ],
      "properties": {
        "duration": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(<\\+input>.*)|(.*<\\+.*>.*)|(^$))$"
        },
        "metadata": {
          "type": "string"
        }
      }
    },
    "WeightedVariation": {
      "type": "object",
      "required": [
        "variation",
        "weight"
      ],
      "properties": {
        "variation": {
          "type": "string"
        },
        "weight": {
          "type": "integer",
          "format": "int32"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "HttpStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cf/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cf/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cf/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "Http"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cf/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Http"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cf/HttpStepInfo"
              }
            }
          }
        }
      ]
    },
    "EmailStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cf/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cf/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cf/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "Email"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cf/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Email"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cf/EmailStepInfo"
              }
            }
          }
        }
      ]
    },
    "QueueStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cf/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cf/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cf/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "Queue"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cf/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Queue"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cf/QueueStepInfo"
              }
            }
          }
        }
      ]
    },
    "ShellScriptStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cf/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cf/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cf/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "ShellScript"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cf/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "ShellScript"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cf/ShellScriptStepInfo"
              }
            }
          }
        }
      ]
    },
    "TemplateStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "template"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "template": {
          "$ref": "#/definitions/cf/TemplateLinkConfig"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PolicyStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cf/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cf/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cf/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "Policy"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cf/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Policy"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cf/PolicyStepInfo"
              }
            }
          }
        }
      ]
    },
    "WaitStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cf/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cf/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cf/StrategyConfig"
        },
        "type": {
          "type": "string",
          "enum": [
            "Wait"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cf/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Wait"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cf/WaitStepInfo"
              }
            }
          }
        }
      ]
    },
    "ServiceNowApprovalStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cf/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cf/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cf/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "ServiceNowApproval"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cf/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "ServiceNowApproval"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cf/ServiceNowApprovalStepInfo"
              }
            }
          }
        }
      ]
    },
    "BarrierStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cf/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cf/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cf/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "Barrier"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cf/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Barrier"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cf/BarrierStepInfo"
              }
            }
          }
        }
      ]
    },
    "ServiceNowCreateStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cf/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cf/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cf/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "ServiceNowCreate"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cf/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "ServiceNowCreate"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cf/ServiceNowCreateStepInfo"
              }
            }
          }
        }
      ]
    },
    "ServiceNowUpdateStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cf/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cf/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cf/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "ServiceNowUpdate"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cf/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "ServiceNowUpdate"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cf/ServiceNowUpdateStepInfo"
              }
            }
          }
        }
      ]
    },
    "ServiceNowImportSetStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cf/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cf/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cf/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "ServiceNowImportSet"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cf/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "ServiceNowImportSet"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cf/ServiceNowImportSetStepInfo"
              }
            }
          }
        }
      ]
    },
    "ContainerStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cf/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cf/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cf/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "Container"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cf/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Container"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cf/ContainerStepInfo"
              }
            }
          }
        }
      ]
    },
    "CustomApprovalStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cf/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cf/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cf/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "CustomApproval"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cf/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "CustomApproval"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cf/CustomApprovalStepInfo"
              }
            }
          }
        }
      ]
    },
    "JiraCreateStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cf/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cf/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cf/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "JiraCreate"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cf/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "JiraCreate"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cf/JiraCreateStepInfo"
              }
            }
          }
        }
      ]
    },
    "JiraUpdateStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cf/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cf/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cf/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "JiraUpdate"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cf/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "JiraUpdate"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cf/JiraUpdateStepInfo"
              }
            }
          }
        }
      ]
    },
    "JiraApprovalStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cf/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cf/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cf/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "JiraApproval"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cf/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "JiraApproval"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cf/JiraApprovalStepInfo"
              }
            }
          }
        }
      ]
    },
    "HarnessApprovalStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cf/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cf/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cf/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "HarnessApproval"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cf/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "HarnessApproval"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cf/HarnessApprovalStepInfo"
              }
            }
          }
        }
      ]
    },
    "FlagConfigurationStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/cf/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cf/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/cf/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "FlagConfiguration"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/cf/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "FlagConfiguration"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/cf/FlagConfigurationStepInfo"
              }
            }
          }
        }
      ]
    },
    "PMSStepInfo": {
      "type": "object",
      "discriminator": "type",
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  "custom": {
    "AbortFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/custom/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "Abort"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AddRuleYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/custom/PatchInstruction"
        },
        {
          "type": "object",
          "required": [
            "identifier",
            "spec",
            "type"
          ],
          "properties": {
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/custom/AddRuleYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "AddRule"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AddRuleYamlSpec": {
      "type": "object",
      "properties": {
        "clauses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/custom/Clause"
          }
        },
        "distribution": {
          "$ref": "#/definitions/custom/DistributionYamlSpec"
        },
        "priority": {
          "type": "integer",
          "format": "int32"
        },
        "serve": {
          "$ref": "#/definitions/custom/Serve"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AddSegmentToVariationTargetMapYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/custom/PatchInstruction"
        },
        {
          "type": "object",
          "required": [
            "identifier",
            "spec",
            "type"
          ],
          "properties": {
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/custom/AddSegmentToVariationTargetMapYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "AddSegmentToVariationTargetMap"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AddSegmentToVariationTargetMapYamlSpec": {
      "type": "object",
      "required": [
        "segments",
        "variation"
      ],
      "properties": {
        "segments": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "variation": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AddTargetsToVariationTargetMapYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/custom/PatchInstruction"
        },
        {
          "type": "object",
          "required": [
            "identifier",
            "spec",
            "type"
          ],
          "properties": {
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/custom/AddTargetsToVariationTargetMapYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "AddTargetsToVariationTargetMap"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AddTargetsToVariationTargetMapYamlSpec": {
      "type": "object",
      "required": [
        "targets",
        "variation"
      ],
      "properties": {
        "targets": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "variation": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ApproverInputInfo": {
      "type": "object",
      "properties": {
        "defaultValue": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "minLength": 1
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "Approvers": {
      "type": "object",
      "required": [
        "disallowPipelineExecutor",
        "minimumCount",
        "userGroups"
      ],
      "properties": {
        "disallowPipelineExecutor": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ]
        },
        "minimumCount": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "userGroups": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              },
              "maxItems": 2147483647,
              "minItems": 1
            },
            {
              "type": "string",
              "pattern": "(<\\+.+>.*)",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "BarrierStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/custom/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "barrierRef"
          ],
          "properties": {
            "barrierRef": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "barrierRef"
      ],
      "properties": {
        "barrierRef": {
          "type": "string"
        }
      }
    },
    "Capabilities": {
      "type": "object",
      "properties": {
        "add": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "drop": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "Clause": {
      "type": "object",
      "required": [
        "attribute",
        "id",
        "negate",
        "op",
        "values"
      ],
      "properties": {
        "attribute": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "negate": {
          "type": "boolean"
        },
        "op": {
          "type": "string"
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ClauseYamlSpec": {
      "type": "object",
      "required": [
        "op",
        "values"
      ],
      "properties": {
        "attribute": {
          "type": "string"
        },
        "op": {
          "type": "string"
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "Condition": {
      "type": "object",
      "required": [
        "key",
        "operator",
        "value"
      ],
      "properties": {
        "key": {
          "type": "string"
        },
        "operator": {
          "type": "string",
          "enum": [
            "equals",
            "not equals",
            "in",
            "not in"
          ]
        },
        "value": {
          "type": "string",
          "minLength": 1
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ContainerInfraYamlSpec": {
      "type": "object",
      "required": [
        "connectorRef",
        "namespace",
        "resources"
      ],
      "properties": {
        "annotations": {
          "oneOf": [
            {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ]
        },
        "automountServiceAccountToken": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "connectorRef": {
          "type": "string"
        },
        "containerSecurityContext": {
          "oneOf": [
            {
              "$ref": "#/definitions/custom/SecurityContext"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "initTimeout": {
          "type": "string"
        },
        "labels": {
          "oneOf": [
            {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ]
        },
        "namespace": {
          "type": "string",
          "minLength": 1,
          "maxLength": 2147483647
        },
        "nodeSelector": {
          "oneOf": [
            {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "os": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Linux",
                "MacOS",
                "Windows"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "priorityClassName": {
          "type": "string"
        },
        "resources": {
          "$ref": "#/definitions/custom/ContainerResource"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "serviceAccountName": {
          "type": "string"
        },
        "tolerations": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/custom/Toleration"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "volumes": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/custom/ContainerVolume"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ContainerK8sInfra": {
      "allOf": [
        {
          "$ref": "#/definitions/custom/ContainerStepInfra"
        },
        {
          "type": "object",
          "required": [
            "spec",
            "type"
          ],
          "properties": {
            "spec": {
              "$ref": "#/definitions/custom/ContainerInfraYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "KubernetesDirect"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ContainerResource": {
      "type": "object",
      "required": [
        "limits"
      ],
      "properties": {
        "limits": {
          "$ref": "#/definitions/custom/Limits"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ContainerStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/custom/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "command",
            "infrastructure"
          ],
          "properties": {
            "command": {
              "type": "string"
            },
            "connectorRef": {
              "type": "string"
            },
            "entrypoint": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "envVariables": {
              "oneOf": [
                {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "image": {
              "type": "string"
            },
            "imagePullPolicy": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Always",
                    "Never",
                    "IfNotPresent"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "infrastructure": {
              "oneOf": [
                {
                  "$ref": "#/definitions/custom/ContainerK8sInfra"
                }
              ]
            },
            "metadata": {
              "type": "string"
            },
            "outputVariables": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/custom/OutputNGVariable"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "privileged": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "settings": {
              "oneOf": [
                {
                  "$ref": "#/definitions/custom/ParameterFieldMapStringJsonNode"
                },
                {
                  "type": "string"
                }
              ]
            },
            "shell": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Sh",
                    "Bash",
                    "Powershell",
                    "Pwsh",
                    "Python"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "command",
        "infrastructure"
      ],
      "properties": {
        "command": {
          "type": "string"
        },
        "connectorRef": {
          "type": "string"
        },
        "entrypoint": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ]
        },
        "envVariables": {
          "oneOf": [
            {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ]
        },
        "image": {
          "type": "string"
        },
        "imagePullPolicy": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Always",
                "Never",
                "IfNotPresent"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "infrastructure": {
          "oneOf": [
            {
              "$ref": "#/definitions/custom/ContainerK8sInfra"
            }
          ]
        },
        "metadata": {
          "type": "string"
        },
        "outputVariables": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/custom/OutputNGVariable"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "privileged": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "settings": {
          "oneOf": [
            {
              "$ref": "#/definitions/custom/ParameterFieldMapStringJsonNode"
            },
            {
              "type": "string"
            }
          ]
        },
        "shell": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Sh",
                "Bash",
                "Powershell",
                "Pwsh",
                "Python"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      }
    },
    "ContainerStepInfra": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "KubernetesDirect"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ContainerVolume": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "EmptyDir",
            "PersistentVolumeClaim",
            "HostPath"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CriteriaSpec": {
      "type": "object",
      "discriminator": "type",
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CriteriaSpecWrapper": {
      "type": "object",
      "required": [
        "spec",
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "Jexl",
            "KeyValues"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Jexl"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/custom/JexlCriteriaSpec"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "KeyValues"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/custom/KeyValuesCriteriaSpec"
              }
            }
          }
        }
      ]
    },
    "CustomApprovalStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/custom/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "approvalCriteria",
            "retryInterval",
            "scriptTimeout",
            "shell",
            "source"
          ],
          "properties": {
            "approvalCriteria": {
              "$ref": "#/definitions/custom/CriteriaSpecWrapper"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "environmentVariables": {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/custom/NumberNGVariable"
                  },
                  {
                    "$ref": "#/definitions/custom/SecretNGVariable"
                  },
                  {
                    "$ref": "#/definitions/custom/StringNGVariable"
                  }
                ]
              }
            },
            "outputVariables": {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/custom/NumberNGVariable"
                  },
                  {
                    "$ref": "#/definitions/custom/SecretNGVariable"
                  },
                  {
                    "$ref": "#/definitions/custom/StringNGVariable"
                  }
                ]
              }
            },
            "rejectionCriteria": {
              "$ref": "#/definitions/custom/CriteriaSpecWrapper"
            },
            "retryInterval": {
              "type": "string",
              "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(<\\+input>.*)|(.*<\\+.*>.*)|(^$))$"
            },
            "scriptTimeout": {
              "type": "string",
              "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(<\\+input>.*)|(.*<\\+.*>.*)|(^$))$"
            },
            "shell": {
              "type": "string",
              "enum": [
                "Bash",
                "PowerShell"
              ]
            },
            "source": {
              "$ref": "#/definitions/custom/ShellScriptSourceWrapper"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "approvalCriteria",
        "retryInterval",
        "scriptTimeout",
        "shell",
        "source"
      ],
      "properties": {
        "approvalCriteria": {
          "$ref": "#/definitions/custom/CriteriaSpecWrapper"
        },
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "environmentVariables": {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/custom/NumberNGVariable"
              },
              {
                "$ref": "#/definitions/custom/SecretNGVariable"
              },
              {
                "$ref": "#/definitions/custom/StringNGVariable"
              }
            ]
          }
        },
        "outputVariables": {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/custom/NumberNGVariable"
              },
              {
                "$ref": "#/definitions/custom/SecretNGVariable"
              },
              {
                "$ref": "#/definitions/custom/StringNGVariable"
              }
            ]
          }
        },
        "rejectionCriteria": {
          "$ref": "#/definitions/custom/CriteriaSpecWrapper"
        },
        "retryInterval": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(<\\+input>.*)|(.*<\\+.*>.*)|(^$))$"
        },
        "scriptTimeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(<\\+input>.*)|(.*<\\+.*>.*)|(^$))$"
        },
        "shell": {
          "type": "string",
          "enum": [
            "Bash",
            "PowerShell"
          ]
        },
        "source": {
          "$ref": "#/definitions/custom/ShellScriptSourceWrapper"
        }
      }
    },
    "CustomPolicyStepSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/custom/PolicySpec"
        },
        {
          "type": "object",
          "required": [
            "payload"
          ],
          "properties": {
            "payload": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CustomStageConfig": {
      "type": "object",
      "required": [
        "execution"
      ],
      "properties": {
        "execution": {
          "$ref": "#/definitions/custom/ExecutionElementConfig"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CustomStageNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "type"
      ],
      "properties": {
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "description": {
          "type": "string"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/custom/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/custom/StrategyConfig"
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "type": {
          "type": "string",
          "enum": [
            "Custom"
          ]
        },
        "variables": {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/custom/NumberNGVariable"
              },
              {
                "$ref": "#/definitions/custom/SecretNGVariable"
              },
              {
                "$ref": "#/definitions/custom/StringNGVariable"
              }
            ]
          }
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/custom/StageWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Custom"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/custom/CustomStageConfig"
              }
            }
          }
        }
      ]
    },
    "Distribution": {
      "type": "object",
      "required": [
        "bucketBy",
        "variations"
      ],
      "properties": {
        "bucketBy": {
          "type": "string"
        },
        "variations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/custom/WeightedVariation"
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "DistributionYamlSpec": {
      "type": "object",
      "required": [
        "bucketBy"
      ],
      "properties": {
        "bucketBy": {
          "type": "string"
        },
        "clauses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/custom/ClauseYamlSpec"
          }
        },
        "variations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/custom/VariationYamlSpec"
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "EmailStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/custom/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "subject",
            "to"
          ],
          "properties": {
            "body": {
              "type": "string"
            },
            "cc": {
              "type": "string"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "subject": {
              "type": "string"
            },
            "to": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "subject",
        "to"
      ],
      "properties": {
        "body": {
          "type": "string"
        },
        "cc": {
          "type": "string"
        },
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "subject": {
          "type": "string"
        },
        "to": {
          "type": "string"
        }
      }
    },
    "EmptyDirYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/custom/ContainerVolume"
        },
        {
          "type": "object",
          "required": [
            "mountPath",
            "spec",
            "type"
          ],
          "properties": {
            "mountPath": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/custom/EmptyDirYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "EmptyDir",
                "PersistentVolumeClaim",
                "HostPath"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "EmptyDirYamlSpec": {
      "type": "object",
      "properties": {
        "medium": {
          "type": "string"
        },
        "size": {
          "type": "string",
          "pattern": "^(([0-9]*[.])?[0-9]+)([GM]i?)|<\\+input>$"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ExecutionElementConfig": {
      "type": "object",
      "required": [
        "steps"
      ],
      "properties": {
        "rollbackSteps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/custom/ExecutionWrapperConfig"
          }
        },
        "steps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/custom/ExecutionWrapperConfig"
          },
          "maxItems": 2147483647,
          "minItems": 1
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ExecutionTarget": {
      "type": "object",
      "properties": {
        "connectorRef": {
          "type": "string"
        },
        "host": {
          "type": "string"
        },
        "workingDirectory": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ExecutionWrapperConfig": {
      "type": "object",
      "properties": {
        "parallel": {
          "$ref": "#/definitions/custom/ParallelStepElementConfig"
        },
        "step": {
          "oneOf": [
            {
              "$ref": "#/definitions/custom/StepElementConfig"
            },
            {
              "$ref": "#/definitions/cd/TerraformApplyStepNode"
            },
            {
              "$ref": "#/definitions/cd/TerraformPlanStepNode"
            },
            {
              "$ref": "#/definitions/cd/TerraformDestroyStepNode"
            },
            {
              "$ref": "#/definitions/cd/TerraformRollbackStepNode"
            },
            {
              "$ref": "#/definitions/cd/CloudformationCreateStackStepNode"
            },
            {
              "$ref": "#/definitions/cd/CloudformationDeleteStackStepNode"
            },
            {
              "$ref": "#/definitions/cd/CloudformationRollbackStepNode"
            },
            {
              "$ref": "#/definitions/cd/AzureCreateARMResourceStepNode"
            },
            {
              "$ref": "#/definitions/cd/AzureCreateBPStepNode"
            },
            {
              "$ref": "#/definitions/cd/AzureARMRollbackStepNode"
            },
            {
              "$ref": "#/definitions/cd/JenkinsBuildStepNode"
            },
            {
              "$ref": "#/definitions/cd/ShellScriptProvisionStepNode"
            },
            {
              "$ref": "#/definitions/cd/ChaosStepNode"
            },
            {
              "$ref": "#/definitions/cd/TerragruntPlanStepNode"
            },
            {
              "$ref": "#/definitions/cd/TerragruntApplyStepNode"
            },
            {
              "$ref": "#/definitions/cd/TerragruntDestroyStepNode"
            },
            {
              "$ref": "#/definitions/cd/TerragruntRollbackStepNode"
            },
            {
              "$ref": "#/definitions/cd/AsgCanaryDeployStepNode"
            },
            {
              "$ref": "#/definitions/cd/AsgCanaryDeleteStepNode"
            },
            {
              "$ref": "#/definitions/cd/AsgRollingDeployStepNode"
            },
            {
              "$ref": "#/definitions/cd/AsgRollingRollbackStepNode"
            },
            {
              "$ref": "#/definitions/cd/AsgBlueGreenDeployStepNode"
            },
            {
              "$ref": "#/definitions/cd/AsgBlueGreenRollbackStepNode"
            },
            {
              "$ref": "#/definitions/cd/AsgBlueGreenSwapServiceStepNode"
            },
            {
              "$ref": "#/definitions/cd/TerraformCloudRunStepNode"
            },
            {
              "$ref": "#/definitions/cd/AwsLambdaDeployStepNode"
            },
            {
              "$ref": "#/definitions/cd/AwsSamDeployStepNode"
            },
            {
              "$ref": "#/definitions/cd/AwsSamRollbackStepNode"
            },
            {
              "$ref": "#/definitions/cd/TerraformCloudRollbackStepNode"
            },
            {
              "$ref": "#/definitions/cd/AwsLambdaRollbackStepNode"
            },
            {
              "$ref": "#/definitions/cd/BambooBuildStepNode"
            },
            {
              "$ref": "#/definitions/HttpStepNode"
            },
            {
              "$ref": "#/definitions/EmailStepNode"
            },
            {
              "$ref": "#/definitions/QueueStepNode"
            },
            {
              "$ref": "#/definitions/ShellScriptStepNode"
            },
            {
              "$ref": "#/definitions/CustomApprovalStepNode"
            },
            {
              "$ref": "#/definitions/JiraCreateStepNode"
            },
            {
              "$ref": "#/definitions/JiraUpdateStepNode"
            },
            {
              "$ref": "#/definitions/TemplateStepNode"
            },
            {
              "$ref": "#/definitions/ServiceNowApprovalStepNode"
            },
            {
              "$ref": "#/definitions/JiraApprovalStepNode"
            },
            {
              "$ref": "#/definitions/HarnessApprovalStepNode"
            },
            {
              "$ref": "#/definitions/BarrierStepNode"
            },
            {
              "$ref": "#/definitions/ServiceNowCreateStepNode"
            },
            {
              "$ref": "#/definitions/ServiceNowUpdateStepNode"
            },
            {
              "$ref": "#/definitions/ServiceNowImportSetStepNode"
            },
            {
              "$ref": "#/definitions/FlagConfigurationStepNode"
            },
            {
              "$ref": "#/definitions/PolicyStepNode"
            },
            {
              "$ref": "#/definitions/WaitStepNode"
            },
            {
              "$ref": "#/definitions/ContainerStepNode"
            }
          ]
        },
        "stepGroup": {
          "$ref": "#/definitions/custom/StepGroupElementConfig"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "FailureStrategyActionConfig": {
      "type": "object",
      "required": [
        "type"
      ],
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "Ignore",
            "Retry",
            "MarkAsSuccess",
            "Abort",
            "StageRollback",
            "StepGroupRollback",
            "PipelineRollback",
            "ManualIntervention",
            "ProceedWithDefaultValues",
            "MarkAsFailure"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "FailureStrategyConfig": {
      "type": "object",
      "required": [
        "onFailure"
      ],
      "properties": {
        "onFailure": {
          "$ref": "#/definitions/custom/OnFailureConfig"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "FlagConfigurationStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/custom/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "environment",
            "feature",
            "instructions"
          ],
          "properties": {
            "environment": {
              "type": "string"
            },
            "feature": {
              "type": "string"
            },
            "instructions": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/custom/PatchInstruction"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "environment",
        "feature",
        "instructions"
      ],
      "properties": {
        "environment": {
          "type": "string"
        },
        "feature": {
          "type": "string"
        },
        "instructions": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/custom/PatchInstruction"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      }
    },
    "HarnessApprovalStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/custom/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "approvers",
            "includePipelineExecutionHistory"
          ],
          "properties": {
            "approvalMessage": {
              "type": "string",
              "minLength": 1
            },
            "approverInputs": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/custom/ApproverInputInfo"
              }
            },
            "approvers": {
              "$ref": "#/definitions/custom/Approvers"
            },
            "includePipelineExecutionHistory": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "approvers",
        "includePipelineExecutionHistory"
      ],
      "properties": {
        "approvalMessage": {
          "type": "string",
          "minLength": 1
        },
        "approverInputs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/custom/ApproverInputInfo"
          }
        },
        "approvers": {
          "$ref": "#/definitions/custom/Approvers"
        },
        "includePipelineExecutionHistory": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ]
        }
      }
    },
    "HarnessFileStoreSource": {
      "allOf": [
        {
          "$ref": "#/definitions/custom/ShellScriptBaseSource"
        },
        {
          "type": "object",
          "properties": {
            "file": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "HarnessForConfig": {
      "type": "object",
      "properties": {
        "end": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            },
            {
              "type": "string",
              "pattern": "(<\\+.+>.*)",
              "minLength": 1
            }
          ]
        },
        "items": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "(<\\+.+>.*)",
              "minLength": 1
            }
          ]
        },
        "maxConcurrency": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            },
            {
              "type": "string",
              "pattern": "(<\\+.+>.*)",
              "minLength": 1
            }
          ]
        },
        "partitionSize": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            },
            {
              "type": "string",
              "pattern": "(<\\+.+>.*)",
              "minLength": 1
            }
          ]
        },
        "start": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            },
            {
              "type": "string",
              "pattern": "(<\\+.+>.*)",
              "minLength": 1
            }
          ]
        },
        "times": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            },
            {
              "type": "string",
              "pattern": "(<\\+.+>.*)",
              "minLength": 1
            }
          ]
        },
        "unit": {
          "type": "string",
          "enum": [
            "Percentage",
            "Count"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "oneOf": [
            {
              "required": [
                "times"
              ]
            },
            {
              "required": [
                "items"
              ]
            }
          ]
        }
      ]
    },
    "HostPathYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/custom/ContainerVolume"
        },
        {
          "type": "object",
          "required": [
            "mountPath",
            "spec",
            "type"
          ],
          "properties": {
            "mountPath": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/custom/HostPathYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "EmptyDir",
                "PersistentVolumeClaim",
                "HostPath"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "HostPathYamlSpec": {
      "type": "object",
      "required": [
        "path"
      ],
      "properties": {
        "path": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "HttpHeaderConfig": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "HttpStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/custom/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "method",
            "url"
          ],
          "properties": {
            "assertion": {
              "type": "string"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "headers": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/custom/HttpHeaderConfig"
              }
            },
            "method": {
              "type": "string"
            },
            "outputVariables": {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/custom/NumberNGVariable"
                  },
                  {
                    "$ref": "#/definitions/custom/SecretNGVariable"
                  },
                  {
                    "$ref": "#/definitions/custom/StringNGVariable"
                  }
                ]
              }
            },
            "requestBody": {
              "type": "string"
            },
            "url": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "method",
        "url"
      ],
      "properties": {
        "assertion": {
          "type": "string"
        },
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "headers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/custom/HttpHeaderConfig"
          }
        },
        "method": {
          "type": "string"
        },
        "outputVariables": {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/custom/NumberNGVariable"
              },
              {
                "$ref": "#/definitions/custom/SecretNGVariable"
              },
              {
                "$ref": "#/definitions/custom/StringNGVariable"
              }
            ]
          }
        },
        "requestBody": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "IgnoreFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/custom/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "Ignore"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ImportDataSpec": {
      "type": "object",
      "discriminator": "type",
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ImportDataSpecWrapper": {
      "type": "object",
      "required": [
        "spec",
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "Json",
            "KeyValues"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Json"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/custom/JsonImportDataSpec"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "KeyValues"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/custom/KeyValuesImportDataSpec"
              }
            }
          }
        }
      ]
    },
    "InputSetValidator": {
      "type": "object",
      "properties": {
        "parameters": {
          "type": "string"
        },
        "validatorType": {
          "type": "string",
          "enum": [
            "ALLOWED_VALUES",
            "REGEX"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "JexlCriteriaSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/custom/CriteriaSpec"
        },
        {
          "type": "object",
          "required": [
            "expression"
          ],
          "properties": {
            "expression": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "JiraApprovalStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/custom/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "approvalCriteria",
            "connectorRef",
            "issueKey"
          ],
          "properties": {
            "approvalCriteria": {
              "$ref": "#/definitions/custom/CriteriaSpecWrapper"
            },
            "connectorRef": {
              "type": "string"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "issueKey": {
              "type": "string"
            },
            "issueType": {
              "type": "string"
            },
            "projectKey": {
              "type": "string"
            },
            "rejectionCriteria": {
              "$ref": "#/definitions/custom/CriteriaSpecWrapper"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "approvalCriteria",
        "connectorRef",
        "issueKey"
      ],
      "properties": {
        "approvalCriteria": {
          "$ref": "#/definitions/custom/CriteriaSpecWrapper"
        },
        "connectorRef": {
          "type": "string"
        },
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "issueKey": {
          "type": "string"
        },
        "issueType": {
          "type": "string"
        },
        "projectKey": {
          "type": "string"
        },
        "rejectionCriteria": {
          "$ref": "#/definitions/custom/CriteriaSpecWrapper"
        }
      }
    },
    "JiraCreateStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/custom/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "issueType",
            "projectKey"
          ],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "fields": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/custom/JiraField"
              }
            },
            "issueType": {
              "type": "string"
            },
            "projectKey": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "connectorRef",
        "issueType",
        "projectKey"
      ],
      "properties": {
        "connectorRef": {
          "type": "string"
        },
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "fields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/custom/JiraField"
          }
        },
        "issueType": {
          "type": "string"
        },
        "projectKey": {
          "type": "string"
        }
      }
    },
    "JiraField": {
      "type": "object",
      "required": [
        "value"
      ],
      "properties": {
        "name": {
          "type": "string",
          "minLength": 1
        },
        "value": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "JiraUpdateStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/custom/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "issueKey"
          ],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "fields": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/custom/JiraField"
              }
            },
            "issueKey": {
              "type": "string"
            },
            "transitionTo": {
              "$ref": "#/definitions/custom/TransitionTo"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "connectorRef",
        "issueKey"
      ],
      "properties": {
        "connectorRef": {
          "type": "string"
        },
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "fields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/custom/JiraField"
          }
        },
        "issueKey": {
          "type": "string"
        },
        "transitionTo": {
          "$ref": "#/definitions/custom/TransitionTo"
        }
      }
    },
    "JsonImportDataSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/custom/ImportDataSpec"
        },
        {
          "type": "object",
          "required": [
            "jsonBody"
          ],
          "properties": {
            "jsonBody": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "JsonNode": {
      "type": "object",
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "KeyValuesCriteriaSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/custom/CriteriaSpec"
        },
        {
          "type": "object",
          "required": [
            "conditions"
          ],
          "properties": {
            "conditions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/custom/Condition"
              }
            },
            "matchAnyCondition": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "KeyValuesImportDataSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/custom/ImportDataSpec"
        },
        {
          "type": "object",
          "required": [
            "fields"
          ],
          "properties": {
            "fields": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/custom/ServiceNowField"
              }
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "Limits": {
      "type": "object",
      "properties": {
        "cpu": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "number"
            }
          ]
        },
        "memory": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ManualFailureSpecConfig": {
      "type": "object",
      "required": [
        "onTimeout",
        "timeout"
      ],
      "properties": {
        "onTimeout": {
          "$ref": "#/definitions/custom/OnTimeoutConfig"
        },
        "timeout": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ManualInterventionFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/custom/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": [
            "spec",
            "type"
          ],
          "properties": {
            "spec": {
              "readOnly": true,
              "$ref": "#/definitions/custom/ManualFailureSpecConfig"
            },
            "type": {
              "type": "string",
              "enum": [
                "ManualIntervention"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "MarkAsFailFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/custom/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "MarkAsFailure"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "MarkAsSuccessFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/custom/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "MarkAsSuccess"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "MatrixConfigInterface": {
      "type": "object",
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "NGVariable": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "description": {
          "type": "string"
        },
        "metadata": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "required": {
          "type": "boolean"
        },
        "type": {
          "type": "string",
          "enum": [
            "String",
            "Number",
            "Secret"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "NumberNGVariable": {
      "allOf": [
        {
          "$ref": "#/definitions/custom/NGVariable"
        },
        {
          "type": "object",
          "required": [
            "value"
          ],
          "properties": {
            "default": {
              "type": "number",
              "format": "double"
            },
            "name": {
              "type": "string",
              "pattern": "^[a-zA-Z_][0-9a-zA-Z_\\.$]{0,127}$"
            },
            "type": {
              "type": "string",
              "enum": [
                "Number"
              ]
            },
            "value": {
              "oneOf": [
                {
                  "type": "number",
                  "format": "double"
                },
                {
                  "type": "string",
                  "pattern": "((^[+-]?[0-9]*\\.?[0-9]+$)|(<\\+.+>.*))"
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "OnFailureConfig": {
      "type": "object",
      "required": [
        "action",
        "errors"
      ],
      "properties": {
        "action": {
          "$ref": "#/definitions/custom/FailureStrategyActionConfig"
        },
        "errors": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Unknown",
              "AllErrors",
              "Authentication",
              "Connectivity",
              "Timeout",
              "Authorization",
              "Verification",
              "DelegateProvisioning",
              "PolicyEvaluationFailure",
              "InputTimeoutError",
              "ApprovalRejection",
              "DelegateRestart"
            ]
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "OnRetryFailureConfig": {
      "type": "object",
      "properties": {
        "action": {
          "$ref": "#/definitions/custom/FailureStrategyActionConfig"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "OnTimeoutConfig": {
      "type": "object",
      "properties": {
        "action": {
          "$ref": "#/definitions/custom/FailureStrategyActionConfig"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "OutputNGVariable": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ParallelStepElementConfig": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/custom/ExecutionWrapperConfig"
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ParameterField": {
      "type": "object",
      "properties": {
        "defaultValue": {
          "type": "object"
        },
        "executionInput": {
          "type": "boolean"
        },
        "expression": {
          "type": "boolean"
        },
        "expressionValue": {
          "type": "string"
        },
        "inputSetValidator": {
          "$ref": "#/definitions/custom/InputSetValidator"
        },
        "jsonResponseField": {
          "type": "boolean"
        },
        "responseField": {
          "type": "string"
        },
        "typeString": {
          "type": "boolean"
        },
        "value": {
          "type": "object"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ParameterFieldMapStringJsonNode": {
      "type": "object",
      "properties": {
        "defaultValue": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/custom/JsonNode"
          }
        },
        "executionInput": {
          "type": "boolean"
        },
        "expression": {
          "type": "boolean"
        },
        "expressionValue": {
          "type": "string"
        },
        "inputSetValidator": {
          "$ref": "#/definitions/custom/InputSetValidator"
        },
        "jsonResponseField": {
          "type": "boolean"
        },
        "responseField": {
          "type": "string"
        },
        "typeString": {
          "type": "boolean"
        },
        "value": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/custom/JsonNode"
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ParameterFieldMatrixConfigInterface": {
      "type": "object",
      "properties": {
        "defaultValue": {
          "$ref": "#/definitions/custom/MatrixConfigInterface"
        },
        "executionInput": {
          "type": "boolean"
        },
        "expression": {
          "type": "boolean"
        },
        "expressionValue": {
          "type": "string"
        },
        "inputSetValidator": {
          "$ref": "#/definitions/custom/InputSetValidator"
        },
        "jsonResponseField": {
          "type": "boolean"
        },
        "responseField": {
          "type": "string"
        },
        "typeString": {
          "type": "boolean"
        },
        "value": {
          "$ref": "#/definitions/custom/MatrixConfigInterface"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ParameterFieldString": {
      "type": "object",
      "properties": {
        "defaultValue": {
          "type": "string"
        },
        "executionInput": {
          "type": "boolean"
        },
        "expression": {
          "type": "boolean"
        },
        "expressionValue": {
          "type": "string"
        },
        "inputSetValidator": {
          "$ref": "#/definitions/custom/InputSetValidator"
        },
        "jsonResponseField": {
          "type": "boolean"
        },
        "responseField": {
          "type": "string"
        },
        "typeString": {
          "type": "boolean"
        },
        "value": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PatchInstruction": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "SetFeatureFlagState",
            "SetOnVariation",
            "SetOffVariation",
            "SetDefaultVariations",
            "AddRule",
            "UpdateRule",
            "AddTargetsToVariationTargetMap",
            "RemoveTargetsToVariationTargetMap",
            "AddSegmentToVariationTargetMap",
            "RemoveSegmentsToVariationTargetMap"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PersistentVolumeClaimYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/custom/ContainerVolume"
        },
        {
          "type": "object",
          "required": [
            "mountPath",
            "spec",
            "type"
          ],
          "properties": {
            "mountPath": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/custom/PersistentVolumeClaimYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "EmptyDir",
                "PersistentVolumeClaim",
                "HostPath"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PersistentVolumeClaimYamlSpec": {
      "type": "object",
      "required": [
        "claimName"
      ],
      "properties": {
        "claimName": {
          "type": "string"
        },
        "readOnly": {
          "type": "boolean"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PipelineRollbackFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/custom/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "PipelineRollback"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PolicyConfig": {
      "type": "object",
      "required": [
        "policySets"
      ],
      "properties": {
        "policySets": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PolicySpec": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PolicyStepInfo": {
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Custom"
              }
            }
          },
          "then": {
            "properties": {
              "policySpec": {
                "$ref": "#/definitions/custom/CustomPolicyStepSpec"
              }
            }
          },
          "$ref": "#/definitions/custom/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "policySets"
          ],
          "properties": {
            "metadata": {
              "type": "string"
            },
            "policySets": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "type": {
              "type": "string"
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Custom"
              }
            }
          },
          "then": {
            "properties": {
              "policySpec": {
                "$ref": "#/definitions/custom/CustomPolicyStepSpec"
              }
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "policySets"
      ],
      "properties": {
        "metadata": {
          "type": "string"
        },
        "policySets": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "type": {
          "type": "string"
        }
      }
    },
    "ProceedWithDefaultValuesFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/custom/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "ProceedWithDefaultValues"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "QueueStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/custom/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "key",
            "scope"
          ],
          "properties": {
            "key": {
              "type": "string"
            },
            "scope": {
              "type": "string",
              "enum": [
                "Pipeline",
                "Stage"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "key",
        "scope"
      ],
      "properties": {
        "key": {
          "type": "string"
        },
        "scope": {
          "type": "string",
          "enum": [
            "Pipeline",
            "Stage"
          ]
        }
      }
    },
    "RemoveSegmentToVariationTargetMapYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/custom/PatchInstruction"
        },
        {
          "type": "object",
          "required": [
            "identifier",
            "spec",
            "type"
          ],
          "properties": {
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/custom/RemoveSegmentToVariationTargetMapYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "RemoveSegmentToVariationTargetMap"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "RemoveSegmentToVariationTargetMapYamlSpec": {
      "type": "object",
      "required": [
        "segments",
        "variation"
      ],
      "properties": {
        "segments": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "variation": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "RemoveTargetsToVariationTargetMapYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/custom/PatchInstruction"
        },
        {
          "type": "object",
          "required": [
            "identifier",
            "spec",
            "type"
          ],
          "properties": {
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/custom/RemoveTargetsToVariationTargetMapYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "RemoveTargetsToVariationTargetMap"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "RemoveTargetsToVariationTargetMapYamlSpec": {
      "type": "object",
      "required": [
        "targets",
        "variation"
      ],
      "properties": {
        "targets": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "variation": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ResourceConstraintStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/custom/StepSpecType"
        },
        {
          "type": "object",
          "required": [
            "acquireMode",
            "holdingScope",
            "name",
            "permits",
            "resourceUnit"
          ],
          "properties": {
            "acquireMode": {
              "type": "string",
              "enum": [
                "ENSURE",
                "ACCUMULATE"
              ]
            },
            "holdingScope": {
              "type": "string",
              "enum": [
                "PLAN",
                "PIPELINE",
                "STAGE",
                "STEP_GROUP"
              ]
            },
            "name": {
              "type": "string"
            },
            "permits": {
              "type": "integer",
              "format": "int32"
            },
            "resourceUnit": {
              "$ref": "#/definitions/custom/ParameterFieldString"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "RetryFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/custom/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": [
            "spec",
            "type"
          ],
          "properties": {
            "spec": {
              "readOnly": true,
              "$ref": "#/definitions/custom/RetryFailureSpecConfig"
            },
            "type": {
              "type": "string",
              "enum": [
                "Retry"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "RetryFailureSpecConfig": {
      "type": "object",
      "required": [
        "onRetryFailure",
        "retryCount",
        "retryIntervals"
      ],
      "properties": {
        "onRetryFailure": {
          "$ref": "#/definitions/custom/OnRetryFailureConfig"
        },
        "retryCount": {
          "type": "integer",
          "format": "int32"
        },
        "retryIntervals": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "maxItems": 2147483647,
          "minItems": 1
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SecretNGVariable": {
      "allOf": [
        {
          "$ref": "#/definitions/custom/NGVariable"
        },
        {
          "type": "object",
          "required": [
            "value"
          ],
          "properties": {
            "default": {
              "type": "string"
            },
            "name": {
              "type": "string",
              "pattern": "^[a-zA-Z_][0-9a-zA-Z_\\.$]{0,127}$"
            },
            "type": {
              "type": "string",
              "enum": [
                "Secret"
              ]
            },
            "value": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SecurityContext": {
      "type": "object",
      "properties": {
        "allowPrivilegeEscalation": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "capabilities": {
          "$ref": "#/definitions/custom/Capabilities"
        },
        "privileged": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "procMount": {
          "type": "string"
        },
        "readOnlyRootFilesystem": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "runAsGroup": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "runAsNonRoot": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "Serve": {
      "type": "object",
      "properties": {
        "distribution": {
          "$ref": "#/definitions/custom/Distribution"
        },
        "variation": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ServiceNowApprovalStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/custom/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "approvalCriteria",
            "connectorRef",
            "ticketNumber",
            "ticketType"
          ],
          "properties": {
            "approvalCriteria": {
              "$ref": "#/definitions/custom/CriteriaSpecWrapper"
            },
            "changeWindow": {
              "$ref": "#/definitions/custom/ServiceNowChangeWindowSpec"
            },
            "connectorRef": {
              "type": "string"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "rejectionCriteria": {
              "$ref": "#/definitions/custom/CriteriaSpecWrapper"
            },
            "ticketNumber": {
              "type": "string"
            },
            "ticketType": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "approvalCriteria",
        "connectorRef",
        "ticketNumber",
        "ticketType"
      ],
      "properties": {
        "approvalCriteria": {
          "$ref": "#/definitions/custom/CriteriaSpecWrapper"
        },
        "changeWindow": {
          "$ref": "#/definitions/custom/ServiceNowChangeWindowSpec"
        },
        "connectorRef": {
          "type": "string"
        },
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "rejectionCriteria": {
          "$ref": "#/definitions/custom/CriteriaSpecWrapper"
        },
        "ticketNumber": {
          "type": "string"
        },
        "ticketType": {
          "type": "string"
        }
      }
    },
    "ServiceNowChangeWindowSpec": {
      "type": "object",
      "required": [
        "endField",
        "startField"
      ],
      "properties": {
        "endField": {
          "type": "string"
        },
        "startField": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ServiceNowCreateStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/custom/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "ticketType",
            "useServiceNowTemplate"
          ],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "fields": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/custom/ServiceNowField"
              }
            },
            "templateName": {
              "type": "string"
            },
            "ticketType": {
              "type": "string"
            },
            "useServiceNowTemplate": {
              "type": "boolean"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "connectorRef",
        "ticketType",
        "useServiceNowTemplate"
      ],
      "properties": {
        "connectorRef": {
          "type": "string"
        },
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "fields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/custom/ServiceNowField"
          }
        },
        "templateName": {
          "type": "string"
        },
        "ticketType": {
          "type": "string"
        },
        "useServiceNowTemplate": {
          "type": "boolean"
        }
      }
    },
    "ServiceNowField": {
      "type": "object",
      "required": [
        "name",
        "value"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ServiceNowImportSetStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/custom/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "importData",
            "stagingTableName"
          ],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "importData": {
              "$ref": "#/definitions/custom/ImportDataSpecWrapper"
            },
            "stagingTableName": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "connectorRef",
        "importData",
        "stagingTableName"
      ],
      "properties": {
        "connectorRef": {
          "type": "string"
        },
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "importData": {
          "$ref": "#/definitions/custom/ImportDataSpecWrapper"
        },
        "stagingTableName": {
          "type": "string"
        }
      }
    },
    "ServiceNowUpdateStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/custom/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "ticketNumber",
            "ticketType",
            "useServiceNowTemplate"
          ],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "fields": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/custom/ServiceNowField"
              }
            },
            "templateName": {
              "type": "string"
            },
            "ticketNumber": {
              "type": "string"
            },
            "ticketType": {
              "type": "string"
            },
            "useServiceNowTemplate": {
              "type": "boolean"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "connectorRef",
        "ticketNumber",
        "ticketType",
        "useServiceNowTemplate"
      ],
      "properties": {
        "connectorRef": {
          "type": "string"
        },
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "fields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/custom/ServiceNowField"
          }
        },
        "templateName": {
          "type": "string"
        },
        "ticketNumber": {
          "type": "string"
        },
        "ticketType": {
          "type": "string"
        },
        "useServiceNowTemplate": {
          "type": "boolean"
        }
      }
    },
    "SetDefaultVariationsYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/custom/PatchInstruction"
        },
        {
          "type": "object",
          "required": [
            "identifier",
            "spec",
            "type"
          ],
          "properties": {
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/custom/SetDefaultVariationsYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "SetDefaultVariations"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SetDefaultVariationsYamlSpec": {
      "type": "object",
      "required": [
        "off",
        "on"
      ],
      "properties": {
        "off": {
          "type": "string"
        },
        "on": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SetFeatureFlagStateYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/custom/PatchInstruction"
        },
        {
          "type": "object",
          "required": [
            "identifier",
            "spec",
            "type"
          ],
          "properties": {
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/custom/SetFeatureFlagStateYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "SetFeatureFlagState"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SetFeatureFlagStateYamlSpec": {
      "type": "object",
      "required": [
        "state"
      ],
      "properties": {
        "state": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SetOffVariationYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/custom/PatchInstruction"
        },
        {
          "type": "object",
          "required": [
            "identifier",
            "spec",
            "type"
          ],
          "properties": {
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/custom/SetOffVariationYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "SetOffVariation"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SetOffVariationYamlSpec": {
      "type": "object",
      "required": [
        "variation"
      ],
      "properties": {
        "variation": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SetOnVariationYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/custom/PatchInstruction"
        },
        {
          "type": "object",
          "required": [
            "identifier",
            "spec",
            "type"
          ],
          "properties": {
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/custom/SetOnVariationYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "SetOnVariation"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SetOnVariationYamlSpec": {
      "type": "object",
      "required": [
        "variation"
      ],
      "properties": {
        "variation": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ShellScriptBaseSource": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ShellScriptInlineSource": {
      "allOf": [
        {
          "$ref": "#/definitions/custom/ShellScriptBaseSource"
        },
        {
          "type": "object",
          "properties": {
            "script": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ShellScriptSourceWrapper": {
      "type": "object",
      "required": [
        "spec",
        "type"
      ],
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Harness"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/custom/HarnessFileStoreSource"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Inline"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/custom/ShellScriptInlineSource"
              }
            }
          }
        }
      ]
    },
    "ShellScriptStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/custom/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "onDelegate",
            "shell",
            "source"
          ],
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "environmentVariables": {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/custom/NumberNGVariable"
                  },
                  {
                    "$ref": "#/definitions/custom/SecretNGVariable"
                  },
                  {
                    "$ref": "#/definitions/custom/StringNGVariable"
                  }
                ]
              }
            },
            "executionTarget": {
              "$ref": "#/definitions/custom/ExecutionTarget"
            },
            "metadata": {
              "type": "string"
            },
            "onDelegate": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            },
            "outputVariables": {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/custom/NumberNGVariable"
                  },
                  {
                    "$ref": "#/definitions/custom/SecretNGVariable"
                  },
                  {
                    "$ref": "#/definitions/custom/StringNGVariable"
                  }
                ]
              }
            },
            "shell": {
              "type": "string",
              "enum": [
                "Bash",
                "PowerShell"
              ]
            },
            "source": {
              "$ref": "#/definitions/custom/ShellScriptSourceWrapper"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "onDelegate",
        "shell",
        "source"
      ],
      "properties": {
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "environmentVariables": {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/custom/NumberNGVariable"
              },
              {
                "$ref": "#/definitions/custom/SecretNGVariable"
              },
              {
                "$ref": "#/definitions/custom/StringNGVariable"
              }
            ]
          }
        },
        "executionTarget": {
          "$ref": "#/definitions/custom/ExecutionTarget"
        },
        "metadata": {
          "type": "string"
        },
        "onDelegate": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ]
        },
        "outputVariables": {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/custom/NumberNGVariable"
              },
              {
                "$ref": "#/definitions/custom/SecretNGVariable"
              },
              {
                "$ref": "#/definitions/custom/StringNGVariable"
              }
            ]
          }
        },
        "shell": {
          "type": "string",
          "enum": [
            "Bash",
            "PowerShell"
          ]
        },
        "source": {
          "$ref": "#/definitions/custom/ShellScriptSourceWrapper"
        }
      }
    },
    "StageRollbackFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/custom/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "StageRollback"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "StageWhenCondition": {
      "type": "object",
      "required": [
        "pipelineStatus"
      ],
      "properties": {
        "condition": {
          "type": "string",
          "pattern": "^(?!<\\+input>.*\\.executionInput\\(\\)(.*)$)"
        },
        "pipelineStatus": {
          "type": "string",
          "enum": [
            "Success",
            "Failure",
            "All"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "StepElementConfig": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/custom/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/custom/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/custom/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(<\\+input>.*)|(.*<\\+.*>.*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": []
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/custom/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": []
    },
    "StepGroupElementConfig": {
      "type": "object",
      "required": [
        "identifier",
        "name"
      ],
      "properties": {
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/custom/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "steps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/custom/ExecutionWrapperConfig"
          },
          "maxItems": 2147483647,
          "minItems": 1
        },
        "strategy": {
          "$ref": "#/definitions/custom/StrategyConfig"
        },
        "template": {
          "$ref": "#/definitions/custom/TemplateLinkConfig"
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/custom/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "oneOf": [
            {
              "required": [
                "template"
              ]
            },
            {
              "required": [
                "steps"
              ]
            }
          ]
        }
      ]
    },
    "StepGroupFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/custom/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "StepGroupRollback"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "StepSpecType": {
      "type": "object",
      "discriminator": "type",
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "StepWhenCondition": {
      "type": "object",
      "required": [
        "stageStatus"
      ],
      "properties": {
        "condition": {
          "type": "string",
          "pattern": "^(?!<\\+input>.*\\.executionInput\\(\\)(.*)$)"
        },
        "stageStatus": {
          "type": "string",
          "enum": [
            "Success",
            "Failure",
            "All"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "StrategyConfig": {
      "type": "object",
      "properties": {
        "matrix": {
          "oneOf": [
            {
              "$ref": "#/definitions/custom/ParameterFieldMatrixConfigInterface"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "parallelism": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            },
            {
              "type": "string",
              "pattern": "(<\\+.+>.*)",
              "minLength": 1
            }
          ]
        },
        "repeat": {
          "$ref": "#/definitions/custom/HarnessForConfig"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "oneOf": [
            {
              "required": [
                "repeat"
              ]
            },
            {
              "required": [
                "parallelism"
              ]
            },
            {
              "required": [
                "matrix"
              ]
            }
          ]
        }
      ]
    },
    "StringNGVariable": {
      "allOf": [
        {
          "$ref": "#/definitions/custom/NGVariable"
        },
        {
          "type": "object",
          "required": [
            "value"
          ],
          "properties": {
            "default": {
              "type": "string"
            },
            "name": {
              "type": "string",
              "pattern": "^[a-zA-Z_][0-9a-zA-Z_\\.$]{0,127}$"
            },
            "type": {
              "type": "string",
              "enum": [
                "String"
              ]
            },
            "value": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "TemplateLinkConfig": {
      "type": "object",
      "required": [
        "templateRef"
      ],
      "properties": {
        "templateInputs": {
          "$ref": "#/definitions/custom/JsonNode"
        },
        "templateRef": {
          "type": "string"
        },
        "templateVariables": {
          "$ref": "#/definitions/custom/JsonNode"
        },
        "versionLabel": {
          "type": "string",
          "pattern": "^[0-9a-zA-Z][^\\s]{0,63}$"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "Toleration": {
      "type": "object",
      "properties": {
        "effect": {
          "type": "string"
        },
        "key": {
          "type": "string"
        },
        "operator": {
          "type": "string"
        },
        "tolerationSeconds": {
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "TransitionTo": {
      "type": "object",
      "required": [
        "status"
      ],
      "properties": {
        "status": {
          "type": "string"
        },
        "transitionName": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "UpdateRuleYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/custom/PatchInstruction"
        },
        {
          "type": "object",
          "required": [
            "identifier",
            "spec",
            "type"
          ],
          "properties": {
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/custom/UpdateRuleYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "UpdateRule"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "UpdateRuleYamlSpec": {
      "type": "object",
      "required": [
        "bucketBy",
        "ruleID"
      ],
      "properties": {
        "bucketBy": {
          "type": "string"
        },
        "ruleID": {
          "type": "string"
        },
        "serve": {
          "$ref": "#/definitions/custom/Serve"
        },
        "variations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/custom/VariationYamlSpec"
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "VariationYamlSpec": {
      "type": "object",
      "required": [
        "variation",
        "weight"
      ],
      "properties": {
        "variation": {
          "type": "string"
        },
        "weight": {
          "type": "integer",
          "format": "int32"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "WaitStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/custom/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "duration"
          ],
          "properties": {
            "duration": {
              "type": "string",
              "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(<\\+input>.*)|(.*<\\+.*>.*)|(^$))$"
            },
            "metadata": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "required": [
        "duration"
      ],
      "properties": {
        "duration": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(<\\+input>.*)|(.*<\\+.*>.*)|(^$))$"
        },
        "metadata": {
          "type": "string"
        }
      }
    },
    "WeightedVariation": {
      "type": "object",
      "required": [
        "variation",
        "weight"
      ],
      "properties": {
        "variation": {
          "type": "string"
        },
        "weight": {
          "type": "integer",
          "format": "int32"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "HttpStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/custom/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/custom/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/custom/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "Http"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/custom/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Http"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/custom/HttpStepInfo"
              }
            }
          }
        }
      ]
    },
    "EmailStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/custom/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/custom/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/custom/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "Email"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/custom/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Email"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/custom/EmailStepInfo"
              }
            }
          }
        }
      ]
    },
    "QueueStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/custom/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/custom/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/custom/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "Queue"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/custom/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Queue"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/custom/QueueStepInfo"
              }
            }
          }
        }
      ]
    },
    "ShellScriptStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/custom/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/custom/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/custom/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "ShellScript"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/custom/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "ShellScript"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/custom/ShellScriptStepInfo"
              }
            }
          }
        }
      ]
    },
    "TemplateStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "template"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "template": {
          "$ref": "#/definitions/custom/TemplateLinkConfig"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PolicyStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/custom/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/custom/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/custom/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "Policy"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/custom/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Policy"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/custom/PolicyStepInfo"
              }
            }
          }
        }
      ]
    },
    "WaitStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/custom/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/custom/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/custom/StrategyConfig"
        },
        "type": {
          "type": "string",
          "enum": [
            "Wait"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/custom/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Wait"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/custom/WaitStepInfo"
              }
            }
          }
        }
      ]
    },
    "ServiceNowApprovalStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/custom/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/custom/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/custom/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "ServiceNowApproval"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/custom/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "ServiceNowApproval"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/custom/ServiceNowApprovalStepInfo"
              }
            }
          }
        }
      ]
    },
    "BarrierStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/custom/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/custom/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/custom/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "Barrier"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/custom/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Barrier"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/custom/BarrierStepInfo"
              }
            }
          }
        }
      ]
    },
    "ServiceNowCreateStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/custom/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/custom/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/custom/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "ServiceNowCreate"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/custom/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "ServiceNowCreate"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/custom/ServiceNowCreateStepInfo"
              }
            }
          }
        }
      ]
    },
    "ServiceNowUpdateStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/custom/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/custom/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/custom/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "ServiceNowUpdate"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/custom/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "ServiceNowUpdate"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/custom/ServiceNowUpdateStepInfo"
              }
            }
          }
        }
      ]
    },
    "ServiceNowImportSetStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/custom/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/custom/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/custom/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "ServiceNowImportSet"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/custom/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "ServiceNowImportSet"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/custom/ServiceNowImportSetStepInfo"
              }
            }
          }
        }
      ]
    },
    "ContainerStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/custom/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/custom/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/custom/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "Container"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/custom/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Container"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/custom/ContainerStepInfo"
              }
            }
          }
        }
      ]
    },
    "CustomApprovalStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/custom/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/custom/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/custom/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "CustomApproval"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/custom/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "CustomApproval"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/custom/CustomApprovalStepInfo"
              }
            }
          }
        }
      ]
    },
    "JiraCreateStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/custom/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/custom/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/custom/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "JiraCreate"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/custom/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "JiraCreate"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/custom/JiraCreateStepInfo"
              }
            }
          }
        }
      ]
    },
    "JiraUpdateStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/custom/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/custom/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/custom/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "JiraUpdate"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/custom/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "JiraUpdate"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/custom/JiraUpdateStepInfo"
              }
            }
          }
        }
      ]
    },
    "JiraApprovalStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/custom/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/custom/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/custom/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "JiraApproval"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/custom/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "JiraApproval"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/custom/JiraApprovalStepInfo"
              }
            }
          }
        }
      ]
    },
    "HarnessApprovalStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/custom/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/custom/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/custom/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "HarnessApproval"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/custom/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "HarnessApproval"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/custom/HarnessApprovalStepInfo"
              }
            }
          }
        }
      ]
    },
    "FlagConfigurationStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/custom/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/custom/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/custom/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "FlagConfiguration"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/custom/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "FlagConfiguration"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/custom/FlagConfigurationStepInfo"
              }
            }
          }
        }
      ]
    },
    "PMSStepInfo": {
      "type": "object",
      "discriminator": "type",
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  "pipeline": {
    "AbortFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/pipeline/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "Abort"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "FailureStrategyActionConfig": {
      "type": "object",
      "required": [
        "type"
      ],
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "Ignore",
            "Retry",
            "MarkAsSuccess",
            "Abort",
            "StageRollback",
            "StepGroupRollback",
            "PipelineRollback",
            "ManualIntervention",
            "ProceedWithDefaultValues",
            "MarkAsFailure"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "FailureStrategyConfig": {
      "type": "object",
      "required": [
        "onFailure"
      ],
      "properties": {
        "onFailure": {
          "$ref": "#/definitions/pipeline/OnFailureConfig"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "HarnessForConfig": {
      "type": "object",
      "properties": {
        "end": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            },
            {
              "type": "string",
              "pattern": "(<\\+.+>.*)",
              "minLength": 1
            }
          ]
        },
        "items": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "(<\\+.+>.*)",
              "minLength": 1
            }
          ]
        },
        "maxConcurrency": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            },
            {
              "type": "string",
              "pattern": "(<\\+.+>.*)",
              "minLength": 1
            }
          ]
        },
        "partitionSize": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            },
            {
              "type": "string",
              "pattern": "(<\\+.+>.*)",
              "minLength": 1
            }
          ]
        },
        "start": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            },
            {
              "type": "string",
              "pattern": "(<\\+.+>.*)",
              "minLength": 1
            }
          ]
        },
        "times": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            },
            {
              "type": "string",
              "pattern": "(<\\+.+>.*)",
              "minLength": 1
            }
          ]
        },
        "unit": {
          "type": "string",
          "enum": [
            "Percentage",
            "Count"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "oneOf": [
            {
              "required": [
                "times"
              ]
            },
            {
              "required": [
                "items"
              ]
            }
          ]
        }
      ]
    },
    "IgnoreFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/pipeline/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "Ignore"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "InputSetValidator": {
      "type": "object",
      "properties": {
        "parameters": {
          "type": "string"
        },
        "validatorType": {
          "type": "string",
          "enum": [
            "ALLOWED_VALUES",
            "REGEX"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "JsonNode": {
      "type": "object",
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ManualFailureSpecConfig": {
      "type": "object",
      "required": [
        "onTimeout",
        "timeout"
      ],
      "properties": {
        "onTimeout": {
          "$ref": "#/definitions/pipeline/OnTimeoutConfig"
        },
        "timeout": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ManualInterventionFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/pipeline/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": [
            "spec",
            "type"
          ],
          "properties": {
            "spec": {
              "readOnly": true,
              "$ref": "#/definitions/pipeline/ManualFailureSpecConfig"
            },
            "type": {
              "type": "string",
              "enum": [
                "ManualIntervention"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "MarkAsFailFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/pipeline/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "MarkAsFailure"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "MarkAsSuccessFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/pipeline/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "MarkAsSuccess"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "MatrixConfigInterface": {
      "type": "object",
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "NGVariable": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "description": {
          "type": "string"
        },
        "metadata": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "required": {
          "type": "boolean"
        },
        "type": {
          "type": "string",
          "enum": [
            "String",
            "Number",
            "Secret"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "NumberNGVariable": {
      "allOf": [
        {
          "$ref": "#/definitions/pipeline/NGVariable"
        },
        {
          "type": "object",
          "required": [
            "value"
          ],
          "properties": {
            "default": {
              "type": "number",
              "format": "double"
            },
            "name": {
              "type": "string",
              "pattern": "^[a-zA-Z_][0-9a-zA-Z_\\.$]{0,127}$"
            },
            "type": {
              "type": "string",
              "enum": [
                "Number"
              ]
            },
            "value": {
              "oneOf": [
                {
                  "type": "number",
                  "format": "double"
                },
                {
                  "type": "string",
                  "pattern": "((^[+-]?[0-9]*\\.?[0-9]+$)|(<\\+.+>.*))"
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "OnFailureConfig": {
      "type": "object",
      "required": [
        "action",
        "errors"
      ],
      "properties": {
        "action": {
          "$ref": "#/definitions/pipeline/FailureStrategyActionConfig"
        },
        "errors": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Unknown",
              "AllErrors",
              "Authentication",
              "Connectivity",
              "Timeout",
              "Authorization",
              "Verification",
              "DelegateProvisioning",
              "PolicyEvaluationFailure",
              "InputTimeoutError",
              "ApprovalRejection",
              "DelegateRestart"
            ]
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "OnRetryFailureConfig": {
      "type": "object",
      "properties": {
        "action": {
          "$ref": "#/definitions/pipeline/FailureStrategyActionConfig"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "OnTimeoutConfig": {
      "type": "object",
      "properties": {
        "action": {
          "$ref": "#/definitions/pipeline/FailureStrategyActionConfig"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ParameterField": {
      "type": "object",
      "properties": {
        "defaultValue": {
          "type": "object"
        },
        "executionInput": {
          "type": "boolean"
        },
        "expression": {
          "type": "boolean"
        },
        "expressionValue": {
          "type": "string"
        },
        "inputSetValidator": {
          "$ref": "#/definitions/pipeline/InputSetValidator"
        },
        "jsonResponseField": {
          "type": "boolean"
        },
        "responseField": {
          "type": "string"
        },
        "typeString": {
          "type": "boolean"
        },
        "value": {
          "type": "object"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ParameterFieldMatrixConfigInterface": {
      "type": "object",
      "properties": {
        "defaultValue": {
          "$ref": "#/definitions/pipeline/MatrixConfigInterface"
        },
        "executionInput": {
          "type": "boolean"
        },
        "expression": {
          "type": "boolean"
        },
        "expressionValue": {
          "type": "string"
        },
        "inputSetValidator": {
          "$ref": "#/definitions/pipeline/InputSetValidator"
        },
        "jsonResponseField": {
          "type": "boolean"
        },
        "responseField": {
          "type": "string"
        },
        "typeString": {
          "type": "boolean"
        },
        "value": {
          "$ref": "#/definitions/pipeline/MatrixConfigInterface"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PipelineRollbackFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/pipeline/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "PipelineRollback"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PipelineStageConfig": {
      "type": "object",
      "required": [
        "org",
        "pipeline",
        "project"
      ],
      "properties": {
        "inputSetReferences": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "inputs": {
          "oneOf": [
            {
              "$ref": "#/definitions/pipeline/JsonNode"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "org": {
          "type": "string"
        },
        "outputs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/pipeline/PipelineStageOutputs"
          }
        },
        "pipeline": {
          "type": "string"
        },
        "pipelineInputs": {
          "oneOf": [
            {
              "$ref": "#/definitions/pipeline/JsonNode"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "project": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PipelineStageNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "type"
      ],
      "properties": {
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "description": {
          "type": "string"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/pipeline/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/pipeline/StrategyConfig"
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "type": {
          "type": "string",
          "enum": [
            "Pipeline"
          ]
        },
        "variables": {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/pipeline/NumberNGVariable"
              },
              {
                "$ref": "#/definitions/pipeline/SecretNGVariable"
              },
              {
                "$ref": "#/definitions/pipeline/StringNGVariable"
              }
            ]
          }
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/pipeline/StageWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Pipeline"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/pipeline/PipelineStageConfig"
              }
            }
          }
        }
      ]
    },
    "PipelineStageOutputs": {
      "type": "object",
      "required": [
        "name",
        "value"
      ],
      "properties": {
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "value": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ProceedWithDefaultValuesFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/pipeline/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "ProceedWithDefaultValues"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "RetryFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/pipeline/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": [
            "spec",
            "type"
          ],
          "properties": {
            "spec": {
              "readOnly": true,
              "$ref": "#/definitions/pipeline/RetryFailureSpecConfig"
            },
            "type": {
              "type": "string",
              "enum": [
                "Retry"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "RetryFailureSpecConfig": {
      "type": "object",
      "required": [
        "onRetryFailure",
        "retryCount",
        "retryIntervals"
      ],
      "properties": {
        "onRetryFailure": {
          "$ref": "#/definitions/pipeline/OnRetryFailureConfig"
        },
        "retryCount": {
          "type": "integer",
          "format": "int32"
        },
        "retryIntervals": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "maxItems": 2147483647,
          "minItems": 1
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SecretNGVariable": {
      "allOf": [
        {
          "$ref": "#/definitions/pipeline/NGVariable"
        },
        {
          "type": "object",
          "required": [
            "value"
          ],
          "properties": {
            "default": {
              "type": "string"
            },
            "name": {
              "type": "string",
              "pattern": "^[a-zA-Z_][0-9a-zA-Z_\\.$]{0,127}$"
            },
            "type": {
              "type": "string",
              "enum": [
                "Secret"
              ]
            },
            "value": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "StageRollbackFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/pipeline/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "StageRollback"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "StageWhenCondition": {
      "type": "object",
      "required": [
        "pipelineStatus"
      ],
      "properties": {
        "condition": {
          "type": "string",
          "pattern": "^(?!<\\+input>.*\\.executionInput\\(\\)(.*)$)"
        },
        "pipelineStatus": {
          "type": "string",
          "enum": [
            "Success",
            "Failure",
            "All"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "StepGroupFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/pipeline/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "StepGroupRollback"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "StrategyConfig": {
      "type": "object",
      "properties": {
        "matrix": {
          "oneOf": [
            {
              "$ref": "#/definitions/pipeline/ParameterFieldMatrixConfigInterface"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "parallelism": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            },
            {
              "type": "string",
              "pattern": "(<\\+.+>.*)",
              "minLength": 1
            }
          ]
        },
        "repeat": {
          "$ref": "#/definitions/pipeline/HarnessForConfig"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "oneOf": [
            {
              "required": [
                "repeat"
              ]
            },
            {
              "required": [
                "parallelism"
              ]
            },
            {
              "required": [
                "matrix"
              ]
            }
          ]
        }
      ]
    },
    "StringNGVariable": {
      "allOf": [
        {
          "$ref": "#/definitions/pipeline/NGVariable"
        },
        {
          "type": "object",
          "required": [
            "value"
          ],
          "properties": {
            "default": {
              "type": "string"
            },
            "name": {
              "type": "string",
              "pattern": "^[a-zA-Z_][0-9a-zA-Z_\\.$]{0,127}$"
            },
            "type": {
              "type": "string",
              "enum": [
                "String"
              ]
            },
            "value": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "HttpHeaderConfig": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "HttpStepInfo": {
      "type": "object",
      "required": [
        "method",
        "url"
      ],
      "properties": {
        "assertion": {
          "type": "string"
        },
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "headers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/pipeline/HttpHeaderConfig"
          }
        },
        "method": {
          "type": "string"
        },
        "outputVariables": {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/pipeline/NumberNGVariable"
              },
              {
                "$ref": "#/definitions/pipeline/SecretNGVariable"
              },
              {
                "$ref": "#/definitions/pipeline/StringNGVariable"
              }
            ]
          }
        },
        "requestBody": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "$ref": "#/definitions/pipeline/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "method",
            "url"
          ],
          "properties": {
            "assertion": {
              "type": "string"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "headers": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/pipeline/HttpHeaderConfig"
              }
            },
            "method": {
              "type": "string"
            },
            "outputVariables": {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/NumberNGVariable"
                  },
                  {
                    "$ref": "#/definitions/pipeline/SecretNGVariable"
                  },
                  {
                    "$ref": "#/definitions/pipeline/StringNGVariable"
                  }
                ]
              }
            },
            "requestBody": {
              "type": "string"
            },
            "url": {
              "type": "string"
            }
          }
        }
      ]
    },
    "HttpStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/pipeline/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/pipeline/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/pipeline/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "Http"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/pipeline/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Http"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/pipeline/HttpStepInfo"
              }
            }
          }
        }
      ]
    },
    "PolicyConfig": {
      "type": "object",
      "required": [
        "policySets"
      ],
      "properties": {
        "policySets": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "StepWhenCondition": {
      "type": "object",
      "required": [
        "stageStatus"
      ],
      "properties": {
        "condition": {
          "type": "string",
          "pattern": "^(?!<\\+input>.*\\.executionInput\\(\\)(.*)$)"
        },
        "stageStatus": {
          "type": "string",
          "enum": [
            "Success",
            "Failure",
            "All"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "EmailStepInfo": {
      "type": "object",
      "required": [
        "subject",
        "to"
      ],
      "properties": {
        "body": {
          "type": "string"
        },
        "cc": {
          "type": "string"
        },
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "subject": {
          "type": "string"
        },
        "to": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "$ref": "#/definitions/pipeline/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "subject",
            "to"
          ],
          "properties": {
            "body": {
              "type": "string"
            },
            "cc": {
              "type": "string"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "subject": {
              "type": "string"
            },
            "to": {
              "type": "string"
            }
          }
        }
      ]
    },
    "EmailStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/pipeline/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/pipeline/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/pipeline/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "Email"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/pipeline/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Email"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/pipeline/EmailStepInfo"
              }
            }
          }
        }
      ]
    },
    "QueueStepInfo": {
      "type": "object",
      "required": [
        "key",
        "scope"
      ],
      "properties": {
        "key": {
          "type": "string"
        },
        "scope": {
          "type": "string",
          "enum": [
            "Pipeline",
            "Stage"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "$ref": "#/definitions/pipeline/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "key",
            "scope"
          ],
          "properties": {
            "key": {
              "type": "string"
            },
            "scope": {
              "type": "string",
              "enum": [
                "Pipeline",
                "Stage"
              ]
            }
          }
        }
      ]
    },
    "QueueStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/pipeline/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/pipeline/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/pipeline/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "Queue"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/pipeline/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Queue"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/pipeline/QueueStepInfo"
              }
            }
          }
        }
      ]
    },
    "ExecutionTarget": {
      "type": "object",
      "properties": {
        "connectorRef": {
          "type": "string"
        },
        "host": {
          "type": "string"
        },
        "workingDirectory": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "HarnessFileStoreSource": {
      "allOf": [
        {
          "$ref": "#/definitions/pipeline/ShellScriptBaseSource"
        },
        {
          "type": "object",
          "properties": {
            "file": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ShellScriptBaseSource": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ShellScriptInlineSource": {
      "allOf": [
        {
          "$ref": "#/definitions/pipeline/ShellScriptBaseSource"
        },
        {
          "type": "object",
          "properties": {
            "script": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ShellScriptSourceWrapper": {
      "type": "object",
      "required": [
        "spec",
        "type"
      ],
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Harness"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/pipeline/HarnessFileStoreSource"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Inline"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/pipeline/ShellScriptInlineSource"
              }
            }
          }
        }
      ]
    },
    "ShellScriptStepInfo": {
      "type": "object",
      "required": [
        "onDelegate",
        "shell",
        "source"
      ],
      "properties": {
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "environmentVariables": {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/pipeline/NumberNGVariable"
              },
              {
                "$ref": "#/definitions/pipeline/SecretNGVariable"
              },
              {
                "$ref": "#/definitions/pipeline/StringNGVariable"
              }
            ]
          }
        },
        "executionTarget": {
          "$ref": "#/definitions/pipeline/ExecutionTarget"
        },
        "metadata": {
          "type": "string"
        },
        "onDelegate": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ]
        },
        "outputVariables": {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/pipeline/NumberNGVariable"
              },
              {
                "$ref": "#/definitions/pipeline/SecretNGVariable"
              },
              {
                "$ref": "#/definitions/pipeline/StringNGVariable"
              }
            ]
          }
        },
        "shell": {
          "type": "string",
          "enum": [
            "Bash",
            "PowerShell"
          ]
        },
        "source": {
          "$ref": "#/definitions/pipeline/ShellScriptSourceWrapper"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "$ref": "#/definitions/pipeline/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "onDelegate",
            "shell",
            "source"
          ],
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "environmentVariables": {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/NumberNGVariable"
                  },
                  {
                    "$ref": "#/definitions/pipeline/SecretNGVariable"
                  },
                  {
                    "$ref": "#/definitions/pipeline/StringNGVariable"
                  }
                ]
              }
            },
            "executionTarget": {
              "$ref": "#/definitions/pipeline/ExecutionTarget"
            },
            "metadata": {
              "type": "string"
            },
            "onDelegate": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            },
            "outputVariables": {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/NumberNGVariable"
                  },
                  {
                    "$ref": "#/definitions/pipeline/SecretNGVariable"
                  },
                  {
                    "$ref": "#/definitions/pipeline/StringNGVariable"
                  }
                ]
              }
            },
            "shell": {
              "type": "string",
              "enum": [
                "Bash",
                "PowerShell"
              ]
            },
            "source": {
              "$ref": "#/definitions/pipeline/ShellScriptSourceWrapper"
            }
          }
        }
      ]
    },
    "ShellScriptStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/pipeline/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/pipeline/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/pipeline/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "ShellScript"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/pipeline/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "ShellScript"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/pipeline/ShellScriptStepInfo"
              }
            }
          }
        }
      ]
    },
    "TemplateLinkConfig": {
      "type": "object",
      "required": [
        "templateRef"
      ],
      "properties": {
        "templateInputs": {
          "$ref": "#/definitions/pipeline/JsonNode"
        },
        "templateRef": {
          "type": "string"
        },
        "templateVariables": {
          "$ref": "#/definitions/pipeline/JsonNode"
        },
        "versionLabel": {
          "type": "string",
          "pattern": "^[0-9a-zA-Z][^\\s]{0,63}$"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "TemplateStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "template"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "template": {
          "$ref": "#/definitions/pipeline/TemplateLinkConfig"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CustomPolicyStepSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/pipeline/PolicySpec"
        },
        {
          "type": "object",
          "required": [
            "payload"
          ],
          "properties": {
            "payload": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PolicySpec": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PolicyStepInfo": {
      "type": "object",
      "required": [
        "policySets"
      ],
      "properties": {
        "metadata": {
          "type": "string"
        },
        "policySets": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "type": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Custom"
              }
            }
          },
          "then": {
            "properties": {
              "policySpec": {
                "$ref": "#/definitions/pipeline/CustomPolicyStepSpec"
              }
            }
          },
          "$ref": "#/definitions/pipeline/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "policySets"
          ],
          "properties": {
            "metadata": {
              "type": "string"
            },
            "policySets": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "type": {
              "type": "string"
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Custom"
              }
            }
          },
          "then": {
            "properties": {
              "policySpec": {
                "$ref": "#/definitions/pipeline/CustomPolicyStepSpec"
              }
            }
          }
        }
      ]
    },
    "PolicyStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/pipeline/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/pipeline/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/pipeline/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "Policy"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/pipeline/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Policy"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/pipeline/PolicyStepInfo"
              }
            }
          }
        }
      ]
    },
    "WaitStepInfo": {
      "type": "object",
      "required": [
        "duration"
      ],
      "properties": {
        "duration": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(<\\+input>.*)|(.*<\\+.*>.*)|(^$))$"
        },
        "metadata": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "$ref": "#/definitions/pipeline/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "duration"
          ],
          "properties": {
            "duration": {
              "type": "string",
              "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(<\\+input>.*)|(.*<\\+.*>.*)|(^$))$"
            },
            "metadata": {
              "type": "string"
            }
          }
        }
      ]
    },
    "WaitStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/pipeline/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/pipeline/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/pipeline/StrategyConfig"
        },
        "type": {
          "type": "string",
          "enum": [
            "Wait"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/pipeline/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Wait"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/pipeline/WaitStepInfo"
              }
            }
          }
        }
      ]
    },
    "Condition": {
      "type": "object",
      "required": [
        "key",
        "operator",
        "value"
      ],
      "properties": {
        "key": {
          "type": "string"
        },
        "operator": {
          "type": "string",
          "enum": [
            "equals",
            "not equals",
            "in",
            "not in"
          ]
        },
        "value": {
          "type": "string",
          "minLength": 1
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CriteriaSpec": {
      "type": "object",
      "discriminator": "type",
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CriteriaSpecWrapper": {
      "type": "object",
      "required": [
        "spec",
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "Jexl",
            "KeyValues"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Jexl"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/pipeline/JexlCriteriaSpec"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "KeyValues"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/pipeline/KeyValuesCriteriaSpec"
              }
            }
          }
        }
      ]
    },
    "JexlCriteriaSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/pipeline/CriteriaSpec"
        },
        {
          "type": "object",
          "required": [
            "expression"
          ],
          "properties": {
            "expression": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "KeyValuesCriteriaSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/pipeline/CriteriaSpec"
        },
        {
          "type": "object",
          "required": [
            "conditions"
          ],
          "properties": {
            "conditions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/pipeline/Condition"
              }
            },
            "matchAnyCondition": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ServiceNowApprovalStepInfo": {
      "type": "object",
      "required": [
        "approvalCriteria",
        "connectorRef",
        "ticketNumber",
        "ticketType"
      ],
      "properties": {
        "approvalCriteria": {
          "$ref": "#/definitions/pipeline/CriteriaSpecWrapper"
        },
        "changeWindow": {
          "$ref": "#/definitions/pipeline/ServiceNowChangeWindowSpec"
        },
        "connectorRef": {
          "type": "string"
        },
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "rejectionCriteria": {
          "$ref": "#/definitions/pipeline/CriteriaSpecWrapper"
        },
        "ticketNumber": {
          "type": "string"
        },
        "ticketType": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "$ref": "#/definitions/pipeline/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "approvalCriteria",
            "connectorRef",
            "ticketNumber",
            "ticketType"
          ],
          "properties": {
            "approvalCriteria": {
              "$ref": "#/definitions/pipeline/CriteriaSpecWrapper"
            },
            "changeWindow": {
              "$ref": "#/definitions/pipeline/ServiceNowChangeWindowSpec"
            },
            "connectorRef": {
              "type": "string"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "rejectionCriteria": {
              "$ref": "#/definitions/pipeline/CriteriaSpecWrapper"
            },
            "ticketNumber": {
              "type": "string"
            },
            "ticketType": {
              "type": "string"
            }
          }
        }
      ]
    },
    "ServiceNowApprovalStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/pipeline/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/pipeline/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/pipeline/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "ServiceNowApproval"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/pipeline/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "ServiceNowApproval"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/pipeline/ServiceNowApprovalStepInfo"
              }
            }
          }
        }
      ]
    },
    "ServiceNowChangeWindowSpec": {
      "type": "object",
      "required": [
        "endField",
        "startField"
      ],
      "properties": {
        "endField": {
          "type": "string"
        },
        "startField": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "BarrierStepInfo": {
      "type": "object",
      "required": [
        "barrierRef"
      ],
      "properties": {
        "barrierRef": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "$ref": "#/definitions/pipeline/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "barrierRef"
          ],
          "properties": {
            "barrierRef": {
              "type": "string"
            }
          }
        }
      ]
    },
    "BarrierStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/pipeline/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/pipeline/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/pipeline/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "Barrier"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/pipeline/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Barrier"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/pipeline/BarrierStepInfo"
              }
            }
          }
        }
      ]
    },
    "ServiceNowCreateStepInfo": {
      "type": "object",
      "required": [
        "connectorRef",
        "ticketType",
        "useServiceNowTemplate"
      ],
      "properties": {
        "connectorRef": {
          "type": "string"
        },
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "fields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/pipeline/ServiceNowField"
          }
        },
        "templateName": {
          "type": "string"
        },
        "ticketType": {
          "type": "string"
        },
        "useServiceNowTemplate": {
          "type": "boolean"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "$ref": "#/definitions/pipeline/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "ticketType",
            "useServiceNowTemplate"
          ],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "fields": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/pipeline/ServiceNowField"
              }
            },
            "templateName": {
              "type": "string"
            },
            "ticketType": {
              "type": "string"
            },
            "useServiceNowTemplate": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "ServiceNowCreateStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/pipeline/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/pipeline/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/pipeline/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "ServiceNowCreate"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/pipeline/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "ServiceNowCreate"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/pipeline/ServiceNowCreateStepInfo"
              }
            }
          }
        }
      ]
    },
    "ServiceNowField": {
      "type": "object",
      "required": [
        "name",
        "value"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ServiceNowUpdateStepInfo": {
      "type": "object",
      "required": [
        "connectorRef",
        "ticketNumber",
        "ticketType",
        "useServiceNowTemplate"
      ],
      "properties": {
        "connectorRef": {
          "type": "string"
        },
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "fields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/pipeline/ServiceNowField"
          }
        },
        "templateName": {
          "type": "string"
        },
        "ticketNumber": {
          "type": "string"
        },
        "ticketType": {
          "type": "string"
        },
        "useServiceNowTemplate": {
          "type": "boolean"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "$ref": "#/definitions/pipeline/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "ticketNumber",
            "ticketType",
            "useServiceNowTemplate"
          ],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "fields": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/pipeline/ServiceNowField"
              }
            },
            "templateName": {
              "type": "string"
            },
            "ticketNumber": {
              "type": "string"
            },
            "ticketType": {
              "type": "string"
            },
            "useServiceNowTemplate": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "ServiceNowUpdateStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/pipeline/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/pipeline/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/pipeline/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "ServiceNowUpdate"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/pipeline/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "ServiceNowUpdate"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/pipeline/ServiceNowUpdateStepInfo"
              }
            }
          }
        }
      ]
    },
    "ImportDataSpec": {
      "type": "object",
      "discriminator": "type",
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ImportDataSpecWrapper": {
      "type": "object",
      "required": [
        "spec",
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "Json",
            "KeyValues"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Json"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/pipeline/JsonImportDataSpec"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "KeyValues"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/pipeline/KeyValuesImportDataSpec"
              }
            }
          }
        }
      ]
    },
    "JsonImportDataSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/pipeline/ImportDataSpec"
        },
        {
          "type": "object",
          "required": [
            "jsonBody"
          ],
          "properties": {
            "jsonBody": {
              "type": "string"
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "KeyValuesImportDataSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/pipeline/ImportDataSpec"
        },
        {
          "type": "object",
          "required": [
            "fields"
          ],
          "properties": {
            "fields": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/pipeline/ServiceNowField"
              }
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ServiceNowImportSetStepInfo": {
      "type": "object",
      "required": [
        "connectorRef",
        "importData",
        "stagingTableName"
      ],
      "properties": {
        "connectorRef": {
          "type": "string"
        },
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "importData": {
          "$ref": "#/definitions/pipeline/ImportDataSpecWrapper"
        },
        "stagingTableName": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "$ref": "#/definitions/pipeline/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "importData",
            "stagingTableName"
          ],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "importData": {
              "$ref": "#/definitions/pipeline/ImportDataSpecWrapper"
            },
            "stagingTableName": {
              "type": "string"
            }
          }
        }
      ]
    },
    "ServiceNowImportSetStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/pipeline/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/pipeline/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/pipeline/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "ServiceNowImportSet"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/pipeline/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "ServiceNowImportSet"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/pipeline/ServiceNowImportSetStepInfo"
              }
            }
          }
        }
      ]
    },
    "Capabilities": {
      "type": "object",
      "properties": {
        "add": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "drop": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ContainerInfraYamlSpec": {
      "type": "object",
      "required": [
        "connectorRef",
        "namespace",
        "resources"
      ],
      "properties": {
        "annotations": {
          "oneOf": [
            {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ]
        },
        "automountServiceAccountToken": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "connectorRef": {
          "type": "string"
        },
        "containerSecurityContext": {
          "oneOf": [
            {
              "$ref": "#/definitions/pipeline/SecurityContext"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "initTimeout": {
          "type": "string"
        },
        "labels": {
          "oneOf": [
            {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ]
        },
        "namespace": {
          "type": "string",
          "minLength": 1,
          "maxLength": 2147483647
        },
        "nodeSelector": {
          "oneOf": [
            {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "os": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Linux",
                "MacOS",
                "Windows"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "priorityClassName": {
          "type": "string"
        },
        "resources": {
          "$ref": "#/definitions/pipeline/ContainerResource"
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "serviceAccountName": {
          "type": "string"
        },
        "tolerations": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/pipeline/Toleration"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "volumes": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/pipeline/ContainerVolume"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ContainerK8sInfra": {
      "allOf": [
        {
          "$ref": "#/definitions/pipeline/ContainerStepInfra"
        },
        {
          "type": "object",
          "required": [
            "spec",
            "type"
          ],
          "properties": {
            "spec": {
              "$ref": "#/definitions/pipeline/ContainerInfraYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "KubernetesDirect"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ContainerResource": {
      "type": "object",
      "required": [
        "limits"
      ],
      "properties": {
        "limits": {
          "$ref": "#/definitions/pipeline/Limits"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ContainerStepInfo": {
      "type": "object",
      "required": [
        "command",
        "infrastructure"
      ],
      "properties": {
        "command": {
          "type": "string"
        },
        "connectorRef": {
          "type": "string"
        },
        "entrypoint": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ]
        },
        "envVariables": {
          "oneOf": [
            {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ]
        },
        "image": {
          "type": "string"
        },
        "imagePullPolicy": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Always",
                "Never",
                "IfNotPresent"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "infrastructure": {
          "oneOf": [
            {
              "$ref": "#/definitions/pipeline/ContainerK8sInfra"
            }
          ]
        },
        "metadata": {
          "type": "string"
        },
        "outputVariables": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/pipeline/OutputNGVariable"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "privileged": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "settings": {
          "oneOf": [
            {
              "$ref": "#/definitions/pipeline/ParameterFieldMapStringJsonNode"
            },
            {
              "type": "string"
            }
          ]
        },
        "shell": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Sh",
                "Bash",
                "Powershell",
                "Pwsh",
                "Python"
              ]
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "$ref": "#/definitions/pipeline/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "command",
            "infrastructure"
          ],
          "properties": {
            "command": {
              "type": "string"
            },
            "connectorRef": {
              "type": "string"
            },
            "entrypoint": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "envVariables": {
              "oneOf": [
                {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "image": {
              "type": "string"
            },
            "imagePullPolicy": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Always",
                    "Never",
                    "IfNotPresent"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "infrastructure": {
              "oneOf": [
                {
                  "$ref": "#/definitions/pipeline/ContainerK8sInfra"
                }
              ]
            },
            "metadata": {
              "type": "string"
            },
            "outputVariables": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/pipeline/OutputNGVariable"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "privileged": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "settings": {
              "oneOf": [
                {
                  "$ref": "#/definitions/pipeline/ParameterFieldMapStringJsonNode"
                },
                {
                  "type": "string"
                }
              ]
            },
            "shell": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Sh",
                    "Bash",
                    "Powershell",
                    "Pwsh",
                    "Python"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            }
          }
        }
      ]
    },
    "ContainerStepInfra": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "KubernetesDirect"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ContainerStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/pipeline/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/pipeline/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/pipeline/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "Container"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/pipeline/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Container"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/pipeline/ContainerStepInfo"
              }
            }
          }
        }
      ]
    },
    "ContainerVolume": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "EmptyDir",
            "PersistentVolumeClaim",
            "HostPath"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "EmptyDirYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/pipeline/ContainerVolume"
        },
        {
          "type": "object",
          "required": [
            "mountPath",
            "spec",
            "type"
          ],
          "properties": {
            "mountPath": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/pipeline/EmptyDirYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "EmptyDir",
                "PersistentVolumeClaim",
                "HostPath"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "EmptyDirYamlSpec": {
      "type": "object",
      "properties": {
        "medium": {
          "type": "string"
        },
        "size": {
          "type": "string",
          "pattern": "^(([0-9]*[.])?[0-9]+)([GM]i?)|<\\+input>$"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "HostPathYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/pipeline/ContainerVolume"
        },
        {
          "type": "object",
          "required": [
            "mountPath",
            "spec",
            "type"
          ],
          "properties": {
            "mountPath": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/pipeline/HostPathYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "EmptyDir",
                "PersistentVolumeClaim",
                "HostPath"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "HostPathYamlSpec": {
      "type": "object",
      "required": [
        "path"
      ],
      "properties": {
        "path": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "Limits": {
      "type": "object",
      "properties": {
        "cpu": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "number"
            }
          ]
        },
        "memory": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "OutputNGVariable": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ParameterFieldMapStringJsonNode": {
      "type": "object",
      "properties": {
        "defaultValue": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/pipeline/JsonNode"
          }
        },
        "executionInput": {
          "type": "boolean"
        },
        "expression": {
          "type": "boolean"
        },
        "expressionValue": {
          "type": "string"
        },
        "inputSetValidator": {
          "$ref": "#/definitions/pipeline/InputSetValidator"
        },
        "jsonResponseField": {
          "type": "boolean"
        },
        "responseField": {
          "type": "string"
        },
        "typeString": {
          "type": "boolean"
        },
        "value": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/pipeline/JsonNode"
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PersistentVolumeClaimYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/pipeline/ContainerVolume"
        },
        {
          "type": "object",
          "required": [
            "mountPath",
            "spec",
            "type"
          ],
          "properties": {
            "mountPath": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/pipeline/PersistentVolumeClaimYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "EmptyDir",
                "PersistentVolumeClaim",
                "HostPath"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PersistentVolumeClaimYamlSpec": {
      "type": "object",
      "required": [
        "claimName"
      ],
      "properties": {
        "claimName": {
          "type": "string"
        },
        "readOnly": {
          "type": "boolean"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SecurityContext": {
      "type": "object",
      "properties": {
        "allowPrivilegeEscalation": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "capabilities": {
          "$ref": "#/definitions/pipeline/Capabilities"
        },
        "privileged": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "procMount": {
          "type": "string"
        },
        "readOnlyRootFilesystem": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "runAsGroup": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "runAsNonRoot": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "runAsUser": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "Toleration": {
      "type": "object",
      "properties": {
        "effect": {
          "type": "string"
        },
        "key": {
          "type": "string"
        },
        "operator": {
          "type": "string"
        },
        "tolerationSeconds": {
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CustomApprovalStepInfo": {
      "type": "object",
      "required": [
        "approvalCriteria",
        "retryInterval",
        "scriptTimeout",
        "shell",
        "source"
      ],
      "properties": {
        "approvalCriteria": {
          "$ref": "#/definitions/pipeline/CriteriaSpecWrapper"
        },
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "environmentVariables": {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/pipeline/NumberNGVariable"
              },
              {
                "$ref": "#/definitions/pipeline/SecretNGVariable"
              },
              {
                "$ref": "#/definitions/pipeline/StringNGVariable"
              }
            ]
          }
        },
        "outputVariables": {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/pipeline/NumberNGVariable"
              },
              {
                "$ref": "#/definitions/pipeline/SecretNGVariable"
              },
              {
                "$ref": "#/definitions/pipeline/StringNGVariable"
              }
            ]
          }
        },
        "rejectionCriteria": {
          "$ref": "#/definitions/pipeline/CriteriaSpecWrapper"
        },
        "retryInterval": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(<\\+input>.*)|(.*<\\+.*>.*)|(^$))$"
        },
        "scriptTimeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(<\\+input>.*)|(.*<\\+.*>.*)|(^$))$"
        },
        "shell": {
          "type": "string",
          "enum": [
            "Bash",
            "PowerShell"
          ]
        },
        "source": {
          "$ref": "#/definitions/pipeline/ShellScriptSourceWrapper"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "$ref": "#/definitions/pipeline/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "approvalCriteria",
            "retryInterval",
            "scriptTimeout",
            "shell",
            "source"
          ],
          "properties": {
            "approvalCriteria": {
              "$ref": "#/definitions/pipeline/CriteriaSpecWrapper"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "environmentVariables": {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/NumberNGVariable"
                  },
                  {
                    "$ref": "#/definitions/pipeline/SecretNGVariable"
                  },
                  {
                    "$ref": "#/definitions/pipeline/StringNGVariable"
                  }
                ]
              }
            },
            "outputVariables": {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/NumberNGVariable"
                  },
                  {
                    "$ref": "#/definitions/pipeline/SecretNGVariable"
                  },
                  {
                    "$ref": "#/definitions/pipeline/StringNGVariable"
                  }
                ]
              }
            },
            "rejectionCriteria": {
              "$ref": "#/definitions/pipeline/CriteriaSpecWrapper"
            },
            "retryInterval": {
              "type": "string",
              "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(<\\+input>.*)|(.*<\\+.*>.*)|(^$))$"
            },
            "scriptTimeout": {
              "type": "string",
              "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(<\\+input>.*)|(.*<\\+.*>.*)|(^$))$"
            },
            "shell": {
              "type": "string",
              "enum": [
                "Bash",
                "PowerShell"
              ]
            },
            "source": {
              "$ref": "#/definitions/pipeline/ShellScriptSourceWrapper"
            }
          }
        }
      ]
    },
    "CustomApprovalStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/pipeline/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/pipeline/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/pipeline/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "CustomApproval"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/pipeline/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "CustomApproval"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/pipeline/CustomApprovalStepInfo"
              }
            }
          }
        }
      ]
    },
    "JiraCreateStepInfo": {
      "type": "object",
      "required": [
        "connectorRef",
        "issueType",
        "projectKey"
      ],
      "properties": {
        "connectorRef": {
          "type": "string"
        },
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "fields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/pipeline/JiraField"
          }
        },
        "issueType": {
          "type": "string"
        },
        "projectKey": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "$ref": "#/definitions/pipeline/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "issueType",
            "projectKey"
          ],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "fields": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/pipeline/JiraField"
              }
            },
            "issueType": {
              "type": "string"
            },
            "projectKey": {
              "type": "string"
            }
          }
        }
      ]
    },
    "JiraCreateStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/pipeline/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/pipeline/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/pipeline/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "JiraCreate"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/pipeline/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "JiraCreate"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/pipeline/JiraCreateStepInfo"
              }
            }
          }
        }
      ]
    },
    "JiraField": {
      "type": "object",
      "required": [
        "value"
      ],
      "properties": {
        "name": {
          "type": "string",
          "minLength": 1
        },
        "value": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "JiraUpdateStepInfo": {
      "type": "object",
      "required": [
        "connectorRef",
        "issueKey"
      ],
      "properties": {
        "connectorRef": {
          "type": "string"
        },
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "fields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/pipeline/JiraField"
          }
        },
        "issueKey": {
          "type": "string"
        },
        "transitionTo": {
          "$ref": "#/definitions/pipeline/TransitionTo"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "$ref": "#/definitions/pipeline/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "connectorRef",
            "issueKey"
          ],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "fields": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/pipeline/JiraField"
              }
            },
            "issueKey": {
              "type": "string"
            },
            "transitionTo": {
              "$ref": "#/definitions/pipeline/TransitionTo"
            }
          }
        }
      ]
    },
    "JiraUpdateStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/pipeline/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/pipeline/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/pipeline/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "JiraUpdate"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/pipeline/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "JiraUpdate"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/pipeline/JiraUpdateStepInfo"
              }
            }
          }
        }
      ]
    },
    "TransitionTo": {
      "type": "object",
      "required": [
        "status"
      ],
      "properties": {
        "status": {
          "type": "string"
        },
        "transitionName": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "JiraApprovalStepInfo": {
      "type": "object",
      "required": [
        "approvalCriteria",
        "connectorRef",
        "issueKey"
      ],
      "properties": {
        "approvalCriteria": {
          "$ref": "#/definitions/pipeline/CriteriaSpecWrapper"
        },
        "connectorRef": {
          "type": "string"
        },
        "delegateSelectors": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        },
        "issueKey": {
          "type": "string"
        },
        "issueType": {
          "type": "string"
        },
        "projectKey": {
          "type": "string"
        },
        "rejectionCriteria": {
          "$ref": "#/definitions/pipeline/CriteriaSpecWrapper"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "$ref": "#/definitions/pipeline/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "approvalCriteria",
            "connectorRef",
            "issueKey"
          ],
          "properties": {
            "approvalCriteria": {
              "$ref": "#/definitions/pipeline/CriteriaSpecWrapper"
            },
            "connectorRef": {
              "type": "string"
            },
            "delegateSelectors": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "issueKey": {
              "type": "string"
            },
            "issueType": {
              "type": "string"
            },
            "projectKey": {
              "type": "string"
            },
            "rejectionCriteria": {
              "$ref": "#/definitions/pipeline/CriteriaSpecWrapper"
            }
          }
        }
      ]
    },
    "JiraApprovalStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/pipeline/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/pipeline/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/pipeline/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "JiraApproval"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/pipeline/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "JiraApproval"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/pipeline/JiraApprovalStepInfo"
              }
            }
          }
        }
      ]
    },
    "ApproverInputInfo": {
      "type": "object",
      "properties": {
        "defaultValue": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "minLength": 1
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "Approvers": {
      "type": "object",
      "required": [
        "disallowPipelineExecutor",
        "minimumCount",
        "userGroups"
      ],
      "properties": {
        "disallowPipelineExecutor": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ]
        },
        "minimumCount": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32"
            },
            {
              "type": "string"
            }
          ]
        },
        "userGroups": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              },
              "maxItems": 2147483647,
              "minItems": 1
            },
            {
              "type": "string",
              "pattern": "(<\\+.+>.*)",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "HarnessApprovalStepInfo": {
      "type": "object",
      "required": [
        "approvers",
        "includePipelineExecutionHistory"
      ],
      "properties": {
        "approvalMessage": {
          "type": "string",
          "minLength": 1
        },
        "approverInputs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/pipeline/ApproverInputInfo"
          }
        },
        "approvers": {
          "$ref": "#/definitions/pipeline/Approvers"
        },
        "includePipelineExecutionHistory": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "$ref": "#/definitions/pipeline/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "approvers",
            "includePipelineExecutionHistory"
          ],
          "properties": {
            "approvalMessage": {
              "type": "string",
              "minLength": 1
            },
            "approverInputs": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/pipeline/ApproverInputInfo"
              }
            },
            "approvers": {
              "$ref": "#/definitions/pipeline/Approvers"
            },
            "includePipelineExecutionHistory": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        }
      ]
    },
    "HarnessApprovalStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/pipeline/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/pipeline/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/pipeline/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "HarnessApproval"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/pipeline/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "HarnessApproval"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/pipeline/HarnessApprovalStepInfo"
              }
            }
          }
        }
      ]
    },
    "AddRuleYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/pipeline/PatchInstruction"
        },
        {
          "type": "object",
          "required": [
            "identifier",
            "spec",
            "type"
          ],
          "properties": {
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/pipeline/AddRuleYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "AddRule"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AddRuleYamlSpec": {
      "type": "object",
      "properties": {
        "clauses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/pipeline/Clause"
          }
        },
        "distribution": {
          "$ref": "#/definitions/pipeline/DistributionYamlSpec"
        },
        "priority": {
          "type": "integer",
          "format": "int32"
        },
        "serve": {
          "$ref": "#/definitions/pipeline/Serve"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AddSegmentToVariationTargetMapYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/pipeline/PatchInstruction"
        },
        {
          "type": "object",
          "required": [
            "identifier",
            "spec",
            "type"
          ],
          "properties": {
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/pipeline/AddSegmentToVariationTargetMapYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "AddSegmentToVariationTargetMap"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AddSegmentToVariationTargetMapYamlSpec": {
      "type": "object",
      "required": [
        "segments",
        "variation"
      ],
      "properties": {
        "segments": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "variation": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AddTargetsToVariationTargetMapYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/pipeline/PatchInstruction"
        },
        {
          "type": "object",
          "required": [
            "identifier",
            "spec",
            "type"
          ],
          "properties": {
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/pipeline/AddTargetsToVariationTargetMapYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "AddTargetsToVariationTargetMap"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AddTargetsToVariationTargetMapYamlSpec": {
      "type": "object",
      "required": [
        "targets",
        "variation"
      ],
      "properties": {
        "targets": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "variation": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "Clause": {
      "type": "object",
      "required": [
        "attribute",
        "id",
        "negate",
        "op",
        "values"
      ],
      "properties": {
        "attribute": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "negate": {
          "type": "boolean"
        },
        "op": {
          "type": "string"
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ClauseYamlSpec": {
      "type": "object",
      "required": [
        "op",
        "values"
      ],
      "properties": {
        "attribute": {
          "type": "string"
        },
        "op": {
          "type": "string"
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "Distribution": {
      "type": "object",
      "required": [
        "bucketBy",
        "variations"
      ],
      "properties": {
        "bucketBy": {
          "type": "string"
        },
        "variations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/pipeline/WeightedVariation"
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "DistributionYamlSpec": {
      "type": "object",
      "required": [
        "bucketBy"
      ],
      "properties": {
        "bucketBy": {
          "type": "string"
        },
        "clauses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/pipeline/ClauseYamlSpec"
          }
        },
        "variations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/pipeline/VariationYamlSpec"
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "FlagConfigurationStepInfo": {
      "type": "object",
      "required": [
        "environment",
        "feature",
        "instructions"
      ],
      "properties": {
        "environment": {
          "type": "string"
        },
        "feature": {
          "type": "string"
        },
        "instructions": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/pipeline/PatchInstruction"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "$ref": "#/definitions/pipeline/PMSStepInfo"
        },
        {
          "type": "object",
          "required": [
            "environment",
            "feature",
            "instructions"
          ],
          "properties": {
            "environment": {
              "type": "string"
            },
            "feature": {
              "type": "string"
            },
            "instructions": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/pipeline/PatchInstruction"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            }
          }
        }
      ]
    },
    "FlagConfigurationStepNode": {
      "type": "object",
      "required": [
        "identifier",
        "name",
        "spec",
        "type"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "enforce": {
          "$ref": "#/definitions/pipeline/PolicyConfig"
        },
        "failureStrategies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/pipeline/FailureStrategyConfig"
              }
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        },
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,127}$"
        },
        "strategy": {
          "$ref": "#/definitions/pipeline/StrategyConfig"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
        },
        "type": {
          "type": "string",
          "enum": [
            "FlagConfiguration"
          ]
        },
        "when": {
          "oneOf": [
            {
              "$ref": "#/definitions/pipeline/StepWhenCondition"
            },
            {
              "type": "string",
              "pattern": "^<\\+input>$",
              "minLength": 1
            }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "FlagConfiguration"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/definitions/pipeline/FlagConfigurationStepInfo"
              }
            }
          }
        }
      ]
    },
    "PatchInstruction": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "SetFeatureFlagState",
            "SetOnVariation",
            "SetOffVariation",
            "SetDefaultVariations",
            "AddRule",
            "UpdateRule",
            "AddTargetsToVariationTargetMap",
            "RemoveTargetsToVariationTargetMap",
            "AddSegmentToVariationTargetMap",
            "RemoveSegmentsToVariationTargetMap"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "RemoveSegmentToVariationTargetMapYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/pipeline/PatchInstruction"
        },
        {
          "type": "object",
          "required": [
            "identifier",
            "spec",
            "type"
          ],
          "properties": {
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/pipeline/RemoveSegmentToVariationTargetMapYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "RemoveSegmentToVariationTargetMap"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "RemoveSegmentToVariationTargetMapYamlSpec": {
      "type": "object",
      "required": [
        "segments",
        "variation"
      ],
      "properties": {
        "segments": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "variation": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "RemoveTargetsToVariationTargetMapYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/pipeline/PatchInstruction"
        },
        {
          "type": "object",
          "required": [
            "identifier",
            "spec",
            "type"
          ],
          "properties": {
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/pipeline/RemoveTargetsToVariationTargetMapYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "RemoveTargetsToVariationTargetMap"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "RemoveTargetsToVariationTargetMapYamlSpec": {
      "type": "object",
      "required": [
        "targets",
        "variation"
      ],
      "properties": {
        "targets": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "variation": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "Serve": {
      "type": "object",
      "properties": {
        "distribution": {
          "$ref": "#/definitions/pipeline/Distribution"
        },
        "variation": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SetDefaultVariationsYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/pipeline/PatchInstruction"
        },
        {
          "type": "object",
          "required": [
            "identifier",
            "spec",
            "type"
          ],
          "properties": {
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/pipeline/SetDefaultVariationsYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "SetDefaultVariations"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SetDefaultVariationsYamlSpec": {
      "type": "object",
      "required": [
        "off",
        "on"
      ],
      "properties": {
        "off": {
          "type": "string"
        },
        "on": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SetFeatureFlagStateYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/pipeline/PatchInstruction"
        },
        {
          "type": "object",
          "required": [
            "identifier",
            "spec",
            "type"
          ],
          "properties": {
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/pipeline/SetFeatureFlagStateYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "SetFeatureFlagState"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SetFeatureFlagStateYamlSpec": {
      "type": "object",
      "required": [
        "state"
      ],
      "properties": {
        "state": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SetOffVariationYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/pipeline/PatchInstruction"
        },
        {
          "type": "object",
          "required": [
            "identifier",
            "spec",
            "type"
          ],
          "properties": {
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/pipeline/SetOffVariationYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "SetOffVariation"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SetOffVariationYamlSpec": {
      "type": "object",
      "required": [
        "variation"
      ],
      "properties": {
        "variation": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SetOnVariationYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/pipeline/PatchInstruction"
        },
        {
          "type": "object",
          "required": [
            "identifier",
            "spec",
            "type"
          ],
          "properties": {
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/pipeline/SetOnVariationYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "SetOnVariation"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SetOnVariationYamlSpec": {
      "type": "object",
      "required": [
        "variation"
      ],
      "properties": {
        "variation": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "UpdateRuleYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/pipeline/PatchInstruction"
        },
        {
          "type": "object",
          "required": [
            "identifier",
            "spec",
            "type"
          ],
          "properties": {
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/pipeline/UpdateRuleYamlSpec"
            },
            "type": {
              "type": "string",
              "enum": [
                "UpdateRule"
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "UpdateRuleYamlSpec": {
      "type": "object",
      "required": [
        "bucketBy",
        "ruleID"
      ],
      "properties": {
        "bucketBy": {
          "type": "string"
        },
        "ruleID": {
          "type": "string"
        },
        "serve": {
          "$ref": "#/definitions/pipeline/Serve"
        },
        "variations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/pipeline/VariationYamlSpec"
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "VariationYamlSpec": {
      "type": "object",
      "required": [
        "variation",
        "weight"
      ],
      "properties": {
        "variation": {
          "type": "string"
        },
        "weight": {
          "type": "integer",
          "format": "int32"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "WeightedVariation": {
      "type": "object",
      "required": [
        "variation",
        "weight"
      ],
      "properties": {
        "variation": {
          "type": "string"
        },
        "weight": {
          "type": "integer",
          "format": "int32"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PMSStepInfo": {
      "type": "object",
      "discriminator": "type",
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  }
}