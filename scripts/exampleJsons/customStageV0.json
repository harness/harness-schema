{
  "title": "CustomStageNode",
  "type": "object",
  "required": [
    "identifier",
    "name",
    "type"
  ],
  "properties": {
    "delegateSelectors": {
      "oneOf": [
        {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        {
          "type": "string",
          "pattern": "(<\\+.+>.*)",
          "minLength": 1
        }
      ]
    },
    "description": {
      "type": "string",
      "desc": "This is the description for CustomStageNode"
    },
    "failureStrategies": {
      "oneOf": [
        {
          "type": "array",
          "items": {
            "$ref": "#/definitions/pipeline/common/FailureStrategyConfig"
          }
        },
        {
          "type": "string",
          "pattern": "^<\\+input>$",
          "minLength": 1
        }
      ]
    },
    "identifier": {
      "type": "string",
      "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
    },
    "name": {
      "type": "string",
      "pattern": "^[a-zA-Z_0-9-.][-0-9a-zA-Z_\\s.]{0,127}$"
    },
    "strategy": {
      "oneOf": [
        {
          "$ref": "#/definitions/pipeline/common/StrategyConfig"
        },
        {
          "type": "string",
          "pattern": "^<\\+input>$",
          "minLength": 1
        }
      ]
    },
    "tags": {
      "type": "object",
      "additionalProperties": {
        "type": "string"
      }
    },
    "type": {
      "type": "string",
      "enum": [
        "Custom"
      ]
    },
    "variables": {
      "type": "array",
      "items": {
        "oneOf": [
          {
            "$ref": "#/definitions/pipeline/common/NumberNGVariable"
          },
          {
            "$ref": "#/definitions/pipeline/common/SecretNGVariable"
          },
          {
            "$ref": "#/definitions/pipeline/common/StringNGVariable"
          }
        ]
      }
    },
    "when": {
      "oneOf": [
        {
          "$ref": "#/definitions/pipeline/steps/custom/StageWhenCondition"
        },
        {
          "type": "string",
          "pattern": "^<\\+input>$",
          "minLength": 1
        }
      ]
    },
    "timeout": {
      "type": "string",
      "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "allOf": [
    {
      "if": {
        "properties": {
          "type": {
            "const": "Custom"
          }
        }
      },
      "then": {
        "properties": {
          "spec": {
            "$ref": "#/definitions/pipeline/stages/custom/CustomStageConfig"
          }
        }
      }
    }
  ],
  "definitions": {
    "pipeline": {
      "common": {
        "FailureStrategyConfig": {
          "title": "FailureStrategyConfig",
          "type": "object",
          "required": [
            "onFailure"
          ],
          "properties": {
            "onFailure": {
              "$ref": "#/definitions/pipeline/common/OnFailureConfig"
            },
            "description": {
              "desc": "This is the description for FailureStrategyConfig"
            }
          },
          "$schema": "http://json-schema.org/draft-07/schema#"
        },
        "OnFailureConfig": {
          "title": "OnFailureConfig",
          "type": "object",
          "required": [
            "action",
            "errors"
          ],
          "properties": {
            "action": {
              "$ref": "#/definitions/pipeline/common/FailureStrategyActionConfig"
            },
            "errors": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "Unknown",
                  "AllErrors",
                  "Authentication",
                  "Connectivity",
                  "Timeout",
                  "Authorization",
                  "Verification",
                  "DelegateProvisioning",
                  "PolicyEvaluationFailure",
                  "InputTimeoutError",
                  "ApprovalRejection",
                  "DelegateRestart",
                  "UserMarkedFailure"
                ]
              }
            },
            "description": {
              "desc": "This is the description for OnFailureConfig"
            }
          },
          "$schema": "http://json-schema.org/draft-07/schema#"
        },
        "FailureStrategyActionConfig": {
          "title": "FailureStrategyActionConfig",
          "type": "object",
          "required": [
            "type"
          ],
          "discriminator": "type",
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "Ignore",
                "Retry",
                "MarkAsSuccess",
                "Abort",
                "StageRollback",
                "StepGroupRollback",
                "PipelineRollback",
                "ManualIntervention",
                "ProceedWithDefaultValues",
                "MarkAsFailure",
                "RetryStepGroup"
              ]
            },
            "description": {
              "desc": "This is the description for FailureStrategyActionConfig"
            }
          },
          "$schema": "http://json-schema.org/draft-07/schema#"
        },
        "StrategyConfig": {
          "title": "StrategyConfig",
          "type": "object",
          "properties": {
            "matrix": {
              "oneOf": [
                {
                  "$ref": "#/definitions/pipeline/common/ParameterFieldMatrixConfigInterface"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "parallelism": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32",
                  "minimum": 0
                },
                {
                  "type": "string",
                  "pattern": "(<\\+.+>.*)",
                  "minLength": 1
                }
              ]
            },
            "repeat": {
              "$ref": "#/definitions/pipeline/common/HarnessForConfig"
            },
            "description": {
              "desc": "This is the description for StrategyConfig"
            }
          },
          "$schema": "http://json-schema.org/draft-07/schema#",
          "allOf": [
            {
              "oneOf": [
                {
                  "required": [
                    "repeat"
                  ]
                },
                {
                  "required": [
                    "parallelism"
                  ]
                },
                {
                  "required": [
                    "matrix"
                  ]
                }
              ]
            }
          ]
        },
        "ParameterFieldMatrixConfigInterface": {
          "title": "ParameterFieldMatrixConfigInterface",
          "type": "object",
          "properties": {
            "defaultValue": {
              "$ref": "#/definitions/pipeline/common/MatrixConfigInterface"
            },
            "executionInput": {
              "type": "boolean"
            },
            "expression": {
              "type": "boolean"
            },
            "expressionValue": {
              "type": "string"
            },
            "inputSetValidator": {
              "$ref": "#/definitions/pipeline/common/InputSetValidator"
            },
            "jsonResponseField": {
              "type": "boolean"
            },
            "responseField": {
              "type": "string"
            },
            "typeString": {
              "type": "boolean"
            },
            "value": {
              "$ref": "#/definitions/pipeline/common/MatrixConfigInterface"
            },
            "description": {
              "desc": "This is the description for ParameterFieldMatrixConfigInterface"
            }
          },
          "$schema": "http://json-schema.org/draft-07/schema#"
        },
        "MatrixConfigInterface": {
          "title": "MatrixConfigInterface",
          "type": "object",
          "$schema": "http://json-schema.org/draft-07/schema#",
          "properties": {
            "description": {
              "desc": "This is the description for MatrixConfigInterface"
            }
          }
        },
        "InputSetValidator": {
          "title": "InputSetValidator",
          "type": "object",
          "properties": {
            "parameters": {
              "type": "string"
            },
            "validatorType": {
              "type": "string",
              "enum": [
                "ALLOWED_VALUES",
                "REGEX"
              ]
            },
            "description": {
              "desc": "This is the description for InputSetValidator"
            }
          },
          "$schema": "http://json-schema.org/draft-07/schema#"
        },
        "HarnessForConfig": {
          "title": "HarnessForConfig",
          "type": "object",
          "properties": {
            "end": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32",
                  "minimum": 0
                },
                {
                  "type": "string",
                  "pattern": "(<\\+.+>.*)",
                  "minLength": 1
                }
              ]
            },
            "items": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "(<\\+.+>.*)",
                  "minLength": 1
                }
              ]
            },
            "maxConcurrency": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32",
                  "minimum": 0
                },
                {
                  "type": "string",
                  "pattern": "(<\\+.+>.*)",
                  "minLength": 1
                }
              ]
            },
            "partitionSize": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32",
                  "minimum": 0
                },
                {
                  "type": "string",
                  "pattern": "(<\\+.+>.*)",
                  "minLength": 1
                }
              ]
            },
            "start": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32",
                  "minimum": 0
                },
                {
                  "type": "string",
                  "pattern": "(<\\+.+>.*)",
                  "minLength": 1
                }
              ]
            },
            "times": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int32",
                  "minimum": 0
                },
                {
                  "type": "string",
                  "pattern": "(<\\+.+>.*)",
                  "minLength": 1
                }
              ]
            },
            "unit": {
              "type": "string",
              "enum": [
                "Percentage",
                "Count"
              ]
            },
            "description": {
              "desc": "This is the description for HarnessForConfig"
            }
          },
          "$schema": "http://json-schema.org/draft-07/schema#",
          "allOf": [
            {
              "oneOf": [
                {
                  "required": [
                    "times"
                  ]
                },
                {
                  "required": [
                    "items"
                  ]
                }
              ]
            }
          ]
        },
        "NumberNGVariable": {
          "title": "NumberNGVariable",
          "allOf": [
            {
              "$ref": "#/definitions/pipeline/common/NGVariable"
            },
            {
              "type": "object",
              "required": [
                "value"
              ],
              "properties": {
                "default": {
                  "type": "number",
                  "format": "double"
                },
                "name": {
                  "type": "string",
                  "pattern": "^[a-zA-Z_][0-9a-zA-Z_\\.$-]{0,127}$"
                },
                "type": {
                  "type": "string",
                  "enum": [
                    "Number"
                  ]
                },
                "value": {
                  "oneOf": [
                    {
                      "type": "number",
                      "format": "double"
                    },
                    {
                      "type": "string",
                      "pattern": "((^[+-]?[0-9]*\\.?[0-9]+$)|(<\\+.+>.*))"
                    }
                  ]
                }
              }
            }
          ],
          "$schema": "http://json-schema.org/draft-07/schema#",
          "properties": {
            "description": {
              "desc": "This is the description for NumberNGVariable"
            }
          }
        },
        "NGVariable": {
          "title": "NGVariable",
          "type": "object",
          "discriminator": "type",
          "properties": {
            "description": {
              "type": "string",
              "desc": "This is the description for NGVariable"
            },
            "metadata": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "required": {
              "type": "boolean"
            },
            "type": {
              "type": "string",
              "enum": [
                "String",
                "Number",
                "Secret"
              ]
            }
          },
          "$schema": "http://json-schema.org/draft-07/schema#"
        },
        "SecretNGVariable": {
          "title": "SecretNGVariable",
          "allOf": [
            {
              "$ref": "#/definitions/pipeline/common/NGVariable"
            },
            {
              "type": "object",
              "required": [
                "value"
              ],
              "properties": {
                "default": {
                  "type": "string"
                },
                "name": {
                  "type": "string",
                  "pattern": "^[a-zA-Z_][0-9a-zA-Z_\\.$-]{0,127}$"
                },
                "type": {
                  "type": "string",
                  "enum": [
                    "Secret"
                  ]
                },
                "value": {
                  "type": "string"
                }
              }
            }
          ],
          "$schema": "http://json-schema.org/draft-07/schema#",
          "properties": {
            "description": {
              "desc": "This is the description for SecretNGVariable"
            }
          }
        },
        "StringNGVariable": {
          "title": "StringNGVariable",
          "allOf": [
            {
              "$ref": "#/definitions/pipeline/common/NGVariable"
            },
            {
              "type": "object",
              "required": [
                "value"
              ],
              "properties": {
                "default": {
                  "type": "string"
                },
                "name": {
                  "type": "string",
                  "pattern": "^[a-zA-Z_][0-9a-zA-Z_\\.$-]{0,127}$"
                },
                "type": {
                  "type": "string",
                  "enum": [
                    "String"
                  ]
                },
                "value": {
                  "type": "string"
                }
              }
            }
          ],
          "$schema": "http://json-schema.org/draft-07/schema#",
          "properties": {
            "description": {
              "desc": "This is the description for StringNGVariable"
            }
          }
        },
        "StepElementConfig": {
          "title": "StepElementConfig",
          "type": "object",
          "required": [
            "identifier",
            "name",
            "type"
          ],
          "properties": {
            "description": {
              "type": "string",
              "desc": "This is the description for StepElementConfig"
            },
            "enforce": {
              "$ref": "#/definitions/pipeline/common/PolicyConfig"
            },
            "failureStrategies": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/pipeline/common/FailureStrategyConfig"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>$",
                  "minLength": 1
                }
              ]
            },
            "identifier": {
              "type": "string",
              "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
            },
            "name": {
              "type": "string",
              "pattern": "^[a-zA-Z_0-9-.][-0-9a-zA-Z_\\s.]{0,127}$"
            },
            "strategy": {
              "$ref": "#/definitions/pipeline/common/StrategyConfig"
            },
            "timeout": {
              "type": "string",
              "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(<\\+input>.*)|(.*<\\+.*>.*)|(^$))$"
            },
            "type": {
              "type": "string",
              "enum": []
            },
            "when": {
              "oneOf": [
                {
                  "$ref": "#/definitions/pipeline/common/StepWhenCondition"
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>$",
                  "minLength": 1
                }
              ]
            }
          },
          "$schema": "http://json-schema.org/draft-07/schema#",
          "allOf": []
        },
        "PolicyConfig": {
          "title": "PolicyConfig",
          "type": "object",
          "required": [
            "policySets"
          ],
          "properties": {
            "policySets": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string",
                  "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                  "minLength": 1
                }
              ]
            },
            "description": {
              "desc": "This is the description for PolicyConfig"
            }
          },
          "$schema": "http://json-schema.org/draft-07/schema#"
        },
        "StepWhenCondition": {
          "title": "StepWhenCondition",
          "type": "object",
          "required": [
            "stageStatus"
          ],
          "properties": {
            "condition": {
              "type": "string",
              "pattern": "^(?!<\\+input>.*\\.executionInput\\(\\)(.*)$)"
            },
            "stageStatus": {
              "type": "string",
              "enum": [
                "Success",
                "Failure",
                "All"
              ]
            },
            "description": {
              "desc": "This is the description for StepWhenCondition"
            }
          },
          "$schema": "http://json-schema.org/draft-07/schema#"
        },
        "StepSpecType": {
          "title": "StepSpecType",
          "type": "object",
          "discriminator": "type",
          "$schema": "http://json-schema.org/draft-07/schema#",
          "properties": {
            "description": {
              "desc": "This is the description for StepSpecType"
            }
          }
        },
        "ContainerResource": {
          "title": "ContainerResource",
          "type": "object",
          "required": [
            "limits"
          ],
          "properties": {
            "limits": {
              "$ref": "#/definitions/pipeline/common/Limits"
            },
            "description": {
              "desc": "This is the description for ContainerResource"
            }
          },
          "$schema": "http://json-schema.org/draft-07/schema#"
        },
        "Limits": {
          "title": "Limits",
          "type": "object",
          "properties": {
            "cpu": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "number"
                }
              ]
            },
            "memory": {
              "type": "string"
            },
            "description": {
              "desc": "This is the description for Limits"
            }
          },
          "$schema": "http://json-schema.org/draft-07/schema#"
        },
        "ShellScriptSourceWrapper": {
          "title": "ShellScriptSourceWrapper",
          "type": "object",
          "required": [
            "spec",
            "type"
          ],
          "properties": {
            "type": {
              "type": "string"
            },
            "description": {
              "desc": "This is the description for ShellScriptSourceWrapper"
            }
          },
          "$schema": "http://json-schema.org/draft-07/schema#",
          "allOf": [
            {
              "if": {
                "properties": {
                  "type": {
                    "const": "Harness"
                  }
                }
              },
              "then": {
                "properties": {
                  "spec": {
                    "$ref": "#/definitions/pipeline/common/HarnessFileStoreSource"
                  }
                }
              }
            },
            {
              "if": {
                "properties": {
                  "type": {
                    "const": "Inline"
                  }
                }
              },
              "then": {
                "properties": {
                  "spec": {
                    "$ref": "#/definitions/pipeline/common/ShellScriptInlineSource"
                  }
                }
              }
            }
          ]
        },
        "HarnessFileStoreSource": {
          "title": "HarnessFileStoreSource",
          "allOf": [
            {
              "$ref": "#/definitions/pipeline/common/ShellScriptBaseSource"
            },
            {
              "type": "object",
              "properties": {
                "file": {
                  "type": "string"
                }
              }
            }
          ],
          "$schema": "http://json-schema.org/draft-07/schema#",
          "properties": {
            "description": {
              "desc": "This is the description for HarnessFileStoreSource"
            }
          }
        },
        "ShellScriptBaseSource": {
          "title": "ShellScriptBaseSource",
          "type": "object",
          "discriminator": "type",
          "properties": {
            "type": {
              "type": "string"
            },
            "description": {
              "desc": "This is the description for ShellScriptBaseSource"
            }
          },
          "$schema": "http://json-schema.org/draft-07/schema#"
        },
        "ShellScriptInlineSource": {
          "title": "ShellScriptInlineSource",
          "allOf": [
            {
              "$ref": "#/definitions/pipeline/common/ShellScriptBaseSource"
            },
            {
              "type": "object",
              "properties": {
                "script": {
                  "type": "string"
                }
              }
            }
          ],
          "$schema": "http://json-schema.org/draft-07/schema#",
          "properties": {
            "description": {
              "desc": "This is the description for ShellScriptInlineSource"
            }
          }
        },
        "JsonNode": {
          "title": "JsonNode",
          "type": "object",
          "$schema": "http://json-schema.org/draft-07/schema#",
          "properties": {
            "description": {
              "desc": "This is the description for JsonNode"
            }
          }
        },
        "OutputNGVariable": {
          "title": "OutputNGVariable",
          "type": "object",
          "properties": {
            "description": {
              "type": "string",
              "desc": "This is the description for OutputNGVariable"
            },
            "name": {
              "type": "string",
              "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
            }
          },
          "$schema": "http://json-schema.org/draft-07/schema#"
        },
        "ParameterFieldMapStringJsonNode": {
          "title": "ParameterFieldMapStringJsonNode",
          "type": "object",
          "properties": {
            "defaultValue": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/pipeline/common/JsonNode"
              }
            },
            "executionInput": {
              "type": "boolean"
            },
            "expression": {
              "type": "boolean"
            },
            "expressionValue": {
              "type": "string"
            },
            "inputSetValidator": {
              "$ref": "#/definitions/pipeline/common/InputSetValidator"
            },
            "jsonResponseField": {
              "type": "boolean"
            },
            "responseField": {
              "type": "string"
            },
            "typeString": {
              "type": "boolean"
            },
            "value": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/pipeline/common/JsonNode"
              }
            },
            "description": {
              "desc": "This is the description for ParameterFieldMapStringJsonNode"
            }
          },
          "$schema": "http://json-schema.org/draft-07/schema#"
        },
        "K8sDirectInfra": {
          "title": "K8sDirectInfra",
          "allOf": [
            {
              "$ref": "#/definitions/pipeline/common/StepGroupInfra"
            },
            {
              "type": "object",
              "required": [
                "spec",
                "type"
              ],
              "properties": {
                "spec": {
                  "$ref": "#/definitions/pipeline/steps/custom/ContainerInfraYamlSpec"
                },
                "type": {
                  "type": "string",
                  "enum": [
                    "KubernetesDirect",
                    "Delegate",
                    "Noop"
                  ]
                }
              }
            }
          ],
          "$schema": "http://json-schema.org/draft-07/schema#",
          "properties": {
            "description": {
              "desc": "This is the description for K8sDirectInfra"
            }
          }
        },
        "StepGroupInfra": {
          "title": "StepGroupInfra",
          "type": "object",
          "discriminator": "type",
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "KubernetesDirect",
                "Delegate",
                "Noop"
              ]
            },
            "description": {
              "desc": "This is the description for StepGroupInfra"
            }
          },
          "$schema": "http://json-schema.org/draft-07/schema#"
        }
      },
      "steps": {
        "custom": {
          "StageWhenCondition": {
            "title": "StageWhenCondition",
            "type": "object",
            "required": [
              "pipelineStatus"
            ],
            "properties": {
              "condition": {
                "type": "string",
                "pattern": "^(?!<\\+input>.*\\.executionInput\\(\\)(.*)$)"
              },
              "pipelineStatus": {
                "type": "string",
                "enum": [
                  "Success",
                  "Failure",
                  "All"
                ]
              },
              "description": {
                "desc": "This is the description for StageWhenCondition"
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "HarnessStore": {
            "title": "HarnessStore",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/steps/custom/StoreSpec"
              },
              {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string"
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "properties": {
              "description": {
                "desc": "This is the description for HarnessStore"
              }
            }
          },
          "StoreSpec": {
            "title": "StoreSpec",
            "type": "object",
            "$schema": "http://json-schema.org/draft-07/schema#",
            "properties": {
              "description": {
                "desc": "This is the description for StoreSpec"
              }
            }
          },
          "HttpStepNode": {
            "title": "HttpStepNode",
            "type": "object",
            "required": [
              "identifier",
              "name",
              "spec",
              "type"
            ],
            "properties": {
              "description": {
                "type": "string",
                "desc": "This is the description for HttpStepNode"
              },
              "enforce": {
                "$ref": "#/definitions/pipeline/common/PolicyConfig"
              },
              "failureStrategies": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/pipeline/common/FailureStrategyConfig"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "identifier": {
                "type": "string",
                "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
              },
              "name": {
                "type": "string",
                "pattern": "^[a-zA-Z_0-9-.][-0-9a-zA-Z_\\s.]{0,127}$"
              },
              "strategy": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StrategyConfig"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "timeout": {
                "type": "string",
                "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
              },
              "type": {
                "type": "string",
                "enum": [
                  "Http"
                ]
              },
              "when": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StepWhenCondition"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#",
            "allOf": [
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "Http"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/custom/HttpStepInfo"
                    }
                  }
                }
              }
            ]
          },
          "HttpStepInfo": {
            "title": "HttpStepInfo",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/common/StepSpecType"
              },
              {
                "type": "object",
                "required": [
                  "method",
                  "url"
                ],
                "properties": {
                  "assertion": {
                    "type": "string"
                  },
                  "delegateSelectors": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string",
                        "pattern": "(<\\+.+>.*)",
                        "minLength": 1
                      }
                    ]
                  },
                  "headers": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/pipeline/steps/custom/HttpHeaderConfig"
                    }
                  },
                  "method": {
                    "type": "string"
                  },
                  "outputVariables": {
                    "type": "array",
                    "items": {
                      "oneOf": [
                        {
                          "$ref": "#/definitions/pipeline/common/NumberNGVariable"
                        },
                        {
                          "$ref": "#/definitions/pipeline/common/SecretNGVariable"
                        },
                        {
                          "$ref": "#/definitions/pipeline/common/StringNGVariable"
                        }
                      ]
                    }
                  },
                  "requestBody": {
                    "type": "string"
                  },
                  "url": {
                    "type": "string"
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "type": "object",
            "required": [
              "method",
              "url"
            ],
            "properties": {
              "assertion": {
                "type": "string"
              },
              "delegateSelectors": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "(<\\+.+>.*)",
                    "minLength": 1
                  }
                ]
              },
              "headers": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/pipeline/steps/custom/HttpHeaderConfig"
                }
              },
              "method": {
                "type": "string"
              },
              "outputVariables": {
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "$ref": "#/definitions/pipeline/common/NumberNGVariable"
                    },
                    {
                      "$ref": "#/definitions/pipeline/common/SecretNGVariable"
                    },
                    {
                      "$ref": "#/definitions/pipeline/common/StringNGVariable"
                    }
                  ]
                }
              },
              "requestBody": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "description": {
                "desc": "This is the description for HttpStepInfo"
              }
            }
          },
          "HttpHeaderConfig": {
            "title": "HttpHeaderConfig",
            "type": "object",
            "properties": {
              "key": {
                "type": "string"
              },
              "value": {
                "type": "string"
              },
              "description": {
                "desc": "This is the description for HttpHeaderConfig"
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "EmailStepNode": {
            "title": "EmailStepNode",
            "type": "object",
            "required": [
              "identifier",
              "name",
              "spec",
              "type"
            ],
            "properties": {
              "description": {
                "type": "string",
                "desc": "This is the description for EmailStepNode"
              },
              "enforce": {
                "$ref": "#/definitions/pipeline/common/PolicyConfig"
              },
              "failureStrategies": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/pipeline/common/FailureStrategyConfig"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "identifier": {
                "type": "string",
                "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
              },
              "name": {
                "type": "string",
                "pattern": "^[a-zA-Z_0-9-.][-0-9a-zA-Z_\\s.]{0,127}$"
              },
              "strategy": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StrategyConfig"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "timeout": {
                "type": "string",
                "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
              },
              "type": {
                "type": "string",
                "enum": [
                  "Email"
                ]
              },
              "when": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StepWhenCondition"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#",
            "allOf": [
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "Email"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/custom/EmailStepInfo"
                    }
                  }
                }
              }
            ]
          },
          "EmailStepInfo": {
            "title": "EmailStepInfo",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/common/StepSpecType"
              },
              {
                "type": "object",
                "required": [
                  "subject",
                  "to"
                ],
                "properties": {
                  "body": {
                    "type": "string"
                  },
                  "cc": {
                    "type": "string"
                  },
                  "delegateSelectors": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string",
                        "pattern": "(<\\+.+>.*)",
                        "minLength": 1
                      }
                    ]
                  },
                  "subject": {
                    "type": "string"
                  },
                  "to": {
                    "type": "string"
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "type": "object",
            "required": [
              "subject",
              "to"
            ],
            "properties": {
              "body": {
                "type": "string"
              },
              "cc": {
                "type": "string"
              },
              "delegateSelectors": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "(<\\+.+>.*)",
                    "minLength": 1
                  }
                ]
              },
              "subject": {
                "type": "string"
              },
              "to": {
                "type": "string"
              },
              "description": {
                "desc": "This is the description for EmailStepInfo"
              }
            }
          },
          "QueueStepNode": {
            "title": "QueueStepNode",
            "type": "object",
            "required": [
              "identifier",
              "name",
              "spec",
              "type"
            ],
            "properties": {
              "description": {
                "type": "string",
                "desc": "This is the description for QueueStepNode"
              },
              "enforce": {
                "$ref": "#/definitions/pipeline/common/PolicyConfig"
              },
              "failureStrategies": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/pipeline/common/FailureStrategyConfig"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "identifier": {
                "type": "string",
                "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
              },
              "name": {
                "type": "string",
                "pattern": "^[a-zA-Z_0-9-.][-0-9a-zA-Z_\\s.]{0,127}$"
              },
              "strategy": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StrategyConfig"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "timeout": {
                "type": "string",
                "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
              },
              "type": {
                "type": "string",
                "enum": [
                  "Queue"
                ]
              },
              "when": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StepWhenCondition"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#",
            "allOf": [
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "Queue"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/custom/QueueStepInfo"
                    }
                  }
                }
              }
            ]
          },
          "QueueStepInfo": {
            "title": "QueueStepInfo",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/common/StepSpecType"
              },
              {
                "type": "object",
                "required": [
                  "key",
                  "scope"
                ],
                "properties": {
                  "key": {
                    "type": "string"
                  },
                  "scope": {
                    "type": "string",
                    "enum": [
                      "Pipeline",
                      "Stage"
                    ]
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "type": "object",
            "required": [
              "key",
              "scope"
            ],
            "properties": {
              "key": {
                "type": "string"
              },
              "scope": {
                "type": "string",
                "enum": [
                  "Pipeline",
                  "Stage"
                ]
              },
              "description": {
                "desc": "This is the description for QueueStepInfo"
              }
            }
          },
          "ShellScriptStepNode": {
            "title": "ShellScriptStepNode",
            "type": "object",
            "required": [
              "identifier",
              "name",
              "spec",
              "type"
            ],
            "properties": {
              "description": {
                "type": "string",
                "desc": "This is the description for ShellScriptStepNode"
              },
              "enforce": {
                "$ref": "#/definitions/pipeline/common/PolicyConfig"
              },
              "failureStrategies": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/pipeline/common/FailureStrategyConfig"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "identifier": {
                "type": "string",
                "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
              },
              "name": {
                "type": "string",
                "pattern": "^[a-zA-Z_0-9-.][-0-9a-zA-Z_\\s.]{0,127}$"
              },
              "strategy": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StrategyConfig"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "timeout": {
                "type": "string",
                "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
              },
              "type": {
                "type": "string",
                "enum": [
                  "ShellScript"
                ]
              },
              "when": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StepWhenCondition"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#",
            "allOf": [
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "ShellScript"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/custom/ShellScriptStepInfo"
                    }
                  }
                }
              }
            ]
          },
          "ShellScriptStepInfo": {
            "title": "ShellScriptStepInfo",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/common/StepSpecType"
              },
              {
                "type": "object",
                "required": [
                  "onDelegate",
                  "shell",
                  "source"
                ],
                "properties": {
                  "delegateSelectors": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string",
                        "pattern": "(<\\+.+>.*)",
                        "minLength": 1
                      }
                    ]
                  },
                  "environmentVariables": {
                    "type": "array",
                    "items": {
                      "oneOf": [
                        {
                          "$ref": "#/definitions/pipeline/common/NumberNGVariable"
                        },
                        {
                          "$ref": "#/definitions/pipeline/common/SecretNGVariable"
                        },
                        {
                          "$ref": "#/definitions/pipeline/common/StringNGVariable"
                        }
                      ]
                    }
                  },
                  "executionTarget": {
                    "$ref": "#/definitions/pipeline/steps/custom/ExecutionTarget"
                  },
                  "includeInfraSelectors": {
                    "oneOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "metadata": {
                    "type": "string"
                  },
                  "onDelegate": {
                    "oneOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "outputVariables": {
                    "type": "array",
                    "items": {
                      "oneOf": [
                        {
                          "$ref": "#/definitions/pipeline/common/NumberNGVariable"
                        },
                        {
                          "$ref": "#/definitions/pipeline/common/SecretNGVariable"
                        },
                        {
                          "$ref": "#/definitions/pipeline/common/StringNGVariable"
                        }
                      ]
                    }
                  },
                  "shell": {
                    "type": "string",
                    "enum": [
                      "Bash",
                      "PowerShell"
                    ]
                  },
                  "source": {
                    "$ref": "#/definitions/pipeline/common/ShellScriptSourceWrapper"
                  },
                  "outputAlias": {
                    "$ref": "#/definitions/pipeline/steps/custom/OutputAlias"
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "type": "object",
            "required": [
              "onDelegate",
              "shell",
              "source"
            ],
            "properties": {
              "delegateSelectors": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "(<\\+.+>.*)",
                    "minLength": 1
                  }
                ]
              },
              "environmentVariables": {
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "$ref": "#/definitions/pipeline/common/NumberNGVariable"
                    },
                    {
                      "$ref": "#/definitions/pipeline/common/SecretNGVariable"
                    },
                    {
                      "$ref": "#/definitions/pipeline/common/StringNGVariable"
                    }
                  ]
                }
              },
              "executionTarget": {
                "$ref": "#/definitions/pipeline/steps/custom/ExecutionTarget"
              },
              "metadata": {
                "type": "string"
              },
              "onDelegate": {
                "oneOf": [
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "outputVariables": {
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "$ref": "#/definitions/pipeline/common/NumberNGVariable"
                    },
                    {
                      "$ref": "#/definitions/pipeline/common/SecretNGVariable"
                    },
                    {
                      "$ref": "#/definitions/pipeline/common/StringNGVariable"
                    }
                  ]
                }
              },
              "shell": {
                "type": "string",
                "enum": [
                  "Bash",
                  "PowerShell"
                ]
              },
              "source": {
                "$ref": "#/definitions/pipeline/common/ShellScriptSourceWrapper"
              },
              "outputAlias": {
                "$ref": "#/definitions/pipeline/steps/custom/OutputAlias"
              },
              "description": {
                "desc": "This is the description for ShellScriptStepInfo"
              }
            }
          },
          "ExecutionTarget": {
            "title": "ExecutionTarget",
            "type": "object",
            "properties": {
              "connectorRef": {
                "type": "string"
              },
              "host": {
                "type": "string"
              },
              "workingDirectory": {
                "type": "string"
              },
              "description": {
                "desc": "This is the description for ExecutionTarget"
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "OutputAlias": {
            "title": "OutputAlias",
            "type": "object",
            "required": [
              "key",
              "scope"
            ],
            "properties": {
              "key": {
                "type": "string",
                "minLength": 1
              },
              "scope": {
                "type": "string",
                "enum": [
                  "Pipeline",
                  "Stage",
                  "StepGroup"
                ]
              },
              "description": {
                "desc": "This is the description for OutputAlias used for exporting variables with alias key and scope specified."
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "CustomApprovalStepNode": {
            "title": "CustomApprovalStepNode",
            "type": "object",
            "required": [
              "identifier",
              "name",
              "spec",
              "type"
            ],
            "properties": {
              "description": {
                "type": "string",
                "desc": "This is the description for CustomApprovalStepNode"
              },
              "enforce": {
                "$ref": "#/definitions/pipeline/common/PolicyConfig"
              },
              "failureStrategies": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/pipeline/common/FailureStrategyConfig"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "identifier": {
                "type": "string",
                "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
              },
              "name": {
                "type": "string",
                "pattern": "^[a-zA-Z_0-9-.][-0-9a-zA-Z_\\s.]{0,127}$"
              },
              "strategy": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StrategyConfig"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "timeout": {
                "type": "string",
                "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
              },
              "type": {
                "type": "string",
                "enum": [
                  "CustomApproval"
                ]
              },
              "when": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StepWhenCondition"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#",
            "allOf": [
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "CustomApproval"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/custom/CustomApprovalStepInfo"
                    }
                  }
                }
              }
            ]
          },
          "CustomApprovalStepInfo": {
            "title": "CustomApprovalStepInfo",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/common/StepSpecType"
              },
              {
                "type": "object",
                "required": [
                  "approvalCriteria",
                  "retryInterval",
                  "scriptTimeout",
                  "shell",
                  "source"
                ],
                "properties": {
                  "approvalCriteria": {
                    "$ref": "#/definitions/pipeline/steps/custom/CriteriaSpecWrapper"
                  },
                  "delegateSelectors": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string",
                        "pattern": "(<\\+.+>.*)",
                        "minLength": 1
                      }
                    ]
                  },
                  "environmentVariables": {
                    "type": "array",
                    "items": {
                      "oneOf": [
                        {
                          "$ref": "#/definitions/pipeline/common/NumberNGVariable"
                        },
                        {
                          "$ref": "#/definitions/pipeline/common/SecretNGVariable"
                        },
                        {
                          "$ref": "#/definitions/pipeline/common/StringNGVariable"
                        }
                      ]
                    }
                  },
                  "outputVariables": {
                    "type": "array",
                    "items": {
                      "oneOf": [
                        {
                          "$ref": "#/definitions/pipeline/common/NumberNGVariable"
                        },
                        {
                          "$ref": "#/definitions/pipeline/common/SecretNGVariable"
                        },
                        {
                          "$ref": "#/definitions/pipeline/common/StringNGVariable"
                        }
                      ]
                    }
                  },
                  "rejectionCriteria": {
                    "$ref": "#/definitions/pipeline/steps/custom/CriteriaSpecWrapper"
                  },
                  "retryInterval": {
                    "type": "string",
                    "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(<\\+input>.*)|(.*<\\+.*>.*)|(^$))$"
                  },
                  "scriptTimeout": {
                    "type": "string",
                    "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(<\\+input>.*)|(.*<\\+.*>.*)|(^$))$"
                  },
                  "shell": {
                    "type": "string",
                    "enum": [
                      "Bash",
                      "PowerShell"
                    ]
                  },
                  "source": {
                    "$ref": "#/definitions/pipeline/common/ShellScriptSourceWrapper"
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "type": "object",
            "required": [
              "approvalCriteria",
              "retryInterval",
              "scriptTimeout",
              "shell",
              "source"
            ],
            "properties": {
              "approvalCriteria": {
                "$ref": "#/definitions/pipeline/steps/custom/CriteriaSpecWrapper"
              },
              "delegateSelectors": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "(<\\+.+>.*)",
                    "minLength": 1
                  }
                ]
              },
              "environmentVariables": {
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "$ref": "#/definitions/pipeline/common/NumberNGVariable"
                    },
                    {
                      "$ref": "#/definitions/pipeline/common/SecretNGVariable"
                    },
                    {
                      "$ref": "#/definitions/pipeline/common/StringNGVariable"
                    }
                  ]
                }
              },
              "outputVariables": {
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "$ref": "#/definitions/pipeline/common/NumberNGVariable"
                    },
                    {
                      "$ref": "#/definitions/pipeline/common/SecretNGVariable"
                    },
                    {
                      "$ref": "#/definitions/pipeline/common/StringNGVariable"
                    }
                  ]
                }
              },
              "rejectionCriteria": {
                "$ref": "#/definitions/pipeline/steps/custom/CriteriaSpecWrapper"
              },
              "retryInterval": {
                "type": "string",
                "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(<\\+input>.*)|(.*<\\+.*>.*)|(^$))$"
              },
              "scriptTimeout": {
                "type": "string",
                "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(<\\+input>.*)|(.*<\\+.*>.*)|(^$))$"
              },
              "shell": {
                "type": "string",
                "enum": [
                  "Bash",
                  "PowerShell"
                ]
              },
              "source": {
                "$ref": "#/definitions/pipeline/common/ShellScriptSourceWrapper"
              },
              "description": {
                "desc": "This is the description for CustomApprovalStepInfo"
              }
            }
          },
          "CriteriaSpecWrapper": {
            "title": "CriteriaSpecWrapper",
            "type": "object",
            "required": [
              "spec",
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "Jexl",
                  "KeyValues"
                ]
              },
              "description": {
                "desc": "This is the description for CriteriaSpecWrapper"
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#",
            "allOf": [
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "Jexl"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/custom/JexlCriteriaSpec"
                    }
                  }
                }
              },
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "KeyValues"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/custom/KeyValuesCriteriaSpec"
                    }
                  }
                }
              }
            ]
          },
          "JexlCriteriaSpec": {
            "title": "JexlCriteriaSpec",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/steps/custom/CriteriaSpec"
              },
              {
                "type": "object",
                "required": [
                  "expression"
                ],
                "properties": {
                  "expression": {
                    "type": "string"
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "properties": {
              "description": {
                "desc": "This is the description for JexlCriteriaSpec"
              }
            }
          },
          "CriteriaSpec": {
            "title": "CriteriaSpec",
            "type": "object",
            "discriminator": "type",
            "$schema": "http://json-schema.org/draft-07/schema#",
            "properties": {
              "description": {
                "desc": "This is the description for CriteriaSpec"
              }
            }
          },
          "KeyValuesCriteriaSpec": {
            "title": "KeyValuesCriteriaSpec",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/steps/custom/CriteriaSpec"
              },
              {
                "type": "object",
                "required": [
                  "conditions"
                ],
                "properties": {
                  "conditions": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/pipeline/steps/custom/Condition"
                    }
                  },
                  "matchAnyCondition": {
                    "oneOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "properties": {
              "description": {
                "desc": "This is the description for KeyValuesCriteriaSpec"
              }
            }
          },
          "Condition": {
            "title": "Condition",
            "type": "object",
            "required": [
              "key",
              "operator",
              "value"
            ],
            "properties": {
              "key": {
                "type": "string"
              },
              "operator": {
                "type": "string",
                "enum": [
                  "equals",
                  "not equals",
                  "in",
                  "not in"
                ]
              },
              "value": {
                "type": "string",
                "minLength": 1
              },
              "description": {
                "desc": "This is the description for Condition"
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "JiraCreateStepNode": {
            "title": "JiraCreateStepNode",
            "type": "object",
            "required": [
              "identifier",
              "name",
              "spec",
              "type"
            ],
            "properties": {
              "description": {
                "type": "string",
                "desc": "This is the description for JiraCreateStepNode"
              },
              "enforce": {
                "$ref": "#/definitions/pipeline/common/PolicyConfig"
              },
              "failureStrategies": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/pipeline/common/FailureStrategyConfig"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "identifier": {
                "type": "string",
                "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
              },
              "name": {
                "type": "string",
                "pattern": "^[a-zA-Z_0-9-.][-0-9a-zA-Z_\\s.]{0,127}$"
              },
              "strategy": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StrategyConfig"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "timeout": {
                "type": "string",
                "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
              },
              "type": {
                "type": "string",
                "enum": [
                  "JiraCreate"
                ]
              },
              "when": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StepWhenCondition"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#",
            "allOf": [
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "JiraCreate"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/custom/JiraCreateStepInfo"
                    }
                  }
                }
              }
            ]
          },
          "JiraCreateStepInfo": {
            "title": "JiraCreateStepInfo",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/common/StepSpecType"
              },
              {
                "type": "object",
                "required": [
                  "connectorRef",
                  "issueType",
                  "projectKey"
                ],
                "properties": {
                  "connectorRef": {
                    "type": "string"
                  },
                  "delegateSelectors": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string",
                        "pattern": "(<\\+.+>.*)",
                        "minLength": 1
                      }
                    ]
                  },
                  "fields": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/pipeline/steps/custom/JiraField"
                    }
                  },
                  "issueType": {
                    "type": "string"
                  },
                  "projectKey": {
                    "type": "string"
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "type": "object",
            "required": [
              "connectorRef",
              "issueType",
              "projectKey"
            ],
            "properties": {
              "connectorRef": {
                "type": "string"
              },
              "delegateSelectors": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "(<\\+.+>.*)",
                    "minLength": 1
                  }
                ]
              },
              "fields": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/pipeline/steps/custom/JiraField"
                }
              },
              "issueType": {
                "type": "string"
              },
              "projectKey": {
                "type": "string"
              },
              "description": {
                "desc": "This is the description for JiraCreateStepInfo"
              }
            }
          },
          "JiraField": {
            "title": "JiraField",
            "type": "object",
            "required": [
              "value"
            ],
            "properties": {
              "name": {
                "type": "string",
                "minLength": 1
              },
              "value": {
                "type": "string"
              },
              "description": {
                "desc": "This is the description for JiraField"
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "JiraUpdateStepNode": {
            "title": "JiraUpdateStepNode",
            "type": "object",
            "required": [
              "identifier",
              "name",
              "spec",
              "type"
            ],
            "properties": {
              "description": {
                "type": "string",
                "desc": "This is the description for JiraUpdateStepNode"
              },
              "enforce": {
                "$ref": "#/definitions/pipeline/common/PolicyConfig"
              },
              "failureStrategies": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/pipeline/common/FailureStrategyConfig"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "identifier": {
                "type": "string",
                "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
              },
              "name": {
                "type": "string",
                "pattern": "^[a-zA-Z_0-9-.][-0-9a-zA-Z_\\s.]{0,127}$"
              },
              "strategy": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StrategyConfig"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "timeout": {
                "type": "string",
                "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
              },
              "type": {
                "type": "string",
                "enum": [
                  "JiraUpdate"
                ]
              },
              "when": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StepWhenCondition"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#",
            "allOf": [
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "JiraUpdate"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/custom/JiraUpdateStepInfo"
                    }
                  }
                }
              }
            ]
          },
          "JiraUpdateStepInfo": {
            "title": "JiraUpdateStepInfo",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/common/StepSpecType"
              },
              {
                "type": "object",
                "required": [
                  "connectorRef",
                  "issueKey"
                ],
                "properties": {
                  "connectorRef": {
                    "type": "string"
                  },
                  "delegateSelectors": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string",
                        "pattern": "(<\\+.+>.*)",
                        "minLength": 1
                      }
                    ]
                  },
                  "fields": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/pipeline/steps/custom/JiraField"
                    }
                  },
                  "issueKey": {
                    "type": "string"
                  },
                  "issueType": {
                    "type": "string"
                  },
                  "projectKey": {
                    "type": "string"
                  },
                  "transitionTo": {
                    "$ref": "#/definitions/pipeline/steps/custom/TransitionTo"
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "type": "object",
            "required": [
              "connectorRef",
              "issueKey"
            ],
            "properties": {
              "connectorRef": {
                "type": "string"
              },
              "delegateSelectors": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "(<\\+.+>.*)",
                    "minLength": 1
                  }
                ]
              },
              "fields": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/pipeline/steps/custom/JiraField"
                }
              },
              "issueKey": {
                "type": "string"
              },
              "transitionTo": {
                "$ref": "#/definitions/pipeline/steps/custom/TransitionTo"
              },
              "description": {
                "desc": "This is the description for JiraUpdateStepInfo"
              }
            }
          },
          "TransitionTo": {
            "title": "TransitionTo",
            "type": "object",
            "required": [
              "status"
            ],
            "properties": {
              "status": {
                "type": "string"
              },
              "transitionName": {
                "type": "string"
              },
              "description": {
                "desc": "This is the description for TransitionTo"
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "TemplateStepNode": {
            "title": "TemplateStepNode",
            "type": "object",
            "required": [
              "identifier",
              "name",
              "template"
            ],
            "properties": {
              "description": {
                "type": "string",
                "desc": "This is the description for TemplateStepNode"
              },
              "identifier": {
                "type": "string",
                "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
              },
              "name": {
                "type": "string",
                "pattern": "^[a-zA-Z_0-9-.][-0-9a-zA-Z_\\s.]{0,127}$"
              },
              "template": {
                "$ref": "#/definitions/pipeline/steps/custom/TemplateLinkConfig"
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "TemplateLinkConfig": {
            "title": "TemplateLinkConfig",
            "type": "object",
            "required": [
              "templateRef"
            ],
            "properties": {
              "templateInputs": {
                "$ref": "#/definitions/pipeline/common/JsonNode"
              },
              "templateRef": {
                "type": "string"
              },
              "templateVariables": {
                "$ref": "#/definitions/pipeline/common/JsonNode"
              },
              "versionLabel": {
                "type": "string",
                "pattern": "^[0-9a-zA-Z][^\\s/&]{0,63}$"
              },
              "description": {
                "desc": "This is the description for TemplateLinkConfig"
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "ServiceNowApprovalStepNode": {
            "title": "ServiceNowApprovalStepNode",
            "type": "object",
            "required": [
              "identifier",
              "name",
              "spec",
              "type"
            ],
            "properties": {
              "description": {
                "type": "string",
                "desc": "This is the description for ServiceNowApprovalStepNode"
              },
              "enforce": {
                "$ref": "#/definitions/pipeline/common/PolicyConfig"
              },
              "failureStrategies": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/pipeline/common/FailureStrategyConfig"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "identifier": {
                "type": "string",
                "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
              },
              "name": {
                "type": "string",
                "pattern": "^[a-zA-Z_0-9-.][-0-9a-zA-Z_\\s.]{0,127}$"
              },
              "strategy": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StrategyConfig"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "timeout": {
                "type": "string",
                "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
              },
              "type": {
                "type": "string",
                "enum": [
                  "ServiceNowApproval"
                ]
              },
              "when": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StepWhenCondition"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#",
            "allOf": [
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "ServiceNowApproval"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/custom/ServiceNowApprovalStepInfo"
                    }
                  }
                }
              }
            ]
          },
          "ServiceNowApprovalStepInfo": {
            "title": "ServiceNowApprovalStepInfo",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/common/StepSpecType"
              },
              {
                "type": "object",
                "required": [
                  "approvalCriteria",
                  "connectorRef",
                  "ticketNumber",
                  "ticketType"
                ],
                "properties": {
                  "approvalCriteria": {
                    "$ref": "#/definitions/pipeline/steps/custom/CriteriaSpecWrapper"
                  },
                  "changeWindow": {
                    "$ref": "#/definitions/pipeline/steps/custom/ServiceNowChangeWindowSpec"
                  },
                  "connectorRef": {
                    "type": "string"
                  },
                  "delegateSelectors": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string",
                        "pattern": "(<\\+.+>.*)",
                        "minLength": 1
                      }
                    ]
                  },
                  "rejectionCriteria": {
                    "$ref": "#/definitions/pipeline/steps/custom/CriteriaSpecWrapper"
                  },
                  "ticketNumber": {
                    "type": "string"
                  },
                  "retryInterval": {
                    "type": "string",
                    "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(<\\+input>.*)|(.*<\\+.*>.*)|(^$))$"
                  },
                  "ticketType": {
                    "type": "string"
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "type": "object",
            "required": [
              "approvalCriteria",
              "connectorRef",
              "ticketNumber",
              "ticketType"
            ],
            "properties": {
              "approvalCriteria": {
                "$ref": "#/definitions/pipeline/steps/custom/CriteriaSpecWrapper"
              },
              "changeWindow": {
                "$ref": "#/definitions/pipeline/steps/custom/ServiceNowChangeWindowSpec"
              },
              "connectorRef": {
                "type": "string"
              },
              "delegateSelectors": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "(<\\+.+>.*)",
                    "minLength": 1
                  }
                ]
              },
              "rejectionCriteria": {
                "$ref": "#/definitions/pipeline/steps/custom/CriteriaSpecWrapper"
              },
              "ticketNumber": {
                "type": "string"
              },
              "ticketType": {
                "type": "string"
              },
              "description": {
                "desc": "This is the description for ServiceNowApprovalStepInfo"
              }
            }
          },
          "ServiceNowChangeWindowSpec": {
            "title": "ServiceNowChangeWindowSpec",
            "type": "object",
            "required": [
              "endField",
              "startField"
            ],
            "properties": {
              "endField": {
                "type": "string"
              },
              "startField": {
                "type": "string"
              },
              "description": {
                "desc": "This is the description for ServiceNowChangeWindowSpec"
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "JiraApprovalStepNode": {
            "title": "JiraApprovalStepNode",
            "type": "object",
            "required": [
              "identifier",
              "name",
              "spec",
              "type"
            ],
            "properties": {
              "description": {
                "type": "string",
                "desc": "This is the description for JiraApprovalStepNode"
              },
              "enforce": {
                "$ref": "#/definitions/pipeline/common/PolicyConfig"
              },
              "failureStrategies": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/pipeline/common/FailureStrategyConfig"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "identifier": {
                "type": "string",
                "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
              },
              "name": {
                "type": "string",
                "pattern": "^[a-zA-Z_0-9-.][-0-9a-zA-Z_\\s.]{0,127}$"
              },
              "strategy": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StrategyConfig"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "timeout": {
                "type": "string",
                "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
              },
              "type": {
                "type": "string",
                "enum": [
                  "JiraApproval"
                ]
              },
              "when": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StepWhenCondition"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#",
            "allOf": [
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "JiraApproval"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/custom/JiraApprovalStepInfo"
                    }
                  }
                }
              }
            ]
          },
          "JiraApprovalStepInfo": {
            "title": "JiraApprovalStepInfo",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/common/StepSpecType"
              },
              {
                "type": "object",
                "required": [
                  "approvalCriteria",
                  "connectorRef",
                  "issueKey"
                ],
                "properties": {
                  "approvalCriteria": {
                    "$ref": "#/definitions/pipeline/steps/custom/CriteriaSpecWrapper"
                  },
                  "connectorRef": {
                    "type": "string"
                  },
                  "delegateSelectors": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string",
                        "pattern": "(<\\+.+>.*)",
                        "minLength": 1
                      }
                    ]
                  },
                  "issueKey": {
                    "type": "string"
                  },
                  "issueType": {
                    "type": "string"
                  },
                  "projectKey": {
                    "type": "string"
                  },
                  "rejectionCriteria": {
                    "$ref": "#/definitions/pipeline/steps/custom/CriteriaSpecWrapper"
                  },
                  "retryInterval": {
                    "type": "string",
                    "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(<\\+input>.*)|(.*<\\+.*>.*)|(^$))$"
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "type": "object",
            "required": [
              "approvalCriteria",
              "connectorRef",
              "issueKey"
            ],
            "properties": {
              "approvalCriteria": {
                "$ref": "#/definitions/pipeline/steps/custom/CriteriaSpecWrapper"
              },
              "connectorRef": {
                "type": "string"
              },
              "delegateSelectors": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "(<\\+.+>.*)",
                    "minLength": 1
                  }
                ]
              },
              "issueKey": {
                "type": "string"
              },
              "issueType": {
                "type": "string"
              },
              "projectKey": {
                "type": "string"
              },
              "rejectionCriteria": {
                "$ref": "#/definitions/pipeline/steps/custom/CriteriaSpecWrapper"
              },
              "description": {
                "desc": "This is the description for JiraApprovalStepInfo"
              }
            }
          },
          "HarnessApprovalStepNode": {
            "title": "HarnessApprovalStepNode",
            "type": "object",
            "required": [
              "identifier",
              "name",
              "spec",
              "type"
            ],
            "properties": {
              "description": {
                "type": "string",
                "desc": "This is the description for HarnessApprovalStepNode"
              },
              "enforce": {
                "$ref": "#/definitions/pipeline/common/PolicyConfig"
              },
              "failureStrategies": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/pipeline/common/FailureStrategyConfig"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "identifier": {
                "type": "string",
                "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
              },
              "name": {
                "type": "string",
                "pattern": "^[a-zA-Z_0-9-.][-0-9a-zA-Z_\\s.]{0,127}$"
              },
              "strategy": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StrategyConfig"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "timeout": {
                "type": "string",
                "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
              },
              "type": {
                "type": "string",
                "enum": [
                  "HarnessApproval"
                ]
              },
              "when": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StepWhenCondition"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#",
            "allOf": [
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "HarnessApproval"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/custom/HarnessApprovalStepInfo"
                    }
                  }
                }
              }
            ]
          },
          "HarnessApprovalStepInfo": {
            "title": "HarnessApprovalStepInfo",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/common/StepSpecType"
              },
              {
                "type": "object",
                "required": [
                  "approvers",
                  "includePipelineExecutionHistory"
                ],
                "properties": {
                  "approvalMessage": {
                    "type": "string",
                    "minLength": 1
                  },
                  "approverInputs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/pipeline/steps/custom/ApproverInputInfo"
                    }
                  },
                  "approvers": {
                    "$ref": "#/definitions/pipeline/steps/custom/Approvers"
                  },
                  "includePipelineExecutionHistory": {
                    "oneOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "autoApproval": {
                    "$ref": "#/definitions/pipeline/steps/custom/AutoApprovalParams"
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "type": "object",
            "required": [
              "approvers",
              "includePipelineExecutionHistory"
            ],
            "properties": {
              "approvalMessage": {
                "type": "string",
                "minLength": 1
              },
              "approverInputs": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/pipeline/steps/custom/ApproverInputInfo"
                }
              },
              "approvers": {
                "$ref": "#/definitions/pipeline/steps/custom/Approvers"
              },
              "includePipelineExecutionHistory": {
                "oneOf": [
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "autoApproval": {
                "$ref": "#/definitions/pipeline/steps/custom/AutoApprovalParams"
              },
              "description": {
                "desc": "This is the description for HarnessApprovalStepInfo"
              }
            }
          },
          "ApproverInputInfo": {
            "title": "ApproverInputInfo",
            "type": "object",
            "properties": {
              "defaultValue": {
                "type": "string"
              },
              "name": {
                "type": "string",
                "minLength": 1
              },
              "description": {
                "desc": "This is the description for ApproverInputInfo"
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "Approvers": {
            "title": "Approvers",
            "type": "object",
            "required": [
              "disallowPipelineExecutor",
              "minimumCount",
              "userGroups"
            ],
            "properties": {
              "disallowPipelineExecutor": {
                "oneOf": [
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "minimumCount": {
                "oneOf": [
                  {
                    "type": "integer",
                    "format": "int32"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "userGroups": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "maxItems": 2147483647,
                    "minItems": 1
                  },
                  {
                    "type": "string",
                    "pattern": "(<\\+.+>.*)",
                    "minLength": 1
                  }
                ]
              },
              "description": {
                "desc": "This is the description for Approvers"
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "AutoApprovalParams": {
            "title": "AutoApprovalParams",
            "type": "object",
            "required": [
              "action",
              "scheduledDeadline"
            ],
            "properties": {
              "action": {
                "type": "string",
                "enum": [
                  "APPROVE"
                ]
              },
              "comments": {
                "type": "string"
              },
              "scheduledDeadline": {
                "$ref": "#/definitions/pipeline/steps/custom/ScheduledDeadline"
              },
              "description": {
                "desc": "This is the description for AutoApproval params used in Harness Approval"
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "ScheduledDeadline": {
            "title": "ScheduledDeadline",
            "type": "object",
            "required": [
              "time",
              "timeZone"
            ],
            "properties": {
              "time": {
                "type": "string"
              },
              "timeZone": {
                "type": "string"
              },
              "description": {
                "desc": "This is the description for ScheduledDeadline used in Harness Approval's AutoApproval"
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "BarrierStepNode": {
            "title": "BarrierStepNode",
            "type": "object",
            "required": [
              "identifier",
              "name",
              "spec",
              "type"
            ],
            "properties": {
              "description": {
                "type": "string",
                "desc": "This is the description for BarrierStepNode"
              },
              "enforce": {
                "$ref": "#/definitions/pipeline/common/PolicyConfig"
              },
              "failureStrategies": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/pipeline/common/FailureStrategyConfig"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "identifier": {
                "type": "string",
                "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
              },
              "name": {
                "type": "string",
                "pattern": "^[a-zA-Z_0-9-.][-0-9a-zA-Z_\\s.]{0,127}$"
              },
              "strategy": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StrategyConfig"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "timeout": {
                "type": "string",
                "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
              },
              "type": {
                "type": "string",
                "enum": [
                  "Barrier"
                ]
              },
              "when": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StepWhenCondition"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#",
            "allOf": [
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "Barrier"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/custom/BarrierStepInfo"
                    }
                  }
                }
              }
            ]
          },
          "BarrierStepInfo": {
            "title": "BarrierStepInfo",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/common/StepSpecType"
              },
              {
                "type": "object",
                "required": [
                  "barrierRef"
                ],
                "properties": {
                  "barrierRef": {
                    "type": "string"
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "type": "object",
            "required": [
              "barrierRef"
            ],
            "properties": {
              "barrierRef": {
                "type": "string"
              },
              "description": {
                "desc": "This is the description for BarrierStepInfo"
              }
            }
          },
          "ServiceNowCreateStepNode": {
            "title": "ServiceNowCreateStepNode",
            "type": "object",
            "required": [
              "identifier",
              "name",
              "spec",
              "type"
            ],
            "properties": {
              "description": {
                "type": "string",
                "desc": "This is the description for ServiceNowCreateStepNode"
              },
              "enforce": {
                "$ref": "#/definitions/pipeline/common/PolicyConfig"
              },
              "failureStrategies": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/pipeline/common/FailureStrategyConfig"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "identifier": {
                "type": "string",
                "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
              },
              "name": {
                "type": "string",
                "pattern": "^[a-zA-Z_0-9-.][-0-9a-zA-Z_\\s.]{0,127}$"
              },
              "strategy": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StrategyConfig"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "timeout": {
                "type": "string",
                "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
              },
              "type": {
                "type": "string",
                "enum": [
                  "ServiceNowCreate"
                ]
              },
              "when": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StepWhenCondition"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#",
            "allOf": [
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "ServiceNowCreate"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/custom/ServiceNowCreateStepInfo"
                    }
                  }
                }
              }
            ]
          },
          "ServiceNowCreateStepInfo": {
            "title": "ServiceNowCreateStepInfo",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/common/StepSpecType"
              },
              {
                "type": "object",
                "required": [
                  "connectorRef",
                  "ticketType"
                ],
                "properties": {
                  "connectorRef": {
                    "type": "string"
                  },
                  "delegateSelectors": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string",
                        "pattern": "(<\\+.+>.*)",
                        "minLength": 1
                      }
                    ]
                  },
                  "fields": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/pipeline/steps/custom/ServiceNowField"
                    }
                  },
                  "templateName": {
                    "type": "string"
                  },
                  "ticketType": {
                    "type": "string"
                  },
                  "useServiceNowTemplate": {
                    "type": "boolean"
                  },
                  "createType": {
                    "type": "string",
                    "enum": [
                      "Normal",
                      "Form",
                      "Standard"
                    ]
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "type": "object",
            "required": [
              "connectorRef",
              "ticketType"
            ],
            "properties": {
              "connectorRef": {
                "type": "string"
              },
              "delegateSelectors": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "(<\\+.+>.*)",
                    "minLength": 1
                  }
                ]
              },
              "fields": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/pipeline/steps/custom/ServiceNowField"
                }
              },
              "templateName": {
                "type": "string"
              },
              "ticketType": {
                "type": "string"
              },
              "useServiceNowTemplate": {
                "type": "boolean"
              },
              "description": {
                "desc": "This is the description for ServiceNowCreateStepInfo"
              },
              "createType": {
                "type": "string",
                "enum": [
                  "Normal",
                  "Form",
                  "Standard"
                ]
              }
            }
          },
          "ServiceNowField": {
            "title": "ServiceNowField",
            "type": "object",
            "required": [
              "name",
              "value"
            ],
            "properties": {
              "name": {
                "type": "string"
              },
              "value": {
                "type": "string"
              },
              "description": {
                "desc": "This is the description for ServiceNowField"
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "ServiceNowUpdateStepNode": {
            "title": "ServiceNowUpdateStepNode",
            "type": "object",
            "required": [
              "identifier",
              "name",
              "spec",
              "type"
            ],
            "properties": {
              "description": {
                "type": "string",
                "desc": "This is the description for ServiceNowUpdateStepNode"
              },
              "enforce": {
                "$ref": "#/definitions/pipeline/common/PolicyConfig"
              },
              "failureStrategies": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/pipeline/common/FailureStrategyConfig"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "identifier": {
                "type": "string",
                "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
              },
              "name": {
                "type": "string",
                "pattern": "^[a-zA-Z_0-9-.][-0-9a-zA-Z_\\s.]{0,127}$"
              },
              "strategy": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StrategyConfig"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "timeout": {
                "type": "string",
                "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
              },
              "type": {
                "type": "string",
                "enum": [
                  "ServiceNowUpdate"
                ]
              },
              "when": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StepWhenCondition"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#",
            "allOf": [
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "ServiceNowUpdate"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/custom/ServiceNowUpdateStepInfo"
                    }
                  }
                }
              }
            ]
          },
          "ServiceNowUpdateStepInfo": {
            "title": "ServiceNowUpdateStepInfo",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/common/StepSpecType"
              },
              {
                "type": "object",
                "required": [
                  "connectorRef",
                  "ticketType",
                  "useServiceNowTemplate"
                ],
                "oneOf": [
                  {
                    "required": [
                      "updateMultiple"
                    ]
                  },
                  {
                    "required": [
                      "ticketNumber"
                    ]
                  }
                ],
                "properties": {
                  "connectorRef": {
                    "type": "string"
                  },
                  "delegateSelectors": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string",
                        "pattern": "(<\\+.+>.*)",
                        "minLength": 1
                      }
                    ]
                  },
                  "fields": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/pipeline/steps/custom/ServiceNowField"
                    }
                  },
                  "templateName": {
                    "type": "string"
                  },
                  "ticketNumber": {
                    "type": "string"
                  },
                  "ticketType": {
                    "type": "string"
                  },
                  "useServiceNowTemplate": {
                    "type": "boolean"
                  },
                  "updateMultiple": {
                    "$ref": "#/definitions/pipeline/steps/custom/ServiceNowUpdateMultipleNode"
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "type": "object",
            "required": [
              "connectorRef",
              "ticketType",
              "useServiceNowTemplate"
            ],
            "oneOf": [
              {
                "required": [
                  "updateMultiple"
                ]
              },
              {
                "required": [
                  "ticketNumber"
                ]
              }
            ],
            "properties": {
              "connectorRef": {
                "type": "string"
              },
              "delegateSelectors": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "(<\\+.+>.*)",
                    "minLength": 1
                  }
                ]
              },
              "fields": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/pipeline/steps/custom/ServiceNowField"
                }
              },
              "templateName": {
                "type": "string"
              },
              "ticketNumber": {
                "type": "string"
              },
              "ticketType": {
                "type": "string"
              },
              "useServiceNowTemplate": {
                "type": "boolean"
              },
              "updateMultiple": {
                "$ref": "#/definitions/pipeline/steps/custom/ServiceNowUpdateMultipleNode"
              },
              "description": {
                "desc": "This is the description for ServiceNowUpdateStepInfo"
              }
            }
          },
          "ServiceNowUpdateMultipleNode": {
            "title": "ServiceNowUpdateMultipleNode",
            "type": "object",
            "required": [
              "spec",
              "type"
            ],
            "properties": {
              "description": {
                "type": "string",
                "desc": "This is the description for ServiceNowUpdateMultipleNode"
              },
              "type": {
                "type": "string",
                "enum": [
                  "CHANGE_TASK"
                ]
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#",
            "allOf": [
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "CHANGE_TASK"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/custom/ServiceNowUpdateMultipleChangeTaskSpec"
                    }
                  }
                }
              }
            ]
          },
          "ServiceNowUpdateMultipleChangeTaskSpec": {
            "title": "ServiceNowUpdateMultipleChangeTaskSpec",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/common/StepSpecType"
              },
              {
                "type": "object",
                "required": [
                  "changeRequestNumber"
                ],
                "properties": {
                  "changeRequestNumber": {
                    "type": "string"
                  },
                  "changeTaskType": {
                    "type": "string"
                  }
                }
              }
            ]
          },
          "ServiceNowImportSetStepNode": {
            "title": "ServiceNowImportSetStepNode",
            "type": "object",
            "required": [
              "identifier",
              "name",
              "spec",
              "type"
            ],
            "properties": {
              "description": {
                "type": "string",
                "desc": "This is the description for ServiceNowImportSetStepNode"
              },
              "enforce": {
                "$ref": "#/definitions/pipeline/common/PolicyConfig"
              },
              "failureStrategies": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/pipeline/common/FailureStrategyConfig"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "identifier": {
                "type": "string",
                "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
              },
              "name": {
                "type": "string",
                "pattern": "^[a-zA-Z_0-9-.][-0-9a-zA-Z_\\s.]{0,127}$"
              },
              "strategy": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StrategyConfig"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "timeout": {
                "type": "string",
                "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
              },
              "type": {
                "type": "string",
                "enum": [
                  "ServiceNowImportSet"
                ]
              },
              "when": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StepWhenCondition"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#",
            "allOf": [
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "ServiceNowImportSet"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/custom/ServiceNowImportSetStepInfo"
                    }
                  }
                }
              }
            ]
          },
          "ServiceNowImportSetStepInfo": {
            "title": "ServiceNowImportSetStepInfo",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/common/StepSpecType"
              },
              {
                "type": "object",
                "required": [
                  "connectorRef",
                  "importData",
                  "stagingTableName"
                ],
                "properties": {
                  "connectorRef": {
                    "type": "string"
                  },
                  "delegateSelectors": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string",
                        "pattern": "(<\\+.+>.*)",
                        "minLength": 1
                      }
                    ]
                  },
                  "importData": {
                    "$ref": "#/definitions/pipeline/steps/custom/ImportDataSpecWrapper"
                  },
                  "stagingTableName": {
                    "type": "string"
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "type": "object",
            "required": [
              "connectorRef",
              "importData",
              "stagingTableName"
            ],
            "properties": {
              "connectorRef": {
                "type": "string"
              },
              "delegateSelectors": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "(<\\+.+>.*)",
                    "minLength": 1
                  }
                ]
              },
              "importData": {
                "$ref": "#/definitions/pipeline/steps/custom/ImportDataSpecWrapper"
              },
              "stagingTableName": {
                "type": "string"
              },
              "description": {
                "desc": "This is the description for ServiceNowImportSetStepInfo"
              }
            }
          },
          "ImportDataSpecWrapper": {
            "title": "ImportDataSpecWrapper",
            "type": "object",
            "required": [
              "spec",
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "Json",
                  "KeyValues"
                ]
              },
              "description": {
                "desc": "This is the description for ImportDataSpecWrapper"
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#",
            "allOf": [
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "Json"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/custom/JsonImportDataSpec"
                    }
                  }
                }
              },
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "KeyValues"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/custom/KeyValuesImportDataSpec"
                    }
                  }
                }
              }
            ]
          },
          "JsonImportDataSpec": {
            "title": "JsonImportDataSpec",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/steps/custom/ImportDataSpec"
              },
              {
                "type": "object",
                "required": [
                  "jsonBody"
                ],
                "properties": {
                  "jsonBody": {
                    "type": "string"
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "properties": {
              "description": {
                "desc": "This is the description for JsonImportDataSpec"
              }
            }
          },
          "ImportDataSpec": {
            "title": "ImportDataSpec",
            "type": "object",
            "discriminator": "type",
            "$schema": "http://json-schema.org/draft-07/schema#",
            "properties": {
              "description": {
                "desc": "This is the description for ImportDataSpec"
              }
            }
          },
          "KeyValuesImportDataSpec": {
            "title": "KeyValuesImportDataSpec",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/steps/custom/ImportDataSpec"
              },
              {
                "type": "object",
                "required": [
                  "fields"
                ],
                "properties": {
                  "fields": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/pipeline/steps/custom/ServiceNowField"
                    }
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "properties": {
              "description": {
                "desc": "This is the description for KeyValuesImportDataSpec"
              }
            }
          },
          "FlagConfigurationStepNode": {
            "title": "FlagConfigurationStepNode",
            "type": "object",
            "required": [
              "identifier",
              "name",
              "spec",
              "type"
            ],
            "properties": {
              "description": {
                "type": "string",
                "desc": "This is the description for FlagConfigurationStepNode"
              },
              "enforce": {
                "$ref": "#/definitions/pipeline/common/PolicyConfig"
              },
              "failureStrategies": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/pipeline/common/FailureStrategyConfig"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "identifier": {
                "type": "string",
                "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
              },
              "name": {
                "type": "string",
                "pattern": "^[a-zA-Z_0-9-.][-0-9a-zA-Z_\\s.]{0,127}$"
              },
              "strategy": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StrategyConfig"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "timeout": {
                "type": "string",
                "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
              },
              "type": {
                "type": "string",
                "enum": [
                  "FlagConfiguration"
                ]
              },
              "when": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StepWhenCondition"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#",
            "allOf": [
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "FlagConfiguration"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/custom/FlagConfigurationStepInfo"
                    }
                  }
                }
              }
            ]
          },
          "FlagConfigurationStepInfo": {
            "title": "FlagConfigurationStepInfo",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/common/StepSpecType"
              },
              {
                "type": "object",
                "required": [
                  "environment",
                  "feature",
                  "instructions"
                ],
                "properties": {
                  "environment": {
                    "type": "string"
                  },
                  "feature": {
                    "type": "string"
                  },
                  "instructions": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/pipeline/steps/custom/PatchInstruction"
                        }
                      },
                      {
                        "type": "string",
                        "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                        "minLength": 1
                      }
                    ]
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "type": "object",
            "required": [
              "environment",
              "feature",
              "instructions"
            ],
            "properties": {
              "environment": {
                "type": "string"
              },
              "feature": {
                "type": "string"
              },
              "instructions": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/pipeline/steps/custom/PatchInstruction"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                    "minLength": 1
                  }
                ]
              },
              "description": {
                "desc": "This is the description for FlagConfigurationStepInfo"
              }
            }
          },
          "PatchInstruction": {
            "title": "PatchInstruction",
            "type": "object",
            "discriminator": "type",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "SetFeatureFlagState",
                  "SetOnVariation",
                  "SetOffVariation",
                  "SetDefaultVariations",
                  "AddRule",
                  "UpdateRule",
                  "AddTargetsToVariationTargetMap",
                  "RemoveTargetsToVariationTargetMap",
                  "AddSegmentToVariationTargetMap",
                  "RemoveSegmentsToVariationTargetMap"
                ]
              },
              "description": {
                "desc": "This is the description for PatchInstruction"
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "PolicyStepNode": {
            "title": "PolicyStepNode",
            "type": "object",
            "required": [
              "identifier",
              "name",
              "spec",
              "type"
            ],
            "properties": {
              "description": {
                "type": "string",
                "desc": "This is the description for PolicyStepNode"
              },
              "enforce": {
                "$ref": "#/definitions/pipeline/common/PolicyConfig"
              },
              "failureStrategies": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/pipeline/common/FailureStrategyConfig"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "identifier": {
                "type": "string",
                "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
              },
              "name": {
                "type": "string",
                "pattern": "^[a-zA-Z_0-9-.][-0-9a-zA-Z_\\s.]{0,127}$"
              },
              "strategy": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StrategyConfig"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "timeout": {
                "type": "string",
                "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
              },
              "type": {
                "type": "string",
                "enum": [
                  "Policy"
                ]
              },
              "when": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StepWhenCondition"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#",
            "allOf": [
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "Policy"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/custom/PolicyStepInfo"
                    }
                  }
                }
              }
            ]
          },
          "PolicyStepInfo": {
            "title": "PolicyStepInfo",
            "allOf": [
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "Custom"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "policySpec": {
                      "$ref": "#/definitions/pipeline/steps/custom/CustomPolicyStepSpec"
                    }
                  }
                },
                "$ref": "#/definitions/pipeline/common/StepSpecType"
              },
              {
                "type": "object",
                "required": [
                  "policySets"
                ],
                "properties": {
                  "metadata": {
                    "type": "string"
                  },
                  "policySets": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string",
                        "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                        "minLength": 1
                      }
                    ]
                  },
                  "type": {
                    "type": "string"
                  }
                }
              },
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "Custom"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "policySpec": {
                      "$ref": "#/definitions/pipeline/steps/custom/CustomPolicyStepSpec"
                    }
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "type": "object",
            "required": [
              "policySets"
            ],
            "properties": {
              "metadata": {
                "type": "string"
              },
              "policySets": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                    "minLength": 1
                  }
                ]
              },
              "type": {
                "type": "string"
              },
              "description": {
                "desc": "This is the description for PolicyStepInfo"
              }
            }
          },
          "CustomPolicyStepSpec": {
            "title": "CustomPolicyStepSpec",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/steps/custom/PolicySpec"
              },
              {
                "type": "object",
                "required": [
                  "payload"
                ],
                "properties": {
                  "payload": {
                    "type": "string"
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "properties": {
              "description": {
                "desc": "This is the description for CustomPolicyStepSpec"
              }
            }
          },
          "PolicySpec": {
            "title": "PolicySpec",
            "type": "object",
            "discriminator": "type",
            "properties": {
              "type": {
                "type": "string"
              },
              "description": {
                "desc": "This is the description for PolicySpec"
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "WaitStepNode": {
            "title": "WaitStepNode",
            "type": "object",
            "required": [
              "identifier",
              "name",
              "spec",
              "type"
            ],
            "properties": {
              "description": {
                "type": "string",
                "desc": "This is the description for WaitStepNode"
              },
              "enforce": {
                "$ref": "#/definitions/pipeline/common/PolicyConfig"
              },
              "failureStrategies": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/pipeline/common/FailureStrategyConfig"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "identifier": {
                "type": "string",
                "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
              },
              "name": {
                "type": "string",
                "pattern": "^[a-zA-Z_0-9-.][-0-9a-zA-Z_\\s.]{0,127}$"
              },
              "strategy": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StrategyConfig"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "type": {
                "type": "string",
                "enum": [
                  "Wait"
                ]
              },
              "when": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StepWhenCondition"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#",
            "allOf": [
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "Wait"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/custom/WaitStepInfo"
                    }
                  }
                }
              }
            ]
          },
          "WaitStepInfo": {
            "title": "WaitStepInfo",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/common/StepSpecType"
              },
              {
                "type": "object",
                "required": [
                  "duration"
                ],
                "properties": {
                  "duration": {
                    "type": "string",
                    "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(<\\+input>.*)|(.*<\\+.*>.*)|(^$))$"
                  },
                  "metadata": {
                    "type": "string"
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "type": "object",
            "required": [
              "duration"
            ],
            "properties": {
              "duration": {
                "type": "string",
                "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(<\\+input>.*)|(.*<\\+.*>.*)|(^$))$"
              },
              "metadata": {
                "type": "string"
              },
              "description": {
                "desc": "This is the description for WaitStepInfo"
              }
            }
          },
          "ContainerStepNode": {
            "title": "ContainerStepNode",
            "type": "object",
            "required": [
              "identifier",
              "name",
              "spec",
              "type"
            ],
            "properties": {
              "description": {
                "type": "string",
                "desc": "This is the description for ContainerStepNode"
              },
              "enforce": {
                "$ref": "#/definitions/pipeline/common/PolicyConfig"
              },
              "failureStrategies": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/pipeline/common/FailureStrategyConfig"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "identifier": {
                "type": "string",
                "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
              },
              "name": {
                "type": "string",
                "pattern": "^[a-zA-Z_0-9-.][-0-9a-zA-Z_\\s.]{0,127}$"
              },
              "strategy": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StrategyConfig"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "timeout": {
                "type": "string",
                "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
              },
              "type": {
                "type": "string",
                "enum": [
                  "Container"
                ]
              },
              "when": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StepWhenCondition"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#",
            "allOf": [
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "Container"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/custom/ContainerStepInfo"
                    }
                  }
                }
              }
            ]
          },
          "ContainerStepInfo": {
            "title": "ContainerStepInfo",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/common/StepSpecType"
              },
              {
                "type": "object",
                "required": [
                  "command",
                  "infrastructure"
                ],
                "properties": {
                  "command": {
                    "type": "string"
                  },
                  "connectorRef": {
                    "type": "string"
                  },
                  "entrypoint": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "envVariables": {
                    "oneOf": [
                      {
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "image": {
                    "type": "string"
                  },
                  "imagePullPolicy": {
                    "oneOf": [
                      {
                        "type": "string",
                        "enum": [
                          "Always",
                          "Never",
                          "IfNotPresent"
                        ]
                      },
                      {
                        "type": "string",
                        "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                        "minLength": 1
                      }
                    ]
                  },
                  "infrastructure": {
                    "oneOf": [
                      {
                        "$ref": "#/definitions/pipeline/steps/custom/ContainerK8sInfra"
                      }
                    ]
                  },
                  "metadata": {
                    "type": "string"
                  },
                  "outputVariables": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/pipeline/common/OutputNGVariable"
                        }
                      },
                      {
                        "type": "string",
                        "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                        "minLength": 1
                      }
                    ]
                  },
                  "privileged": {
                    "oneOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "type": "string",
                        "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                        "minLength": 1
                      }
                    ]
                  },
                  "settings": {
                    "oneOf": [
                      {
                        "$ref": "#/definitions/pipeline/common/ParameterFieldMapStringJsonNode"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "shell": {
                    "oneOf": [
                      {
                        "type": "string",
                        "enum": [
                          "Sh",
                          "Bash",
                          "Powershell",
                          "Pwsh",
                          "Python"
                        ]
                      },
                      {
                        "type": "string",
                        "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                        "minLength": 1
                      }
                    ]
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "type": "object",
            "required": [
              "command",
              "infrastructure"
            ],
            "properties": {
              "command": {
                "type": "string"
              },
              "connectorRef": {
                "type": "string"
              },
              "entrypoint": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "envVariables": {
                "oneOf": [
                  {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "image": {
                "type": "string"
              },
              "imagePullPolicy": {
                "oneOf": [
                  {
                    "type": "string",
                    "enum": [
                      "Always",
                      "Never",
                      "IfNotPresent"
                    ]
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                    "minLength": 1
                  }
                ]
              },
              "infrastructure": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/steps/custom/ContainerK8sInfra"
                  }
                ]
              },
              "metadata": {
                "type": "string"
              },
              "outputVariables": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/pipeline/common/OutputNGVariable"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                    "minLength": 1
                  }
                ]
              },
              "privileged": {
                "oneOf": [
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                    "minLength": 1
                  }
                ]
              },
              "settings": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/ParameterFieldMapStringJsonNode"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "shell": {
                "oneOf": [
                  {
                    "type": "string",
                    "enum": [
                      "Sh",
                      "Bash",
                      "Powershell",
                      "Pwsh",
                      "Python"
                    ]
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                    "minLength": 1
                  }
                ]
              },
              "description": {
                "desc": "This is the description for ContainerStepInfo"
              }
            }
          },
          "ContainerK8sInfra": {
            "title": "ContainerK8sInfra",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/steps/custom/ContainerStepInfra"
              },
              {
                "type": "object",
                "required": [
                  "spec",
                  "type"
                ],
                "properties": {
                  "spec": {
                    "$ref": "#/definitions/pipeline/steps/custom/ContainerInfraYamlSpec"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "KubernetesDirect"
                    ]
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "properties": {
              "description": {
                "desc": "This is the description for ContainerK8sInfra"
              }
            }
          },
          "ContainerStepInfra": {
            "title": "ContainerStepInfra",
            "type": "object",
            "discriminator": "type",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "KubernetesDirect"
                ]
              },
              "description": {
                "desc": "This is the description for ContainerStepInfra"
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "ContainerInfraYamlSpec": {
            "title": "ContainerInfraYamlSpec",
            "type": "object",
            "required": [
              "connectorRef",
              "namespace"
            ],
            "properties": {
              "annotations": {
                "oneOf": [
                  {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "automountServiceAccountToken": {
                "oneOf": [
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                    "minLength": 1
                  }
                ]
              },
              "connectorRef": {
                "type": "string"
              },
              "containerSecurityContext": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/steps/custom/SecurityContext"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                    "minLength": 1
                  }
                ]
              },
              "initTimeout": {
                "type": "string"
              },
              "labels": {
                "oneOf": [
                  {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "namespace": {
                "type": "string",
                "minLength": 1,
                "maxLength": 2147483647
              },
              "nodeSelector": {
                "oneOf": [
                  {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                    "minLength": 1
                  }
                ]
              },
              "os": {
                "oneOf": [
                  {
                    "type": "string",
                    "enum": [
                      "Linux",
                      "MacOS",
                      "Windows"
                    ]
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                    "minLength": 1
                  }
                ]
              },
              "priorityClassName": {
                "type": "string"
              },
              "resources": {
                "$ref": "#/definitions/pipeline/common/ContainerResource"
              },
              "runAsUser": {
                "oneOf": [
                  {
                    "type": "integer",
                    "format": "int32"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "serviceAccountName": {
                "type": "string"
              },
              "tolerations": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/pipeline/steps/custom/Toleration"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                    "minLength": 1
                  }
                ]
              },
              "volumes": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/pipeline/steps/custom/ContainerVolume"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                    "minLength": 1
                  }
                ]
              },
              "description": {
                "desc": "This is the description for ContainerInfraYamlSpec"
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "SecurityContext": {
            "title": "SecurityContext",
            "type": "object",
            "properties": {
              "allowPrivilegeEscalation": {
                "oneOf": [
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                    "minLength": 1
                  }
                ]
              },
              "capabilities": {
                "$ref": "#/definitions/pipeline/steps/custom/Capabilities"
              },
              "privileged": {
                "oneOf": [
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                    "minLength": 1
                  }
                ]
              },
              "procMount": {
                "type": "string"
              },
              "readOnlyRootFilesystem": {
                "oneOf": [
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                    "minLength": 1
                  }
                ]
              },
              "runAsGroup": {
                "oneOf": [
                  {
                    "type": "integer",
                    "format": "int32"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                    "minLength": 1
                  }
                ]
              },
              "runAsNonRoot": {
                "oneOf": [
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                    "minLength": 1
                  }
                ]
              },
              "runAsUser": {
                "oneOf": [
                  {
                    "type": "integer",
                    "format": "int32"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "description": {
                "desc": "This is the description for SecurityContext"
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "Capabilities": {
            "title": "Capabilities",
            "type": "object",
            "properties": {
              "add": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                    "minLength": 1
                  }
                ]
              },
              "drop": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                    "minLength": 1
                  }
                ]
              },
              "description": {
                "desc": "This is the description for Capabilities"
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "Toleration": {
            "title": "Toleration",
            "type": "object",
            "properties": {
              "effect": {
                "type": "string"
              },
              "key": {
                "type": "string"
              },
              "operator": {
                "type": "string"
              },
              "tolerationSeconds": {
                "type": "integer",
                "format": "int32"
              },
              "value": {
                "type": "string"
              },
              "description": {
                "desc": "This is the description for Toleration"
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "ContainerVolume": {
            "title": "ContainerVolume",
            "type": "object",
            "discriminator": "type",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "EmptyDir",
                  "PersistentVolumeClaim",
                  "HostPath"
                ]
              },
              "description": {
                "desc": "This is the description for ContainerVolume"
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        "common": {
          "BackgroundStepNode": {
            "title": "BackgroundStepNode",
            "type": "object",
            "required": [
              "identifier",
              "name",
              "spec",
              "type"
            ],
            "properties": {
              "description": {
                "type": "string",
                "desc": "This is the description for BackgroundStepNode"
              },
              "enforce": {
                "$ref": "#/definitions/pipeline/common/PolicyConfig"
              },
              "failureStrategies": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/pipeline/common/FailureStrategyConfig"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "identifier": {
                "type": "string",
                "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
              },
              "name": {
                "type": "string",
                "pattern": "^[a-zA-Z_0-9-.][-0-9a-zA-Z_\\s.]{0,127}$"
              },
              "strategy": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StrategyConfig"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "timeout": {
                "type": "string",
                "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
              },
              "type": {
                "type": "string",
                "enum": [
                  "Background"
                ]
              },
              "when": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StepWhenCondition"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#",
            "allOf": [
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "Background"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/common/BackgroundStepInfo"
                    }
                  }
                }
              }
            ]
          },
          "BackgroundStepInfo": {
            "title": "BackgroundStepInfo",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/common/StepSpecType"
              },
              {
                "type": "object",
                "properties": {
                  "command": {
                    "type": "string"
                  },
                  "connectorRef": {
                    "type": "string"
                  },
                  "entrypoint": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "envVariables": {
                    "oneOf": [
                      {
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "image": {
                    "type": "string"
                  },
                  "imagePullPolicy": {
                    "oneOf": [
                      {
                        "type": "string",
                        "enum": [
                          "Always",
                          "Never",
                          "IfNotPresent"
                        ]
                      },
                      {
                        "type": "string",
                        "pattern": "(<\\+.+>.*)",
                        "minLength": 1
                      }
                    ]
                  },
                  "portBindings": {
                    "oneOf": [
                      {
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "privileged": {
                    "oneOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "type": "string",
                        "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                        "minLength": 1
                      }
                    ]
                  },
                  "reports": {
                    "oneOf": [
                      {
                        "$ref": "#/definitions/pipeline/steps/common/UnitTestReport"
                      },
                      {
                        "type": "string",
                        "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                        "minLength": 1
                      }
                    ]
                  },
                  "resources": {
                    "$ref": "#/definitions/pipeline/common/ContainerResource"
                  },
                  "runAsUser": {
                    "oneOf": [
                      {
                        "type": "integer",
                        "format": "int32"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "shell": {
                    "oneOf": [
                      {
                        "type": "string",
                        "enum": [
                          "Sh",
                          "Bash",
                          "Powershell",
                          "Pwsh",
                          "Python"
                        ]
                      },
                      {
                        "type": "string",
                        "pattern": "(<\\+.+>.*)",
                        "minLength": 1
                      }
                    ]
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "type": "object",
            "properties": {
              "command": {
                "type": "string"
              },
              "connectorRef": {
                "type": "string"
              },
              "entrypoint": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "envVariables": {
                "oneOf": [
                  {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "image": {
                "type": "string"
              },
              "imagePullPolicy": {
                "oneOf": [
                  {
                    "type": "string",
                    "enum": [
                      "Always",
                      "Never",
                      "IfNotPresent"
                    ]
                  },
                  {
                    "type": "string",
                    "pattern": "(<\\+.+>.*)",
                    "minLength": 1
                  }
                ]
              },
              "portBindings": {
                "oneOf": [
                  {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "privileged": {
                "oneOf": [
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                    "minLength": 1
                  }
                ]
              },
              "reports": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/steps/common/UnitTestReport"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                    "minLength": 1
                  }
                ]
              },
              "resources": {
                "$ref": "#/definitions/pipeline/common/ContainerResource"
              },
              "runAsUser": {
                "oneOf": [
                  {
                    "type": "integer",
                    "format": "int32"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "shell": {
                "oneOf": [
                  {
                    "type": "string",
                    "enum": [
                      "Sh",
                      "Bash",
                      "Powershell",
                      "Pwsh",
                      "Python"
                    ]
                  },
                  {
                    "type": "string",
                    "pattern": "(<\\+.+>.*)",
                    "minLength": 1
                  }
                ]
              },
              "description": {
                "desc": "This is the description for BackgroundStepInfo"
              }
            }
          },
          "UnitTestReport": {
            "title": "UnitTestReport",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "JUnit"
                ]
              },
              "description": {
                "desc": "This is the description for UnitTestReport"
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#",
            "allOf": [
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "JUnit"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/common/JUnitTestReport"
                    }
                  }
                }
              }
            ]
          },
          "JUnitTestReport": {
            "title": "JUnitTestReport",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/steps/common/UnitTestReportSpec"
              },
              {
                "type": "object",
                "properties": {
                  "paths": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "properties": {
              "description": {
                "desc": "This is the description for JUnitTestReport"
              }
            }
          },
          "UnitTestReportSpec": {
            "title": "UnitTestReportSpec",
            "type": "object",
            "$schema": "http://json-schema.org/draft-07/schema#",
            "properties": {
              "description": {
                "desc": "This is the description for UnitTestReportSpec"
              }
            }
          },
          "RunStepNode": {
            "title": "RunStepNode",
            "type": "object",
            "required": [
              "identifier",
              "name",
              "spec",
              "type"
            ],
            "properties": {
              "description": {
                "type": "string",
                "desc": "This is the description for RunStepNode"
              },
              "enforce": {
                "$ref": "#/definitions/pipeline/common/PolicyConfig"
              },
              "failureStrategies": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/pipeline/common/FailureStrategyConfig"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "identifier": {
                "type": "string",
                "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
              },
              "name": {
                "type": "string",
                "pattern": "^[a-zA-Z_0-9-.][-0-9a-zA-Z_\\s.]{0,127}$"
              },
              "strategy": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StrategyConfig"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "timeout": {
                "type": "string",
                "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
              },
              "type": {
                "type": "string",
                "enum": [
                  "Run"
                ]
              },
              "when": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StepWhenCondition"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#",
            "allOf": [
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "Run"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/common/RunStepInfo"
                    }
                  }
                }
              }
            ]
          },
          "RunStepInfo": {
            "title": "RunStepInfo",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/common/StepSpecType"
              },
              {
                "type": "object",
                "required": [
                  "command"
                ],
                "properties": {
                  "command": {
                    "type": "string"
                  },
                  "connectorRef": {
                    "type": "string"
                  },
                  "envVariables": {
                    "oneOf": [
                      {
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "image": {
                    "type": "string"
                  },
                  "imagePullPolicy": {
                    "oneOf": [
                      {
                        "type": "string",
                        "enum": [
                          "Always",
                          "Never",
                          "IfNotPresent"
                        ]
                      },
                      {
                        "type": "string",
                        "pattern": "(<\\+.+>.*)",
                        "minLength": 1
                      }
                    ]
                  },
                  "outputVariables": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/pipeline/common/OutputNGVariable"
                        }
                      },
                      {
                        "type": "string",
                        "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                        "minLength": 1
                      }
                    ]
                  },
                  "privileged": {
                    "oneOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "type": "string",
                        "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                        "minLength": 1
                      }
                    ]
                  },
                  "reports": {
                    "oneOf": [
                      {
                        "$ref": "#/definitions/pipeline/steps/common/UnitTestReport"
                      },
                      {
                        "type": "string",
                        "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                        "minLength": 1
                      }
                    ]
                  },
                  "resources": {
                    "$ref": "#/definitions/pipeline/common/ContainerResource"
                  },
                  "runAsUser": {
                    "oneOf": [
                      {
                        "type": "integer",
                        "format": "int32"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "shell": {
                    "oneOf": [
                      {
                        "type": "string",
                        "enum": [
                          "Sh",
                          "Bash",
                          "Powershell",
                          "Pwsh",
                          "Python"
                        ]
                      },
                      {
                        "type": "string",
                        "pattern": "(<\\+.+>.*)",
                        "minLength": 1
                      }
                    ]
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "type": "object",
            "required": [
              "command"
            ],
            "properties": {
              "command": {
                "type": "string"
              },
              "connectorRef": {
                "type": "string"
              },
              "envVariables": {
                "oneOf": [
                  {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "image": {
                "type": "string"
              },
              "imagePullPolicy": {
                "oneOf": [
                  {
                    "type": "string",
                    "enum": [
                      "Always",
                      "Never",
                      "IfNotPresent"
                    ]
                  },
                  {
                    "type": "string",
                    "pattern": "(<\\+.+>.*)",
                    "minLength": 1
                  }
                ]
              },
              "outputVariables": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/pipeline/common/OutputNGVariable"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                    "minLength": 1
                  }
                ]
              },
              "privileged": {
                "oneOf": [
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                    "minLength": 1
                  }
                ]
              },
              "reports": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/steps/common/UnitTestReport"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                    "minLength": 1
                  }
                ]
              },
              "resources": {
                "$ref": "#/definitions/pipeline/common/ContainerResource"
              },
              "runAsUser": {
                "oneOf": [
                  {
                    "type": "integer",
                    "format": "int32"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "shell": {
                "oneOf": [
                  {
                    "type": "string",
                    "enum": [
                      "Sh",
                      "Bash",
                      "Powershell",
                      "Pwsh",
                      "Python"
                    ]
                  },
                  {
                    "type": "string",
                    "pattern": "(<\\+.+>.*)",
                    "minLength": 1
                  }
                ]
              },
              "description": {
                "desc": "This is the description for RunStepInfo"
              }
            }
          },
          "PluginStepNode": {
            "title": "PluginStepNode",
            "type": "object",
            "required": [
              "identifier",
              "name",
              "spec",
              "type"
            ],
            "properties": {
              "description": {
                "type": "string",
                "desc": "This is the description for PluginStepNode"
              },
              "enforce": {
                "$ref": "#/definitions/pipeline/common/PolicyConfig"
              },
              "failureStrategies": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/pipeline/common/FailureStrategyConfig"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "identifier": {
                "type": "string",
                "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
              },
              "name": {
                "type": "string",
                "pattern": "^[a-zA-Z_0-9-.][-0-9a-zA-Z_\\s.]{0,127}$"
              },
              "strategy": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StrategyConfig"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "timeout": {
                "type": "string",
                "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
              },
              "type": {
                "type": "string",
                "enum": [
                  "Plugin"
                ]
              },
              "when": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StepWhenCondition"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#",
            "allOf": [
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "Plugin"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/common/PluginStepInfo"
                    }
                  }
                }
              }
            ]
          },
          "PluginStepInfo": {
            "title": "PluginStepInfo",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/steps/ci/CIStepInfo"
              },
              {
                "type": "object",
                "properties": {
                  "connectorRef": {
                    "type": "string"
                  },
                  "entrypoint": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "image": {
                    "type": "string"
                  },
                  "imagePullPolicy": {
                    "oneOf": [
                      {
                        "type": "string",
                        "enum": [
                          "Always",
                          "Never",
                          "IfNotPresent"
                        ]
                      },
                      {
                        "type": "string",
                        "pattern": "(<\\+.+>.*)",
                        "minLength": 1
                      }
                    ]
                  },
                  "privileged": {
                    "oneOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "type": "string",
                        "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                        "minLength": 1
                      }
                    ]
                  },
                  "reports": {
                    "oneOf": [
                      {
                        "$ref": "#/definitions/pipeline/steps/common/UnitTestReport"
                      },
                      {
                        "type": "string",
                        "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                        "minLength": 1
                      }
                    ]
                  },
                  "resources": {
                    "$ref": "#/definitions/pipeline/common/ContainerResource"
                  },
                  "runAsUser": {
                    "oneOf": [
                      {
                        "type": "integer",
                        "format": "int32"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "settings": {
                    "oneOf": [
                      {
                        "$ref": "#/definitions/pipeline/common/ParameterFieldMapStringJsonNode"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "uses": {
                    "type": "string"
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "type": "object",
            "properties": {
              "connectorRef": {
                "type": "string"
              },
              "entrypoint": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "image": {
                "type": "string"
              },
              "imagePullPolicy": {
                "oneOf": [
                  {
                    "type": "string",
                    "enum": [
                      "Always",
                      "Never",
                      "IfNotPresent"
                    ]
                  },
                  {
                    "type": "string",
                    "pattern": "(<\\+.+>.*)",
                    "minLength": 1
                  }
                ]
              },
              "privileged": {
                "oneOf": [
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                    "minLength": 1
                  }
                ]
              },
              "reports": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/steps/common/UnitTestReport"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                    "minLength": 1
                  }
                ]
              },
              "resources": {
                "$ref": "#/definitions/pipeline/common/ContainerResource"
              },
              "runAsUser": {
                "oneOf": [
                  {
                    "type": "integer",
                    "format": "int32"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "settings": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/ParameterFieldMapStringJsonNode"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "uses": {
                "type": "string"
              },
              "description": {
                "desc": "This is the description for PluginStepInfo"
              }
            }
          },
          "ActionStepNode": {
            "title": "ActionStepNode",
            "type": "object",
            "required": [
              "identifier",
              "name",
              "spec",
              "type"
            ],
            "properties": {
              "description": {
                "type": "string",
                "desc": "This is the description for ActionStepNode"
              },
              "enforce": {
                "$ref": "#/definitions/pipeline/common/PolicyConfig"
              },
              "failureStrategies": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/pipeline/common/FailureStrategyConfig"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "identifier": {
                "type": "string",
                "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
              },
              "name": {
                "type": "string",
                "pattern": "^[a-zA-Z_0-9-.][-0-9a-zA-Z_\\s.]{0,127}$"
              },
              "strategy": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StrategyConfig"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "timeout": {
                "type": "string",
                "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
              },
              "type": {
                "type": "string",
                "enum": [
                  "Action"
                ]
              },
              "when": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StepWhenCondition"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#",
            "allOf": [
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "Action"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/common/ActionStepInfo"
                    }
                  }
                }
              }
            ]
          },
          "ActionStepInfo": {
            "title": "ActionStepInfo",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/steps/ci/CIStepInfo"
              },
              {
                "type": "object",
                "required": [
                  "uses"
                ],
                "properties": {
                  "env": {
                    "oneOf": [
                      {
                        "$ref": "#/definitions/pipeline/steps/common/ParameterFieldMapStringString"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "uses": {
                    "type": "string"
                  },
                  "with": {
                    "oneOf": [
                      {
                        "$ref": "#/definitions/pipeline/steps/common/ParameterFieldMapStringString"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "type": "object",
            "required": [
              "uses"
            ],
            "properties": {
              "env": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/steps/common/ParameterFieldMapStringString"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "uses": {
                "type": "string"
              },
              "with": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/steps/common/ParameterFieldMapStringString"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "description": {
                "desc": "This is the description for ActionStepInfo"
              }
            }
          },
          "ParameterFieldMapStringString": {
            "title": "ParameterFieldMapStringString",
            "type": "object",
            "properties": {
              "defaultValue": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "executionInput": {
                "type": "boolean"
              },
              "expression": {
                "type": "boolean"
              },
              "expressionValue": {
                "type": "string"
              },
              "inputSetValidator": {
                "$ref": "#/definitions/pipeline/common/InputSetValidator"
              },
              "jsonResponseField": {
                "type": "boolean"
              },
              "responseField": {
                "type": "string"
              },
              "typeString": {
                "type": "boolean"
              },
              "value": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "description": {
                "desc": "This is the description for ParameterFieldMapStringString"
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "AwsCdkBootstrapStepNode": {
            "title": "AwsCdkBootstrapStepNode",
            "type": "object",
            "required": [
              "identifier",
              "name",
              "type"
            ],
            "properties": {
              "description": {
                "type": "string",
                "desc": "This is the description for AwsCdkBootstrapStepNode"
              },
              "enforce": {
                "$ref": "#/definitions/pipeline/common/PolicyConfig"
              },
              "failureStrategies": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/pipeline/common/FailureStrategyConfig"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "identifier": {
                "type": "string",
                "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
              },
              "name": {
                "type": "string",
                "pattern": "^[a-zA-Z_0-9-.][-0-9a-zA-Z_\\s.]{0,127}$"
              },
              "strategy": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StrategyConfig"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "timeout": {
                "type": "string",
                "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
              },
              "type": {
                "type": "string",
                "enum": [
                  "AwsCdkBootstrap"
                ]
              },
              "when": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StepWhenCondition"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#",
            "allOf": [
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "AwsCdkBootstrap"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/common/AwsCdkBootstrapStepInfo"
                    }
                  }
                }
              }
            ]
          },
          "AwsCdkBootstrapStepInfo": {
            "title": "AwsCdkBootstrapStepInfo",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/common/StepSpecType"
              },
              {
                "type": "object",
                "required": [
                  "connectorRef",
                  "image"
                ],
                "properties": {
                  "appPath": {
                    "type": "string"
                  },
                  "commandOptions": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string",
                        "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                        "minLength": 1
                      }
                    ]
                  },
                  "connectorRef": {
                    "type": "string"
                  },
                  "delegateSelectors": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string",
                        "pattern": "(<\\+.+>.*)",
                        "minLength": 1
                      }
                    ]
                  },
                  "envVariables": {
                    "oneOf": [
                      {
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "image": {
                    "type": "string"
                  },
                  "imagePullPolicy": {
                    "oneOf": [
                      {
                        "type": "string",
                        "enum": [
                          "Always",
                          "Never",
                          "IfNotPresent"
                        ]
                      },
                      {
                        "type": "string",
                        "pattern": "(<\\+.+>.*)",
                        "minLength": 1
                      }
                    ]
                  },
                  "privileged": {
                    "oneOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "type": "string",
                        "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                        "minLength": 1
                      }
                    ]
                  },
                  "resources": {
                    "$ref": "#/definitions/pipeline/common/ContainerResource"
                  },
                  "runAsUser": {
                    "oneOf": [
                      {
                        "type": "integer",
                        "format": "int32"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "type": "object",
            "required": [
              "connectorRef",
              "image"
            ],
            "properties": {
              "appPath": {
                "type": "string"
              },
              "commandOptions": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                    "minLength": 1
                  }
                ]
              },
              "connectorRef": {
                "type": "string"
              },
              "delegateSelectors": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "(<\\+.+>.*)",
                    "minLength": 1
                  }
                ]
              },
              "envVariables": {
                "oneOf": [
                  {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "image": {
                "type": "string"
              },
              "imagePullPolicy": {
                "oneOf": [
                  {
                    "type": "string",
                    "enum": [
                      "Always",
                      "Never",
                      "IfNotPresent"
                    ]
                  },
                  {
                    "type": "string",
                    "pattern": "(<\\+.+>.*)",
                    "minLength": 1
                  }
                ]
              },
              "privileged": {
                "oneOf": [
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                    "minLength": 1
                  }
                ]
              },
              "resources": {
                "$ref": "#/definitions/pipeline/common/ContainerResource"
              },
              "runAsUser": {
                "oneOf": [
                  {
                    "type": "integer",
                    "format": "int32"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "description": {
                "desc": "This is the description for AwsCdkBootstrapStepInfo"
              }
            }
          },
          "AwsCdkSynthStepNode": {
            "title": "AwsCdkSynthStepNode",
            "type": "object",
            "required": [
              "identifier",
              "name",
              "type"
            ],
            "properties": {
              "description": {
                "type": "string",
                "desc": "This is the description for AwsCdkSynthStepNode"
              },
              "enforce": {
                "$ref": "#/definitions/pipeline/common/PolicyConfig"
              },
              "failureStrategies": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/pipeline/common/FailureStrategyConfig"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "identifier": {
                "type": "string",
                "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
              },
              "name": {
                "type": "string",
                "pattern": "^[a-zA-Z_0-9-.][-0-9a-zA-Z_\\s.]{0,127}$"
              },
              "strategy": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StrategyConfig"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "timeout": {
                "type": "string",
                "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
              },
              "type": {
                "type": "string",
                "enum": [
                  "AwsCdkSynth"
                ]
              },
              "when": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StepWhenCondition"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#",
            "allOf": [
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "AwsCdkSynth"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/common/AwsCdkSynthStepInfo"
                    }
                  }
                }
              }
            ]
          },
          "AwsCdkSynthStepInfo": {
            "title": "AwsCdkSynthStepInfo",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/common/StepSpecType"
              },
              {
                "type": "object",
                "required": [
                  "connectorRef",
                  "image"
                ],
                "properties": {
                  "appPath": {
                    "type": "string"
                  },
                  "commandOptions": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string",
                        "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                        "minLength": 1
                      }
                    ]
                  },
                  "connectorRef": {
                    "type": "string"
                  },
                  "delegateSelectors": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string",
                        "pattern": "(<\\+.+>.*)",
                        "minLength": 1
                      }
                    ]
                  },
                  "envVariables": {
                    "oneOf": [
                      {
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "exportTemplate": {
                    "type": "boolean"
                  },
                  "image": {
                    "type": "string"
                  },
                  "imagePullPolicy": {
                    "oneOf": [
                      {
                        "type": "string",
                        "enum": [
                          "Always",
                          "Never",
                          "IfNotPresent"
                        ]
                      },
                      {
                        "type": "string",
                        "pattern": "(<\\+.+>.*)",
                        "minLength": 1
                      }
                    ]
                  },
                  "privileged": {
                    "oneOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "type": "string",
                        "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                        "minLength": 1
                      }
                    ]
                  },
                  "resources": {
                    "$ref": "#/definitions/pipeline/common/ContainerResource"
                  },
                  "runAsUser": {
                    "oneOf": [
                      {
                        "type": "integer",
                        "format": "int32"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "stackNames": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string",
                        "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                        "minLength": 1
                      }
                    ]
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "type": "object",
            "required": [
              "connectorRef",
              "image"
            ],
            "properties": {
              "appPath": {
                "type": "string"
              },
              "commandOptions": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                    "minLength": 1
                  }
                ]
              },
              "connectorRef": {
                "type": "string"
              },
              "delegateSelectors": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "(<\\+.+>.*)",
                    "minLength": 1
                  }
                ]
              },
              "envVariables": {
                "oneOf": [
                  {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "exportTemplate": {
                "type": "boolean"
              },
              "image": {
                "type": "string"
              },
              "imagePullPolicy": {
                "oneOf": [
                  {
                    "type": "string",
                    "enum": [
                      "Always",
                      "Never",
                      "IfNotPresent"
                    ]
                  },
                  {
                    "type": "string",
                    "pattern": "(<\\+.+>.*)",
                    "minLength": 1
                  }
                ]
              },
              "privileged": {
                "oneOf": [
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                    "minLength": 1
                  }
                ]
              },
              "resources": {
                "$ref": "#/definitions/pipeline/common/ContainerResource"
              },
              "runAsUser": {
                "oneOf": [
                  {
                    "type": "integer",
                    "format": "int32"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "stackNames": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                    "minLength": 1
                  }
                ]
              },
              "description": {
                "desc": "This is the description for AwsCdkSynthStepInfo"
              }
            }
          },
          "AwsCdkDiffStepNode": {
            "title": "AwsCdkDiffStepNode",
            "type": "object",
            "required": [
              "identifier",
              "name",
              "type"
            ],
            "properties": {
              "description": {
                "type": "string",
                "desc": "This is the description for AwsCdkDiffStepNode"
              },
              "enforce": {
                "$ref": "#/definitions/pipeline/common/PolicyConfig"
              },
              "failureStrategies": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/pipeline/common/FailureStrategyConfig"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "identifier": {
                "type": "string",
                "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
              },
              "name": {
                "type": "string",
                "pattern": "^[a-zA-Z_0-9-.][-0-9a-zA-Z_\\s.]{0,127}$"
              },
              "strategy": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StrategyConfig"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "timeout": {
                "type": "string",
                "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
              },
              "type": {
                "type": "string",
                "enum": [
                  "AwsCdkDiff"
                ]
              },
              "when": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StepWhenCondition"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#",
            "allOf": [
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "AwsCdkDiff"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/common/AwsCdkDiffStepInfo"
                    }
                  }
                }
              }
            ]
          },
          "AwsCdkDiffStepInfo": {
            "title": "AwsCdkDiffStepInfo",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/common/StepSpecType"
              },
              {
                "type": "object",
                "required": [
                  "connectorRef",
                  "image"
                ],
                "properties": {
                  "appPath": {
                    "type": "string"
                  },
                  "commandOptions": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string",
                        "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                        "minLength": 1
                      }
                    ]
                  },
                  "connectorRef": {
                    "type": "string"
                  },
                  "delegateSelectors": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string",
                        "pattern": "(<\\+.+>.*)",
                        "minLength": 1
                      }
                    ]
                  },
                  "envVariables": {
                    "oneOf": [
                      {
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "image": {
                    "type": "string"
                  },
                  "imagePullPolicy": {
                    "oneOf": [
                      {
                        "type": "string",
                        "enum": [
                          "Always",
                          "Never",
                          "IfNotPresent"
                        ]
                      },
                      {
                        "type": "string",
                        "pattern": "(<\\+.+>.*)",
                        "minLength": 1
                      }
                    ]
                  },
                  "privileged": {
                    "oneOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "type": "string",
                        "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                        "minLength": 1
                      }
                    ]
                  },
                  "resources": {
                    "$ref": "#/definitions/pipeline/common/ContainerResource"
                  },
                  "runAsUser": {
                    "oneOf": [
                      {
                        "type": "integer",
                        "format": "int32"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "stackNames": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string",
                        "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                        "minLength": 1
                      }
                    ]
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "type": "object",
            "required": [
              "connectorRef",
              "image"
            ],
            "properties": {
              "appPath": {
                "type": "string"
              },
              "commandOptions": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                    "minLength": 1
                  }
                ]
              },
              "connectorRef": {
                "type": "string"
              },
              "delegateSelectors": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "(<\\+.+>.*)",
                    "minLength": 1
                  }
                ]
              },
              "envVariables": {
                "oneOf": [
                  {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "image": {
                "type": "string"
              },
              "imagePullPolicy": {
                "oneOf": [
                  {
                    "type": "string",
                    "enum": [
                      "Always",
                      "Never",
                      "IfNotPresent"
                    ]
                  },
                  {
                    "type": "string",
                    "pattern": "(<\\+.+>.*)",
                    "minLength": 1
                  }
                ]
              },
              "privileged": {
                "oneOf": [
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                    "minLength": 1
                  }
                ]
              },
              "resources": {
                "$ref": "#/definitions/pipeline/common/ContainerResource"
              },
              "runAsUser": {
                "oneOf": [
                  {
                    "type": "integer",
                    "format": "int32"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "stackNames": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                    "minLength": 1
                  }
                ]
              },
              "description": {
                "desc": "This is the description for AwsCdkDiffStepInfo"
              }
            }
          },
          "AwsCdkDeployStepNode": {
            "title": "AwsCdkDeployStepNode",
            "type": "object",
            "required": [
              "identifier",
              "name",
              "type"
            ],
            "properties": {
              "description": {
                "type": "string",
                "desc": "This is the description for AwsCdkDeployStepNode"
              },
              "enforce": {
                "$ref": "#/definitions/pipeline/common/PolicyConfig"
              },
              "failureStrategies": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/pipeline/common/FailureStrategyConfig"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "identifier": {
                "type": "string",
                "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
              },
              "name": {
                "type": "string",
                "pattern": "^[a-zA-Z_0-9-.][-0-9a-zA-Z_\\s.]{0,127}$"
              },
              "strategy": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StrategyConfig"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "timeout": {
                "type": "string",
                "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
              },
              "type": {
                "type": "string",
                "enum": [
                  "AwsCdkDeploy"
                ]
              },
              "when": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StepWhenCondition"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#",
            "allOf": [
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "AwsCdkDeploy"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/common/AwsCdkDeployStepInfo"
                    }
                  }
                }
              }
            ]
          },
          "AwsCdkDeployStepInfo": {
            "title": "AwsCdkDeployStepInfo",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/common/StepSpecType"
              },
              {
                "type": "object",
                "required": [
                  "connectorRef",
                  "image",
                  "provisionerIdentifier"
                ],
                "properties": {
                  "appPath": {
                    "type": "string"
                  },
                  "commandOptions": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string",
                        "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                        "minLength": 1
                      }
                    ]
                  },
                  "connectorRef": {
                    "type": "string"
                  },
                  "delegateSelectors": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string",
                        "pattern": "(<\\+.+>.*)",
                        "minLength": 1
                      }
                    ]
                  },
                  "envVariables": {
                    "oneOf": [
                      {
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "image": {
                    "type": "string"
                  },
                  "imagePullPolicy": {
                    "oneOf": [
                      {
                        "type": "string",
                        "enum": [
                          "Always",
                          "Never",
                          "IfNotPresent"
                        ]
                      },
                      {
                        "type": "string",
                        "pattern": "(<\\+.+>.*)",
                        "minLength": 1
                      }
                    ]
                  },
                  "parameters": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  "privileged": {
                    "oneOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "type": "string",
                        "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                        "minLength": 1
                      }
                    ]
                  },
                  "provisionerIdentifier": {
                    "type": "string"
                  },
                  "resources": {
                    "$ref": "#/definitions/pipeline/common/ContainerResource"
                  },
                  "runAsUser": {
                    "oneOf": [
                      {
                        "type": "integer",
                        "format": "int32"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "stackNames": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string",
                        "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                        "minLength": 1
                      }
                    ]
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "type": "object",
            "required": [
              "connectorRef",
              "image",
              "provisionerIdentifier"
            ],
            "properties": {
              "appPath": {
                "type": "string"
              },
              "commandOptions": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                    "minLength": 1
                  }
                ]
              },
              "connectorRef": {
                "type": "string"
              },
              "delegateSelectors": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "(<\\+.+>.*)",
                    "minLength": 1
                  }
                ]
              },
              "envVariables": {
                "oneOf": [
                  {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "image": {
                "type": "string"
              },
              "imagePullPolicy": {
                "oneOf": [
                  {
                    "type": "string",
                    "enum": [
                      "Always",
                      "Never",
                      "IfNotPresent"
                    ]
                  },
                  {
                    "type": "string",
                    "pattern": "(<\\+.+>.*)",
                    "minLength": 1
                  }
                ]
              },
              "parameters": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "privileged": {
                "oneOf": [
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                    "minLength": 1
                  }
                ]
              },
              "provisionerIdentifier": {
                "type": "string"
              },
              "resources": {
                "$ref": "#/definitions/pipeline/common/ContainerResource"
              },
              "runAsUser": {
                "oneOf": [
                  {
                    "type": "integer",
                    "format": "int32"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "stackNames": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                    "minLength": 1
                  }
                ]
              },
              "description": {
                "desc": "This is the description for AwsCdkDeployStepInfo"
              }
            }
          },
          "AwsCdkDestroyStepNode": {
            "title": "AwsCdkDestroyStepNode",
            "type": "object",
            "required": [
              "identifier",
              "name",
              "type"
            ],
            "properties": {
              "description": {
                "type": "string",
                "desc": "This is the description for AwsCdkDestroyStepNode"
              },
              "enforce": {
                "$ref": "#/definitions/pipeline/common/PolicyConfig"
              },
              "failureStrategies": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/pipeline/common/FailureStrategyConfig"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "identifier": {
                "type": "string",
                "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
              },
              "name": {
                "type": "string",
                "pattern": "^[a-zA-Z_0-9-.][-0-9a-zA-Z_\\s.]{0,127}$"
              },
              "strategy": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StrategyConfig"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "timeout": {
                "type": "string",
                "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
              },
              "type": {
                "type": "string",
                "enum": [
                  "AwsCdkDestroy"
                ]
              },
              "when": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StepWhenCondition"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#",
            "allOf": [
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "AwsCdkDestroy"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/common/AwsCdkDestroyStepInfo"
                    }
                  }
                }
              }
            ]
          },
          "AwsCdkDestroyStepInfo": {
            "title": "AwsCdkDestroyStepInfo",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/common/StepSpecType"
              },
              {
                "type": "object",
                "required": [
                  "connectorRef",
                  "image"
                ],
                "properties": {
                  "appPath": {
                    "type": "string"
                  },
                  "commandOptions": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string",
                        "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                        "minLength": 1
                      }
                    ]
                  },
                  "connectorRef": {
                    "type": "string"
                  },
                  "delegateSelectors": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string",
                        "pattern": "(<\\+.+>.*)",
                        "minLength": 1
                      }
                    ]
                  },
                  "envVariables": {
                    "oneOf": [
                      {
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "image": {
                    "type": "string"
                  },
                  "imagePullPolicy": {
                    "oneOf": [
                      {
                        "type": "string",
                        "enum": [
                          "Always",
                          "Never",
                          "IfNotPresent"
                        ]
                      },
                      {
                        "type": "string",
                        "pattern": "(<\\+.+>.*)",
                        "minLength": 1
                      }
                    ]
                  },
                  "privileged": {
                    "oneOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "type": "string",
                        "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                        "minLength": 1
                      }
                    ]
                  },
                  "resources": {
                    "$ref": "#/definitions/pipeline/common/ContainerResource"
                  },
                  "runAsUser": {
                    "oneOf": [
                      {
                        "type": "integer",
                        "format": "int32"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "stackNames": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string",
                        "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                        "minLength": 1
                      }
                    ]
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "type": "object",
            "required": [
              "connectorRef",
              "image"
            ],
            "properties": {
              "appPath": {
                "type": "string"
              },
              "commandOptions": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                    "minLength": 1
                  }
                ]
              },
              "connectorRef": {
                "type": "string"
              },
              "delegateSelectors": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "(<\\+.+>.*)",
                    "minLength": 1
                  }
                ]
              },
              "envVariables": {
                "oneOf": [
                  {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "image": {
                "type": "string"
              },
              "imagePullPolicy": {
                "oneOf": [
                  {
                    "type": "string",
                    "enum": [
                      "Always",
                      "Never",
                      "IfNotPresent"
                    ]
                  },
                  {
                    "type": "string",
                    "pattern": "(<\\+.+>.*)",
                    "minLength": 1
                  }
                ]
              },
              "privileged": {
                "oneOf": [
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                    "minLength": 1
                  }
                ]
              },
              "resources": {
                "$ref": "#/definitions/pipeline/common/ContainerResource"
              },
              "runAsUser": {
                "oneOf": [
                  {
                    "type": "integer",
                    "format": "int32"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "stackNames": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                    "minLength": 1
                  }
                ]
              },
              "description": {
                "desc": "This is the description for AwsCdkDestroyStepInfo"
              }
            }
          },
          "AwsCdkRollbackStepNode": {
            "title": "AwsCdkRollbackStepNode",
            "type": "object",
            "required": [
              "identifier",
              "name",
              "type"
            ],
            "properties": {
              "description": {
                "type": "string",
                "desc": "This is the description for AwsCdkRollbackStepNode"
              },
              "enforce": {
                "$ref": "#/definitions/pipeline/common/PolicyConfig"
              },
              "failureStrategies": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/pipeline/common/FailureStrategyConfig"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "identifier": {
                "type": "string",
                "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
              },
              "name": {
                "type": "string",
                "pattern": "^[a-zA-Z_0-9-.][-0-9a-zA-Z_\\s.]{0,127}$"
              },
              "strategy": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StrategyConfig"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "timeout": {
                "type": "string",
                "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
              },
              "type": {
                "type": "string",
                "enum": [
                  "AwsCdkRollback"
                ]
              },
              "when": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StepWhenCondition"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#",
            "allOf": [
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "AwsCdkRollback"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/common/AwsCdkRollbackStepInfo"
                    }
                  }
                }
              }
            ]
          },
          "AwsCdkRollbackStepInfo": {
            "title": "AwsCdkRollbackStepInfo",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/common/StepSpecType"
              },
              {
                "type": "object",
                "required": [
                  "provisionerIdentifier"
                ],
                "properties": {
                  "delegateSelectors": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string",
                        "pattern": "(<\\+.+>.*)",
                        "minLength": 1
                      }
                    ]
                  },
                  "envVariables": {
                    "oneOf": [
                      {
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "provisionerIdentifier": {
                    "type": "string"
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "type": "object",
            "required": [
              "provisionerIdentifier"
            ],
            "properties": {
              "delegateSelectors": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "(<\\+.+>.*)",
                    "minLength": 1
                  }
                ]
              },
              "envVariables": {
                "oneOf": [
                  {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "provisionerIdentifier": {
                "type": "string"
              },
              "description": {
                "desc": "This is the description for AwsCdkRollbackStepInfo"
              }
            }
          }
        },
        "ci": {
          "GitCloneStepNode": {
            "title": "GitCloneStepNode",
            "type": "object",
            "required": [
              "identifier",
              "name",
              "spec",
              "type"
            ],
            "properties": {
              "description": {
                "type": "string",
                "desc": "This is the description for GitCloneStepNode"
              },
              "enforce": {
                "$ref": "#/definitions/pipeline/common/PolicyConfig"
              },
              "failureStrategies": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/pipeline/common/FailureStrategyConfig"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "identifier": {
                "type": "string",
                "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
              },
              "name": {
                "type": "string",
                "pattern": "^[a-zA-Z_0-9-.][-0-9a-zA-Z_\\s.]{0,127}$"
              },
              "strategy": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StrategyConfig"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "timeout": {
                "type": "string",
                "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
              },
              "type": {
                "type": "string",
                "enum": [
                  "GitClone"
                ]
              },
              "when": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StepWhenCondition"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#",
            "allOf": [
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "GitClone"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/ci/GitCloneStepInfo"
                    }
                  }
                }
              }
            ]
          },
          "GitCloneStepInfo": {
            "title": "GitCloneStepInfo",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/steps/ci/CIStepInfo"
              },
              {
                "type": "object",
                "required": [
                  "build",
                  "connectorRef"
                ],
                "properties": {
                  "baseImageConnectorRefs": {
                    "$ref": "#/definitions/pipeline/steps/ci/ParameterFieldListString"
                  },
                  "build": {
                    "oneOf": [
                      {
                        "$ref": "#/definitions/pipeline/steps/ci/Build"
                      },
                      {
                        "type": "string",
                        "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                        "minLength": 1
                      }
                    ]
                  },
                  "cloneDirectory": {
                    "type": "string"
                  },
                  "connectorRef": {
                    "type": "string"
                  },
                  "depth": {
                    "oneOf": [
                      {
                        "type": "integer",
                        "format": "int32"
                      },
                      {
                        "type": "string",
                        "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                        "minLength": 1
                      }
                    ]
                  },
                  "outputFilePathsContent": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "projectName": {
                    "type": "string"
                  },
                  "repoName": {
                    "type": "string"
                  },
                  "resources": {
                    "$ref": "#/definitions/pipeline/common/ContainerResource"
                  },
                  "runAsUser": {
                    "oneOf": [
                      {
                        "type": "integer",
                        "format": "int32"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "sslVerify": {
                    "oneOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "type": "string",
                        "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                        "minLength": 1
                      }
                    ]
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "type": "object",
            "required": [
              "build",
              "connectorRef"
            ],
            "properties": {
              "baseImageConnectorRefs": {
                "$ref": "#/definitions/pipeline/steps/ci/ParameterFieldListString"
              },
              "build": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/steps/ci/Build"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                    "minLength": 1
                  }
                ]
              },
              "cloneDirectory": {
                "type": "string"
              },
              "connectorRef": {
                "type": "string"
              },
              "depth": {
                "oneOf": [
                  {
                    "type": "integer",
                    "format": "int32"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                    "minLength": 1
                  }
                ]
              },
              "outputFilePathsContent": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "projectName": {
                "type": "string"
              },
              "repoName": {
                "type": "string"
              },
              "resources": {
                "$ref": "#/definitions/pipeline/common/ContainerResource"
              },
              "runAsUser": {
                "oneOf": [
                  {
                    "type": "integer",
                    "format": "int32"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "sslVerify": {
                "oneOf": [
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                    "minLength": 1
                  }
                ]
              },
              "description": {
                "desc": "This is the description for GitCloneStepInfo"
              }
            }
          },
          "CIStepInfo": {
            "title": "CIStepInfo",
            "type": "object",
            "discriminator": "type",
            "$schema": "http://json-schema.org/draft-07/schema#",
            "properties": {
              "description": {
                "desc": "This is the description for CIStepInfo"
              }
            }
          },
          "ParameterFieldListString": {
            "title": "ParameterFieldListString",
            "type": "object",
            "properties": {
              "defaultValue": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "executionInput": {
                "type": "boolean"
              },
              "expression": {
                "type": "boolean"
              },
              "expressionValue": {
                "type": "string"
              },
              "inputSetValidator": {
                "$ref": "#/definitions/pipeline/common/InputSetValidator"
              },
              "jsonResponseField": {
                "type": "boolean"
              },
              "responseField": {
                "type": "string"
              },
              "typeString": {
                "type": "boolean"
              },
              "value": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "description": {
                "desc": "This is the description for ParameterFieldListString"
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "Build": {
            "title": "Build",
            "type": "object",
            "required": [
              "spec",
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "branch",
                  "tag",
                  "PR",
                  "commitSha"
                ]
              },
              "description": {
                "desc": "This is the description for Build"
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#",
            "allOf": [
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "PR"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/ci/PRBuildSpec"
                    }
                  }
                }
              },
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "branch"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/ci/BranchBuildSpec"
                    }
                  }
                }
              },
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "commitSha"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/ci/CommitShaBuildSpec"
                    }
                  }
                }
              },
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "tag"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/ci/TagBuildSpec"
                    }
                  }
                }
              }
            ]
          },
          "PRBuildSpec": {
            "title": "PRBuildSpec",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/steps/ci/BuildSpec"
              },
              {
                "type": "object",
                "required": [
                  "number"
                ],
                "properties": {
                  "number": {
                    "type": "string"
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "properties": {
              "description": {
                "desc": "This is the description for PRBuildSpec"
              }
            }
          },
          "BuildSpec": {
            "title": "BuildSpec",
            "type": "object",
            "$schema": "http://json-schema.org/draft-07/schema#",
            "properties": {
              "description": {
                "desc": "This is the description for BuildSpec"
              }
            }
          },
          "BranchBuildSpec": {
            "title": "BranchBuildSpec",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/steps/ci/BuildSpec"
              },
              {
                "type": "object",
                "required": [
                  "branch"
                ],
                "properties": {
                  "branch": {
                    "type": "string"
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "properties": {
              "description": {
                "desc": "This is the description for BranchBuildSpec"
              }
            }
          },
          "CommitShaBuildSpec": {
            "title": "CommitShaBuildSpec",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/steps/ci/BuildSpec"
              },
              {
                "type": "object",
                "required": [
                  "commitSha"
                ],
                "properties": {
                  "commitSha": {
                    "type": "string"
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "properties": {
              "description": {
                "desc": "This is the description for CommitShaBuildSpec"
              }
            }
          },
          "TagBuildSpec": {
            "title": "TagBuildSpec",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/steps/ci/BuildSpec"
              },
              {
                "type": "object",
                "required": [
                  "tag"
                ],
                "properties": {
                  "tag": {
                    "type": "string"
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "properties": {
              "description": {
                "desc": "This is the description for TagBuildSpec"
              }
            }
          }
        },
        "cd": {
          "TerraformApplyStepNode": {
            "title": "TerraformApplyStepNode",
            "type": "object",
            "required": [
              "identifier",
              "name",
              "spec",
              "type"
            ],
            "properties": {
              "description": {
                "type": "string",
                "desc": "This is the description for TerraformApplyStepNode"
              },
              "enforce": {
                "$ref": "#/definitions/pipeline/common/PolicyConfig"
              },
              "failureStrategies": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/pipeline/common/FailureStrategyConfig"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "identifier": {
                "type": "string",
                "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
              },
              "name": {
                "type": "string",
                "pattern": "^[a-zA-Z_0-9-.][-0-9a-zA-Z_\\s.]{0,127}$"
              },
              "strategy": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StrategyConfig"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "timeout": {
                "type": "string",
                "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
              },
              "type": {
                "type": "string",
                "enum": [
                  "TerraformApply"
                ]
              },
              "when": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StepWhenCondition"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#",
            "allOf": [
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "TerraformApply"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/cd/TerraformApplyStepInfo"
                    }
                  }
                }
              }
            ]
          },
          "TerraformApplyStepInfo": {
            "title": "TerraformApplyStepInfo",
            "allOf": [
              {
                "oneOf": [
                  {
                    "required": [
                      "configuration"
                    ]
                  },
                  {
                    "required": [
                      "cloudCliConfiguration"
                    ]
                  }
                ],
                "$ref": "#/definitions/pipeline/common/StepSpecType"
              },
              {
                "type": "object",
                "required": [
                  "provisionerIdentifier"
                ],
                "properties": {
                  "cloudCliConfiguration": {
                    "$ref": "#/definitions/pipeline/steps/cd/TerraformCloudCliStepConfiguration"
                  },
                  "configuration": {
                    "$ref": "#/definitions/pipeline/steps/cd/TerraformStepConfiguration"
                  },
                  "delegateSelectors": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string",
                        "pattern": "(<\\+.+>.*)",
                        "minLength": 1
                      }
                    ]
                  },
                  "metadata": {
                    "type": "string"
                  },
                  "provisionerIdentifier": {
                    "type": "string"
                  }
                }
              },
              {
                "oneOf": [
                  {
                    "required": [
                      "configuration"
                    ]
                  },
                  {
                    "required": [
                      "cloudCliConfiguration"
                    ]
                  }
                ]
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "type": "object",
            "required": [
              "provisionerIdentifier"
            ],
            "properties": {
              "cloudCliConfiguration": {
                "$ref": "#/definitions/pipeline/steps/cd/TerraformCloudCliStepConfiguration"
              },
              "configuration": {
                "$ref": "#/definitions/pipeline/steps/cd/TerraformStepConfiguration"
              },
              "delegateSelectors": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "(<\\+.+>.*)",
                    "minLength": 1
                  }
                ]
              },
              "metadata": {
                "type": "string"
              },
              "provisionerIdentifier": {
                "type": "string"
              },
              "description": {
                "desc": "This is the description for TerraformApplyStepInfo"
              }
            }
          },
          "TerraformCloudCliStepConfiguration": {
            "title": "TerraformCloudCliStepConfiguration",
            "type": "object",
            "properties": {
              "commandFlags": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/pipeline/steps/cd/TerraformCliOptionFlag"
                }
              },
              "spec": {
                "$ref": "#/definitions/pipeline/steps/cd/TerraformCloudCliExecutionData"
              },
              "skipStateStorage": {
                "oneOf": [
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "description": {
                "desc": "This is the description for TerraformCloudCliStepConfiguration"
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "TerraformCliOptionFlag": {
            "title": "TerraformCliOptionFlag",
            "type": "object",
            "required": [
              "commandType",
              "flag"
            ],
            "properties": {
              "commandType": {
                "type": "string",
                "enum": [
                  "INIT",
                  "WORKSPACE",
                  "REFRESH",
                  "PLAN",
                  "APPLY",
                  "DESTROY"
                ]
              },
              "flag": {
                "type": "string"
              },
              "description": {
                "desc": "This is the description for TerraformCliOptionFlag"
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "TerraformCloudCliExecutionData": {
            "title": "TerraformCloudCliExecutionData",
            "type": "object",
            "required": [
              "configFiles"
            ],
            "properties": {
              "backendConfig": {
                "$ref": "#/definitions/pipeline/steps/cd/TerraformBackendConfig"
              },
              "configFiles": {
                "$ref": "#/definitions/pipeline/steps/cd/TerraformConfigFilesWrapper"
              },
              "environmentVariables": {
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "$ref": "#/definitions/pipeline/common/NumberNGVariable"
                    },
                    {
                      "$ref": "#/definitions/pipeline/common/SecretNGVariable"
                    },
                    {
                      "$ref": "#/definitions/pipeline/common/StringNGVariable"
                    }
                  ]
                }
              },
              "targets": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "varFiles": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/pipeline/steps/cd/TerraformVarFileWrapper"
                }
              },
              "description": {
                "desc": "This is the description for TerraformCloudCliExecutionData"
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "TerraformBackendConfig": {
            "title": "TerraformBackendConfig",
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "description": {
                "desc": "This is the description for TerraformBackendConfig"
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#",
            "allOf": [
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "Inline"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/cd/InlineTerraformBackendConfigSpec"
                    }
                  }
                }
              },
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "Remote"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/cd/RemoteTerraformBackendConfigSpec"
                    }
                  }
                }
              }
            ]
          },
          "InlineTerraformBackendConfigSpec": {
            "title": "InlineTerraformBackendConfigSpec",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/steps/cd/TerraformBackendConfigSpec"
              },
              {
                "type": "object",
                "properties": {
                  "content": {
                    "type": "string"
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "properties": {
              "description": {
                "desc": "This is the description for InlineTerraformBackendConfigSpec"
              }
            }
          },
          "TerraformBackendConfigSpec": {
            "title": "TerraformBackendConfigSpec",
            "type": "object",
            "discriminator": "type",
            "$schema": "http://json-schema.org/draft-07/schema#",
            "properties": {
              "description": {
                "desc": "This is the description for TerraformBackendConfigSpec"
              }
            }
          },
          "RemoteTerraformBackendConfigSpec": {
            "title": "RemoteTerraformBackendConfigSpec",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/steps/cd/TerraformBackendConfigSpec"
              },
              {
                "type": "object",
                "required": [
                  "store"
                ],
                "properties": {
                  "store": {
                    "$ref": "#/definitions/pipeline/steps/cd/StoreConfigWrapper"
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "properties": {
              "description": {
                "desc": "This is the description for RemoteTerraformBackendConfigSpec"
              }
            }
          },
          "StoreConfigWrapper": {
            "title": "StoreConfigWrapper",
            "type": "object",
            "required": [
              "spec",
              "type"
            ],
            "properties": {
              "metadata": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "CustomRemote",
                  "Git",
                  "Github",
                  "Bitbucket",
                  "GitLab",
                  "Http",
                  "S3",
                  "Gcs",
                  "Inline",
                  "Artifactory",
                  "S3Url",
                  "InheritFromManifest",
                  "Harness",
                  "OciHelmChart",
                  "AzureRepo"
                ]
              },
              "description": {
                "desc": "This is the description for StoreConfigWrapper"
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#",
            "allOf": [
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "Artifactory"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/cd/ArtifactoryStoreConfig"
                    }
                  }
                }
              },
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "AzureRepo"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/cd/AzureRepoStore"
                    }
                  }
                }
              },
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "Bitbucket"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/cd/BitbucketStore"
                    }
                  }
                }
              },
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "CustomRemote"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/cd/CustomRemoteStoreConfig"
                    }
                  }
                }
              },
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "Gcs"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/cd/GcsStoreConfig"
                    }
                  }
                }
              },
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "Git"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/cd/GitStore"
                    }
                  }
                }
              },
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "GitLab"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/cd/GitLabStore"
                    }
                  }
                }
              },
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "Github"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/cd/GithubStore"
                    }
                  }
                }
              },
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "Harness"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/custom/HarnessStore"
                    }
                  }
                }
              },
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "Http"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/cd/HttpStoreConfig"
                    }
                  }
                }
              },
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "InheritFromManifest"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/cd/InheritFromManifestStoreConfig"
                    }
                  }
                }
              },
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "Inline"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/cd/InlineStoreConfig"
                    }
                  }
                }
              },
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "OciHelmChart"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/cd/OciHelmChartConfig"
                    }
                  }
                }
              },
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "S3"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/cd/S3StoreConfig"
                    }
                  }
                }
              },
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "S3Url"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/cd/S3UrlStoreConfig"
                    }
                  }
                }
              }
            ]
          },
          "ArtifactoryStoreConfig": {
            "title": "ArtifactoryStoreConfig",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/steps/cd/StoreConfig"
              },
              {
                "type": "object",
                "required": [
                  "connectorRef",
                  "repositoryName"
                ],
                "properties": {
                  "artifactPaths": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string",
                        "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                        "minLength": 1
                      }
                    ]
                  },
                  "connectorRef": {
                    "type": "string"
                  },
                  "metadata": {
                    "type": "string"
                  },
                  "repositoryName": {
                    "type": "string"
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "properties": {
              "description": {
                "desc": "This is the description for ArtifactoryStoreConfig"
              }
            }
          },
          "StoreConfig": {
            "title": "StoreConfig",
            "type": "object",
            "discriminator": "type",
            "$schema": "http://json-schema.org/draft-07/schema#",
            "properties": {
              "description": {
                "desc": "This is the description for StoreConfig"
              }
            }
          },
          "AzureRepoStore": {
            "title": "AzureRepoStore",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/steps/cd/StoreConfig"
              },
              {
                "type": "object",
                "required": [
                  "connectorRef",
                  "gitFetchType"
                ],
                "properties": {
                  "branch": {
                    "type": "string"
                  },
                  "commitId": {
                    "type": "string"
                  },
                  "connectorRef": {
                    "type": "string"
                  },
                  "folderPath": {
                    "type": "string"
                  },
                  "gitFetchType": {
                    "type": "string",
                    "enum": [
                      "Branch",
                      "Commit"
                    ]
                  },
                  "paths": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string",
                        "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                        "minLength": 1
                      }
                    ]
                  },
                  "repoName": {
                    "type": "string"
                  }
                }
              },
              {
                "oneOf": [
                  {
                    "required": [
                      "commitId"
                    ]
                  },
                  {
                    "required": [
                      "branch"
                    ]
                  }
                ]
              },
              {
                "oneOf": [
                  {
                    "required": [
                      "folderPath"
                    ]
                  },
                  {
                    "required": [
                      "paths"
                    ]
                  }
                ]
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "properties": {
              "description": {
                "desc": "This is the description for AzureRepoStore"
              }
            }
          },
          "BitbucketStore": {
            "title": "BitbucketStore",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/steps/cd/StoreConfig"
              },
              {
                "type": "object",
                "required": [
                  "connectorRef",
                  "gitFetchType"
                ],
                "properties": {
                  "branch": {
                    "type": "string"
                  },
                  "commitId": {
                    "type": "string"
                  },
                  "connectorRef": {
                    "type": "string"
                  },
                  "folderPath": {
                    "type": "string"
                  },
                  "gitFetchType": {
                    "type": "string",
                    "enum": [
                      "Branch",
                      "Commit"
                    ]
                  },
                  "paths": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string",
                        "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                        "minLength": 1
                      }
                    ]
                  },
                  "repoName": {
                    "type": "string"
                  }
                }
              },
              {
                "oneOf": [
                  {
                    "required": [
                      "commitId"
                    ]
                  },
                  {
                    "required": [
                      "branch"
                    ]
                  }
                ]
              },
              {
                "oneOf": [
                  {
                    "required": [
                      "folderPath"
                    ]
                  },
                  {
                    "required": [
                      "paths"
                    ]
                  }
                ]
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "properties": {
              "description": {
                "desc": "This is the description for BitbucketStore"
              }
            }
          },
          "CustomRemoteStoreConfig": {
            "title": "CustomRemoteStoreConfig",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/steps/cd/StoreConfig"
              },
              {
                "type": "object",
                "required": [
                  "extractionScript",
                  "filePath"
                ],
                "properties": {
                  "delegateSelectors": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string",
                        "pattern": "(<\\+.+>.*)",
                        "minLength": 1
                      }
                    ]
                  },
                  "extractionScript": {
                    "type": "string"
                  },
                  "filePath": {
                    "type": "string"
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "properties": {
              "description": {
                "desc": "This is the description for CustomRemoteStoreConfig"
              }
            }
          },
          "GcsStoreConfig": {
            "title": "GcsStoreConfig",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/steps/cd/StoreConfig"
              },
              {
                "type": "object",
                "properties": {
                  "bucketName": {
                    "type": "string"
                  },
                  "connectorRef": {
                    "type": "string"
                  },
                  "folderPath": {
                    "type": "string"
                  },
                  "metadata": {
                    "type": "string"
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "properties": {
              "description": {
                "desc": "This is the description for GcsStoreConfig"
              }
            }
          },
          "GitStore": {
            "title": "GitStore",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/steps/cd/StoreConfig"
              },
              {
                "type": "object",
                "required": [
                  "connectorRef",
                  "gitFetchType"
                ],
                "properties": {
                  "branch": {
                    "type": "string"
                  },
                  "commitId": {
                    "type": "string"
                  },
                  "connectorRef": {
                    "type": "string"
                  },
                  "folderPath": {
                    "type": "string"
                  },
                  "gitFetchType": {
                    "type": "string",
                    "enum": [
                      "Branch",
                      "Commit"
                    ]
                  },
                  "paths": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string",
                        "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                        "minLength": 1
                      }
                    ]
                  },
                  "repoName": {
                    "type": "string"
                  }
                }
              },
              {
                "oneOf": [
                  {
                    "required": [
                      "commitId"
                    ]
                  },
                  {
                    "required": [
                      "branch"
                    ]
                  }
                ]
              },
              {
                "oneOf": [
                  {
                    "required": [
                      "folderPath"
                    ]
                  },
                  {
                    "required": [
                      "paths"
                    ]
                  }
                ]
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "properties": {
              "description": {
                "desc": "This is the description for GitStore"
              }
            }
          },
          "GitLabStore": {
            "title": "GitLabStore",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/steps/cd/StoreConfig"
              },
              {
                "type": "object",
                "required": [
                  "connectorRef",
                  "gitFetchType"
                ],
                "properties": {
                  "branch": {
                    "type": "string"
                  },
                  "commitId": {
                    "type": "string"
                  },
                  "connectorRef": {
                    "type": "string"
                  },
                  "folderPath": {
                    "type": "string"
                  },
                  "gitFetchType": {
                    "type": "string",
                    "enum": [
                      "Branch",
                      "Commit"
                    ]
                  },
                  "paths": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string",
                        "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                        "minLength": 1
                      }
                    ]
                  },
                  "repoName": {
                    "type": "string"
                  }
                }
              },
              {
                "oneOf": [
                  {
                    "required": [
                      "commitId"
                    ]
                  },
                  {
                    "required": [
                      "branch"
                    ]
                  }
                ]
              },
              {
                "oneOf": [
                  {
                    "required": [
                      "folderPath"
                    ]
                  },
                  {
                    "required": [
                      "paths"
                    ]
                  }
                ]
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "properties": {
              "description": {
                "desc": "This is the description for GitLabStore"
              }
            }
          },
          "GithubStore": {
            "title": "GithubStore",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/steps/cd/StoreConfig"
              },
              {
                "type": "object",
                "required": [
                  "connectorRef",
                  "gitFetchType"
                ],
                "properties": {
                  "branch": {
                    "type": "string"
                  },
                  "commitId": {
                    "type": "string"
                  },
                  "connectorRef": {
                    "type": "string"
                  },
                  "folderPath": {
                    "type": "string"
                  },
                  "gitFetchType": {
                    "type": "string",
                    "enum": [
                      "Branch",
                      "Commit"
                    ]
                  },
                  "paths": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string",
                        "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                        "minLength": 1
                      }
                    ]
                  },
                  "repoName": {
                    "type": "string"
                  }
                }
              },
              {
                "oneOf": [
                  {
                    "required": [
                      "commitId"
                    ]
                  },
                  {
                    "required": [
                      "branch"
                    ]
                  }
                ]
              },
              {
                "oneOf": [
                  {
                    "required": [
                      "folderPath"
                    ]
                  },
                  {
                    "required": [
                      "paths"
                    ]
                  }
                ]
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "properties": {
              "description": {
                "desc": "This is the description for GithubStore"
              }
            }
          },
          "HttpStoreConfig": {
            "title": "HttpStoreConfig",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/steps/cd/StoreConfig"
              },
              {
                "type": "object",
                "properties": {
                  "connectorRef": {
                    "type": "string"
                  },
                  "metadata": {
                    "type": "string"
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "properties": {
              "description": {
                "desc": "This is the description for HttpStoreConfig"
              }
            }
          },
          "InheritFromManifestStoreConfig": {
            "title": "InheritFromManifestStoreConfig",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/steps/cd/StoreConfig"
              },
              {
                "type": "object",
                "properties": {
                  "paths": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string",
                        "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                        "minLength": 1
                      }
                    ]
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "properties": {
              "description": {
                "desc": "This is the description for InheritFromManifestStoreConfig"
              }
            }
          },
          "InlineStoreConfig": {
            "title": "InlineStoreConfig",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/steps/cd/StoreConfig"
              },
              {
                "type": "object",
                "required": [
                  "content"
                ],
                "properties": {
                  "content": {
                    "type": "string"
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "properties": {
              "description": {
                "desc": "This is the description for InlineStoreConfig"
              }
            }
          },
          "OciHelmChartConfig": {
            "title": "OciHelmChartConfig",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/steps/cd/StoreConfig"
              },
              {
                "type": "object",
                "properties": {
                  "basePath": {
                    "type": "string"
                  },
                  "config": {
                    "$ref": "#/definitions/pipeline/steps/cd/OciHelmChartStoreConfigWrapper"
                  },
                  "metadata": {
                    "type": "string"
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "properties": {
              "description": {
                "desc": "This is the description for OciHelmChartConfig"
              }
            }
          },
          "OciHelmChartStoreConfigWrapper": {
            "title": "OciHelmChartStoreConfigWrapper",
            "type": "object",
            "required": [
              "spec",
              "type"
            ],
            "properties": {
              "metadata": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "Generic",
                  "ECR"
                ]
              },
              "description": {
                "desc": "This is the description for OciHelmChartStoreConfigWrapper"
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#",
            "allOf": [
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "ECR"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/cd/OciHelmChartStoreEcrConfig"
                    }
                  }
                }
              },
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "Generic"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/cd/OciHelmChartStoreGenericConfig"
                    }
                  }
                }
              }
            ]
          },
          "OciHelmChartStoreEcrConfig": {
            "title": "OciHelmChartStoreEcrConfig",
            "allOf": [
              {},
              {
                "type": "object",
                "required": [
                  "connectorRef",
                  "region"
                ],
                "properties": {
                  "connectorRef": {
                    "type": "string"
                  },
                  "metadata": {
                    "type": "string"
                  },
                  "region": {
                    "type": "string"
                  },
                  "registryId": {
                    "type": "string"
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "properties": {
              "description": {
                "desc": "This is the description for OciHelmChartStoreEcrConfig"
              }
            }
          },
          "OciHelmChartStoreGenericConfig": {
            "title": "OciHelmChartStoreGenericConfig",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/steps/cd/OciHelmChartStoreConfig"
              },
              {
                "type": "object",
                "properties": {
                  "connectorRef": {
                    "oneOf": [
                      {
                        "$ref": "#/definitions/pipeline/steps/cd/ParameterFieldString"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "metadata": {
                    "type": "string"
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "properties": {
              "description": {
                "desc": "This is the description for OciHelmChartStoreGenericConfig"
              }
            }
          },
          "OciHelmChartStoreConfig": {
            "title": "OciHelmChartStoreConfig",
            "type": "object",
            "discriminator": "type",
            "$schema": "http://json-schema.org/draft-07/schema#",
            "properties": {
              "description": {
                "desc": "This is the description for OciHelmChartStoreConfig"
              }
            }
          },
          "ParameterFieldString": {
            "title": "ParameterFieldString",
            "type": "object",
            "properties": {
              "defaultValue": {
                "type": "string"
              },
              "executionInput": {
                "type": "boolean"
              },
              "expression": {
                "type": "boolean"
              },
              "expressionValue": {
                "type": "string"
              },
              "inputSetValidator": {
                "$ref": "#/definitions/pipeline/common/InputSetValidator"
              },
              "jsonResponseField": {
                "type": "boolean"
              },
              "responseField": {
                "type": "string"
              },
              "typeString": {
                "type": "boolean"
              },
              "value": {
                "type": "string"
              },
              "description": {
                "desc": "This is the description for ParameterFieldString"
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "S3StoreConfig": {
            "title": "S3StoreConfig",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/steps/cd/StoreConfig"
              },
              {
                "type": "object",
                "properties": {
                  "bucketName": {
                    "type": "string"
                  },
                  "connectorRef": {
                    "type": "string"
                  },
                  "folderPath": {
                    "type": "string"
                  },
                  "metadata": {
                    "type": "string"
                  },
                  "paths": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string",
                        "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                        "minLength": 1
                      }
                    ]
                  },
                  "region": {
                    "type": "string"
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "properties": {
              "description": {
                "desc": "This is the description for S3StoreConfig"
              }
            }
          },
          "S3UrlStoreConfig": {
            "title": "S3UrlStoreConfig",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/steps/cd/StoreConfig"
              },
              {
                "type": "object",
                "required": [
                  "connectorRef",
                  "region",
                  "urls"
                ],
                "properties": {
                  "connectorRef": {
                    "type": "string"
                  },
                  "metadata": {
                    "type": "string"
                  },
                  "region": {
                    "type": "string"
                  },
                  "urls": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string",
                        "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                        "minLength": 1
                      }
                    ]
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "properties": {
              "description": {
                "desc": "This is the description for S3UrlStoreConfig"
              }
            }
          },
          "TerraformConfigFilesWrapper": {
            "title": "TerraformConfigFilesWrapper",
            "type": "object",
            "required": [
              "store"
            ],
            "properties": {
              "moduleSource": {
                "$ref": "#/definitions/pipeline/steps/cd/ModuleSource"
              },
              "store": {
                "$ref": "#/definitions/pipeline/steps/cd/StoreConfigWrapper"
              },
              "description": {
                "desc": "This is the description for TerraformConfigFilesWrapper"
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "ModuleSource": {
            "title": "ModuleSource",
            "type": "object",
            "required": [
              "useConnectorCredentials"
            ],
            "properties": {
              "useConnectorCredentials": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/steps/cd/ParameterFieldBoolean"
                  },
                  {
                    "type": "string"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "description": {
                "desc": "This is the description for ModuleSource"
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "ParameterFieldBoolean": {
            "title": "ParameterFieldBoolean",
            "type": "object",
            "properties": {
              "defaultValue": {
                "type": "boolean"
              },
              "executionInput": {
                "type": "boolean"
              },
              "expression": {
                "type": "boolean"
              },
              "expressionValue": {
                "type": "string"
              },
              "inputSetValidator": {
                "$ref": "#/definitions/pipeline/common/InputSetValidator"
              },
              "jsonResponseField": {
                "type": "boolean"
              },
              "responseField": {
                "type": "string"
              },
              "typeString": {
                "type": "boolean"
              },
              "value": {
                "type": "boolean"
              },
              "description": {
                "desc": "This is the description for ParameterFieldBoolean"
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "TerraformVarFileWrapper": {
            "title": "TerraformVarFileWrapper",
            "type": "object",
            "required": [
              "varFile"
            ],
            "properties": {
              "varFile": {
                "$ref": "#/definitions/pipeline/steps/cd/TerraformVarFile"
              },
              "description": {
                "desc": "This is the description for TerraformVarFileWrapper"
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "TerraformVarFile": {
            "title": "TerraformVarFile",
            "type": "object",
            "required": [
              "identifier",
              "spec",
              "type"
            ],
            "properties": {
              "identifier": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "description": {
                "desc": "This is the description for TerraformVarFile"
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#",
            "allOf": [
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "Inline"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/cd/InlineTerraformVarFileSpec"
                    }
                  }
                }
              },
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "Remote"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/cd/RemoteTerraformVarFileSpec"
                    }
                  }
                }
              }
            ]
          },
          "InlineTerraformVarFileSpec": {
            "title": "InlineTerraformVarFileSpec",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/steps/cd/TerraformVarFileSpec"
              },
              {
                "type": "object",
                "properties": {
                  "content": {
                    "type": "string"
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "properties": {
              "description": {
                "desc": "This is the description for InlineTerraformVarFileSpec"
              }
            }
          },
          "TerraformVarFileSpec": {
            "title": "TerraformVarFileSpec",
            "type": "object",
            "discriminator": "type",
            "properties": {
              "type": {
                "type": "string"
              },
              "description": {
                "desc": "This is the description for TerraformVarFileSpec"
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "RemoteTerraformVarFileSpec": {
            "title": "RemoteTerraformVarFileSpec",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/steps/cd/TerraformVarFileSpec"
              },
              {
                "type": "object",
                "required": [
                  "store"
                ],
                "properties": {
                  "store": {
                    "$ref": "#/definitions/pipeline/steps/cd/StoreConfigWrapper"
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "properties": {
              "description": {
                "desc": "This is the description for RemoteTerraformVarFileSpec"
              }
            }
          },
          "TerraformStepConfiguration": {
            "title": "TerraformStepConfiguration",
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "commandFlags": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/pipeline/steps/cd/TerraformCliOptionFlag"
                }
              },
              "skipRefreshCommand": {
                "oneOf": [
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "spec": {
                "$ref": "#/definitions/pipeline/steps/cd/TerraformExecutionData"
              },
              "type": {
                "type": "string",
                "enum": [
                  "Inline",
                  "InheritFromPlan",
                  "InheritFromApply"
                ]
              },
              "skipStateStorage": {
                "oneOf": [
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "description": {
                "desc": "This is the description for TerraformStepConfiguration"
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "TerraformExecutionData": {
            "title": "TerraformExecutionData",
            "type": "object",
            "required": [
              "configFiles"
            ],
            "properties": {
              "backendConfig": {
                "$ref": "#/definitions/pipeline/steps/cd/TerraformBackendConfig"
              },
              "configFiles": {
                "$ref": "#/definitions/pipeline/steps/cd/TerraformConfigFilesWrapper"
              },
              "environmentVariables": {
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "$ref": "#/definitions/pipeline/common/NumberNGVariable"
                    },
                    {
                      "$ref": "#/definitions/pipeline/common/SecretNGVariable"
                    },
                    {
                      "$ref": "#/definitions/pipeline/common/StringNGVariable"
                    }
                  ]
                }
              },
              "providerCredential": {
                "$ref": "#/definitions/pipeline/steps/cd/TerraformProviderCredential"
              },
              "targets": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "varFiles": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/pipeline/steps/cd/TerraformVarFileWrapper"
                }
              },
              "workspace": {
                "type": "string"
              },
              "description": {
                "desc": "This is the description for TerraformExecutionData"
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "TerraformProviderCredential": {
            "title": "TerraformProviderCredential",
            "type": "object",
            "required": [
              "spec",
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "Aws"
                ]
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#",
            "allOf": [
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "Aws"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/cd/AWSIAMRoleCredentialSpec"
                    }
                  }
                }
              }
            ]
          },
          "AWSIAMRoleCredentialSpec": {
            "title": "AWSIAMRoleCredentialSpec",
            "type": "object",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/steps/cd/TerraformProviderCredentialSpec"
              },
              {
                "type": "object",
                "required": [
                  "connectorRef"
                ],
                "properties": {
                  "connectorRef": {
                    "type": "string"
                  },
                  "region": {
                    "type": "string"
                  },
                  "roleArn": {
                    "type": "string"
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "TerraformProviderCredentialSpec": {
            "title": "TerraformProviderCredentialSpec",
            "type": "object",
            "discriminator": "type",
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "TerraformPlanStepNode": {
            "title": "TerraformPlanStepNode",
            "type": "object",
            "required": [
              "identifier",
              "name",
              "spec",
              "type"
            ],
            "properties": {
              "description": {
                "type": "string",
                "desc": "This is the description for TerraformPlanStepNode"
              },
              "enforce": {
                "$ref": "#/definitions/pipeline/common/PolicyConfig"
              },
              "failureStrategies": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/pipeline/common/FailureStrategyConfig"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "identifier": {
                "type": "string",
                "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
              },
              "name": {
                "type": "string",
                "pattern": "^[a-zA-Z_0-9-.][-0-9a-zA-Z_\\s.]{0,127}$"
              },
              "strategy": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StrategyConfig"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "timeout": {
                "type": "string",
                "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
              },
              "type": {
                "type": "string",
                "enum": [
                  "TerraformPlan"
                ]
              },
              "when": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StepWhenCondition"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#",
            "allOf": [
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "TerraformPlan"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/cd/TerraformPlanStepInfo"
                    }
                  }
                }
              }
            ]
          },
          "TerraformPlanStepInfo": {
            "title": "TerraformPlanStepInfo",
            "allOf": [
              {
                "oneOf": [
                  {
                    "required": [
                      "configuration"
                    ]
                  },
                  {
                    "required": [
                      "cloudCliConfiguration"
                    ]
                  }
                ],
                "$ref": "#/definitions/pipeline/common/StepSpecType"
              },
              {
                "type": "object",
                "required": [
                  "provisionerIdentifier"
                ],
                "properties": {
                  "cloudCliConfiguration": {
                    "$ref": "#/definitions/pipeline/steps/cd/TerraformCloudCliPlanExecutionData"
                  },
                  "configuration": {
                    "$ref": "#/definitions/pipeline/steps/cd/TerraformPlanExecutionData"
                  },
                  "delegateSelectors": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string",
                        "pattern": "(<\\+.+>.*)",
                        "minLength": 1
                      }
                    ]
                  },
                  "provisionerIdentifier": {
                    "type": "string"
                  }
                }
              },
              {
                "oneOf": [
                  {
                    "required": [
                      "configuration"
                    ]
                  },
                  {
                    "required": [
                      "cloudCliConfiguration"
                    ]
                  }
                ]
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "type": "object",
            "required": [
              "provisionerIdentifier"
            ],
            "properties": {
              "cloudCliConfiguration": {
                "$ref": "#/definitions/pipeline/steps/cd/TerraformCloudCliPlanExecutionData"
              },
              "configuration": {
                "$ref": "#/definitions/pipeline/steps/cd/TerraformPlanExecutionData"
              },
              "delegateSelectors": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "(<\\+.+>.*)",
                    "minLength": 1
                  }
                ]
              },
              "provisionerIdentifier": {
                "type": "string"
              },
              "description": {
                "desc": "This is the description for TerraformPlanStepInfo"
              }
            }
          },
          "TerraformCloudCliPlanExecutionData": {
            "title": "TerraformCloudCliPlanExecutionData",
            "type": "object",
            "required": [
              "command",
              "configFiles"
            ],
            "properties": {
              "backendConfig": {
                "$ref": "#/definitions/pipeline/steps/cd/TerraformBackendConfig"
              },
              "command": {
                "type": "string",
                "enum": [
                  "Apply",
                  "Destroy"
                ]
              },
              "commandFlags": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/pipeline/steps/cd/TerraformCliOptionFlag"
                }
              },
              "configFiles": {
                "$ref": "#/definitions/pipeline/steps/cd/TerraformConfigFilesWrapper"
              },
              "environmentVariables": {
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "$ref": "#/definitions/pipeline/common/NumberNGVariable"
                    },
                    {
                      "$ref": "#/definitions/pipeline/common/SecretNGVariable"
                    },
                    {
                      "$ref": "#/definitions/pipeline/common/StringNGVariable"
                    }
                  ]
                }
              },
              "targets": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "varFiles": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/pipeline/steps/cd/TerraformVarFileWrapper"
                }
              },
              "skipStateStorage": {
                "oneOf": [
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "description": {
                "desc": "This is the description for TerraformCloudCliPlanExecutionData"
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "TerraformPlanExecutionData": {
            "title": "TerraformPlanExecutionData",
            "type": "object",
            "required": [
              "command",
              "configFiles",
              "secretManagerRef"
            ],
            "properties": {
              "backendConfig": {
                "$ref": "#/definitions/pipeline/steps/cd/TerraformBackendConfig"
              },
              "command": {
                "type": "string",
                "enum": [
                  "Apply",
                  "Destroy"
                ]
              },
              "commandFlags": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/pipeline/steps/cd/TerraformCliOptionFlag"
                }
              },
              "configFiles": {
                "$ref": "#/definitions/pipeline/steps/cd/TerraformConfigFilesWrapper"
              },
              "environmentVariables": {
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "$ref": "#/definitions/pipeline/common/NumberNGVariable"
                    },
                    {
                      "$ref": "#/definitions/pipeline/common/SecretNGVariable"
                    },
                    {
                      "$ref": "#/definitions/pipeline/common/StringNGVariable"
                    }
                  ]
                }
              },
              "providerCredential": {
                "$ref": "#/definitions/pipeline/steps/cd/TerraformProviderCredential"
              },
              "exportTerraformHumanReadablePlan": {
                "oneOf": [
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "exportTerraformPlanJson": {
                "oneOf": [
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "secretManagerRef": {
                "type": "string"
              },
              "skipRefreshCommand": {
                "oneOf": [
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "targets": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "varFiles": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/pipeline/steps/cd/TerraformVarFileWrapper"
                }
              },
              "workspace": {
                "type": "string"
              },
              "skipStateStorage": {
                "oneOf": [
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "description": {
                "desc": "This is the description for TerraformPlanExecutionData"
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "TerraformDestroyStepNode": {
            "title": "TerraformDestroyStepNode",
            "type": "object",
            "required": [
              "identifier",
              "name",
              "spec",
              "type"
            ],
            "properties": {
              "description": {
                "type": "string",
                "desc": "This is the description for TerraformDestroyStepNode"
              },
              "enforce": {
                "$ref": "#/definitions/pipeline/common/PolicyConfig"
              },
              "failureStrategies": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/pipeline/common/FailureStrategyConfig"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "identifier": {
                "type": "string",
                "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
              },
              "name": {
                "type": "string",
                "pattern": "^[a-zA-Z_0-9-.][-0-9a-zA-Z_\\s.]{0,127}$"
              },
              "strategy": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StrategyConfig"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "timeout": {
                "type": "string",
                "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
              },
              "type": {
                "type": "string",
                "enum": [
                  "TerraformDestroy"
                ]
              },
              "when": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StepWhenCondition"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#",
            "allOf": [
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "TerraformDestroy"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/cd/TerraformDestroyStepInfo"
                    }
                  }
                }
              }
            ]
          },
          "TerraformDestroyStepInfo": {
            "title": "TerraformDestroyStepInfo",
            "allOf": [
              {
                "oneOf": [
                  {
                    "required": [
                      "configuration"
                    ]
                  },
                  {
                    "required": [
                      "cloudCliConfiguration"
                    ]
                  }
                ],
                "$ref": "#/definitions/pipeline/common/StepSpecType"
              },
              {
                "type": "object",
                "required": [
                  "provisionerIdentifier"
                ],
                "properties": {
                  "cloudCliConfiguration": {
                    "$ref": "#/definitions/pipeline/steps/cd/TerraformCloudCliStepConfiguration"
                  },
                  "configuration": {
                    "$ref": "#/definitions/pipeline/steps/cd/TerraformStepConfiguration"
                  },
                  "delegateSelectors": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string",
                        "pattern": "(<\\+.+>.*)",
                        "minLength": 1
                      }
                    ]
                  },
                  "metadata": {
                    "type": "string"
                  },
                  "provisionerIdentifier": {
                    "type": "string"
                  }
                }
              },
              {
                "oneOf": [
                  {
                    "required": [
                      "configuration"
                    ]
                  },
                  {
                    "required": [
                      "cloudCliConfiguration"
                    ]
                  }
                ]
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "type": "object",
            "required": [
              "provisionerIdentifier"
            ],
            "properties": {
              "cloudCliConfiguration": {
                "$ref": "#/definitions/pipeline/steps/cd/TerraformCloudCliStepConfiguration"
              },
              "configuration": {
                "$ref": "#/definitions/pipeline/steps/cd/TerraformStepConfiguration"
              },
              "delegateSelectors": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "(<\\+.+>.*)",
                    "minLength": 1
                  }
                ]
              },
              "metadata": {
                "type": "string"
              },
              "provisionerIdentifier": {
                "type": "string"
              },
              "description": {
                "desc": "This is the description for TerraformDestroyStepInfo"
              }
            }
          },
          "TerraformRollbackStepNode": {
            "title": "TerraformRollbackStepNode",
            "type": "object",
            "required": [
              "identifier",
              "name",
              "spec",
              "type"
            ],
            "properties": {
              "description": {
                "type": "string",
                "desc": "This is the description for TerraformRollbackStepNode"
              },
              "enforce": {
                "$ref": "#/definitions/pipeline/common/PolicyConfig"
              },
              "failureStrategies": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/pipeline/common/FailureStrategyConfig"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "identifier": {
                "type": "string",
                "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
              },
              "name": {
                "type": "string",
                "pattern": "^[a-zA-Z_0-9-.][-0-9a-zA-Z_\\s.]{0,127}$"
              },
              "strategy": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StrategyConfig"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "timeout": {
                "type": "string",
                "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
              },
              "type": {
                "type": "string",
                "enum": [
                  "TerraformRollback"
                ]
              },
              "when": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StepWhenCondition"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#",
            "allOf": [
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "TerraformRollback"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/cd/TerraformRollbackStepInfo"
                    }
                  }
                }
              }
            ]
          },
          "TerraformRollbackStepInfo": {
            "title": "TerraformRollbackStepInfo",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/common/StepSpecType"
              },
              {
                "type": "object",
                "required": [
                  "provisionerIdentifier"
                ],
                "properties": {
                  "commandFlags": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/pipeline/steps/cd/TerraformCliOptionFlag"
                    }
                  },
                  "delegateSelectors": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string",
                        "pattern": "(<\\+.+>.*)",
                        "minLength": 1
                      }
                    ]
                  },
                  "provisionerIdentifier": {
                    "type": "string"
                  },
                  "skipRefreshCommand": {
                    "oneOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "type": "object",
            "required": [
              "provisionerIdentifier"
            ],
            "properties": {
              "commandFlags": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/pipeline/steps/cd/TerraformCliOptionFlag"
                }
              },
              "delegateSelectors": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "(<\\+.+>.*)",
                    "minLength": 1
                  }
                ]
              },
              "provisionerIdentifier": {
                "type": "string"
              },
              "skipRefreshCommand": {
                "oneOf": [
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "description": {
                "desc": "This is the description for TerraformRollbackStepInfo"
              }
            }
          },
          "CloudformationCreateStackStepNode": {
            "title": "CloudformationCreateStackStepNode",
            "type": "object",
            "required": [
              "identifier",
              "name",
              "type"
            ],
            "properties": {
              "description": {
                "type": "string",
                "desc": "This is the description for CloudformationCreateStackStepNode"
              },
              "enforce": {
                "$ref": "#/definitions/pipeline/common/PolicyConfig"
              },
              "failureStrategies": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/pipeline/common/FailureStrategyConfig"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "identifier": {
                "type": "string",
                "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
              },
              "name": {
                "type": "string",
                "pattern": "^[a-zA-Z_0-9-.][-0-9a-zA-Z_\\s.]{0,127}$"
              },
              "strategy": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StrategyConfig"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "timeout": {
                "type": "string",
                "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
              },
              "type": {
                "type": "string",
                "enum": [
                  "CreateStack"
                ]
              },
              "when": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StepWhenCondition"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#",
            "allOf": [
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "CreateStack"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/cd/CloudformationCreateStackStepInfo"
                    }
                  }
                }
              }
            ]
          },
          "CloudformationCreateStackStepInfo": {
            "title": "CloudformationCreateStackStepInfo",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/common/StepSpecType"
              },
              {
                "type": "object",
                "required": [
                  "configuration",
                  "provisionerIdentifier"
                ],
                "properties": {
                  "configuration": {
                    "$ref": "#/definitions/pipeline/steps/cd/CloudformationCreateStackStepConfiguration"
                  },
                  "delegateSelectors": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string",
                        "pattern": "(<\\+.+>.*)",
                        "minLength": 1
                      }
                    ]
                  },
                  "metadata": {
                    "type": "string"
                  },
                  "provisionerIdentifier": {
                    "type": "string"
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "type": "object",
            "required": [
              "configuration",
              "provisionerIdentifier"
            ],
            "properties": {
              "configuration": {
                "$ref": "#/definitions/pipeline/steps/cd/CloudformationCreateStackStepConfiguration"
              },
              "delegateSelectors": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "(<\\+.+>.*)",
                    "minLength": 1
                  }
                ]
              },
              "metadata": {
                "type": "string"
              },
              "provisionerIdentifier": {
                "type": "string"
              },
              "description": {
                "desc": "This is the description for CloudformationCreateStackStepInfo"
              }
            }
          },
          "CloudformationCreateStackStepConfiguration": {
            "title": "CloudformationCreateStackStepConfiguration",
            "type": "object",
            "required": [
              "connectorRef",
              "region",
              "stackName",
              "templateFile"
            ],
            "properties": {
              "capabilities": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "connectorRef": {
                "type": "string"
              },
              "parameterOverrides": {
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "$ref": "#/definitions/pipeline/common/NumberNGVariable"
                    },
                    {
                      "$ref": "#/definitions/pipeline/common/SecretNGVariable"
                    },
                    {
                      "$ref": "#/definitions/pipeline/common/StringNGVariable"
                    }
                  ]
                }
              },
              "parameters": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/pipeline/steps/cd/CloudformationParametersFileSpec"
                }
              },
              "region": {
                "type": "string"
              },
              "roleArn": {
                "type": "string"
              },
              "skipOnStackStatuses": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "stackName": {
                "type": "string"
              },
              "tags": {
                "$ref": "#/definitions/pipeline/steps/cd/CloudformationTags"
              },
              "templateFile": {
                "$ref": "#/definitions/pipeline/steps/cd/CloudformationTemplateFile"
              },
              "description": {
                "desc": "This is the description for CloudformationCreateStackStepConfiguration"
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "CloudformationParametersFileSpec": {
            "title": "CloudformationParametersFileSpec",
            "type": "object",
            "required": [
              "identifier",
              "store"
            ],
            "properties": {
              "identifier": {
                "type": "string"
              },
              "store": {
                "$ref": "#/definitions/pipeline/steps/cd/StoreConfigWrapper"
              },
              "description": {
                "desc": "This is the description for CloudformationParametersFileSpec"
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "CloudformationTags": {
            "title": "CloudformationTags",
            "type": "object",
            "required": [
              "spec",
              "type"
            ],
            "properties": {
              "type": {
                "type": "string"
              },
              "description": {
                "desc": "This is the description for CloudformationTags"
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#",
            "allOf": [
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "Inline"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/cd/InlineCloudformationTagsFileSpec"
                    }
                  }
                }
              },
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "Remote"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/cd/RemoteCloudformationTagsFileSpec"
                    }
                  }
                }
              }
            ]
          },
          "InlineCloudformationTagsFileSpec": {
            "title": "InlineCloudformationTagsFileSpec",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/steps/cd/CloudformationTagsFileSpec"
              },
              {
                "type": "object",
                "required": [
                  "content"
                ],
                "properties": {
                  "content": {
                    "type": "string"
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "properties": {
              "description": {
                "desc": "This is the description for InlineCloudformationTagsFileSpec"
              }
            }
          },
          "CloudformationTagsFileSpec": {
            "title": "CloudformationTagsFileSpec",
            "type": "object",
            "discriminator": "type",
            "properties": {
              "type": {
                "type": "string"
              },
              "description": {
                "desc": "This is the description for CloudformationTagsFileSpec"
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "RemoteCloudformationTagsFileSpec": {
            "title": "RemoteCloudformationTagsFileSpec",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/steps/cd/CloudformationTagsFileSpec"
              },
              {
                "type": "object",
                "required": [
                  "store"
                ],
                "properties": {
                  "store": {
                    "$ref": "#/definitions/pipeline/steps/cd/StoreConfigWrapper"
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "properties": {
              "description": {
                "desc": "This is the description for RemoteCloudformationTagsFileSpec"
              }
            }
          },
          "CloudformationTemplateFile": {
            "title": "CloudformationTemplateFile",
            "type": "object",
            "required": [
              "spec",
              "type"
            ],
            "properties": {
              "type": {
                "type": "string"
              },
              "description": {
                "desc": "This is the description for CloudformationTemplateFile"
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#",
            "allOf": [
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "Inline"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/cd/InlineCloudformationTemplateFileSpec"
                    }
                  }
                }
              },
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "Remote"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/cd/RemoteCloudformationTemplateFileSpec"
                    }
                  }
                }
              },
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "S3URL"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/cd/S3UrlCloudformationTemplateFileSpec"
                    }
                  }
                }
              }
            ]
          },
          "InlineCloudformationTemplateFileSpec": {
            "title": "InlineCloudformationTemplateFileSpec",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/steps/cd/CloudformationTemplateFileSpec"
              },
              {
                "type": "object",
                "required": [
                  "templateBody"
                ],
                "properties": {
                  "templateBody": {
                    "type": "string"
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "properties": {
              "description": {
                "desc": "This is the description for InlineCloudformationTemplateFileSpec"
              }
            }
          },
          "CloudformationTemplateFileSpec": {
            "title": "CloudformationTemplateFileSpec",
            "type": "object",
            "discriminator": "type",
            "properties": {
              "type": {
                "type": "string"
              },
              "description": {
                "desc": "This is the description for CloudformationTemplateFileSpec"
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "RemoteCloudformationTemplateFileSpec": {
            "title": "RemoteCloudformationTemplateFileSpec",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/steps/cd/CloudformationTemplateFileSpec"
              },
              {
                "type": "object",
                "required": [
                  "store"
                ],
                "properties": {
                  "store": {
                    "$ref": "#/definitions/pipeline/steps/cd/StoreConfigWrapper"
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "properties": {
              "description": {
                "desc": "This is the description for RemoteCloudformationTemplateFileSpec"
              }
            }
          },
          "S3UrlCloudformationTemplateFileSpec": {
            "title": "S3UrlCloudformationTemplateFileSpec",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/steps/cd/CloudformationTemplateFileSpec"
              },
              {
                "type": "object",
                "required": [
                  "templateUrl"
                ],
                "properties": {
                  "templateUrl": {
                    "type": "string"
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "properties": {
              "description": {
                "desc": "This is the description for S3UrlCloudformationTemplateFileSpec"
              }
            }
          },
          "CloudformationDeleteStackStepNode": {
            "title": "CloudformationDeleteStackStepNode",
            "type": "object",
            "required": [
              "identifier",
              "name",
              "type"
            ],
            "properties": {
              "description": {
                "type": "string",
                "desc": "This is the description for CloudformationDeleteStackStepNode"
              },
              "enforce": {
                "$ref": "#/definitions/pipeline/common/PolicyConfig"
              },
              "failureStrategies": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/pipeline/common/FailureStrategyConfig"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "identifier": {
                "type": "string",
                "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
              },
              "name": {
                "type": "string",
                "pattern": "^[a-zA-Z_0-9-.][-0-9a-zA-Z_\\s.]{0,127}$"
              },
              "strategy": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StrategyConfig"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "timeout": {
                "type": "string",
                "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
              },
              "type": {
                "type": "string",
                "enum": [
                  "DeleteStack"
                ]
              },
              "when": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StepWhenCondition"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#",
            "allOf": [
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "DeleteStack"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/cd/CloudformationDeleteStackStepInfo"
                    }
                  }
                }
              }
            ]
          },
          "CloudformationDeleteStackStepInfo": {
            "title": "CloudformationDeleteStackStepInfo",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/common/StepSpecType"
              },
              {
                "type": "object",
                "required": [
                  "configuration"
                ],
                "properties": {
                  "configuration": {
                    "$ref": "#/definitions/pipeline/steps/cd/CloudformationDeleteStackStepConfiguration"
                  },
                  "delegateSelectors": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string",
                        "pattern": "(<\\+.+>.*)",
                        "minLength": 1
                      }
                    ]
                  },
                  "metadata": {
                    "type": "string"
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "type": "object",
            "required": [
              "configuration"
            ],
            "properties": {
              "configuration": {
                "$ref": "#/definitions/pipeline/steps/cd/CloudformationDeleteStackStepConfiguration"
              },
              "delegateSelectors": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "(<\\+.+>.*)",
                    "minLength": 1
                  }
                ]
              },
              "metadata": {
                "type": "string"
              },
              "description": {
                "desc": "This is the description for CloudformationDeleteStackStepInfo"
              }
            }
          },
          "CloudformationDeleteStackStepConfiguration": {
            "title": "CloudformationDeleteStackStepConfiguration",
            "type": "object",
            "required": [
              "spec",
              "type"
            ],
            "properties": {
              "type": {
                "type": "string"
              },
              "description": {
                "desc": "This is the description for CloudformationDeleteStackStepConfiguration"
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#",
            "allOf": [
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "Inherited"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/cd/InheritedCloudformationDeleteStackStepConfiguration"
                    }
                  }
                }
              },
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "Inline"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/cd/InlineCloudformationDeleteStackStepConfiguration"
                    }
                  }
                }
              }
            ]
          },
          "InheritedCloudformationDeleteStackStepConfiguration": {
            "title": "InheritedCloudformationDeleteStackStepConfiguration",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/steps/cd/CloudformationDeleteStackStepConfigurationSpec"
              },
              {
                "type": "object",
                "required": [
                  "provisionerIdentifier"
                ],
                "properties": {
                  "provisionerIdentifier": {
                    "type": "string"
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "properties": {
              "description": {
                "desc": "This is the description for InheritedCloudformationDeleteStackStepConfiguration"
              }
            }
          },
          "CloudformationDeleteStackStepConfigurationSpec": {
            "title": "CloudformationDeleteStackStepConfigurationSpec",
            "type": "object",
            "discriminator": "type",
            "properties": {
              "type": {
                "type": "string"
              },
              "description": {
                "desc": "This is the description for CloudformationDeleteStackStepConfigurationSpec"
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "InlineCloudformationDeleteStackStepConfiguration": {
            "title": "InlineCloudformationDeleteStackStepConfiguration",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/steps/cd/CloudformationDeleteStackStepConfigurationSpec"
              },
              {
                "type": "object",
                "required": [
                  "connectorRef",
                  "region",
                  "stackName"
                ],
                "properties": {
                  "connectorRef": {
                    "type": "string"
                  },
                  "region": {
                    "type": "string"
                  },
                  "roleArn": {
                    "type": "string"
                  },
                  "stackName": {
                    "type": "string"
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "properties": {
              "description": {
                "desc": "This is the description for InlineCloudformationDeleteStackStepConfiguration"
              }
            }
          },
          "CloudformationRollbackStepNode": {
            "title": "CloudformationRollbackStepNode",
            "type": "object",
            "required": [
              "identifier",
              "name",
              "type"
            ],
            "properties": {
              "description": {
                "type": "string",
                "desc": "This is the description for CloudformationRollbackStepNode"
              },
              "enforce": {
                "$ref": "#/definitions/pipeline/common/PolicyConfig"
              },
              "failureStrategies": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/pipeline/common/FailureStrategyConfig"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "identifier": {
                "type": "string",
                "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
              },
              "name": {
                "type": "string",
                "pattern": "^[a-zA-Z_0-9-.][-0-9a-zA-Z_\\s.]{0,127}$"
              },
              "strategy": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StrategyConfig"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "timeout": {
                "type": "string",
                "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
              },
              "type": {
                "type": "string",
                "enum": [
                  "RollbackStack"
                ]
              },
              "when": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StepWhenCondition"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#",
            "allOf": [
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "RollbackStack"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/cd/CloudformationRollbackStepInfo"
                    }
                  }
                }
              }
            ]
          },
          "CloudformationRollbackStepInfo": {
            "title": "CloudformationRollbackStepInfo",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/common/StepSpecType"
              },
              {
                "type": "object",
                "required": [
                  "configuration"
                ],
                "properties": {
                  "configuration": {
                    "$ref": "#/definitions/pipeline/steps/cd/CloudformationRollbackStepConfiguration"
                  },
                  "delegateSelectors": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string",
                        "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                        "minLength": 1
                      }
                    ]
                  },
                  "metadata": {
                    "type": "string"
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "type": "object",
            "required": [
              "configuration"
            ],
            "properties": {
              "configuration": {
                "$ref": "#/definitions/pipeline/steps/cd/CloudformationRollbackStepConfiguration"
              },
              "delegateSelectors": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                    "minLength": 1
                  }
                ]
              },
              "metadata": {
                "type": "string"
              },
              "description": {
                "desc": "This is the description for CloudformationRollbackStepInfo"
              }
            }
          },
          "CloudformationRollbackStepConfiguration": {
            "title": "CloudformationRollbackStepConfiguration",
            "type": "object",
            "required": [
              "provisionerIdentifier"
            ],
            "properties": {
              "provisionerIdentifier": {
                "type": "string"
              },
              "description": {
                "desc": "This is the description for CloudformationRollbackStepConfiguration"
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "AzureCreateARMResourceStepNode": {
            "title": "AzureCreateARMResourceStepNode",
            "type": "object",
            "required": [
              "identifier",
              "name",
              "type"
            ],
            "properties": {
              "description": {
                "type": "string",
                "desc": "This is the description for AzureCreateARMResourceStepNode"
              },
              "enforce": {
                "$ref": "#/definitions/pipeline/common/PolicyConfig"
              },
              "failureStrategies": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/pipeline/common/FailureStrategyConfig"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "identifier": {
                "type": "string",
                "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
              },
              "name": {
                "type": "string",
                "pattern": "^[a-zA-Z_0-9-.][-0-9a-zA-Z_\\s.]{0,127}$"
              },
              "strategy": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StrategyConfig"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "timeout": {
                "type": "string",
                "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
              },
              "type": {
                "type": "string",
                "enum": [
                  "AzureCreateARMResource"
                ]
              },
              "when": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StepWhenCondition"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#",
            "allOf": [
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "AzureCreateARMResource"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/cd/AzureCreateARMResourceStepInfo"
                    }
                  }
                }
              }
            ]
          },
          "AzureCreateARMResourceStepInfo": {
            "title": "AzureCreateARMResourceStepInfo",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/common/StepSpecType"
              },
              {
                "type": "object",
                "required": [
                  "configuration",
                  "provisionerIdentifier"
                ],
                "properties": {
                  "configuration": {
                    "$ref": "#/definitions/pipeline/steps/cd/AzureCreateARMResourceStepConfiguration"
                  },
                  "delegateSelectors": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string",
                        "pattern": "(<\\+.+>.*)",
                        "minLength": 1
                      }
                    ]
                  },
                  "metadata": {
                    "type": "string"
                  },
                  "provisionerIdentifier": {
                    "type": "string"
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "type": "object",
            "required": [
              "configuration",
              "provisionerIdentifier"
            ],
            "properties": {
              "configuration": {
                "$ref": "#/definitions/pipeline/steps/cd/AzureCreateARMResourceStepConfiguration"
              },
              "delegateSelectors": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "(<\\+.+>.*)",
                    "minLength": 1
                  }
                ]
              },
              "metadata": {
                "type": "string"
              },
              "provisionerIdentifier": {
                "type": "string"
              },
              "description": {
                "desc": "This is the description for AzureCreateARMResourceStepInfo"
              }
            }
          },
          "AzureCreateARMResourceStepConfiguration": {
            "title": "AzureCreateARMResourceStepConfiguration",
            "type": "object",
            "required": [
              "connectorRef",
              "scope",
              "template"
            ],
            "properties": {
              "connectorRef": {
                "type": "string"
              },
              "parameters": {
                "$ref": "#/definitions/pipeline/steps/cd/AzureCreateARMResourceParameterFile"
              },
              "scope": {
                "$ref": "#/definitions/pipeline/steps/cd/AzureCreateARMResourceStepScope"
              },
              "template": {
                "$ref": "#/definitions/pipeline/steps/cd/AzureTemplateFile"
              },
              "description": {
                "desc": "This is the description for AzureCreateARMResourceStepConfiguration"
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "AzureCreateARMResourceParameterFile": {
            "title": "AzureCreateARMResourceParameterFile",
            "type": "object",
            "required": [
              "store"
            ],
            "properties": {
              "store": {
                "$ref": "#/definitions/pipeline/steps/cd/StoreConfigWrapper"
              },
              "description": {
                "desc": "This is the description for AzureCreateARMResourceParameterFile"
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "AzureCreateARMResourceStepScope": {
            "title": "AzureCreateARMResourceStepScope",
            "type": "object",
            "required": [
              "spec",
              "type"
            ],
            "properties": {
              "type": {
                "type": "string"
              },
              "description": {
                "desc": "This is the description for AzureCreateARMResourceStepScope"
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#",
            "allOf": [
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "ManagementGroup"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/cd/AzureManagementSpec"
                    }
                  }
                }
              },
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "ResourceGroup"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/cd/AzureResourceGroupSpec"
                    }
                  }
                }
              },
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "Subscription"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/cd/AzureSubscriptionSpec"
                    }
                  }
                }
              },
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "Tenant"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/cd/AzureTenantSpec"
                    }
                  }
                }
              }
            ]
          },
          "AzureManagementSpec": {
            "title": "AzureManagementSpec",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/steps/cd/AzureScopeType"
              },
              {
                "type": "object",
                "required": [
                  "location",
                  "managementGroupId"
                ],
                "properties": {
                  "location": {
                    "type": "string"
                  },
                  "managementGroupId": {
                    "type": "string"
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "properties": {
              "description": {
                "desc": "This is the description for AzureManagementSpec"
              }
            }
          },
          "AzureScopeType": {
            "title": "AzureScopeType",
            "type": "object",
            "discriminator": "type",
            "$schema": "http://json-schema.org/draft-07/schema#",
            "properties": {
              "description": {
                "desc": "This is the description for AzureScopeType"
              }
            }
          },
          "AzureResourceGroupSpec": {
            "title": "AzureResourceGroupSpec",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/steps/cd/AzureScopeType"
              },
              {
                "type": "object",
                "required": [
                  "resourceGroup",
                  "subscription"
                ],
                "properties": {
                  "mode": {
                    "type": "string",
                    "enum": [
                      "Incremental",
                      "Complete"
                    ]
                  },
                  "resourceGroup": {
                    "type": "string"
                  },
                  "subscription": {
                    "type": "string"
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "properties": {
              "description": {
                "desc": "This is the description for AzureResourceGroupSpec"
              }
            }
          },
          "AzureSubscriptionSpec": {
            "title": "AzureSubscriptionSpec",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/steps/cd/AzureScopeType"
              },
              {
                "type": "object",
                "required": [
                  "location",
                  "subscription"
                ],
                "properties": {
                  "location": {
                    "type": "string"
                  },
                  "subscription": {
                    "type": "string"
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "properties": {
              "description": {
                "desc": "This is the description for AzureSubscriptionSpec"
              }
            }
          },
          "AzureTenantSpec": {
            "title": "AzureTenantSpec",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/steps/cd/AzureScopeType"
              },
              {
                "type": "object",
                "required": [
                  "location"
                ],
                "properties": {
                  "location": {
                    "type": "string"
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "properties": {
              "description": {
                "desc": "This is the description for AzureTenantSpec"
              }
            }
          },
          "AzureTemplateFile": {
            "title": "AzureTemplateFile",
            "type": "object",
            "required": [
              "store"
            ],
            "properties": {
              "store": {
                "$ref": "#/definitions/pipeline/steps/cd/StoreConfigWrapper"
              },
              "description": {
                "desc": "This is the description for AzureTemplateFile"
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "AzureCreateBPStepNode": {
            "title": "AzureCreateBPStepNode",
            "type": "object",
            "required": [
              "identifier",
              "name",
              "type"
            ],
            "properties": {
              "description": {
                "type": "string",
                "desc": "This is the description for AzureCreateBPStepNode"
              },
              "enforce": {
                "$ref": "#/definitions/pipeline/common/PolicyConfig"
              },
              "failureStrategies": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/pipeline/common/FailureStrategyConfig"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "identifier": {
                "type": "string",
                "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
              },
              "name": {
                "type": "string",
                "pattern": "^[a-zA-Z_0-9-.][-0-9a-zA-Z_\\s.]{0,127}$"
              },
              "strategy": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StrategyConfig"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "timeout": {
                "type": "string",
                "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
              },
              "type": {
                "type": "string",
                "enum": [
                  "AzureCreateBPResource"
                ]
              },
              "when": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StepWhenCondition"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#",
            "allOf": [
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "AzureCreateBPResource"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/cd/AzureCreateBPStepInfo"
                    }
                  }
                }
              }
            ]
          },
          "AzureCreateBPStepInfo": {
            "title": "AzureCreateBPStepInfo",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/common/StepSpecType"
              },
              {
                "type": "object",
                "required": [
                  "configuration"
                ],
                "properties": {
                  "configuration": {
                    "$ref": "#/definitions/pipeline/steps/cd/AzureCreateBPStepConfiguration"
                  },
                  "delegateSelectors": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string",
                        "pattern": "(<\\+.+>.*)",
                        "minLength": 1
                      }
                    ]
                  },
                  "metadata": {
                    "type": "string"
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "type": "object",
            "required": [
              "configuration"
            ],
            "properties": {
              "configuration": {
                "$ref": "#/definitions/pipeline/steps/cd/AzureCreateBPStepConfiguration"
              },
              "delegateSelectors": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "(<\\+.+>.*)",
                    "minLength": 1
                  }
                ]
              },
              "metadata": {
                "type": "string"
              },
              "description": {
                "desc": "This is the description for AzureCreateBPStepInfo"
              }
            }
          },
          "AzureCreateBPStepConfiguration": {
            "title": "AzureCreateBPStepConfiguration",
            "type": "object",
            "required": [
              "connectorRef",
              "scope",
              "template"
            ],
            "properties": {
              "assignmentName": {
                "type": "string"
              },
              "connectorRef": {
                "type": "string"
              },
              "scope": {
                "type": "string",
                "enum": [
                  "Subscription",
                  "ManagementGroup"
                ]
              },
              "template": {
                "$ref": "#/definitions/pipeline/steps/cd/AzureTemplateFile"
              },
              "description": {
                "desc": "This is the description for AzureCreateBPStepConfiguration"
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "AzureARMRollbackStepNode": {
            "title": "AzureARMRollbackStepNode",
            "type": "object",
            "required": [
              "identifier",
              "name",
              "type"
            ],
            "properties": {
              "description": {
                "type": "string",
                "desc": "This is the description for AzureARMRollbackStepNode"
              },
              "enforce": {
                "$ref": "#/definitions/pipeline/common/PolicyConfig"
              },
              "failureStrategies": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/pipeline/common/FailureStrategyConfig"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "identifier": {
                "type": "string",
                "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
              },
              "name": {
                "type": "string",
                "pattern": "^[a-zA-Z_0-9-.][-0-9a-zA-Z_\\s.]{0,127}$"
              },
              "strategy": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StrategyConfig"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "timeout": {
                "type": "string",
                "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
              },
              "type": {
                "type": "string",
                "enum": [
                  "AzureARMRollback"
                ]
              },
              "when": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StepWhenCondition"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#",
            "allOf": [
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "AzureARMRollback"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/cd/AzureARMRollbackStepInfo"
                    }
                  }
                }
              }
            ]
          },
          "AzureARMRollbackStepInfo": {
            "title": "AzureARMRollbackStepInfo",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/common/StepSpecType"
              },
              {
                "type": "object",
                "required": [
                  "provisionerIdentifier"
                ],
                "properties": {
                  "delegateSelectors": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string",
                        "pattern": "(<\\+.+>.*)",
                        "minLength": 1
                      }
                    ]
                  },
                  "provisionerIdentifier": {
                    "type": "string"
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "type": "object",
            "required": [
              "provisionerIdentifier"
            ],
            "properties": {
              "delegateSelectors": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "(<\\+.+>.*)",
                    "minLength": 1
                  }
                ]
              },
              "provisionerIdentifier": {
                "type": "string"
              },
              "description": {
                "desc": "This is the description for AzureARMRollbackStepInfo"
              }
            }
          },
          "JenkinsBuildStepNode": {
            "title": "JenkinsBuildStepNode",
            "type": "object",
            "required": [
              "identifier",
              "name",
              "spec",
              "type"
            ],
            "properties": {
              "description": {
                "type": "string",
                "desc": "This is the description for JenkinsBuildStepNode"
              },
              "enforce": {
                "$ref": "#/definitions/pipeline/common/PolicyConfig"
              },
              "failureStrategies": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/pipeline/common/FailureStrategyConfig"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "identifier": {
                "type": "string",
                "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
              },
              "name": {
                "type": "string",
                "pattern": "^[a-zA-Z_0-9-.][-0-9a-zA-Z_\\s.]{0,127}$"
              },
              "strategy": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StrategyConfig"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "timeout": {
                "type": "string",
                "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
              },
              "type": {
                "type": "string",
                "enum": [
                  "JenkinsBuild"
                ]
              },
              "when": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StepWhenCondition"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#",
            "allOf": [
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "JenkinsBuild"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/cd/JenkinsBuildStepInfo"
                    }
                  }
                }
              }
            ]
          },
          "JenkinsBuildStepInfo": {
            "title": "JenkinsBuildStepInfo",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/common/StepSpecType"
              },
              {
                "type": "object",
                "required": [
                  "connectorRef",
                  "jobName"
                ],
                "properties": {
                  "connectorRef": {
                    "type": "string",
                    "metadata": {
                      "inputProperties": {
                        "type": "string",
                        "internalType": "jenkins_connector"
                      }
                    }
                  },
                  "consoleLogPollFrequency": {
                    "type": "string",
                    "pattern": "^(([1-9])+\\d+[s])|(([5-9])+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(<\\+input>.*)|(.*<\\+.*>.*)|(^$))$"
                  },
                  "delegateSelectors": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string",
                        "pattern": "(<\\+.+>.*)",
                        "minLength": 1
                      }
                    ]
                  },
                  "jobName": {
                    "type": "string",
                    "metadata": {
                      "inputProperties": {
                        "type": "string",
                        "internalType": "jenkins_job_name",
                        "dependsOn": [
                          "connectorRef"
                        ]
                      }
                    }
                  },
                  "jobParameter": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/pipeline/steps/cd/JenkinsParameterField"
                        }
                      },
                      {
                        "type": "string",
                        "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                        "minLength": 1
                      }
                    ],
                    "metadata": {
                      "inputProperties": {
                        "type": "object",
                        "internalType": "jenkins_job_parameter",
                        "dependsOn": [
                          "connectorRef",
                          "jobName"
                        ]
                      }
                    }
                  },
                  "metadata": {
                    "type": "string"
                  },
                  "unstableStatusAsSuccess": {
                    "type": "boolean"
                  },
                  "useConnectorUrlForJobExecution": {
                    "type": "boolean"
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "type": "object",
            "required": [
              "connectorRef",
              "jobName"
            ],
            "properties": {
              "connectorRef": {
                "type": "string",
                "metadata": {
                  "inputProperties": {
                    "type": "string",
                    "internalType": "jenkins_connector"
                  }
                }
              },
              "consoleLogPollFrequency": {
                "type": "string",
                "pattern": "^(([1-9])+\\d+[s])|(([5-9])+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(<\\+input>.*)|(.*<\\+.*>.*)|(^$))$"
              },
              "delegateSelectors": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "(<\\+.+>.*)",
                    "minLength": 1
                  }
                ]
              },
              "jobName": {
                "type": "string",
                "metadata": {
                  "inputProperties": {
                    "type": "string",
                    "internalType": "jenkins_job_name",
                    "dependsOn": [
                      "connectorRef"
                    ]
                  }
                }
              },
              "jobParameter": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/pipeline/steps/cd/JenkinsParameterField"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                    "minLength": 1
                  }
                ],
                "metadata": {
                  "inputProperties": {
                    "type": "object",
                    "internalType": "jenkins_job_parameter",
                    "dependsOn": [
                      "connectorRef",
                      "jobName"
                    ]
                  }
                }
              },
              "metadata": {
                "type": "string"
              },
              "unstableStatusAsSuccess": {
                "type": "boolean"
              },
              "useConnectorUrlForJobExecution": {
                "type": "boolean"
              },
              "description": {
                "desc": "This is the description for JenkinsBuildStepInfo"
              }
            }
          },
          "JenkinsParameterField": {
            "title": "JenkinsParameterField",
            "type": "object",
            "required": [
              "value"
            ],
            "properties": {
              "metadata": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "String",
                  "Number"
                ]
              },
              "value": {
                "type": "string"
              },
              "description": {
                "desc": "This is the description for JenkinsParameterField"
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "ShellScriptProvisionStepNode": {
            "title": "ShellScriptProvisionStepNode",
            "type": "object",
            "required": [
              "identifier",
              "name",
              "spec",
              "type"
            ],
            "properties": {
              "description": {
                "type": "string",
                "desc": "This is the description for ShellScriptProvisionStepNode"
              },
              "enforce": {
                "$ref": "#/definitions/pipeline/common/PolicyConfig"
              },
              "failureStrategies": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/pipeline/common/FailureStrategyConfig"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "identifier": {
                "type": "string",
                "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
              },
              "name": {
                "type": "string",
                "pattern": "^[a-zA-Z_0-9-.][-0-9a-zA-Z_\\s.]{0,127}$"
              },
              "strategy": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StrategyConfig"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "timeout": {
                "type": "string",
                "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
              },
              "type": {
                "type": "string",
                "enum": [
                  "ShellScriptProvision"
                ]
              },
              "when": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StepWhenCondition"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#",
            "allOf": [
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "ShellScriptProvision"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/cd/ShellScriptProvisionStepInfo"
                    }
                  }
                }
              }
            ]
          },
          "ShellScriptProvisionStepInfo": {
            "title": "ShellScriptProvisionStepInfo",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/common/StepSpecType"
              },
              {
                "type": "object",
                "required": [
                  "source"
                ],
                "properties": {
                  "delegateSelectors": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string",
                        "pattern": "(<\\+.+>.*)",
                        "minLength": 1
                      }
                    ]
                  },
                  "environmentVariables": {
                    "type": "array",
                    "items": {
                      "oneOf": [
                        {
                          "$ref": "#/definitions/pipeline/common/NumberNGVariable"
                        },
                        {
                          "$ref": "#/definitions/pipeline/common/SecretNGVariable"
                        },
                        {
                          "$ref": "#/definitions/pipeline/common/StringNGVariable"
                        }
                      ]
                    }
                  },
                  "source": {
                    "$ref": "#/definitions/pipeline/common/ShellScriptSourceWrapper"
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "type": "object",
            "required": [
              "source"
            ],
            "properties": {
              "delegateSelectors": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "(<\\+.+>.*)",
                    "minLength": 1
                  }
                ]
              },
              "environmentVariables": {
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "$ref": "#/definitions/pipeline/common/NumberNGVariable"
                    },
                    {
                      "$ref": "#/definitions/pipeline/common/SecretNGVariable"
                    },
                    {
                      "$ref": "#/definitions/pipeline/common/StringNGVariable"
                    }
                  ]
                }
              },
              "source": {
                "$ref": "#/definitions/pipeline/common/ShellScriptSourceWrapper"
              },
              "description": {
                "desc": "This is the description for ShellScriptProvisionStepInfo"
              }
            }
          },
          "ChaosStepNode": {
            "title": "ChaosStepNode",
            "type": "object",
            "required": [
              "identifier",
              "name",
              "spec",
              "type"
            ],
            "properties": {
              "description": {
                "type": "string",
                "desc": "This is the description for ChaosStepNode"
              },
              "enforce": {
                "$ref": "#/definitions/pipeline/common/PolicyConfig"
              },
              "failureStrategies": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/pipeline/common/FailureStrategyConfig"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "identifier": {
                "type": "string",
                "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
              },
              "name": {
                "type": "string",
                "pattern": "^[a-zA-Z_0-9-.][-0-9a-zA-Z_\\s.]{0,127}$"
              },
              "strategy": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StrategyConfig"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "timeout": {
                "type": "string",
                "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
              },
              "type": {
                "type": "string",
                "enum": [
                  "Chaos"
                ]
              },
              "when": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StepWhenCondition"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#",
            "allOf": [
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "Chaos"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/cd/ChaosStepInfo"
                    }
                  }
                }
              }
            ]
          },
          "ChaosStepInfo": {
            "title": "ChaosStepInfo",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/common/StepSpecType"
              },
              {
                "type": "object",
                "required": [
                  "expectedResilienceScore",
                  "experimentRef"
                ],
                "properties": {
                  "assertion": {
                    "type": "string"
                  },
                  "expectedResilienceScore": {
                    "type": "number",
                    "format": "double"
                  },
                  "experimentRef": {
                    "type": "string"
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "type": "object",
            "required": [
              "expectedResilienceScore",
              "experimentRef"
            ],
            "properties": {
              "assertion": {
                "type": "string"
              },
              "expectedResilienceScore": {
                "type": "number",
                "format": "double"
              },
              "experimentRef": {
                "type": "string"
              },
              "description": {
                "desc": "This is the description for ChaosStepInfo"
              }
            }
          },
          "TerragruntPlanStepNode": {
            "title": "TerragruntPlanStepNode",
            "type": "object",
            "required": [
              "identifier",
              "name",
              "spec",
              "type"
            ],
            "properties": {
              "description": {
                "type": "string",
                "desc": "This is the description for TerragruntPlanStepNode"
              },
              "enforce": {
                "$ref": "#/definitions/pipeline/common/PolicyConfig"
              },
              "failureStrategies": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/pipeline/common/FailureStrategyConfig"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "identifier": {
                "type": "string",
                "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
              },
              "name": {
                "type": "string",
                "pattern": "^[a-zA-Z_0-9-.][-0-9a-zA-Z_\\s.]{0,127}$"
              },
              "strategy": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StrategyConfig"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "timeout": {
                "type": "string",
                "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
              },
              "type": {
                "type": "string",
                "enum": [
                  "TerragruntPlan"
                ]
              },
              "when": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StepWhenCondition"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#",
            "allOf": [
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "TerragruntPlan"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/cd/TerragruntPlanStepInfo"
                    }
                  }
                }
              }
            ]
          },
          "TerragruntPlanStepInfo": {
            "title": "TerragruntPlanStepInfo",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/common/StepSpecType"
              },
              {
                "type": "object",
                "required": [
                  "configuration",
                  "provisionerIdentifier"
                ],
                "properties": {
                  "configuration": {
                    "$ref": "#/definitions/pipeline/steps/cd/TerragruntPlanExecutionData"
                  },
                  "delegateSelectors": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string",
                        "pattern": "(<\\+.+>.*)",
                        "minLength": 1
                      }
                    ]
                  },
                  "provisionerIdentifier": {
                    "type": "string"
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "type": "object",
            "required": [
              "configuration",
              "provisionerIdentifier"
            ],
            "properties": {
              "configuration": {
                "$ref": "#/definitions/pipeline/steps/cd/TerragruntPlanExecutionData"
              },
              "delegateSelectors": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "(<\\+.+>.*)",
                    "minLength": 1
                  }
                ]
              },
              "provisionerIdentifier": {
                "type": "string"
              },
              "description": {
                "desc": "This is the description for TerragruntPlanStepInfo"
              }
            }
          },
          "TerragruntPlanExecutionData": {
            "title": "TerragruntPlanExecutionData",
            "type": "object",
            "required": [
              "command",
              "configFiles",
              "moduleConfig",
              "secretManagerRef"
            ],
            "properties": {
              "backendConfig": {
                "$ref": "#/definitions/pipeline/steps/cd/TerragruntBackendConfig"
              },
              "command": {
                "type": "string",
                "enum": [
                  "Apply",
                  "Destroy"
                ]
              },
              "commandFlags": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/pipeline/steps/cd/TerragruntCliOptionFlag"
                }
              },
              "configFiles": {
                "$ref": "#/definitions/pipeline/steps/cd/TerragruntConfigFilesWrapper"
              },
              "environmentVariables": {
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "$ref": "#/definitions/pipeline/common/NumberNGVariable"
                    },
                    {
                      "$ref": "#/definitions/pipeline/common/SecretNGVariable"
                    },
                    {
                      "$ref": "#/definitions/pipeline/common/StringNGVariable"
                    }
                  ]
                }
              },
              "exportTerragruntPlanJson": {
                "oneOf": [
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "moduleConfig": {
                "$ref": "#/definitions/pipeline/steps/cd/TerragruntModuleConfig"
              },
              "secretManagerRef": {
                "type": "string"
              },
              "targets": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "varFiles": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/pipeline/steps/cd/TerragruntVarFileWrapper"
                }
              },
              "workspace": {
                "type": "string"
              },
              "description": {
                "desc": "This is the description for TerragruntPlanExecutionData"
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "TerragruntBackendConfig": {
            "title": "TerragruntBackendConfig",
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "description": {
                "desc": "This is the description for TerragruntBackendConfig"
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#",
            "allOf": [
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "Inline"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/cd/InlineTerragruntBackendConfigSpec"
                    }
                  }
                }
              },
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "Remote"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/cd/RemoteTerragruntBackendConfigSpec"
                    }
                  }
                }
              }
            ]
          },
          "InlineTerragruntBackendConfigSpec": {
            "title": "InlineTerragruntBackendConfigSpec",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/steps/cd/TerragruntBackendConfigSpec"
              },
              {
                "type": "object",
                "properties": {
                  "content": {
                    "type": "string"
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "properties": {
              "description": {
                "desc": "This is the description for InlineTerragruntBackendConfigSpec"
              }
            }
          },
          "TerragruntBackendConfigSpec": {
            "title": "TerragruntBackendConfigSpec",
            "type": "object",
            "discriminator": "type",
            "$schema": "http://json-schema.org/draft-07/schema#",
            "properties": {
              "description": {
                "desc": "This is the description for TerragruntBackendConfigSpec"
              }
            }
          },
          "RemoteTerragruntBackendConfigSpec": {
            "title": "RemoteTerragruntBackendConfigSpec",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/steps/cd/TerragruntBackendConfigSpec"
              },
              {
                "type": "object",
                "required": [
                  "store"
                ],
                "properties": {
                  "store": {
                    "$ref": "#/definitions/pipeline/steps/cd/StoreConfigWrapper"
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "properties": {
              "description": {
                "desc": "This is the description for RemoteTerragruntBackendConfigSpec"
              }
            }
          },
          "TerragruntCliOptionFlag": {
            "title": "TerragruntCliOptionFlag",
            "type": "object",
            "required": [
              "commandType",
              "flag"
            ],
            "properties": {
              "commandType": {
                "type": "string",
                "enum": [
                  "INIT",
                  "WORKSPACE",
                  "PLAN",
                  "APPLY",
                  "DESTROY",
                  "OUTPUT"
                ]
              },
              "flag": {
                "type": "string"
              },
              "description": {
                "desc": "This is the description for TerragruntCliOptionFlag"
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "TerragruntConfigFilesWrapper": {
            "title": "TerragruntConfigFilesWrapper",
            "type": "object",
            "required": [
              "store"
            ],
            "properties": {
              "moduleSource": {
                "$ref": "#/definitions/pipeline/steps/cd/ModuleSource"
              },
              "store": {
                "$ref": "#/definitions/pipeline/steps/cd/StoreConfigWrapper"
              },
              "description": {
                "desc": "This is the description for TerragruntConfigFilesWrapper"
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "TerragruntModuleConfig": {
            "title": "TerragruntModuleConfig",
            "type": "object",
            "required": [
              "path",
              "terragruntRunType"
            ],
            "properties": {
              "path": {
                "type": "string"
              },
              "terragruntRunType": {
                "type": "string",
                "enum": [
                  "RunAll",
                  "RunModule"
                ]
              },
              "description": {
                "desc": "This is the description for TerragruntModuleConfig"
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "TerragruntVarFileWrapper": {
            "title": "TerragruntVarFileWrapper",
            "type": "object",
            "required": [
              "varFile"
            ],
            "properties": {
              "varFile": {
                "$ref": "#/definitions/pipeline/steps/cd/TerragruntVarFile"
              },
              "description": {
                "desc": "This is the description for TerragruntVarFileWrapper"
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "TerragruntVarFile": {
            "title": "TerragruntVarFile",
            "type": "object",
            "required": [
              "identifier",
              "spec",
              "type"
            ],
            "properties": {
              "identifier": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "description": {
                "desc": "This is the description for TerragruntVarFile"
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#",
            "allOf": [
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "Inline"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/cd/InlineTerragruntVarFileSpec"
                    }
                  }
                }
              },
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "Remote"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/cd/RemoteTerragruntVarFileSpec"
                    }
                  }
                }
              }
            ]
          },
          "InlineTerragruntVarFileSpec": {
            "title": "InlineTerragruntVarFileSpec",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/steps/cd/TerragruntVarFileSpec"
              },
              {
                "type": "object",
                "properties": {
                  "content": {
                    "type": "string"
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "properties": {
              "description": {
                "desc": "This is the description for InlineTerragruntVarFileSpec"
              }
            }
          },
          "TerragruntVarFileSpec": {
            "title": "TerragruntVarFileSpec",
            "type": "object",
            "discriminator": "type",
            "properties": {
              "type": {
                "type": "string"
              },
              "description": {
                "desc": "This is the description for TerragruntVarFileSpec"
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "RemoteTerragruntVarFileSpec": {
            "title": "RemoteTerragruntVarFileSpec",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/steps/cd/TerragruntVarFileSpec"
              },
              {
                "type": "object",
                "required": [
                  "store"
                ],
                "properties": {
                  "store": {
                    "$ref": "#/definitions/pipeline/steps/cd/StoreConfigWrapper"
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "properties": {
              "description": {
                "desc": "This is the description for RemoteTerragruntVarFileSpec"
              }
            }
          },
          "TerragruntApplyStepNode": {
            "title": "TerragruntApplyStepNode",
            "type": "object",
            "required": [
              "identifier",
              "name",
              "spec",
              "type"
            ],
            "properties": {
              "description": {
                "type": "string",
                "desc": "This is the description for TerragruntApplyStepNode"
              },
              "enforce": {
                "$ref": "#/definitions/pipeline/common/PolicyConfig"
              },
              "failureStrategies": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/pipeline/common/FailureStrategyConfig"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "identifier": {
                "type": "string",
                "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
              },
              "name": {
                "type": "string",
                "pattern": "^[a-zA-Z_0-9-.][-0-9a-zA-Z_\\s.]{0,127}$"
              },
              "strategy": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StrategyConfig"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "timeout": {
                "type": "string",
                "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
              },
              "type": {
                "type": "string",
                "enum": [
                  "TerragruntApply"
                ]
              },
              "when": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StepWhenCondition"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#",
            "allOf": [
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "TerragruntApply"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/cd/TerragruntApplyStepInfo"
                    }
                  }
                }
              }
            ]
          },
          "TerragruntApplyStepInfo": {
            "title": "TerragruntApplyStepInfo",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/common/StepSpecType"
              },
              {
                "type": "object",
                "required": [
                  "configuration",
                  "provisionerIdentifier"
                ],
                "properties": {
                  "configuration": {
                    "$ref": "#/definitions/pipeline/steps/cd/TerragruntStepConfiguration"
                  },
                  "delegateSelectors": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string",
                        "pattern": "(<\\+.+>.*)",
                        "minLength": 1
                      }
                    ]
                  },
                  "metadata": {
                    "type": "string"
                  },
                  "provisionerIdentifier": {
                    "type": "string"
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "type": "object",
            "required": [
              "configuration",
              "provisionerIdentifier"
            ],
            "properties": {
              "configuration": {
                "$ref": "#/definitions/pipeline/steps/cd/TerragruntStepConfiguration"
              },
              "delegateSelectors": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "(<\\+.+>.*)",
                    "minLength": 1
                  }
                ]
              },
              "metadata": {
                "type": "string"
              },
              "provisionerIdentifier": {
                "type": "string"
              },
              "description": {
                "desc": "This is the description for TerragruntApplyStepInfo"
              }
            }
          },
          "TerragruntStepConfiguration": {
            "title": "TerragruntStepConfiguration",
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "commandFlags": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/pipeline/steps/cd/TerragruntCliOptionFlag"
                }
              },
              "spec": {
                "$ref": "#/definitions/pipeline/steps/cd/TerragruntExecutionData"
              },
              "type": {
                "type": "string",
                "enum": [
                  "Inline",
                  "InheritFromPlan",
                  "InheritFromApply"
                ]
              },
              "description": {
                "desc": "This is the description for TerragruntStepConfiguration"
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "TerragruntExecutionData": {
            "title": "TerragruntExecutionData",
            "type": "object",
            "required": [
              "configFiles",
              "moduleConfig"
            ],
            "properties": {
              "backendConfig": {
                "$ref": "#/definitions/pipeline/steps/cd/TerragruntBackendConfig"
              },
              "configFiles": {
                "$ref": "#/definitions/pipeline/steps/cd/TerragruntConfigFilesWrapper"
              },
              "environmentVariables": {
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "$ref": "#/definitions/pipeline/common/NumberNGVariable"
                    },
                    {
                      "$ref": "#/definitions/pipeline/common/SecretNGVariable"
                    },
                    {
                      "$ref": "#/definitions/pipeline/common/StringNGVariable"
                    }
                  ]
                }
              },
              "moduleConfig": {
                "$ref": "#/definitions/pipeline/steps/cd/TerragruntModuleConfig"
              },
              "targets": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "varFiles": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/pipeline/steps/cd/TerragruntVarFileWrapper"
                }
              },
              "workspace": {
                "type": "string"
              },
              "description": {
                "desc": "This is the description for TerragruntExecutionData"
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "TerragruntDestroyStepNode": {
            "title": "TerragruntDestroyStepNode",
            "type": "object",
            "required": [
              "identifier",
              "name",
              "spec",
              "type"
            ],
            "properties": {
              "description": {
                "type": "string",
                "desc": "This is the description for TerragruntDestroyStepNode"
              },
              "enforce": {
                "$ref": "#/definitions/pipeline/common/PolicyConfig"
              },
              "failureStrategies": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/pipeline/common/FailureStrategyConfig"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "identifier": {
                "type": "string",
                "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
              },
              "name": {
                "type": "string",
                "pattern": "^[a-zA-Z_0-9-.][-0-9a-zA-Z_\\s.]{0,127}$"
              },
              "strategy": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StrategyConfig"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "timeout": {
                "type": "string",
                "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
              },
              "type": {
                "type": "string",
                "enum": [
                  "TerragruntDestroy"
                ]
              },
              "when": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StepWhenCondition"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#",
            "allOf": [
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "TerragruntDestroy"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/cd/TerragruntDestroyStepInfo"
                    }
                  }
                }
              }
            ]
          },
          "TerragruntDestroyStepInfo": {
            "title": "TerragruntDestroyStepInfo",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/common/StepSpecType"
              },
              {
                "type": "object",
                "required": [
                  "configuration",
                  "provisionerIdentifier"
                ],
                "properties": {
                  "configuration": {
                    "$ref": "#/definitions/pipeline/steps/cd/TerragruntStepConfiguration"
                  },
                  "delegateSelectors": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string",
                        "pattern": "(<\\+.+>.*)",
                        "minLength": 1
                      }
                    ]
                  },
                  "metadata": {
                    "type": "string"
                  },
                  "provisionerIdentifier": {
                    "type": "string"
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "type": "object",
            "required": [
              "configuration",
              "provisionerIdentifier"
            ],
            "properties": {
              "configuration": {
                "$ref": "#/definitions/pipeline/steps/cd/TerragruntStepConfiguration"
              },
              "delegateSelectors": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "(<\\+.+>.*)",
                    "minLength": 1
                  }
                ]
              },
              "metadata": {
                "type": "string"
              },
              "provisionerIdentifier": {
                "type": "string"
              },
              "description": {
                "desc": "This is the description for TerragruntDestroyStepInfo"
              }
            }
          },
          "TerragruntRollbackStepNode": {
            "title": "TerragruntRollbackStepNode",
            "type": "object",
            "required": [
              "identifier",
              "name",
              "spec",
              "type"
            ],
            "properties": {
              "description": {
                "type": "string",
                "desc": "This is the description for TerragruntRollbackStepNode"
              },
              "enforce": {
                "$ref": "#/definitions/pipeline/common/PolicyConfig"
              },
              "failureStrategies": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/pipeline/common/FailureStrategyConfig"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "identifier": {
                "type": "string",
                "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
              },
              "name": {
                "type": "string",
                "pattern": "^[a-zA-Z_0-9-.][-0-9a-zA-Z_\\s.]{0,127}$"
              },
              "strategy": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StrategyConfig"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "timeout": {
                "type": "string",
                "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
              },
              "type": {
                "type": "string",
                "enum": [
                  "TerragruntRollback"
                ]
              },
              "when": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StepWhenCondition"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#",
            "allOf": [
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "TerragruntRollback"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/cd/TerragruntRollbackStepInfo"
                    }
                  }
                }
              }
            ]
          },
          "TerragruntRollbackStepInfo": {
            "title": "TerragruntRollbackStepInfo",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/common/StepSpecType"
              },
              {
                "type": "object",
                "required": [
                  "provisionerIdentifier"
                ],
                "properties": {
                  "commandFlags": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/pipeline/steps/cd/TerragruntCliOptionFlag"
                    }
                  },
                  "delegateSelectors": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string",
                        "pattern": "(<\\+.+>.*)",
                        "minLength": 1
                      }
                    ]
                  },
                  "provisionerIdentifier": {
                    "type": "string"
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "type": "object",
            "required": [
              "provisionerIdentifier"
            ],
            "properties": {
              "commandFlags": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/pipeline/steps/cd/TerragruntCliOptionFlag"
                }
              },
              "delegateSelectors": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "(<\\+.+>.*)",
                    "minLength": 1
                  }
                ]
              },
              "provisionerIdentifier": {
                "type": "string"
              },
              "description": {
                "desc": "This is the description for TerragruntRollbackStepInfo"
              }
            }
          },
          "AsgCanaryDeployStepNode": {
            "title": "AsgCanaryDeployStepNode",
            "type": "object",
            "required": [
              "identifier",
              "name",
              "type"
            ],
            "properties": {
              "description": {
                "type": "string",
                "desc": "This is the description for AsgCanaryDeployStepNode"
              },
              "enforce": {
                "$ref": "#/definitions/pipeline/common/PolicyConfig"
              },
              "failureStrategies": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/pipeline/common/FailureStrategyConfig"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "identifier": {
                "type": "string",
                "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
              },
              "name": {
                "type": "string",
                "pattern": "^[a-zA-Z_0-9-.][-0-9a-zA-Z_\\s.]{0,127}$"
              },
              "strategy": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StrategyConfig"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "timeout": {
                "type": "string",
                "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
              },
              "type": {
                "type": "string",
                "enum": [
                  "AsgCanaryDeploy"
                ]
              },
              "when": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StepWhenCondition"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#",
            "allOf": [
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "AsgCanaryDeploy"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/cd/AsgCanaryDeployStepInfo"
                    }
                  }
                }
              }
            ]
          },
          "AsgCanaryDeployStepInfo": {
            "title": "AsgCanaryDeployStepInfo",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/common/StepSpecType"
              },
              {
                "type": "object",
                "required": [
                  "instanceSelection"
                ],
                "properties": {
                  "asgName": {
                    "type": "string"
                  },
                  "delegateSelectors": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string",
                        "pattern": "(<\\+.+>.*)",
                        "minLength": 1
                      }
                    ]
                  },
                  "instanceSelection": {
                    "$ref": "#/definitions/pipeline/steps/cd/Capacity"
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "type": "object",
            "required": [
              "instanceSelection"
            ],
            "properties": {
              "asgName": {
                "type": "string"
              },
              "delegateSelectors": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "(<\\+.+>.*)",
                    "minLength": 1
                  }
                ]
              },
              "instanceSelection": {
                "$ref": "#/definitions/pipeline/steps/cd/Capacity"
              },
              "description": {
                "desc": "This is the description for AsgCanaryDeployStepInfo"
              }
            }
          },
          "Capacity": {
            "title": "Capacity",
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string"
              },
              "description": {
                "desc": "This is the description for Capacity"
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#",
            "allOf": [
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "Count"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/cd/CountCapacitySpec"
                    }
                  }
                }
              },
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "Percentage"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/cd/PercentageCapacitySpec"
                    }
                  }
                }
              }
            ]
          },
          "CountCapacitySpec": {
            "title": "CountCapacitySpec",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/steps/cd/CapacitySpec"
              },
              {
                "type": "object",
                "required": [
                  "count"
                ],
                "properties": {
                  "count": {
                    "oneOf": [
                      {
                        "type": "integer",
                        "format": "int32",
                        "minimum": 0
                      },
                      {
                        "type": "string",
                        "pattern": "(<\\+.+>.*)",
                        "minLength": 1
                      }
                    ]
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "properties": {
              "description": {
                "desc": "This is the description for CountCapacitySpec"
              }
            }
          },
          "CapacitySpec": {
            "title": "CapacitySpec",
            "type": "object",
            "discriminator": "type",
            "properties": {
              "type": {
                "type": "string"
              },
              "description": {
                "desc": "This is the description for CapacitySpec"
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "PercentageCapacitySpec": {
            "title": "PercentageCapacitySpec",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/steps/cd/CapacitySpec"
              },
              {
                "type": "object",
                "required": [
                  "percentage"
                ],
                "properties": {
                  "percentage": {
                    "oneOf": [
                      {
                        "type": "integer",
                        "format": "int32",
                        "minimum": 0,
                        "maximum": 100
                      },
                      {
                        "type": "string",
                        "pattern": "(<\\+.+>.*)",
                        "minLength": 1
                      }
                    ]
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "properties": {
              "description": {
                "desc": "This is the description for PercentageCapacitySpec"
              }
            }
          },
          "AsgCanaryDeleteStepNode": {
            "title": "AsgCanaryDeleteStepNode",
            "type": "object",
            "required": [
              "identifier",
              "name",
              "type"
            ],
            "properties": {
              "description": {
                "type": "string",
                "desc": "This is the description for AsgCanaryDeleteStepNode"
              },
              "enforce": {
                "$ref": "#/definitions/pipeline/common/PolicyConfig"
              },
              "failureStrategies": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/pipeline/common/FailureStrategyConfig"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "identifier": {
                "type": "string",
                "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
              },
              "name": {
                "type": "string",
                "pattern": "^[a-zA-Z_0-9-.][-0-9a-zA-Z_\\s.]{0,127}$"
              },
              "strategy": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StrategyConfig"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "timeout": {
                "type": "string",
                "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
              },
              "type": {
                "type": "string",
                "enum": [
                  "AsgCanaryDelete"
                ]
              },
              "when": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StepWhenCondition"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#",
            "allOf": [
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "AsgCanaryDelete"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/cd/AsgCanaryDeleteStepInfo"
                    }
                  }
                }
              }
            ]
          },
          "AsgCanaryDeleteStepInfo": {
            "title": "AsgCanaryDeleteStepInfo",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/common/StepSpecType"
              },
              {
                "type": "object",
                "properties": {
                  "delegateSelectors": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string",
                        "pattern": "(<\\+.+>.*)",
                        "minLength": 1
                      }
                    ]
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "type": "object",
            "properties": {
              "delegateSelectors": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "(<\\+.+>.*)",
                    "minLength": 1
                  }
                ]
              },
              "description": {
                "desc": "This is the description for AsgCanaryDeleteStepInfo"
              }
            }
          },
          "AsgRollingDeployStepNode": {
            "title": "AsgRollingDeployStepNode",
            "type": "object",
            "required": [
              "identifier",
              "name",
              "type"
            ],
            "properties": {
              "description": {
                "type": "string",
                "desc": "This is the description for AsgRollingDeployStepNode"
              },
              "enforce": {
                "$ref": "#/definitions/pipeline/common/PolicyConfig"
              },
              "failureStrategies": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/pipeline/common/FailureStrategyConfig"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "identifier": {
                "type": "string",
                "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
              },
              "name": {
                "type": "string",
                "pattern": "^[a-zA-Z_0-9-.][-0-9a-zA-Z_\\s.]{0,127}$"
              },
              "strategy": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StrategyConfig"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "timeout": {
                "type": "string",
                "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
              },
              "type": {
                "type": "string",
                "enum": [
                  "AsgRollingDeploy"
                ]
              },
              "when": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StepWhenCondition"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#",
            "allOf": [
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "AsgRollingDeploy"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/cd/AsgRollingDeployStepInfo"
                    }
                  }
                }
              }
            ]
          },
          "AsgRollingDeployStepInfo": {
            "title": "AsgRollingDeployStepInfo",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/common/StepSpecType"
              },
              {
                "type": "object",
                "properties": {
                  "asgName": {
                    "type": "string"
                  },
                  "delegateSelectors": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string",
                        "pattern": "(<\\+.+>.*)",
                        "minLength": 1
                      }
                    ]
                  },
                  "instanceWarmup": {
                    "oneOf": [
                      {
                        "type": "integer",
                        "format": "int32",
                        "minimum": 0
                      },
                      {
                        "type": "string",
                        "pattern": "(<\\+.+>.*)",
                        "minLength": 1
                      }
                    ]
                  },
                  "instances": {
                    "$ref": "#/definitions/pipeline/steps/cd/AsgInstances"
                  },
                  "minimumHealthyPercentage": {
                    "oneOf": [
                      {
                        "type": "integer",
                        "format": "int32",
                        "minimum": 0,
                        "maximum": 100
                      },
                      {
                        "type": "string",
                        "pattern": "(<\\+.+>.*)",
                        "minLength": 1
                      }
                    ]
                  },
                  "skipMatching": {
                    "oneOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "type": "string",
                        "pattern": "(<\\+.+>.*)",
                        "minLength": 1
                      }
                    ]
                  },
                  "useAlreadyRunningInstances": {
                    "oneOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "type": "string",
                        "pattern": "(<\\+.+>.*)",
                        "minLength": 1
                      }
                    ]
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "type": "object",
            "properties": {
              "asgName": {
                "type": "string"
              },
              "delegateSelectors": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "(<\\+.+>.*)",
                    "minLength": 1
                  }
                ]
              },
              "instanceWarmup": {
                "oneOf": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "minimum": 0
                  },
                  {
                    "type": "string",
                    "pattern": "(<\\+.+>.*)",
                    "minLength": 1
                  }
                ]
              },
              "instances": {
                "$ref": "#/definitions/pipeline/steps/cd/AsgInstances"
              },
              "minimumHealthyPercentage": {
                "oneOf": [
                  {
                    "type": "integer",
                    "format": "int32",
                    "minimum": 0,
                    "maximum": 100
                  },
                  {
                    "type": "string",
                    "pattern": "(<\\+.+>.*)",
                    "minLength": 1
                  }
                ]
              },
              "skipMatching": {
                "oneOf": [
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "string",
                    "pattern": "(<\\+.+>.*)",
                    "minLength": 1
                  }
                ]
              },
              "useAlreadyRunningInstances": {
                "oneOf": [
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "string",
                    "pattern": "(<\\+.+>.*)",
                    "minLength": 1
                  }
                ]
              },
              "description": {
                "desc": "This is the description for AsgRollingDeployStepInfo"
              }
            }
          },
          "AsgInstances": {
            "title": "AsgInstances",
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "Fixed",
                  "CurrentRunning"
                ]
              },
              "description": {
                "desc": "This is the description for AsgInstances"
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#",
            "allOf": [
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "CurrentRunning"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/cd/AsgCurrentRunningInstances"
                    }
                  }
                }
              },
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "Fixed"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/cd/AsgFixedInstances"
                    }
                  }
                }
              }
            ]
          },
          "AsgCurrentRunningInstances": {
            "title": "AsgCurrentRunningInstances",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/steps/cd/AsgInstancesSpec"
              },
              {
                "type": "object"
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "properties": {
              "description": {
                "desc": "This is the description for AsgCurrentRunningInstances"
              }
            }
          },
          "AsgInstancesSpec": {
            "title": "AsgInstancesSpec",
            "type": "object",
            "discriminator": "type",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "Fixed",
                  "CurrentRunning"
                ]
              },
              "description": {
                "desc": "This is the description for AsgInstancesSpec"
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "AsgFixedInstances": {
            "title": "AsgFixedInstances",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/steps/cd/AsgInstancesSpec"
              },
              {
                "type": "object",
                "required": [
                  "desired",
                  "max",
                  "min"
                ],
                "properties": {
                  "desired": {
                    "oneOf": [
                      {
                        "type": "integer",
                        "format": "int32"
                      },
                      {
                        "type": "string",
                        "pattern": "(<\\+.+>.*)",
                        "minLength": 1
                      }
                    ]
                  },
                  "max": {
                    "oneOf": [
                      {
                        "type": "integer",
                        "format": "int32"
                      },
                      {
                        "type": "string",
                        "pattern": "(<\\+.+>.*)",
                        "minLength": 1
                      }
                    ]
                  },
                  "min": {
                    "oneOf": [
                      {
                        "type": "integer",
                        "format": "int32"
                      },
                      {
                        "type": "string",
                        "pattern": "(<\\+.+>.*)",
                        "minLength": 1
                      }
                    ]
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "properties": {
              "description": {
                "desc": "This is the description for AsgFixedInstances"
              }
            }
          },
          "AsgRollingRollbackStepNode": {
            "title": "AsgRollingRollbackStepNode",
            "type": "object",
            "required": [
              "identifier",
              "name",
              "type"
            ],
            "properties": {
              "description": {
                "type": "string",
                "desc": "This is the description for AsgRollingRollbackStepNode"
              },
              "enforce": {
                "$ref": "#/definitions/pipeline/common/PolicyConfig"
              },
              "failureStrategies": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/pipeline/common/FailureStrategyConfig"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "identifier": {
                "type": "string",
                "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
              },
              "name": {
                "type": "string",
                "pattern": "^[a-zA-Z_0-9-.][-0-9a-zA-Z_\\s.]{0,127}$"
              },
              "strategy": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StrategyConfig"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "timeout": {
                "type": "string",
                "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
              },
              "type": {
                "type": "string",
                "enum": [
                  "AsgRollingRollback"
                ]
              },
              "when": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StepWhenCondition"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#",
            "allOf": [
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "AsgRollingRollback"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/cd/AsgRollingRollbackStepInfo"
                    }
                  }
                }
              }
            ]
          },
          "AsgRollingRollbackStepInfo": {
            "title": "AsgRollingRollbackStepInfo",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/common/StepSpecType"
              },
              {
                "type": "object",
                "properties": {
                  "delegateSelectors": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string",
                        "pattern": "(<\\+.+>.*)",
                        "minLength": 1
                      }
                    ]
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "type": "object",
            "properties": {
              "delegateSelectors": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "(<\\+.+>.*)",
                    "minLength": 1
                  }
                ]
              },
              "description": {
                "desc": "This is the description for AsgRollingRollbackStepInfo"
              }
            }
          },
          "AsgBlueGreenDeployStepNode": {
            "title": "AsgBlueGreenDeployStepNode",
            "type": "object",
            "required": [
              "identifier",
              "name",
              "type"
            ],
            "properties": {
              "description": {
                "type": "string",
                "desc": "This is the description for AsgBlueGreenDeployStepNode"
              },
              "enforce": {
                "$ref": "#/definitions/pipeline/common/PolicyConfig"
              },
              "failureStrategies": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/pipeline/common/FailureStrategyConfig"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "identifier": {
                "type": "string",
                "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
              },
              "name": {
                "type": "string",
                "pattern": "^[a-zA-Z_0-9-.][-0-9a-zA-Z_\\s.]{0,127}$"
              },
              "strategy": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StrategyConfig"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "timeout": {
                "type": "string",
                "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
              },
              "type": {
                "type": "string",
                "enum": [
                  "AsgBlueGreenDeploy"
                ]
              },
              "when": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StepWhenCondition"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#",
            "allOf": [
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "AsgBlueGreenDeploy"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/cd/AsgBlueGreenDeployStepInfo"
                    }
                  }
                }
              }
            ]
          },
          "AsgBlueGreenDeployStepInfo": {
            "title": "AsgBlueGreenDeployStepInfo",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/common/StepSpecType"
              },
              {
                "type": "object",
                "properties": {
                  "asgName": {
                    "type": "string"
                  },
                  "delegateSelectors": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string",
                        "pattern": "(<\\+.+>.*)",
                        "minLength": 1
                      }
                    ]
                  },
                  "instances": {
                    "$ref": "#/definitions/pipeline/steps/cd/AsgInstances"
                  },
                  "loadBalancer": {
                    "type": "string"
                  },
                  "loadBalancers": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/pipeline/steps/cd/AwsAsgLoadBalancerConfigYaml"
                        }
                      },
                      {
                        "type": "string",
                        "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                        "minLength": 1
                      }
                    ]
                  },
                  "prodListener": {
                    "type": "string"
                  },
                  "prodListenerRuleArn": {
                    "type": "string"
                  },
                  "stageListener": {
                    "type": "string"
                  },
                  "stageListenerRuleArn": {
                    "type": "string"
                  },
                  "useAlreadyRunningInstances": {
                    "oneOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "type": "string",
                        "pattern": "(<\\+.+>.*)",
                        "minLength": 1
                      }
                    ]
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "type": "object",
            "properties": {
              "asgName": {
                "type": "string"
              },
              "delegateSelectors": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "(<\\+.+>.*)",
                    "minLength": 1
                  }
                ]
              },
              "instances": {
                "$ref": "#/definitions/pipeline/steps/cd/AsgInstances"
              },
              "loadBalancer": {
                "type": "string"
              },
              "loadBalancers": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/pipeline/steps/cd/AwsAsgLoadBalancerConfigYaml"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                    "minLength": 1
                  }
                ]
              },
              "prodListener": {
                "type": "string"
              },
              "prodListenerRuleArn": {
                "type": "string"
              },
              "stageListener": {
                "type": "string"
              },
              "stageListenerRuleArn": {
                "type": "string"
              },
              "useAlreadyRunningInstances": {
                "oneOf": [
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "string",
                    "pattern": "(<\\+.+>.*)",
                    "minLength": 1
                  }
                ]
              },
              "description": {
                "desc": "This is the description for AsgBlueGreenDeployStepInfo"
              }
            }
          },
          "AwsAsgLoadBalancerConfigYaml": {
            "title": "AwsAsgLoadBalancerConfigYaml",
            "type": "object",
            "required": [
              "loadBalancer",
              "prodListener",
              "prodListenerRuleArn",
              "stageListener",
              "stageListenerRuleArn"
            ],
            "properties": {
              "loadBalancer": {
                "type": "string"
              },
              "prodListener": {
                "type": "string"
              },
              "prodListenerRuleArn": {
                "type": "string"
              },
              "stageListener": {
                "type": "string"
              },
              "stageListenerRuleArn": {
                "type": "string"
              },
              "description": {
                "desc": "This is the description for AwsAsgLoadBalancerConfigYaml"
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "AsgBlueGreenRollbackStepNode": {
            "title": "AsgBlueGreenRollbackStepNode",
            "type": "object",
            "required": [
              "identifier",
              "name",
              "type"
            ],
            "properties": {
              "description": {
                "type": "string",
                "desc": "This is the description for AsgBlueGreenRollbackStepNode"
              },
              "enforce": {
                "$ref": "#/definitions/pipeline/common/PolicyConfig"
              },
              "failureStrategies": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/pipeline/common/FailureStrategyConfig"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "identifier": {
                "type": "string",
                "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
              },
              "name": {
                "type": "string",
                "pattern": "^[a-zA-Z_0-9-.][-0-9a-zA-Z_\\s.]{0,127}$"
              },
              "strategy": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StrategyConfig"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "timeout": {
                "type": "string",
                "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
              },
              "type": {
                "type": "string",
                "enum": [
                  "AsgBlueGreenRollback"
                ]
              },
              "when": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StepWhenCondition"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#",
            "allOf": [
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "AsgBlueGreenRollback"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/cd/AsgBlueGreenRollbackStepInfo"
                    }
                  }
                }
              }
            ]
          },
          "AsgBlueGreenRollbackStepInfo": {
            "title": "AsgBlueGreenRollbackStepInfo",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/common/StepSpecType"
              },
              {
                "type": "object",
                "properties": {
                  "delegateSelectors": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string",
                        "pattern": "(<\\+.+>.*)",
                        "minLength": 1
                      }
                    ]
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "type": "object",
            "properties": {
              "delegateSelectors": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "(<\\+.+>.*)",
                    "minLength": 1
                  }
                ]
              },
              "description": {
                "desc": "This is the description for AsgBlueGreenRollbackStepInfo"
              }
            }
          },
          "AsgBlueGreenSwapServiceStepNode": {
            "title": "AsgBlueGreenSwapServiceStepNode",
            "type": "object",
            "required": [
              "identifier",
              "name",
              "type"
            ],
            "properties": {
              "description": {
                "type": "string",
                "desc": "This is the description for AsgBlueGreenSwapServiceStepNode"
              },
              "enforce": {
                "$ref": "#/definitions/pipeline/common/PolicyConfig"
              },
              "failureStrategies": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/pipeline/common/FailureStrategyConfig"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "identifier": {
                "type": "string",
                "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
              },
              "name": {
                "type": "string",
                "pattern": "^[a-zA-Z_0-9-.][-0-9a-zA-Z_\\s.]{0,127}$"
              },
              "strategy": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StrategyConfig"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "timeout": {
                "type": "string",
                "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
              },
              "type": {
                "type": "string",
                "enum": [
                  "AsgBlueGreenSwapService"
                ]
              },
              "when": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StepWhenCondition"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#",
            "allOf": [
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "AsgBlueGreenSwapService"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/cd/AsgBlueGreenSwapServiceStepInfo"
                    }
                  }
                }
              }
            ]
          },
          "AsgBlueGreenSwapServiceStepInfo": {
            "title": "AsgBlueGreenSwapServiceStepInfo",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/common/StepSpecType"
              },
              {
                "type": "object",
                "required": [
                  "downsizeOldAsg"
                ],
                "properties": {
                  "delegateSelectors": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string",
                        "pattern": "(<\\+.+>.*)",
                        "minLength": 1
                      }
                    ]
                  },
                  "downsizeOldAsg": {
                    "oneOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "type": "string",
                        "pattern": "(<\\+.+>.*)",
                        "minLength": 1
                      }
                    ]
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "type": "object",
            "required": [
              "downsizeOldAsg"
            ],
            "properties": {
              "delegateSelectors": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "(<\\+.+>.*)",
                    "minLength": 1
                  }
                ]
              },
              "downsizeOldAsg": {
                "oneOf": [
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "string",
                    "pattern": "(<\\+.+>.*)",
                    "minLength": 1
                  }
                ]
              },
              "description": {
                "desc": "This is the description for AsgBlueGreenSwapServiceStepInfo"
              }
            }
          },
          "TerraformCloudRunStepNode": {
            "title": "TerraformCloudRunStepNode",
            "type": "object",
            "required": [
              "identifier",
              "name",
              "spec",
              "type"
            ],
            "properties": {
              "description": {
                "type": "string",
                "desc": "This is the description for TerraformCloudRunStepNode"
              },
              "enforce": {
                "$ref": "#/definitions/pipeline/common/PolicyConfig"
              },
              "failureStrategies": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/pipeline/common/FailureStrategyConfig"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "identifier": {
                "type": "string",
                "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
              },
              "name": {
                "type": "string",
                "pattern": "^[a-zA-Z_0-9-.][-0-9a-zA-Z_\\s.]{0,127}$"
              },
              "strategy": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StrategyConfig"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "timeout": {
                "type": "string",
                "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
              },
              "type": {
                "type": "string",
                "enum": [
                  "TerraformCloudRun"
                ]
              },
              "when": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StepWhenCondition"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#",
            "allOf": [
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "TerraformCloudRun"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/cd/TerraformCloudRunStepInfo"
                    }
                  }
                }
              }
            ]
          },
          "TerraformCloudRunStepInfo": {
            "title": "TerraformCloudRunStepInfo",
            "allOf": [
              {
                "if": {
                  "properties": {
                    "runType": {
                      "const": "Apply"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/cd/TerraformCloudApplySpec"
                    }
                  }
                },
                "$ref": "#/definitions/pipeline/common/StepSpecType"
              },
              {
                "type": "object",
                "required": [
                  "runType",
                  "spec"
                ],
                "properties": {
                  "delegateSelectors": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string",
                        "pattern": "(<\\+.+>.*)",
                        "minLength": 1
                      }
                    ]
                  },
                  "runMessage": {
                    "type": "string"
                  },
                  "runType": {
                    "type": "string",
                    "enum": [
                      "RefreshState",
                      "PlanOnly",
                      "PlanAndApply",
                      "PlanAndDestroy",
                      "Plan",
                      "Apply"
                    ]
                  }
                },
                "if": {
                  "properties": {
                    "runType": {
                      "const": "Plan"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/cd/TerraformCloudPlanSpec"
                    }
                  }
                }
              },
              {
                "if": {
                  "properties": {
                    "runType": {
                      "const": "PlanAndApply"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/cd/TerraformCloudPlanAndApplySpec"
                    }
                  }
                }
              },
              {
                "if": {
                  "properties": {
                    "runType": {
                      "const": "PlanAndDestroy"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/cd/TerraformCloudPlanAndDestroySpec"
                    }
                  }
                }
              },
              {
                "if": {
                  "properties": {
                    "runType": {
                      "const": "PlanOnly"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/cd/TerraformCloudPlanOnlySpec"
                    }
                  }
                }
              },
              {
                "if": {
                  "properties": {
                    "runType": {
                      "const": "RefreshState"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/cd/TerraformCloudRefreshSpec"
                    }
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "type": "object",
            "required": [
              "runType",
              "spec"
            ],
            "properties": {
              "delegateSelectors": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "(<\\+.+>.*)",
                    "minLength": 1
                  }
                ]
              },
              "runMessage": {
                "type": "string"
              },
              "runType": {
                "type": "string",
                "enum": [
                  "RefreshState",
                  "PlanOnly",
                  "PlanAndApply",
                  "PlanAndDestroy",
                  "Plan",
                  "Apply"
                ]
              },
              "description": {
                "desc": "This is the description for TerraformCloudRunStepInfo"
              }
            }
          },
          "TerraformCloudApplySpec": {
            "title": "TerraformCloudApplySpec",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/steps/cd/TerraformCloudRunExecutionSpec"
              },
              {
                "type": "object",
                "required": [
                  "provisionerIdentifier"
                ],
                "properties": {
                  "provisionerIdentifier": {
                    "type": "string"
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "properties": {
              "description": {
                "desc": "This is the description for TerraformCloudApplySpec"
              }
            }
          },
          "TerraformCloudRunExecutionSpec": {
            "title": "TerraformCloudRunExecutionSpec",
            "type": "object",
            "discriminator": "runType",
            "$schema": "http://json-schema.org/draft-07/schema#",
            "properties": {
              "description": {
                "desc": "This is the description for TerraformCloudRunExecutionSpec"
              }
            }
          },
          "TerraformCloudPlanSpec": {
            "title": "TerraformCloudPlanSpec",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/steps/cd/TerraformCloudRunExecutionSpec"
              },
              {
                "type": "object",
                "required": [
                  "connectorRef",
                  "discardPendingRuns",
                  "organization",
                  "provisionerIdentifier",
                  "workspace"
                ],
                "properties": {
                  "connectorRef": {
                    "type": "string"
                  },
                  "discardPendingRuns": {
                    "oneOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "exportTerraformPlanJson": {
                    "oneOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "organization": {
                    "type": "string"
                  },
                  "planType": {
                    "type": "string",
                    "enum": [
                      "Apply",
                      "Destroy"
                    ]
                  },
                  "provisionerIdentifier": {
                    "type": "string"
                  },
                  "targets": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "variables": {
                    "type": "array",
                    "items": {
                      "oneOf": [
                        {
                          "$ref": "#/definitions/pipeline/common/NumberNGVariable"
                        },
                        {
                          "$ref": "#/definitions/pipeline/common/SecretNGVariable"
                        },
                        {
                          "$ref": "#/definitions/pipeline/common/StringNGVariable"
                        }
                      ]
                    }
                  },
                  "workspace": {
                    "type": "string"
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "properties": {
              "description": {
                "desc": "This is the description for TerraformCloudPlanSpec"
              }
            }
          },
          "TerraformCloudPlanAndApplySpec": {
            "title": "TerraformCloudPlanAndApplySpec",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/steps/cd/TerraformCloudRunExecutionSpec"
              },
              {
                "type": "object",
                "required": [
                  "connectorRef",
                  "organization",
                  "provisionerIdentifier",
                  "workspace"
                ],
                "properties": {
                  "connectorRef": {
                    "type": "string"
                  },
                  "discardPendingRuns": {
                    "oneOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "organization": {
                    "type": "string"
                  },
                  "overridePolicies": {
                    "oneOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "provisionerIdentifier": {
                    "type": "string"
                  },
                  "targets": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "variables": {
                    "type": "array",
                    "items": {
                      "oneOf": [
                        {
                          "$ref": "#/definitions/pipeline/common/NumberNGVariable"
                        },
                        {
                          "$ref": "#/definitions/pipeline/common/SecretNGVariable"
                        },
                        {
                          "$ref": "#/definitions/pipeline/common/StringNGVariable"
                        }
                      ]
                    }
                  },
                  "workspace": {
                    "type": "string"
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "properties": {
              "description": {
                "desc": "This is the description for TerraformCloudPlanAndApplySpec"
              }
            }
          },
          "TerraformCloudPlanAndDestroySpec": {
            "title": "TerraformCloudPlanAndDestroySpec",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/steps/cd/TerraformCloudRunExecutionSpec"
              },
              {
                "type": "object",
                "required": [
                  "connectorRef",
                  "organization",
                  "provisionerIdentifier",
                  "workspace"
                ],
                "properties": {
                  "connectorRef": {
                    "type": "string"
                  },
                  "discardPendingRuns": {
                    "oneOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "organization": {
                    "type": "string"
                  },
                  "overridePolicies": {
                    "oneOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "provisionerIdentifier": {
                    "type": "string"
                  },
                  "targets": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "variables": {
                    "type": "array",
                    "items": {
                      "oneOf": [
                        {
                          "$ref": "#/definitions/pipeline/common/NumberNGVariable"
                        },
                        {
                          "$ref": "#/definitions/pipeline/common/SecretNGVariable"
                        },
                        {
                          "$ref": "#/definitions/pipeline/common/StringNGVariable"
                        }
                      ]
                    }
                  },
                  "workspace": {
                    "type": "string"
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "properties": {
              "description": {
                "desc": "This is the description for TerraformCloudPlanAndDestroySpec"
              }
            }
          },
          "TerraformCloudPlanOnlySpec": {
            "title": "TerraformCloudPlanOnlySpec",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/steps/cd/TerraformCloudRunExecutionSpec"
              },
              {
                "type": "object",
                "required": [
                  "connectorRef",
                  "discardPendingRuns",
                  "organization",
                  "provisionerIdentifier",
                  "workspace"
                ],
                "properties": {
                  "connectorRef": {
                    "type": "string"
                  },
                  "discardPendingRuns": {
                    "oneOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "exportTerraformPlanJson": {
                    "oneOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "organization": {
                    "type": "string"
                  },
                  "planType": {
                    "type": "string",
                    "enum": [
                      "Apply",
                      "Destroy"
                    ]
                  },
                  "provisionerIdentifier": {
                    "type": "string"
                  },
                  "targets": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "terraformVersion": {
                    "type": "string"
                  },
                  "variables": {
                    "type": "array",
                    "items": {
                      "oneOf": [
                        {
                          "$ref": "#/definitions/pipeline/common/NumberNGVariable"
                        },
                        {
                          "$ref": "#/definitions/pipeline/common/SecretNGVariable"
                        },
                        {
                          "$ref": "#/definitions/pipeline/common/StringNGVariable"
                        }
                      ]
                    }
                  },
                  "workspace": {
                    "type": "string"
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "properties": {
              "description": {
                "desc": "This is the description for TerraformCloudPlanOnlySpec"
              }
            }
          },
          "TerraformCloudRefreshSpec": {
            "title": "TerraformCloudRefreshSpec",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/steps/cd/TerraformCloudRunExecutionSpec"
              },
              {
                "type": "object",
                "required": [
                  "connectorRef",
                  "organization",
                  "workspace"
                ],
                "properties": {
                  "connectorRef": {
                    "type": "string"
                  },
                  "discardPendingRuns": {
                    "oneOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "organization": {
                    "type": "string"
                  },
                  "variables": {
                    "type": "array",
                    "items": {
                      "oneOf": [
                        {
                          "$ref": "#/definitions/pipeline/common/NumberNGVariable"
                        },
                        {
                          "$ref": "#/definitions/pipeline/common/SecretNGVariable"
                        },
                        {
                          "$ref": "#/definitions/pipeline/common/StringNGVariable"
                        }
                      ]
                    }
                  },
                  "workspace": {
                    "type": "string"
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "properties": {
              "description": {
                "desc": "This is the description for TerraformCloudRefreshSpec"
              }
            }
          },
          "AwsLambdaDeployStepNode": {
            "title": "AwsLambdaDeployStepNode",
            "type": "object",
            "required": [
              "identifier",
              "name",
              "type"
            ],
            "properties": {
              "description": {
                "type": "string",
                "desc": "This is the description for AwsLambdaDeployStepNode"
              },
              "enforce": {
                "$ref": "#/definitions/pipeline/common/PolicyConfig"
              },
              "failureStrategies": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/pipeline/common/FailureStrategyConfig"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "identifier": {
                "type": "string",
                "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
              },
              "name": {
                "type": "string",
                "pattern": "^[a-zA-Z_0-9-.][-0-9a-zA-Z_\\s.]{0,127}$"
              },
              "strategy": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StrategyConfig"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "timeout": {
                "type": "string",
                "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
              },
              "type": {
                "type": "string",
                "enum": [
                  "AwsLambdaDeploy"
                ]
              },
              "when": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StepWhenCondition"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#",
            "allOf": [
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "AwsLambdaDeploy"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/cd/AwsLambdaDeployStepInfo"
                    }
                  }
                }
              }
            ]
          },
          "AwsLambdaDeployStepInfo": {
            "title": "AwsLambdaDeployStepInfo",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/common/StepSpecType"
              },
              {
                "type": "object",
                "properties": {
                  "delegateSelectors": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string",
                        "pattern": "(<\\+.+>.*)",
                        "minLength": 1
                      }
                    ]
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "type": "object",
            "properties": {
              "delegateSelectors": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "(<\\+.+>.*)",
                    "minLength": 1
                  }
                ]
              },
              "description": {
                "desc": "This is the description for AwsLambdaDeployStepInfo"
              }
            }
          },
          "AwsSamDeployStepNode": {
            "title": "AwsSamDeployStepNode",
            "type": "object",
            "required": [
              "identifier",
              "name",
              "type"
            ],
            "properties": {
              "description": {
                "type": "string",
                "desc": "This is the description for AwsSamDeployStepNode"
              },
              "enforce": {
                "$ref": "#/definitions/pipeline/common/PolicyConfig"
              },
              "failureStrategies": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/pipeline/common/FailureStrategyConfig"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "identifier": {
                "type": "string",
                "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
              },
              "name": {
                "type": "string",
                "pattern": "^[a-zA-Z_0-9-.][-0-9a-zA-Z_\\s.]{0,127}$"
              },
              "strategy": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StrategyConfig"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "timeout": {
                "type": "string",
                "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
              },
              "type": {
                "type": "string",
                "enum": [
                  "AwsSamDeploy"
                ]
              },
              "when": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StepWhenCondition"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#",
            "allOf": [
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "AwsSamDeploy"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/cd/AwsSamDeployStepInfo"
                    }
                  }
                }
              }
            ]
          },
          "AwsSamDeployStepInfo": {
            "title": "AwsSamDeployStepInfo",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/common/StepSpecType"
              },
              {
                "type": "object",
                "required": [
                  "stackName"
                ],
                "properties": {
                  "connectorRef": {
                    "type": "string"
                  },
                  "delegateSelectors": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string",
                        "pattern": "(<\\+.+>.*)",
                        "minLength": 1
                      }
                    ]
                  },
                  "deployCommandOptions": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string",
                        "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                        "minLength": 1
                      }
                    ]
                  },
                  "image": {
                    "type": "string"
                  },
                  "imagePullPolicy": {
                    "oneOf": [
                      {
                        "type": "string",
                        "enum": [
                          "Always",
                          "Never",
                          "IfNotPresent"
                        ]
                      },
                      {
                        "type": "string",
                        "pattern": "(<\\+.+>.*)",
                        "minLength": 1
                      }
                    ]
                  },
                  "privileged": {
                    "oneOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "type": "string",
                        "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                        "minLength": 1
                      }
                    ]
                  },
                  "resources": {
                    "$ref": "#/definitions/pipeline/common/ContainerResource"
                  },
                  "runAsUser": {
                    "oneOf": [
                      {
                        "type": "integer",
                        "format": "int32"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "samVersion": {
                    "oneOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "string",
                        "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                        "minLength": 1
                      }
                    ]
                  },
                  "stackName": {
                    "oneOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "string",
                        "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                        "minLength": 1
                      }
                    ]
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "type": "object",
            "required": [
              "stackName"
            ],
            "properties": {
              "connectorRef": {
                "type": "string"
              },
              "delegateSelectors": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "(<\\+.+>.*)",
                    "minLength": 1
                  }
                ]
              },
              "deployCommandOptions": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                    "minLength": 1
                  }
                ]
              },
              "image": {
                "type": "string"
              },
              "imagePullPolicy": {
                "oneOf": [
                  {
                    "type": "string",
                    "enum": [
                      "Always",
                      "Never",
                      "IfNotPresent"
                    ]
                  },
                  {
                    "type": "string",
                    "pattern": "(<\\+.+>.*)",
                    "minLength": 1
                  }
                ]
              },
              "privileged": {
                "oneOf": [
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                    "minLength": 1
                  }
                ]
              },
              "resources": {
                "$ref": "#/definitions/pipeline/common/ContainerResource"
              },
              "runAsUser": {
                "oneOf": [
                  {
                    "type": "integer",
                    "format": "int32"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "samVersion": {
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                    "minLength": 1
                  }
                ]
              },
              "stackName": {
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                    "minLength": 1
                  }
                ]
              },
              "description": {
                "desc": "This is the description for AwsSamDeployStepInfo"
              }
            }
          },
          "DownloadManifestsStepNode": {
            "title": "DownloadManifestsStepNode",
            "type": "object",
            "required": [
              "identifier",
              "name",
              "type"
            ],
            "properties": {
              "description": {
                "type": "string",
                "desc": "This is the description for DownloadManifestsStepNode"
              },
              "enforce": {
                "$ref": "#/definitions/pipeline/common/PolicyConfig"
              },
              "failureStrategies": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/pipeline/common/FailureStrategyConfig"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "identifier": {
                "type": "string",
                "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
              },
              "name": {
                "type": "string",
                "pattern": "^[a-zA-Z_0-9-.][-0-9a-zA-Z_\\s.]{0,127}$"
              },
              "strategy": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StrategyConfig"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "timeout": {
                "type": "string",
                "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
              },
              "type": {
                "type": "string",
                "enum": [
                  "DownloadManifests"
                ]
              },
              "when": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StepWhenCondition"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#",
            "allOf": [
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "DownloadManifests"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/cd/DownloadManifestsStepInfo"
                    }
                  }
                }
              }
            ]
          },
          "DownloadManifestsStepInfo": {
            "title": "DownloadManifestsStepInfo",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/common/StepSpecType"
              },
              {
                "type": "object",
                "properties": {
                  "delegateSelectors": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string",
                        "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                        "minLength": 1
                      }
                    ]
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "type": "object",
            "properties": {
              "delegateSelectors": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                    "minLength": 1
                  }
                ]
              },
              "description": {
                "desc": "This is the description for DownloadManifestsStepInfo"
              }
            }
          },
          "AwsSamBuildStepNode": {
            "title": "AwsSamBuildStepNode",
            "type": "object",
            "required": [
              "identifier",
              "name",
              "type"
            ],
            "properties": {
              "description": {
                "type": "string",
                "desc": "This is the description for AwsSamBuildStepNode"
              },
              "enforce": {
                "$ref": "#/definitions/pipeline/common/PolicyConfig"
              },
              "failureStrategies": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/pipeline/common/FailureStrategyConfig"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "identifier": {
                "type": "string",
                "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
              },
              "name": {
                "type": "string",
                "pattern": "^[a-zA-Z_0-9-.][-0-9a-zA-Z_\\s.]{0,127}$"
              },
              "strategy": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StrategyConfig"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "timeout": {
                "type": "string",
                "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
              },
              "type": {
                "type": "string",
                "enum": [
                  "AwsSamBuild"
                ]
              },
              "when": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StepWhenCondition"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#",
            "allOf": [
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "AwsSamBuild"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/cd/AwsSamBuildStepInfo"
                    }
                  }
                }
              }
            ]
          },
          "AwsSamBuildStepInfo": {
            "title": "AwsSamBuildStepInfo",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/common/StepSpecType"
              },
              {
                "type": "object",
                "properties": {
                  "buildCommandOptions": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string",
                        "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                        "minLength": 1
                      }
                    ]
                  },
                  "connectorRef": {
                    "type": "string"
                  },
                  "delegateSelectors": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string",
                        "pattern": "(<\\+.+>.*)",
                        "minLength": 1
                      }
                    ]
                  },
                  "image": {
                    "type": "string"
                  },
                  "imagePullPolicy": {
                    "oneOf": [
                      {
                        "type": "string",
                        "enum": [
                          "Always",
                          "Never",
                          "IfNotPresent"
                        ]
                      },
                      {
                        "type": "string",
                        "pattern": "(<\\+.+>.*)",
                        "minLength": 1
                      }
                    ]
                  },
                  "privileged": {
                    "oneOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "type": "string",
                        "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                        "minLength": 1
                      }
                    ]
                  },
                  "resources": {
                    "$ref": "#/definitions/pipeline/common/ContainerResource"
                  },
                  "runAsUser": {
                    "oneOf": [
                      {
                        "type": "integer",
                        "format": "int32"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "samBuildDockerRegistryConnectorRef": {
                    "type": "string"
                  },
                  "samVersion": {
                    "oneOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "string",
                        "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                        "minLength": 1
                      }
                    ]
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "type": "object",
            "properties": {
              "buildCommandOptions": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                    "minLength": 1
                  }
                ]
              },
              "connectorRef": {
                "type": "string"
              },
              "delegateSelectors": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "(<\\+.+>.*)",
                    "minLength": 1
                  }
                ]
              },
              "image": {
                "type": "string"
              },
              "imagePullPolicy": {
                "oneOf": [
                  {
                    "type": "string",
                    "enum": [
                      "Always",
                      "Never",
                      "IfNotPresent"
                    ]
                  },
                  {
                    "type": "string",
                    "pattern": "(<\\+.+>.*)",
                    "minLength": 1
                  }
                ]
              },
              "privileged": {
                "oneOf": [
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                    "minLength": 1
                  }
                ]
              },
              "resources": {
                "$ref": "#/definitions/pipeline/common/ContainerResource"
              },
              "runAsUser": {
                "oneOf": [
                  {
                    "type": "integer",
                    "format": "int32"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "samBuildDockerRegistryConnectorRef": {
                "type": "string"
              },
              "samVersion": {
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                    "minLength": 1
                  }
                ]
              },
              "description": {
                "desc": "This is the description for AwsSamBuildStepInfo"
              }
            }
          },
          "AwsSamRollbackStepNode": {
            "title": "AwsSamRollbackStepNode",
            "type": "object",
            "required": [
              "identifier",
              "name",
              "type"
            ],
            "properties": {
              "description": {
                "type": "string",
                "desc": "This is the description for AwsSamRollbackStepNode"
              },
              "enforce": {
                "$ref": "#/definitions/pipeline/common/PolicyConfig"
              },
              "failureStrategies": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/pipeline/common/FailureStrategyConfig"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "identifier": {
                "type": "string",
                "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
              },
              "name": {
                "type": "string",
                "pattern": "^[a-zA-Z_0-9-.][-0-9a-zA-Z_\\s.]{0,127}$"
              },
              "strategy": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StrategyConfig"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "timeout": {
                "type": "string",
                "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
              },
              "type": {
                "type": "string",
                "enum": [
                  "AwsSamRollback"
                ]
              },
              "when": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StepWhenCondition"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#",
            "allOf": [
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "AwsSamRollback"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/cd/AwsSamRollbackStepInfo"
                    }
                  }
                }
              }
            ]
          },
          "AwsSamRollbackStepInfo": {
            "title": "AwsSamRollbackStepInfo",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/common/StepSpecType"
              },
              {
                "type": "object",
                "properties": {
                  "delegateSelectors": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string",
                        "pattern": "(<\\+.+>.*)",
                        "minLength": 1
                      }
                    ]
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "type": "object",
            "properties": {
              "delegateSelectors": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "(<\\+.+>.*)",
                    "minLength": 1
                  }
                ]
              },
              "description": {
                "desc": "This is the description for AwsSamRollbackStepInfo"
              }
            }
          },
          "TerraformCloudRollbackStepNode": {
            "title": "TerraformCloudRollbackStepNode",
            "type": "object",
            "required": [
              "identifier",
              "name",
              "spec",
              "type"
            ],
            "properties": {
              "description": {
                "type": "string",
                "desc": "This is the description for TerraformCloudRollbackStepNode"
              },
              "enforce": {
                "$ref": "#/definitions/pipeline/common/PolicyConfig"
              },
              "failureStrategies": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/pipeline/common/FailureStrategyConfig"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "identifier": {
                "type": "string",
                "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
              },
              "name": {
                "type": "string",
                "pattern": "^[a-zA-Z_0-9-.][-0-9a-zA-Z_\\s.]{0,127}$"
              },
              "strategy": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StrategyConfig"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "timeout": {
                "type": "string",
                "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
              },
              "type": {
                "type": "string",
                "enum": [
                  "TerraformCloudRollback"
                ]
              },
              "when": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StepWhenCondition"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#",
            "allOf": [
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "TerraformCloudRollback"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/cd/TerraformCloudRollbackStepInfo"
                    }
                  }
                }
              }
            ]
          },
          "TerraformCloudRollbackStepInfo": {
            "title": "TerraformCloudRollbackStepInfo",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/common/StepSpecType"
              },
              {
                "type": "object",
                "required": [
                  "provisionerIdentifier"
                ],
                "properties": {
                  "delegateSelectors": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string",
                        "pattern": "(<\\+.+>.*)",
                        "minLength": 1
                      }
                    ]
                  },
                  "discardPendingRuns": {
                    "oneOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "overridePolicies": {
                    "oneOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "provisionerIdentifier": {
                    "type": "string"
                  },
                  "runMessage": {
                    "type": "string"
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "type": "object",
            "required": [
              "provisionerIdentifier"
            ],
            "properties": {
              "delegateSelectors": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "(<\\+.+>.*)",
                    "minLength": 1
                  }
                ]
              },
              "discardPendingRuns": {
                "oneOf": [
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "overridePolicies": {
                "oneOf": [
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "provisionerIdentifier": {
                "type": "string"
              },
              "runMessage": {
                "type": "string"
              },
              "description": {
                "desc": "This is the description for TerraformCloudRollbackStepInfo"
              }
            }
          },
          "AwsLambdaRollbackStepNode": {
            "title": "AwsLambdaRollbackStepNode",
            "type": "object",
            "required": [
              "identifier",
              "name",
              "type"
            ],
            "properties": {
              "description": {
                "type": "string",
                "desc": "This is the description for AwsLambdaRollbackStepNode"
              },
              "enforce": {
                "$ref": "#/definitions/pipeline/common/PolicyConfig"
              },
              "failureStrategies": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/pipeline/common/FailureStrategyConfig"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "identifier": {
                "type": "string",
                "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
              },
              "name": {
                "type": "string",
                "pattern": "^[a-zA-Z_0-9-.][-0-9a-zA-Z_\\s.]{0,127}$"
              },
              "strategy": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StrategyConfig"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "timeout": {
                "type": "string",
                "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
              },
              "type": {
                "type": "string",
                "enum": [
                  "AwsLambdaRollback"
                ]
              },
              "when": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StepWhenCondition"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#",
            "allOf": [
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "AwsLambdaRollback"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/cd/AwsLambdaRollbackStepInfo"
                    }
                  }
                }
              }
            ]
          },
          "AwsLambdaRollbackStepInfo": {
            "title": "AwsLambdaRollbackStepInfo",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/common/StepSpecType"
              },
              {
                "type": "object",
                "properties": {
                  "delegateSelectors": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string",
                        "pattern": "(<\\+.+>.*)",
                        "minLength": 1
                      }
                    ]
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "type": "object",
            "properties": {
              "delegateSelectors": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "(<\\+.+>.*)",
                    "minLength": 1
                  }
                ]
              },
              "description": {
                "desc": "This is the description for AwsLambdaRollbackStepInfo"
              }
            }
          },
          "BambooBuildStepNode": {
            "title": "BambooBuildStepNode",
            "type": "object",
            "required": [
              "identifier",
              "name",
              "spec",
              "type"
            ],
            "properties": {
              "description": {
                "type": "string",
                "desc": "This is the description for BambooBuildStepNode"
              },
              "enforce": {
                "$ref": "#/definitions/pipeline/common/PolicyConfig"
              },
              "failureStrategies": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/pipeline/common/FailureStrategyConfig"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "identifier": {
                "type": "string",
                "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
              },
              "name": {
                "type": "string",
                "pattern": "^[a-zA-Z_0-9-.][-0-9a-zA-Z_\\s.]{0,127}$"
              },
              "strategy": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StrategyConfig"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "timeout": {
                "type": "string",
                "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
              },
              "type": {
                "type": "string",
                "enum": [
                  "BambooBuild"
                ]
              },
              "when": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StepWhenCondition"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#",
            "allOf": [
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "BambooBuild"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/cd/BambooBuildStepInfo"
                    }
                  }
                }
              }
            ]
          },
          "BambooBuildStepInfo": {
            "title": "BambooBuildStepInfo",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/common/StepSpecType"
              },
              {
                "type": "object",
                "required": [
                  "connectorRef",
                  "planName"
                ],
                "properties": {
                  "connectorRef": {
                    "type": "string"
                  },
                  "delegateSelectors": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string",
                        "pattern": "(<\\+.+>.*)",
                        "minLength": 1
                      }
                    ]
                  },
                  "metadata": {
                    "type": "string"
                  },
                  "planName": {
                    "type": "string"
                  },
                  "planParameter": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/pipeline/steps/cd/BambooParameterField"
                        }
                      },
                      {
                        "type": "string",
                        "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                        "minLength": 1
                      }
                    ]
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "type": "object",
            "required": [
              "connectorRef",
              "planName"
            ],
            "properties": {
              "connectorRef": {
                "type": "string"
              },
              "delegateSelectors": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "(<\\+.+>.*)",
                    "minLength": 1
                  }
                ]
              },
              "metadata": {
                "type": "string"
              },
              "planName": {
                "type": "string"
              },
              "planParameter": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/pipeline/steps/cd/BambooParameterField"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                    "minLength": 1
                  }
                ]
              },
              "description": {
                "desc": "This is the description for BambooBuildStepInfo"
              }
            }
          },
          "BambooParameterField": {
            "title": "BambooParameterField",
            "type": "object",
            "required": [
              "value"
            ],
            "properties": {
              "metadata": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "String",
                  "Number"
                ]
              },
              "value": {
                "type": "string"
              },
              "description": {
                "desc": "This is the description for BambooParameterField"
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "ServerlessAwsLambdaDeployV2StepNode": {
            "title": "ServerlessAwsLambdaDeployV2StepNode",
            "type": "object",
            "required": [
              "identifier",
              "name",
              "type"
            ],
            "properties": {
              "description": {
                "type": "string",
                "desc": "This is the description for ServerlessAwsLambdaDeployV2StepNode"
              },
              "enforce": {
                "$ref": "#/definitions/pipeline/common/PolicyConfig"
              },
              "failureStrategies": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/pipeline/common/FailureStrategyConfig"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "identifier": {
                "type": "string",
                "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
              },
              "name": {
                "type": "string",
                "pattern": "^[a-zA-Z_0-9-.][-0-9a-zA-Z_\\s.]{0,127}$"
              },
              "strategy": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StrategyConfig"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "timeout": {
                "type": "string",
                "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
              },
              "type": {
                "type": "string",
                "enum": [
                  "ServerlessAwsLambdaDeployV2"
                ]
              },
              "when": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StepWhenCondition"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#",
            "allOf": [
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "ServerlessAwsLambdaDeployV2"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/cd/ServerlessAwsLambdaDeployV2StepInfo"
                    }
                  }
                }
              }
            ]
          },
          "ServerlessAwsLambdaDeployV2StepInfo": {
            "title": "ServerlessAwsLambdaDeployV2StepInfo",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/common/StepSpecType"
              },
              {
                "type": "object",
                "properties": {
                  "connectorRef": {
                    "type": "string"
                  },
                  "delegateSelectors": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string",
                        "pattern": "(<\\+.+>.*)",
                        "minLength": 1
                      }
                    ]
                  },
                  "deployCommandOptions": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string",
                        "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                        "minLength": 1
                      }
                    ]
                  },
                  "image": {
                    "type": "string"
                  },
                  "imagePullPolicy": {
                    "oneOf": [
                      {
                        "type": "string",
                        "enum": [
                          "Always",
                          "Never",
                          "IfNotPresent"
                        ]
                      },
                      {
                        "type": "string",
                        "pattern": "(<\\+.+>.*)",
                        "minLength": 1
                      }
                    ]
                  },
                  "privileged": {
                    "oneOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "type": "string",
                        "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                        "minLength": 1
                      }
                    ]
                  },
                  "resources": {
                    "$ref": "#/definitions/pipeline/common/ContainerResource"
                  },
                  "runAsUser": {
                    "oneOf": [
                      {
                        "type": "integer",
                        "format": "int32"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "serverlessVersion": {
                    "oneOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "string",
                        "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                        "minLength": 1
                      }
                    ]
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "type": "object",
            "properties": {
              "connectorRef": {
                "type": "string"
              },
              "delegateSelectors": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "(<\\+.+>.*)",
                    "minLength": 1
                  }
                ]
              },
              "deployCommandOptions": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                    "minLength": 1
                  }
                ]
              },
              "image": {
                "type": "string"
              },
              "imagePullPolicy": {
                "oneOf": [
                  {
                    "type": "string",
                    "enum": [
                      "Always",
                      "Never",
                      "IfNotPresent"
                    ]
                  },
                  {
                    "type": "string",
                    "pattern": "(<\\+.+>.*)",
                    "minLength": 1
                  }
                ]
              },
              "privileged": {
                "oneOf": [
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                    "minLength": 1
                  }
                ]
              },
              "resources": {
                "$ref": "#/definitions/pipeline/common/ContainerResource"
              },
              "runAsUser": {
                "oneOf": [
                  {
                    "type": "integer",
                    "format": "int32"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "serverlessVersion": {
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                    "minLength": 1
                  }
                ]
              },
              "description": {
                "desc": "This is the description for ServerlessAwsLambdaDeployV2StepInfo"
              }
            }
          },
          "ServerlessAwsLambdaPackageV2StepNode": {
            "title": "ServerlessAwsLambdaPackageV2StepNode",
            "type": "object",
            "required": [
              "identifier",
              "name",
              "type"
            ],
            "properties": {
              "description": {
                "type": "string",
                "desc": "This is the description for ServerlessAwsLambdaPackageV2StepNode"
              },
              "enforce": {
                "$ref": "#/definitions/pipeline/common/PolicyConfig"
              },
              "failureStrategies": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/pipeline/common/FailureStrategyConfig"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "identifier": {
                "type": "string",
                "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
              },
              "name": {
                "type": "string",
                "pattern": "^[a-zA-Z_0-9-.][-0-9a-zA-Z_\\s.]{0,127}$"
              },
              "strategy": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StrategyConfig"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "timeout": {
                "type": "string",
                "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
              },
              "type": {
                "type": "string",
                "enum": [
                  "ServerlessAwsLambdaPackageV2"
                ]
              },
              "when": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StepWhenCondition"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#",
            "allOf": [
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "ServerlessAwsLambdaPackageV2"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/cd/ServerlessAwsLambdaPackageV2StepInfo"
                    }
                  }
                }
              }
            ]
          },
          "ServerlessAwsLambdaPackageV2StepInfo": {
            "title": "ServerlessAwsLambdaPackageV2StepInfo",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/common/StepSpecType"
              },
              {
                "type": "object",
                "properties": {
                  "connectorRef": {
                    "type": "string"
                  },
                  "delegateSelectors": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string",
                        "pattern": "(<\\+.+>.*)",
                        "minLength": 1
                      }
                    ]
                  },
                  "image": {
                    "type": "string"
                  },
                  "imagePullPolicy": {
                    "oneOf": [
                      {
                        "type": "string",
                        "enum": [
                          "Always",
                          "Never",
                          "IfNotPresent"
                        ]
                      },
                      {
                        "type": "string",
                        "pattern": "(<\\+.+>.*)",
                        "minLength": 1
                      }
                    ]
                  },
                  "packageCommandOptions": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string",
                        "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                        "minLength": 1
                      }
                    ]
                  },
                  "privileged": {
                    "oneOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "type": "string",
                        "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                        "minLength": 1
                      }
                    ]
                  },
                  "resources": {
                    "$ref": "#/definitions/pipeline/common/ContainerResource"
                  },
                  "runAsUser": {
                    "oneOf": [
                      {
                        "type": "integer",
                        "format": "int32"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "serverlessVersion": {
                    "oneOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "string",
                        "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                        "minLength": 1
                      }
                    ]
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "type": "object",
            "properties": {
              "connectorRef": {
                "type": "string"
              },
              "delegateSelectors": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "(<\\+.+>.*)",
                    "minLength": 1
                  }
                ]
              },
              "image": {
                "type": "string"
              },
              "imagePullPolicy": {
                "oneOf": [
                  {
                    "type": "string",
                    "enum": [
                      "Always",
                      "Never",
                      "IfNotPresent"
                    ]
                  },
                  {
                    "type": "string",
                    "pattern": "(<\\+.+>.*)",
                    "minLength": 1
                  }
                ]
              },
              "packageCommandOptions": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                    "minLength": 1
                  }
                ]
              },
              "privileged": {
                "oneOf": [
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                    "minLength": 1
                  }
                ]
              },
              "resources": {
                "$ref": "#/definitions/pipeline/common/ContainerResource"
              },
              "runAsUser": {
                "oneOf": [
                  {
                    "type": "integer",
                    "format": "int32"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "serverlessVersion": {
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                    "minLength": 1
                  }
                ]
              },
              "description": {
                "desc": "This is the description for ServerlessAwsLambdaPackageV2StepInfo"
              }
            }
          },
          "ServerlessAwsLambdaPrepareRollbackV2StepNode": {
            "title": "ServerlessAwsLambdaPrepareRollbackV2StepNode",
            "type": "object",
            "required": [
              "identifier",
              "name",
              "type"
            ],
            "properties": {
              "description": {
                "type": "string",
                "desc": "This is the description for ServerlessAwsLambdaPrepareRollbackV2StepNode"
              },
              "enforce": {
                "$ref": "#/definitions/pipeline/common/PolicyConfig"
              },
              "failureStrategies": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/pipeline/common/FailureStrategyConfig"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "identifier": {
                "type": "string",
                "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
              },
              "name": {
                "type": "string",
                "pattern": "^[a-zA-Z_0-9-.][-0-9a-zA-Z_\\s.]{0,127}$"
              },
              "strategy": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StrategyConfig"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "timeout": {
                "type": "string",
                "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
              },
              "type": {
                "type": "string",
                "enum": [
                  "ServerlessAwsLambdaPrepareRollbackV2"
                ]
              },
              "when": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StepWhenCondition"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#",
            "allOf": [
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "ServerlessAwsLambdaPrepareRollbackV2"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/cd/ServerlessAwsLambdaPrepareRollbackV2StepInfo"
                    }
                  }
                }
              }
            ]
          },
          "ServerlessAwsLambdaPrepareRollbackV2StepInfo": {
            "title": "ServerlessAwsLambdaPrepareRollbackV2StepInfo",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/common/StepSpecType"
              },
              {
                "type": "object",
                "properties": {
                  "connectorRef": {
                    "type": "string"
                  },
                  "delegateSelectors": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string",
                        "pattern": "(<\\+.+>.*)",
                        "minLength": 1
                      }
                    ]
                  },
                  "image": {
                    "type": "string"
                  },
                  "imagePullPolicy": {
                    "oneOf": [
                      {
                        "type": "string",
                        "enum": [
                          "Always",
                          "Never",
                          "IfNotPresent"
                        ]
                      },
                      {
                        "type": "string",
                        "pattern": "(<\\+.+>.*)",
                        "minLength": 1
                      }
                    ]
                  },
                  "privileged": {
                    "oneOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "type": "string",
                        "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                        "minLength": 1
                      }
                    ]
                  },
                  "resources": {
                    "$ref": "#/definitions/pipeline/common/ContainerResource"
                  },
                  "runAsUser": {
                    "oneOf": [
                      {
                        "type": "integer",
                        "format": "int32"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "serverlessVersion": {
                    "oneOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "string",
                        "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                        "minLength": 1
                      }
                    ]
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "type": "object",
            "properties": {
              "connectorRef": {
                "type": "string"
              },
              "delegateSelectors": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "(<\\+.+>.*)",
                    "minLength": 1
                  }
                ]
              },
              "image": {
                "type": "string"
              },
              "imagePullPolicy": {
                "oneOf": [
                  {
                    "type": "string",
                    "enum": [
                      "Always",
                      "Never",
                      "IfNotPresent"
                    ]
                  },
                  {
                    "type": "string",
                    "pattern": "(<\\+.+>.*)",
                    "minLength": 1
                  }
                ]
              },
              "privileged": {
                "oneOf": [
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                    "minLength": 1
                  }
                ]
              },
              "resources": {
                "$ref": "#/definitions/pipeline/common/ContainerResource"
              },
              "runAsUser": {
                "oneOf": [
                  {
                    "type": "integer",
                    "format": "int32"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "serverlessVersion": {
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                    "minLength": 1
                  }
                ]
              },
              "description": {
                "desc": "This is the description for ServerlessAwsLambdaPrepareRollbackV2StepInfo"
              }
            }
          },
          "ServerlessAwsLambdaRollbackV2StepNode": {
            "title": "ServerlessAwsLambdaRollbackV2StepNode",
            "type": "object",
            "required": [
              "identifier",
              "name",
              "type"
            ],
            "properties": {
              "description": {
                "type": "string",
                "desc": "This is the description for ServerlessAwsLambdaRollbackV2StepNode"
              },
              "enforce": {
                "$ref": "#/definitions/pipeline/common/PolicyConfig"
              },
              "failureStrategies": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/pipeline/common/FailureStrategyConfig"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "identifier": {
                "type": "string",
                "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
              },
              "name": {
                "type": "string",
                "pattern": "^[a-zA-Z_0-9-.][-0-9a-zA-Z_\\s.]{0,127}$"
              },
              "strategy": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StrategyConfig"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "timeout": {
                "type": "string",
                "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(.*<\\+.*>(?!.*\\.executionInput\\(\\)).*)|(^$))$"
              },
              "type": {
                "type": "string",
                "enum": [
                  "ServerlessAwsLambdaRollbackV2"
                ]
              },
              "when": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StepWhenCondition"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#",
            "allOf": [
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "ServerlessAwsLambdaRollbackV2"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "spec": {
                      "$ref": "#/definitions/pipeline/steps/cd/ServerlessAwsLambdaRollbackV2StepInfo"
                    }
                  }
                }
              }
            ]
          },
          "ServerlessAwsLambdaRollbackV2StepInfo": {
            "title": "ServerlessAwsLambdaRollbackV2StepInfo",
            "allOf": [
              {
                "$ref": "#/definitions/pipeline/common/StepSpecType"
              },
              {
                "type": "object",
                "properties": {
                  "connectorRef": {
                    "type": "string"
                  },
                  "delegateSelectors": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string",
                        "pattern": "(<\\+.+>.*)",
                        "minLength": 1
                      }
                    ]
                  },
                  "image": {
                    "type": "string"
                  },
                  "imagePullPolicy": {
                    "oneOf": [
                      {
                        "type": "string",
                        "enum": [
                          "Always",
                          "Never",
                          "IfNotPresent"
                        ]
                      },
                      {
                        "type": "string",
                        "pattern": "(<\\+.+>.*)",
                        "minLength": 1
                      }
                    ]
                  },
                  "privileged": {
                    "oneOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "type": "string",
                        "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                        "minLength": 1
                      }
                    ]
                  },
                  "resources": {
                    "$ref": "#/definitions/pipeline/common/ContainerResource"
                  },
                  "runAsUser": {
                    "oneOf": [
                      {
                        "type": "integer",
                        "format": "int32"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "serverlessVersion": {
                    "oneOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "string",
                        "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                        "minLength": 1
                      }
                    ]
                  }
                }
              }
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "type": "object",
            "properties": {
              "connectorRef": {
                "type": "string"
              },
              "delegateSelectors": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "(<\\+.+>.*)",
                    "minLength": 1
                  }
                ]
              },
              "image": {
                "type": "string"
              },
              "imagePullPolicy": {
                "oneOf": [
                  {
                    "type": "string",
                    "enum": [
                      "Always",
                      "Never",
                      "IfNotPresent"
                    ]
                  },
                  {
                    "type": "string",
                    "pattern": "(<\\+.+>.*)",
                    "minLength": 1
                  }
                ]
              },
              "privileged": {
                "oneOf": [
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                    "minLength": 1
                  }
                ]
              },
              "resources": {
                "$ref": "#/definitions/pipeline/common/ContainerResource"
              },
              "runAsUser": {
                "oneOf": [
                  {
                    "type": "integer",
                    "format": "int32"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "serverlessVersion": {
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                    "minLength": 1
                  }
                ]
              },
              "description": {
                "desc": "This is the description for ServerlessAwsLambdaRollbackV2StepInfo"
              }
            }
          }
        }
      },
      "stages": {
        "custom": {
          "CustomStageConfig": {
            "title": "CustomStageConfig",
            "type": "object",
            "required": [
              "execution"
            ],
            "properties": {
              "execution": {
                "$ref": "#/definitions/pipeline/stages/custom/ExecutionElementConfig"
              },
              "description": {
                "desc": "This is the description for CustomStageConfig"
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "ExecutionElementConfig": {
            "title": "ExecutionElementConfig",
            "type": "object",
            "required": [
              "steps"
            ],
            "properties": {
              "rollbackSteps": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/pipeline/stages/custom/ExecutionWrapperConfig"
                }
              },
              "steps": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/pipeline/stages/custom/ExecutionWrapperConfig"
                },
                "maxItems": 2147483647,
                "minItems": 1
              },
              "description": {
                "desc": "This is the description for ExecutionElementConfig"
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "ExecutionWrapperConfig": {
            "title": "ExecutionWrapperConfig",
            "type": "object",
            "properties": {
              "parallel": {
                "$ref": "#/definitions/pipeline/stages/custom/ParallelStepElementConfig"
              },
              "step": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StepElementConfig"
                  },
                  {
                    "$ref": "#/definitions/pipeline/steps/common/BackgroundStepNode"
                  },
                  {
                    "$ref": "#/definitions/pipeline/steps/ci/GitCloneStepNode"
                  },
                  {
                    "$ref": "#/definitions/pipeline/steps/cd/TerraformApplyStepNode"
                  },
                  {
                    "$ref": "#/definitions/pipeline/steps/cd/TerraformPlanStepNode"
                  },
                  {
                    "$ref": "#/definitions/pipeline/steps/cd/TerraformDestroyStepNode"
                  },
                  {
                    "$ref": "#/definitions/pipeline/steps/cd/TerraformRollbackStepNode"
                  },
                  {
                    "$ref": "#/definitions/pipeline/steps/cd/CloudformationCreateStackStepNode"
                  },
                  {
                    "$ref": "#/definitions/pipeline/steps/cd/CloudformationDeleteStackStepNode"
                  },
                  {
                    "$ref": "#/definitions/pipeline/steps/cd/CloudformationRollbackStepNode"
                  },
                  {
                    "$ref": "#/definitions/pipeline/steps/cd/AzureCreateARMResourceStepNode"
                  },
                  {
                    "$ref": "#/definitions/pipeline/steps/cd/AzureCreateBPStepNode"
                  },
                  {
                    "$ref": "#/definitions/pipeline/steps/cd/AzureARMRollbackStepNode"
                  },
                  {
                    "$ref": "#/definitions/pipeline/steps/cd/JenkinsBuildStepNode"
                  },
                  {
                    "$ref": "#/definitions/pipeline/steps/cd/ShellScriptProvisionStepNode"
                  },
                  {
                    "$ref": "#/definitions/pipeline/steps/cd/ChaosStepNode"
                  },
                  {
                    "$ref": "#/definitions/pipeline/steps/cd/TerragruntPlanStepNode"
                  },
                  {
                    "$ref": "#/definitions/pipeline/steps/cd/TerragruntApplyStepNode"
                  },
                  {
                    "$ref": "#/definitions/pipeline/steps/cd/TerragruntDestroyStepNode"
                  },
                  {
                    "$ref": "#/definitions/pipeline/steps/cd/TerragruntRollbackStepNode"
                  },
                  {
                    "$ref": "#/definitions/pipeline/steps/cd/AsgCanaryDeployStepNode"
                  },
                  {
                    "$ref": "#/definitions/pipeline/steps/cd/AsgCanaryDeleteStepNode"
                  },
                  {
                    "$ref": "#/definitions/pipeline/steps/cd/AsgRollingDeployStepNode"
                  },
                  {
                    "$ref": "#/definitions/pipeline/steps/cd/AsgRollingRollbackStepNode"
                  },
                  {
                    "$ref": "#/definitions/pipeline/steps/cd/AsgBlueGreenDeployStepNode"
                  },
                  {
                    "$ref": "#/definitions/pipeline/steps/cd/AsgBlueGreenRollbackStepNode"
                  },
                  {
                    "$ref": "#/definitions/pipeline/steps/cd/AsgBlueGreenSwapServiceStepNode"
                  },
                  {
                    "$ref": "#/definitions/pipeline/steps/cd/TerraformCloudRunStepNode"
                  },
                  {
                    "$ref": "#/definitions/pipeline/steps/cd/AwsLambdaDeployStepNode"
                  },
                  {
                    "$ref": "#/definitions/pipeline/steps/cd/AwsSamDeployStepNode"
                  },
                  {
                    "$ref": "#/definitions/pipeline/steps/cd/DownloadManifestsStepNode"
                  },
                  {
                    "$ref": "#/definitions/pipeline/steps/cd/AwsSamBuildStepNode"
                  },
                  {
                    "$ref": "#/definitions/pipeline/steps/cd/AwsSamRollbackStepNode"
                  },
                  {
                    "$ref": "#/definitions/pipeline/steps/cd/TerraformCloudRollbackStepNode"
                  },
                  {
                    "$ref": "#/definitions/pipeline/steps/cd/AwsLambdaRollbackStepNode"
                  },
                  {
                    "$ref": "#/definitions/pipeline/steps/cd/BambooBuildStepNode"
                  },
                  {
                    "$ref": "#/definitions/pipeline/steps/custom/HttpStepNode"
                  },
                  {
                    "$ref": "#/definitions/pipeline/steps/custom/EmailStepNode"
                  },
                  {
                    "$ref": "#/definitions/pipeline/steps/custom/QueueStepNode"
                  },
                  {
                    "$ref": "#/definitions/pipeline/steps/custom/ShellScriptStepNode"
                  },
                  {
                    "$ref": "#/definitions/pipeline/steps/custom/CustomApprovalStepNode"
                  },
                  {
                    "$ref": "#/definitions/pipeline/steps/custom/JiraCreateStepNode"
                  },
                  {
                    "$ref": "#/definitions/pipeline/steps/custom/JiraUpdateStepNode"
                  },
                  {
                    "$ref": "#/definitions/pipeline/steps/custom/TemplateStepNode"
                  },
                  {
                    "$ref": "#/definitions/pipeline/steps/custom/ServiceNowApprovalStepNode"
                  },
                  {
                    "$ref": "#/definitions/pipeline/steps/custom/JiraApprovalStepNode"
                  },
                  {
                    "$ref": "#/definitions/pipeline/steps/custom/HarnessApprovalStepNode"
                  },
                  {
                    "$ref": "#/definitions/pipeline/steps/custom/BarrierStepNode"
                  },
                  {
                    "$ref": "#/definitions/pipeline/steps/custom/ServiceNowCreateStepNode"
                  },
                  {
                    "$ref": "#/definitions/pipeline/steps/custom/ServiceNowUpdateStepNode"
                  },
                  {
                    "$ref": "#/definitions/pipeline/steps/custom/ServiceNowImportSetStepNode"
                  },
                  {
                    "$ref": "#/definitions/pipeline/steps/custom/FlagConfigurationStepNode"
                  },
                  {
                    "$ref": "#/definitions/pipeline/steps/custom/PolicyStepNode"
                  },
                  {
                    "$ref": "#/definitions/pipeline/steps/custom/WaitStepNode"
                  },
                  {
                    "$ref": "#/definitions/pipeline/steps/custom/ContainerStepNode"
                  },
                  {
                    "$ref": "#/definitions/pipeline/steps/common/RunStepNode"
                  },
                  {
                    "$ref": "#/definitions/pipeline/steps/common/PluginStepNode"
                  },
                  {
                    "$ref": "#/definitions/pipeline/steps/common/ActionStepNode"
                  },
                  {
                    "$ref": "#/definitions/pipeline/steps/cd/ServerlessAwsLambdaDeployV2StepNode"
                  },
                  {
                    "$ref": "#/definitions/pipeline/steps/cd/ServerlessAwsLambdaPackageV2StepNode"
                  },
                  {
                    "$ref": "#/definitions/pipeline/steps/cd/ServerlessAwsLambdaPrepareRollbackV2StepNode"
                  },
                  {
                    "$ref": "#/definitions/pipeline/steps/cd/ServerlessAwsLambdaRollbackV2StepNode"
                  },
                  {
                    "$ref": "#/definitions/pipeline/steps/common/AwsCdkBootstrapStepNode"
                  },
                  {
                    "$ref": "#/definitions/pipeline/steps/common/AwsCdkSynthStepNode"
                  },
                  {
                    "$ref": "#/definitions/pipeline/steps/common/AwsCdkDiffStepNode"
                  },
                  {
                    "$ref": "#/definitions/pipeline/steps/common/AwsCdkDeployStepNode"
                  },
                  {
                    "$ref": "#/definitions/pipeline/steps/common/AwsCdkDestroyStepNode"
                  },
                  {
                    "$ref": "#/definitions/pipeline/steps/common/AwsCdkRollbackStepNode"
                  }
                ]
              },
              "stepGroup": {
                "$ref": "#/definitions/pipeline/stages/custom/StepGroupElementConfig"
              },
              "description": {
                "desc": "This is the description for ExecutionWrapperConfig"
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "ParallelStepElementConfig": {
            "title": "ParallelStepElementConfig",
            "type": "array",
            "items": {
              "$ref": "#/definitions/pipeline/stages/custom/ExecutionWrapperConfig"
            },
            "$schema": "http://json-schema.org/draft-07/schema#",
            "properties": {
              "description": {
                "desc": "This is the description for ParallelStepElementConfig"
              }
            }
          },
          "StepGroupElementConfig": {
            "title": "StepGroupElementConfig",
            "type": "object",
            "required": [
              "identifier",
              "name"
            ],
            "properties": {
              "delegateSelectors": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "(<\\+.+>.*)",
                    "minLength": 1
                  }
                ]
              },
              "failureStrategies": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/pipeline/common/FailureStrategyConfig"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "identifier": {
                "type": "string",
                "pattern": "^[a-zA-Z_][0-9a-zA-Z_]{0,127}$"
              },
              "name": {
                "type": "string",
                "pattern": "^[a-zA-Z_0-9-.][-0-9a-zA-Z_\\s.]{0,127}$"
              },
              "sharedPaths": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>((\\.)((executionInput\\(\\))|(allowedValues|default|regex)\\(.+?\\)))*$",
                    "minLength": 1
                  }
                ]
              },
              "stepGroupInfra": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/K8sDirectInfra"
                  }
                ]
              },
              "steps": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/pipeline/stages/custom/ExecutionWrapperConfig"
                },
                "maxItems": 2147483647,
                "minItems": 1
              },
              "strategy": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StrategyConfig"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "template": {
                "$ref": "#/definitions/pipeline/steps/custom/TemplateLinkConfig"
              },
              "when": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/pipeline/common/StepWhenCondition"
                  },
                  {
                    "type": "string",
                    "pattern": "^<\\+input>$",
                    "minLength": 1
                  }
                ]
              },
              "description": {
                "desc": "This is the description for StepGroupElementConfig"
              },
              "variables": {
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "$ref": "#/definitions/pipeline/common/NumberNGVariable"
                    },
                    {
                      "$ref": "#/definitions/pipeline/common/SecretNGVariable"
                    },
                    {
                      "$ref": "#/definitions/pipeline/common/StringNGVariable"
                    }
                  ]
                }
              }
            },
            "$schema": "http://json-schema.org/draft-07/schema#",
            "allOf": [
              {
                "oneOf": [
                  {
                    "required": [
                      "template"
                    ]
                  },
                  {
                    "required": [
                      "steps"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    }
  }
}