<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
          "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
          "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">

<!--
    Checkstyle module configuration for Harness coding style.

    Harness uses clang-format for checking for indentation and similar code organization.
    Checkstyle does not duplicate this effort but provides additional checks that clang-format
    is incapable to enforce.

    Enforcing code style is a controversial topic and as many benefits it offers if overdone it
    might have negative effect on moral and performance. The rules to follow should be evaluated
    for ROI and should be committed to only after thorough consideration. The following are the
    major factor for check to be enforced:

    1. Good practices preventing errors or error prone code - there are checks that could identify
       code written in a way that has proven error prone outcome. Either for the person writhing the
       code or for the reader.
    2. Consistency in expressing statements with the same meaning - innovation is a big part of
       what we do as software engineers. It has to have the right place. More routine and templatized
       the simple patterns in the code are, less energy is spend to write and read the code. This
       will allow for innovation where it belongs - creating features that excite the customers.

    The purpose of these checks is minimize the amount of work is put into the code review process
    on both sides - producer and reviewer.

    This tool has for goal to eliminates the need of code style paper. It is under constant development.
    If there is a style that you find important for the team to follow, you should start from trying to
    implement check for it.
 -->

<module name = "Checker">
    <property name="charset" value="UTF-8"/>

    <property name="severity" value="warning"/>

    <property name="fileExtensions" value="java, properties, xml"/>

    <module name="TreeWalker">
        <!-- ANNOTATIONS -->

        <!-- Having the following annotations in the suggested order seems very natural ... and it is extremely easy
        to follow -->
        <module name="AtclauseOrder">
            <property name="tagOrder" value="@param, @return, @throws, @deprecated"/>
            <property name="target" value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF, VARIABLE_DEF"/>
        </module>

        <module name="io.harness.checks.AnnotationOrderCheck"></module>

        <!-- DEPENDENCIES -->

        <!-- Committing to a single class to do particular job could reduce the memory footprint, startup time,
        eliminate conflicts when copy/paste, allow for auto import. This rule banns classes and packages that
        are alternatives to each other, enforcing the use of only one.
        Black listing all the alternatives is tedious and constant process. Please keep adding to the banning list
        if you spot a missed alternative.
         -->
        <module name="IllegalImport">
            <property name="illegalPkgs" value="org.apache.commons.lang"/>

            <!-- use com.google.inject instead -->
            <property name="illegalPkgs" value="javax.inject"/>

            <!-- use org.apache.commons.lang3.StringUtils instead -->
            <property name="illegalPkgs" value="org.apache.commons.codec.binary.StringUtils,
                                                ro.fortsoft.pf4j.util.StringUtils,
                                                wiremock.org.apache.commons.lang3.StringUtils"/>

            <!-- use org.apache.commons.lang3.ArrayUtils instead -->
            <property name="illegalPkgs" value="org.apache.commons.lang.ArrayUtils"/>

            <!-- use org.slf4j.Logger instead -->
            <property name="illegalPkgs" value="java.util.logging.Logger"/>

            <!-- use org.org.assertj.core.api.Assertions.assertThat instead -->
            <property name="illegalPkgs" value="org.junit.Assert,
                                                junit.framework.Assert"/>

            <!-- use org.apache.commons.text.StrSubstitutor instead -->
            <property name="illegalClasses" value="org.apache.commons.lang3.text.StrSubstitutor"/>

            <!-- use org.apache.commons.lang3.reflect.FieldUtils instead -->
            <property name="illegalClasses" value="org.mockito.internal.util.reflection.Whitebox"/>

            <!-- use org.apache.commons.lang3.tuple.Pair instead -->
            <property name="illegalClasses" value="javafx.util.Pair"/>

            <!-- use org.assertj.core.api.Assertions.assertThat instead -->
            <property name="illegalClasses" value="com.google.common.truth.Truth.assertThat,
                                                   com.shazam.shazamcrest.MatcherAssert.assertThat,
                                                   org.assertj.core.api.AssertionsForClassTypes.assertThat,
                                                   org.assertj.core.api.AssertionsForInterfaceTypes.assertThat,
                                                   org.assertj.core.api.Java6Assertions.assertThat,
                                                   org.hamcrest.MatcherAssert.assertThat,
                                                   org.junit.Assert.assertThat"/>




            <!-- Do not use morphia Embedded. We do not need to change the name of the field and we
                 would like better control for the cdIndices. -->
            <property name="illegalClasses" value="dev.morphia.annotations.Embedded"/>

            <!-- use io.harness.mongo.cdIndex instead -->
            <property name="illegalClasses" value="dev.morphia.annotations.Field,
                                                   dev.morphia.annotations.Index,
                                                   dev.morphia.annotations.Indexed,
                                                   dev.morphia.annotations.Indexes,
                                                   dev.morphia.annotations.IndexOptions,
                                                   dev.morphia.utils.IndexType"/>
        </module>

        <module name="io.harness.checks.ExclusiveStaticImportCheck">
            <property name="staticImports" value="java.util.Arrays.asList"/>
            <property name="staticImports" value="io.harness.data.structure.EmptyPredicate.isEmpty"/>
            <property name="staticImports" value="io.harness.data.structure.EmptyPredicate.isNotEmpty"/>

            <property name="staticImports" value="org.apache.commons.lang3.StringUtils.isBlank"/>
            <property name="staticImports" value="org.apache.commons.lang3.StringUtils.isNotBlank"/>
            <property name="staticImports" value="org.apache.commons.lang3.StringUtils.trim"/>

            <property name="staticImports" value="java.lang.String.format"/>
        </module>

        <!-- Use aggregate method with setting maxTimeMs in aggregate options -->
        <module name="com.github.sevntu.checkstyle.checks.coding.ForbidCertainMethodCheck">
            <property name="methodName" value="aggregate"/>
            <property name="argumentCount" value="1"/>
        </module>

        <!-- ERROR PREVENTION -->

        <!-- Novice Java programmers often make this mistake -->
        <module name="StringLiteralEquality"/>

        <!-- That is easy to forget -->
        <module name="SuperFinalize"/>

        <!-- The history knows about several bugs caused from migration from a single line to multi-line block
         where the developer forget to add braces -->
        <module name="NeedBraces"/>

        <!-- Using (var == null || var.isEmpty()) can be replaced from utility call Xyz.isEmpty(var). This is
        mostly for better readability, but it has same element of reducing the potential risk of using different
        variables for the two statements.
        -->
        <module name="io.harness.checks.UseIsEmptyCheck"/>

        <module name="io.harness.checks.WingsExceptionCheck"/>

        <module name="com.github.sevntu.checkstyle.checks.coding.AvoidNotShortCircuitOperatorsForBooleanCheck"/>

        <module name="com.github.sevntu.checkstyle.checks.coding.ReturnNullInsteadOfBooleanCheck"/>

        <module name="com.github.sevntu.checkstyle.checks.coding.UselessSuperCtorCallCheck"/>

        <module name="com.github.sevntu.checkstyle.checks.coding.UselessSingleCatchCheck"/>

        <!-- TODO: Shadowing field could be a source of bugs, very hard to figure out
        <module name="HiddenField">
            <property name="tokens" value="VARIABLE_DEF"/>
        </module>
        -->

        <!-- IMPORT -->

        <!-- Using star imports seems to be a convenience instrument created when the developers did indeed write
        import clauses on their own. Today all this is handled from the IDEs and there is no such factor. The arguments
        against seems to be valid. Star imports make it harder to track what is which and there are risks of using
        classes from the wrong package by mistake. -->
        <module name="AvoidStarImport"/>

        <!-- There is no point of having redundant or unused imports -->
        <module name="RedundantImport"/>
        <module name="UnusedImports"/>

        <!-- Avoiding using repetitive names improves the readability of the code. -->
        <module name="io.harness.checks.RepetitiveNameCheck"/>

        <!-- LOMBOK -->

        <!--
        TODO: Using the default builder name requires to use the class name to make the name unique. Using a(an)
        <module name="io.harness.checks.RequiredBuilderMethodNameCheck" />
        -->

        <!-- SWITCH -->

        <!-- Missing default switch action is error prone. Please make sure that you handle all possible cases with
        default value or throwing exception if the value is unexpected. Note that even if you are extremely careful
        to caver all options, in the future someone else could add more cases to the switch. -->
        <module name="MissingSwitchDefault"/>

        <!-- Fall through is most likely by mistake. It should be avoided, in order such mistakes to be detected
        from tool like this. -->
        <module name="FallThrough"/>

        <!-- Not a big deal, but extremely easy to follow -->
        <module name="DefaultComesLast"/>

        <!-- LOGGING -->

        <!-- Using logger as member of the class is pointlessly expensive, even if the object is obtained from
        a factory and shared from all instances. -->
        <module name="io.harness.checks.LoggerCheck"/>

        <!-- Temporarily commenting out BT-1014-->
<!--        &lt;!&ndash; TODO: Every system handler should be responsible to handle all the exception in its execution threads.-->
<!--        When the thread is done or move to another task it should log or serialize the exception info to another-->
<!--        subsystem. If it is responsible to do so, this means that no one else should do it. This is why log and-->
<!--        rethrow pattern will either duplicate the logging or it is needed because the handler needs to be fixed.-->
<!--        In both cases having tis pattern in the code should be removed.-->
<!--        &ndash;&gt;-->
<!--        <module name="com.github.sevntu.checkstyle.checks.coding.EitherLogOrThrowCheck">-->
<!--            <property name="loggerFullyQualifiedClassName" value="org.slf4j.Logger"/>-->
<!--            <property name="loggingMethodNames" value="error, warn, info, debug"/>-->
<!--        </module>-->


        <!-- PERFORMANCE -->
<!--        This check is broken, submit for removal, it doesn't support forEach over arrays using Arrays.stream().forEach which is the only valid way to stream array.
            Other issues:
            1. This check is very arbitrary. Streaming is slower than native iteration in general, but that doesn't mean we should not use streams.
            2. The performance impact is only noticeable when dealing with collections several orders of magnitude larger than what we have (millions of records).
            3. Stream performance has greatly improved since this was made. -->
<!--        <module name="io.harness.checks.ForEachCheck"/>-->

        <!-- Best practices -->

        <module name="io.harness.checks.TestAnnotationsCheck"/>
        <module name="io.harness.checks.AnnotationParametersCheck"/>

        <!-- *** -->

        <module name="EmptyStatement"/>
        <module name="ModifierOrder"/>
        <module name="RedundantModifier" />
        <module name="UnnecessaryParentheses"/>
        <module name="com.github.sevntu.checkstyle.checks.coding.ReturnBooleanFromTernaryCheck"/>
        <module name="com.github.sevntu.checkstyle.checks.coding.DiamondOperatorForVariableDefinitionCheck"/>
    </module>

    <module name="RegexpSingleline">
        <property name="format" value="Logger logger = LoggerFactory.getLogger"/>
        <property name="message" value="Do not create logger object on your own, use lombok @Slf4j onstead"/>
    </module>

    <!-- Spelling consistence -->

    <module name="RegexpOnFilename">
        <property name="fileNamePattern" value="Util\."/>
    </module>

    <module name="RegexpOnFilename">
        <property name="fileNamePattern" value="Utililit(y|ies)\."/>
    </module>

    <module name="RegexpSingleline">
        <property name="format" value="import static .*(?&lt;class&gt;[^.]+).\k&lt;class&gt;Keys\..*;"/>
        <property name="message" value="Do not static import for constants from FieldNameConstants"/>
    </module>

<!--    <module name="RegexpSingleline">-->
<!--        <property name="format" value="[Ww]orkFlow"/>-->
<!--        <property name="message" value="Workflow is a single word"/>-->
<!--    </module>-->

    <module name="RegexpSingleline">
        <property name="format" value="[Oo]ffSet"/>
        <property name="message" value="Offset is a single word"/>
    </module>

    <module name="RegexpSingleline">
        <property name="format" value="[Gg]raphQl"/>
        <property name="message" value="Please use QL both uppercase"/>
    </module>

    <module name="RegexpOnFilename">
        <property name="fileNamePattern" value="[Ww]orkFlow\."/>
    </module>

    <module name="RegexpSingleline">
        <property name="format" value="[wW]ithOut[^a-z_]"/>
        <property name="message" value="Without is a single word"/>
    </module>

</module>
